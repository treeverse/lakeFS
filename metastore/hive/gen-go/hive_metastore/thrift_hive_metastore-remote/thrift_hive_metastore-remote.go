// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/treeverse/lakefs/metastore/hive/gen-go/hive_metastore"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

var _ = hive_metastore.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  string getMetaConf(string key)")
	fmt.Fprintln(os.Stderr, "  void setMetaConf(string key, string value)")
	fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
	fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
	fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData, bool cascade)")
	fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
	fmt.Fprintln(os.Stderr, "   get_all_databases()")
	fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
	fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
	fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
	fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
	fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
	fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_fields_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_schema_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
	fmt.Fprintln(os.Stderr, "  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void create_table_with_constraints(Table tbl,  primaryKeys,  foreignKeys,  uniqueConstraints,  notNullConstraints)")
	fmt.Fprintln(os.Stderr, "  void drop_constraint(DropConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_primary_key(AddPrimaryKeyRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_foreign_key(AddForeignKeyRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_unique_constraint(AddUniqueConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_not_null_constraint(AddNotNullConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  void drop_table_with_environment_context(string dbname, string name, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void truncate_table(string dbName, string tableName,  partNames)")
	fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
	fmt.Fprintln(os.Stderr, "   get_tables_by_type(string db_name, string pattern, string tableType)")
	fmt.Fprintln(os.Stderr, "   get_table_meta(string db_patterns, string tbl_patterns,  tbl_types)")
	fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
	fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
	fmt.Fprintln(os.Stderr, "   get_table_objects_by_name(string dbname,  tbl_names)")
	fmt.Fprintln(os.Stderr, "  GetTableResult get_table_req(GetTableRequest req)")
	fmt.Fprintln(os.Stderr, "  GetTablesResult get_table_objects_by_name_req(GetTablesRequest req)")
	fmt.Fprintln(os.Stderr, "   get_table_names_by_filter(string dbname, string filter, i16 max_tables)")
	fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
	fmt.Fprintln(os.Stderr, "  void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void alter_table_with_cascade(string dbname, string tbl_name, Table new_tbl, bool cascade)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  i32 add_partitions( new_parts)")
	fmt.Fprintln(os.Stderr, "  i32 add_partitions_pspec( new_parts)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  AddPartitionsResult add_partitions_req(AddPartitionsRequest request)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_with_environment_context(string db_name, string tbl_name,  part_vals, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_with_environment_context(string db_name, string tbl_name,  part_vals, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  DropPartitionsResult drop_partitions_req(DropPartitionsRequest req)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  Partition exchange_partition( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
	fmt.Fprintln(os.Stderr, "   exchange_partitions( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partitions_pspec(string db_name, string tbl_name, i32 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "  PartitionValuesResponse get_partition_values(PartitionValuesRequest request)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_part_specs_by_filter(string db_name, string tbl_name, string filter, i32 max_parts)")
	fmt.Fprintln(os.Stderr, "  PartitionsByExprResult get_partitions_by_expr(PartitionsByExprRequest req)")
	fmt.Fprintln(os.Stderr, "  i32 get_num_partitions_by_filter(string db_name, string tbl_name, string filter)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_names(string db_name, string tbl_name,  names)")
	fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  void alter_partitions(string db_name, string tbl_name,  new_parts)")
	fmt.Fprintln(os.Stderr, "  void alter_partitions_with_environment_context(string db_name, string tbl_name,  new_parts, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void rename_partition(string db_name, string tbl_name,  part_vals, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  bool partition_name_has_valid_characters( part_vals, bool throw_exception)")
	fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
	fmt.Fprintln(os.Stderr, "  void markPartitionForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
	fmt.Fprintln(os.Stderr, "  bool isPartitionMarkedForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
	fmt.Fprintln(os.Stderr, "  Index add_index(Index new_index, Table index_table)")
	fmt.Fprintln(os.Stderr, "  void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)")
	fmt.Fprintln(os.Stderr, "  bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  Index get_index_by_name(string db_name, string tbl_name, string index_name)")
	fmt.Fprintln(os.Stderr, "   get_indexes(string db_name, string tbl_name, i16 max_indexes)")
	fmt.Fprintln(os.Stderr, "   get_index_names(string db_name, string tbl_name, i16 max_indexes)")
	fmt.Fprintln(os.Stderr, "  PrimaryKeysResponse get_primary_keys(PrimaryKeysRequest request)")
	fmt.Fprintln(os.Stderr, "  ForeignKeysResponse get_foreign_keys(ForeignKeysRequest request)")
	fmt.Fprintln(os.Stderr, "  UniqueConstraintsResponse get_unique_constraints(UniqueConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  NotNullConstraintsResponse get_not_null_constraints(NotNullConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool update_table_column_statistics(ColumnStatistics stats_obj)")
	fmt.Fprintln(os.Stderr, "  bool update_partition_column_statistics(ColumnStatistics stats_obj)")
	fmt.Fprintln(os.Stderr, "  ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  TableStatsResult get_table_statistics_req(TableStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  PartitionsStatsResult get_partitions_statistics_req(PartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  AggrStats get_aggr_stats_for(PartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool set_aggr_stats_for(SetPartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  bool delete_table_column_statistics(string db_name, string tbl_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  void create_function(Function func)")
	fmt.Fprintln(os.Stderr, "  void drop_function(string dbName, string funcName)")
	fmt.Fprintln(os.Stderr, "  void alter_function(string dbName, string funcName, Function newFunc)")
	fmt.Fprintln(os.Stderr, "   get_functions(string dbName, string pattern)")
	fmt.Fprintln(os.Stderr, "  Function get_function(string dbName, string funcName)")
	fmt.Fprintln(os.Stderr, "  GetAllFunctionsResponse get_all_functions()")
	fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
	fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
	fmt.Fprintln(os.Stderr, "   get_role_names()")
	fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
	fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "  GrantRevokeRoleResponse grant_revoke_role(GrantRevokeRoleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetPrincipalsInRoleResponse get_principals_in_role(GetPrincipalsInRoleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetRoleGrantsForPrincipalResponse get_role_grants_for_principal(GetRoleGrantsForPrincipalRequest request)")
	fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
	fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  GrantRevokePrivilegeResponse grant_revoke_privileges(GrantRevokePrivilegeRequest request)")
	fmt.Fprintln(os.Stderr, "   set_ugi(string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)")
	fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  bool add_token(string token_identifier, string delegation_token)")
	fmt.Fprintln(os.Stderr, "  bool remove_token(string token_identifier)")
	fmt.Fprintln(os.Stderr, "  string get_token(string token_identifier)")
	fmt.Fprintln(os.Stderr, "   get_all_token_identifiers()")
	fmt.Fprintln(os.Stderr, "  i32 add_master_key(string key)")
	fmt.Fprintln(os.Stderr, "  void update_master_key(i32 seq_number, string key)")
	fmt.Fprintln(os.Stderr, "  bool remove_master_key(i32 key_seq)")
	fmt.Fprintln(os.Stderr, "   get_master_keys()")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsResponse get_open_txns()")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsInfoResponse get_open_txns_info()")
	fmt.Fprintln(os.Stderr, "  OpenTxnsResponse open_txns(OpenTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void abort_txn(AbortTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void abort_txns(AbortTxnsRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void commit_txn(CommitTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse lock(LockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse check_lock(CheckLockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void unlock(UnlockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ShowLocksResponse show_locks(ShowLocksRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void heartbeat(HeartbeatRequest ids)")
	fmt.Fprintln(os.Stderr, "  HeartbeatTxnRangeResponse heartbeat_txn_range(HeartbeatTxnRangeRequest txns)")
	fmt.Fprintln(os.Stderr, "  void compact(CompactionRequest rqst)")
	fmt.Fprintln(os.Stderr, "  CompactionResponse compact2(CompactionRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ShowCompactResponse show_compact(ShowCompactRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void add_dynamic_partitions(AddDynamicPartitions rqst)")
	fmt.Fprintln(os.Stderr, "  NotificationEventResponse get_next_notification(NotificationEventRequest rqst)")
	fmt.Fprintln(os.Stderr, "  CurrentNotificationEventId get_current_notificationEventId()")
	fmt.Fprintln(os.Stderr, "  NotificationEventsCountResponse get_notification_events_count(NotificationEventsCountRequest rqst)")
	fmt.Fprintln(os.Stderr, "  FireEventResponse fire_listener_event(FireEventRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void flushCache()")
	fmt.Fprintln(os.Stderr, "  CmRecycleResponse cm_recycle(CmRecycleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetFileMetadataByExprResult get_file_metadata_by_expr(GetFileMetadataByExprRequest req)")
	fmt.Fprintln(os.Stderr, "  GetFileMetadataResult get_file_metadata(GetFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  PutFileMetadataResult put_file_metadata(PutFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  ClearFileMetadataResult clear_file_metadata(ClearFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  CacheFileMetadataResult cache_file_metadata(CacheFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  string get_metastore_db_uuid()")
	fmt.Fprintln(os.Stderr, "  WMCreateResourcePlanResponse create_resource_plan(WMCreateResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetResourcePlanResponse get_resource_plan(WMGetResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetActiveResourcePlanResponse get_active_resource_plan(WMGetActiveResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetAllResourcePlanResponse get_all_resource_plans(WMGetAllResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMAlterResourcePlanResponse alter_resource_plan(WMAlterResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMValidateResourcePlanResponse validate_resource_plan(WMValidateResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMDropResourcePlanResponse drop_resource_plan(WMDropResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMCreateTriggerResponse create_wm_trigger(WMCreateTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMAlterTriggerResponse alter_wm_trigger(WMAlterTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMDropTriggerResponse drop_wm_trigger(WMDropTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetTriggersForResourePlanResponse get_triggers_for_resourceplan(WMGetTriggersForResourePlanRequest request)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := hive_metastore.NewThriftHiveMetastoreClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "getMetaConf":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetMetaConf requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetMetaConf(context.Background(), value0))
		fmt.Print("\n")
		break
	case "setMetaConf":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetMetaConf requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SetMetaConf(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "create_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
			flag.Usage()
		}
		arg534 := flag.Arg(1)
		mbTrans535 := thrift.NewTMemoryBufferLen(len(arg534))
		defer mbTrans535.Close()
		_, err536 := mbTrans535.WriteString(arg534)
		if err536 != nil {
			Usage()
			return
		}
		factory537 := thrift.NewTJSONProtocolFactory()
		jsProt538 := factory537.GetProtocol(mbTrans535)
		argvalue0 := hive_metastore.NewDatabase()
		err539 := argvalue0.Read(jsProt538)
		if err539 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateDatabase(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabase(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_database":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropDatabase requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropDatabase(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_databases":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabases(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_databases":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllDatabases(context.Background()))
		fmt.Print("\n")
		break
	case "alter_database":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg546 := flag.Arg(2)
		mbTrans547 := thrift.NewTMemoryBufferLen(len(arg546))
		defer mbTrans547.Close()
		_, err548 := mbTrans547.WriteString(arg546)
		if err548 != nil {
			Usage()
			return
		}
		factory549 := thrift.NewTJSONProtocolFactory()
		jsProt550 := factory549.GetProtocol(mbTrans547)
		argvalue1 := hive_metastore.NewDatabase()
		err551 := argvalue1.Read(jsProt550)
		if err551 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AlterDatabase(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
			flag.Usage()
		}
		arg553 := flag.Arg(1)
		mbTrans554 := thrift.NewTMemoryBufferLen(len(arg553))
		defer mbTrans554.Close()
		_, err555 := mbTrans554.WriteString(arg553)
		if err555 != nil {
			Usage()
			return
		}
		factory556 := thrift.NewTJSONProtocolFactory()
		jsProt557 := factory556.GetProtocol(mbTrans554)
		argvalue0 := hive_metastore.NewType()
		err558 := argvalue0.Read(jsProt557)
		if err558 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_type_all":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTypeAll(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_fields":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFields(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_fields_with_environment_context":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetFieldsWithEnvironmentContext requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg565 := flag.Arg(3)
		mbTrans566 := thrift.NewTMemoryBufferLen(len(arg565))
		defer mbTrans566.Close()
		_, err567 := mbTrans566.WriteString(arg565)
		if err567 != nil {
			Usage()
			return
		}
		factory568 := thrift.NewTJSONProtocolFactory()
		jsProt569 := factory568.GetProtocol(mbTrans566)
		argvalue2 := hive_metastore.NewEnvironmentContext()
		err570 := argvalue2.Read(jsProt569)
		if err570 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetFieldsWithEnvironmentContext(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_schema":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetSchema(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_schema_with_environment_context":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetSchemaWithEnvironmentContext requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg575 := flag.Arg(3)
		mbTrans576 := thrift.NewTMemoryBufferLen(len(arg575))
		defer mbTrans576.Close()
		_, err577 := mbTrans576.WriteString(arg575)
		if err577 != nil {
			Usage()
			return
		}
		factory578 := thrift.NewTJSONProtocolFactory()
		jsProt579 := factory578.GetProtocol(mbTrans576)
		argvalue2 := hive_metastore.NewEnvironmentContext()
		err580 := argvalue2.Read(jsProt579)
		if err580 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetSchemaWithEnvironmentContext(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "create_table":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
			flag.Usage()
		}
		arg581 := flag.Arg(1)
		mbTrans582 := thrift.NewTMemoryBufferLen(len(arg581))
		defer mbTrans582.Close()
		_, err583 := mbTrans582.WriteString(arg581)
		if err583 != nil {
			Usage()
			return
		}
		factory584 := thrift.NewTJSONProtocolFactory()
		jsProt585 := factory584.GetProtocol(mbTrans582)
		argvalue0 := hive_metastore.NewTable()
		err586 := argvalue0.Read(jsProt585)
		if err586 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateTable(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_table_with_environment_context":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateTableWithEnvironmentContext requires 2 args")
			flag.Usage()
		}
		arg587 := flag.Arg(1)
		mbTrans588 := thrift.NewTMemoryBufferLen(len(arg587))
		defer mbTrans588.Close()
		_, err589 := mbTrans588.WriteString(arg587)
		if err589 != nil {
			Usage()
			return
		}
		factory590 := thrift.NewTJSONProtocolFactory()
		jsProt591 := factory590.GetProtocol(mbTrans588)
		argvalue0 := hive_metastore.NewTable()
		err592 := argvalue0.Read(jsProt591)
		if err592 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg593 := flag.Arg(2)
		mbTrans594 := thrift.NewTMemoryBufferLen(len(arg593))
		defer mbTrans594.Close()
		_, err595 := mbTrans594.WriteString(arg593)
		if err595 != nil {
			Usage()
			return
		}
		factory596 := thrift.NewTJSONProtocolFactory()
		jsProt597 := factory596.GetProtocol(mbTrans594)
		argvalue1 := hive_metastore.NewEnvironmentContext()
		err598 := argvalue1.Read(jsProt597)
		if err598 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateTableWithEnvironmentContext(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "create_table_with_constraints":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "CreateTableWithConstraints requires 5 args")
			flag.Usage()
		}
		arg599 := flag.Arg(1)
		mbTrans600 := thrift.NewTMemoryBufferLen(len(arg599))
		defer mbTrans600.Close()
		_, err601 := mbTrans600.WriteString(arg599)
		if err601 != nil {
			Usage()
			return
		}
		factory602 := thrift.NewTJSONProtocolFactory()
		jsProt603 := factory602.GetProtocol(mbTrans600)
		argvalue0 := hive_metastore.NewTable()
		err604 := argvalue0.Read(jsProt603)
		if err604 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg605 := flag.Arg(2)
		mbTrans606 := thrift.NewTMemoryBufferLen(len(arg605))
		defer mbTrans606.Close()
		_, err607 := mbTrans606.WriteString(arg605)
		if err607 != nil {
			Usage()
			return
		}
		factory608 := thrift.NewTJSONProtocolFactory()
		jsProt609 := factory608.GetProtocol(mbTrans606)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err610 := containerStruct1.ReadField2(jsProt609)
		if err610 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.PrimaryKeys
		value1 := argvalue1
		arg611 := flag.Arg(3)
		mbTrans612 := thrift.NewTMemoryBufferLen(len(arg611))
		defer mbTrans612.Close()
		_, err613 := mbTrans612.WriteString(arg611)
		if err613 != nil {
			Usage()
			return
		}
		factory614 := thrift.NewTJSONProtocolFactory()
		jsProt615 := factory614.GetProtocol(mbTrans612)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err616 := containerStruct2.ReadField3(jsProt615)
		if err616 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ForeignKeys
		value2 := argvalue2
		arg617 := flag.Arg(4)
		mbTrans618 := thrift.NewTMemoryBufferLen(len(arg617))
		defer mbTrans618.Close()
		_, err619 := mbTrans618.WriteString(arg617)
		if err619 != nil {
			Usage()
			return
		}
		factory620 := thrift.NewTJSONProtocolFactory()
		jsProt621 := factory620.GetProtocol(mbTrans618)
		containerStruct3 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err622 := containerStruct3.ReadField4(jsProt621)
		if err622 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.UniqueConstraints
		value3 := argvalue3
		arg623 := flag.Arg(5)
		mbTrans624 := thrift.NewTMemoryBufferLen(len(arg623))
		defer mbTrans624.Close()
		_, err625 := mbTrans624.WriteString(arg623)
		if err625 != nil {
			Usage()
			return
		}
		factory626 := thrift.NewTJSONProtocolFactory()
		jsProt627 := factory626.GetProtocol(mbTrans624)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err628 := containerStruct4.ReadField5(jsProt627)
		if err628 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.NotNullConstraints
		value4 := argvalue4
		fmt.Print(client.CreateTableWithConstraints(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropConstraint requires 1 args")
			flag.Usage()
		}
		arg629 := flag.Arg(1)
		mbTrans630 := thrift.NewTMemoryBufferLen(len(arg629))
		defer mbTrans630.Close()
		_, err631 := mbTrans630.WriteString(arg629)
		if err631 != nil {
			Usage()
			return
		}
		factory632 := thrift.NewTJSONProtocolFactory()
		jsProt633 := factory632.GetProtocol(mbTrans630)
		argvalue0 := hive_metastore.NewDropConstraintRequest()
		err634 := argvalue0.Read(jsProt633)
		if err634 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_primary_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPrimaryKey requires 1 args")
			flag.Usage()
		}
		arg635 := flag.Arg(1)
		mbTrans636 := thrift.NewTMemoryBufferLen(len(arg635))
		defer mbTrans636.Close()
		_, err637 := mbTrans636.WriteString(arg635)
		if err637 != nil {
			Usage()
			return
		}
		factory638 := thrift.NewTJSONProtocolFactory()
		jsProt639 := factory638.GetProtocol(mbTrans636)
		argvalue0 := hive_metastore.NewAddPrimaryKeyRequest()
		err640 := argvalue0.Read(jsProt639)
		if err640 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPrimaryKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_foreign_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddForeignKey requires 1 args")
			flag.Usage()
		}
		arg641 := flag.Arg(1)
		mbTrans642 := thrift.NewTMemoryBufferLen(len(arg641))
		defer mbTrans642.Close()
		_, err643 := mbTrans642.WriteString(arg641)
		if err643 != nil {
			Usage()
			return
		}
		factory644 := thrift.NewTJSONProtocolFactory()
		jsProt645 := factory644.GetProtocol(mbTrans642)
		argvalue0 := hive_metastore.NewAddForeignKeyRequest()
		err646 := argvalue0.Read(jsProt645)
		if err646 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddForeignKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_unique_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddUniqueConstraint requires 1 args")
			flag.Usage()
		}
		arg647 := flag.Arg(1)
		mbTrans648 := thrift.NewTMemoryBufferLen(len(arg647))
		defer mbTrans648.Close()
		_, err649 := mbTrans648.WriteString(arg647)
		if err649 != nil {
			Usage()
			return
		}
		factory650 := thrift.NewTJSONProtocolFactory()
		jsProt651 := factory650.GetProtocol(mbTrans648)
		argvalue0 := hive_metastore.NewAddUniqueConstraintRequest()
		err652 := argvalue0.Read(jsProt651)
		if err652 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddUniqueConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_not_null_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddNotNullConstraint requires 1 args")
			flag.Usage()
		}
		arg653 := flag.Arg(1)
		mbTrans654 := thrift.NewTMemoryBufferLen(len(arg653))
		defer mbTrans654.Close()
		_, err655 := mbTrans654.WriteString(arg653)
		if err655 != nil {
			Usage()
			return
		}
		factory656 := thrift.NewTJSONProtocolFactory()
		jsProt657 := factory656.GetProtocol(mbTrans654)
		argvalue0 := hive_metastore.NewAddNotNullConstraintRequest()
		err658 := argvalue0.Read(jsProt657)
		if err658 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddNotNullConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "drop_table_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropTableWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		arg665 := flag.Arg(4)
		mbTrans666 := thrift.NewTMemoryBufferLen(len(arg665))
		defer mbTrans666.Close()
		_, err667 := mbTrans666.WriteString(arg665)
		if err667 != nil {
			Usage()
			return
		}
		factory668 := thrift.NewTJSONProtocolFactory()
		jsProt669 := factory668.GetProtocol(mbTrans666)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err670 := argvalue3.Read(jsProt669)
		if err670 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.DropTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "truncate_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "TruncateTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg673 := flag.Arg(3)
		mbTrans674 := thrift.NewTMemoryBufferLen(len(arg673))
		defer mbTrans674.Close()
		_, err675 := mbTrans674.WriteString(arg673)
		if err675 != nil {
			Usage()
			return
		}
		factory676 := thrift.NewTJSONProtocolFactory()
		jsProt677 := factory676.GetProtocol(mbTrans674)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreTruncateTableArgs()
		err678 := containerStruct2.ReadField3(jsProt677)
		if err678 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartNames
		value2 := argvalue2
		fmt.Print(client.TruncateTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_tables":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTables(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_tables_by_type":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTablesByType requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetTablesByType(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_table_meta":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableMeta requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg686 := flag.Arg(3)
		mbTrans687 := thrift.NewTMemoryBufferLen(len(arg686))
		defer mbTrans687.Close()
		_, err688 := mbTrans687.WriteString(arg686)
		if err688 != nil {
			Usage()
			return
		}
		factory689 := thrift.NewTJSONProtocolFactory()
		jsProt690 := factory689.GetProtocol(mbTrans687)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetTableMetaArgs()
		err691 := containerStruct2.ReadField3(jsProt690)
		if err691 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.TblTypes
		value2 := argvalue2
		fmt.Print(client.GetTableMeta(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_all_tables":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetAllTables(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTable(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_table_objects_by_name":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTableObjectsByName requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg696 := flag.Arg(2)
		mbTrans697 := thrift.NewTMemoryBufferLen(len(arg696))
		defer mbTrans697.Close()
		_, err698 := mbTrans697.WriteString(arg696)
		if err698 != nil {
			Usage()
			return
		}
		factory699 := thrift.NewTJSONProtocolFactory()
		jsProt700 := factory699.GetProtocol(mbTrans697)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreGetTableObjectsByNameArgs()
		err701 := containerStruct1.ReadField2(jsProt700)
		if err701 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.TblNames
		value1 := argvalue1
		fmt.Print(client.GetTableObjectsByName(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_table_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableReq requires 1 args")
			flag.Usage()
		}
		arg702 := flag.Arg(1)
		mbTrans703 := thrift.NewTMemoryBufferLen(len(arg702))
		defer mbTrans703.Close()
		_, err704 := mbTrans703.WriteString(arg702)
		if err704 != nil {
			Usage()
			return
		}
		factory705 := thrift.NewTJSONProtocolFactory()
		jsProt706 := factory705.GetProtocol(mbTrans703)
		argvalue0 := hive_metastore.NewGetTableRequest()
		err707 := argvalue0.Read(jsProt706)
		if err707 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_objects_by_name_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableObjectsByNameReq requires 1 args")
			flag.Usage()
		}
		arg708 := flag.Arg(1)
		mbTrans709 := thrift.NewTMemoryBufferLen(len(arg708))
		defer mbTrans709.Close()
		_, err710 := mbTrans709.WriteString(arg708)
		if err710 != nil {
			Usage()
			return
		}
		factory711 := thrift.NewTJSONProtocolFactory()
		jsProt712 := factory711.GetProtocol(mbTrans709)
		argvalue0 := hive_metastore.NewGetTablesRequest()
		err713 := argvalue0.Read(jsProt712)
		if err713 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableObjectsByNameReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_names_by_filter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableNamesByFilter requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err716 := (strconv.Atoi(flag.Arg(3)))
		if err716 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetTableNamesByFilter(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg719 := flag.Arg(3)
		mbTrans720 := thrift.NewTMemoryBufferLen(len(arg719))
		defer mbTrans720.Close()
		_, err721 := mbTrans720.WriteString(arg719)
		if err721 != nil {
			Usage()
			return
		}
		factory722 := thrift.NewTJSONProtocolFactory()
		jsProt723 := factory722.GetProtocol(mbTrans720)
		argvalue2 := hive_metastore.NewTable()
		err724 := argvalue2.Read(jsProt723)
		if err724 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterTableWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg727 := flag.Arg(3)
		mbTrans728 := thrift.NewTMemoryBufferLen(len(arg727))
		defer mbTrans728.Close()
		_, err729 := mbTrans728.WriteString(arg727)
		if err729 != nil {
			Usage()
			return
		}
		factory730 := thrift.NewTJSONProtocolFactory()
		jsProt731 := factory730.GetProtocol(mbTrans728)
		argvalue2 := hive_metastore.NewTable()
		err732 := argvalue2.Read(jsProt731)
		if err732 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg733 := flag.Arg(4)
		mbTrans734 := thrift.NewTMemoryBufferLen(len(arg733))
		defer mbTrans734.Close()
		_, err735 := mbTrans734.WriteString(arg733)
		if err735 != nil {
			Usage()
			return
		}
		factory736 := thrift.NewTJSONProtocolFactory()
		jsProt737 := factory736.GetProtocol(mbTrans734)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err738 := argvalue3.Read(jsProt737)
		if err738 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "alter_table_with_cascade":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterTableWithCascade requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg741 := flag.Arg(3)
		mbTrans742 := thrift.NewTMemoryBufferLen(len(arg741))
		defer mbTrans742.Close()
		_, err743 := mbTrans742.WriteString(arg741)
		if err743 != nil {
			Usage()
			return
		}
		factory744 := thrift.NewTJSONProtocolFactory()
		jsProt745 := factory744.GetProtocol(mbTrans742)
		argvalue2 := hive_metastore.NewTable()
		err746 := argvalue2.Read(jsProt745)
		if err746 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.AlterTableWithCascade(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "add_partition":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
			flag.Usage()
		}
		arg748 := flag.Arg(1)
		mbTrans749 := thrift.NewTMemoryBufferLen(len(arg748))
		defer mbTrans749.Close()
		_, err750 := mbTrans749.WriteString(arg748)
		if err750 != nil {
			Usage()
			return
		}
		factory751 := thrift.NewTJSONProtocolFactory()
		jsProt752 := factory751.GetProtocol(mbTrans749)
		argvalue0 := hive_metastore.NewPartition()
		err753 := argvalue0.Read(jsProt752)
		if err753 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartition(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_partition_with_environment_context":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddPartitionWithEnvironmentContext requires 2 args")
			flag.Usage()
		}
		arg754 := flag.Arg(1)
		mbTrans755 := thrift.NewTMemoryBufferLen(len(arg754))
		defer mbTrans755.Close()
		_, err756 := mbTrans755.WriteString(arg754)
		if err756 != nil {
			Usage()
			return
		}
		factory757 := thrift.NewTJSONProtocolFactory()
		jsProt758 := factory757.GetProtocol(mbTrans755)
		argvalue0 := hive_metastore.NewPartition()
		err759 := argvalue0.Read(jsProt758)
		if err759 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg760 := flag.Arg(2)
		mbTrans761 := thrift.NewTMemoryBufferLen(len(arg760))
		defer mbTrans761.Close()
		_, err762 := mbTrans761.WriteString(arg760)
		if err762 != nil {
			Usage()
			return
		}
		factory763 := thrift.NewTJSONProtocolFactory()
		jsProt764 := factory763.GetProtocol(mbTrans761)
		argvalue1 := hive_metastore.NewEnvironmentContext()
		err765 := argvalue1.Read(jsProt764)
		if err765 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AddPartitionWithEnvironmentContext(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "add_partitions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitions requires 1 args")
			flag.Usage()
		}
		arg766 := flag.Arg(1)
		mbTrans767 := thrift.NewTMemoryBufferLen(len(arg766))
		defer mbTrans767.Close()
		_, err768 := mbTrans767.WriteString(arg766)
		if err768 != nil {
			Usage()
			return
		}
		factory769 := thrift.NewTJSONProtocolFactory()
		jsProt770 := factory769.GetProtocol(mbTrans767)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsArgs()
		err771 := containerStruct0.ReadField1(jsProt770)
		if err771 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.NewParts_
		value0 := argvalue0
		fmt.Print(client.AddPartitions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_partitions_pspec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitionsPspec requires 1 args")
			flag.Usage()
		}
		arg772 := flag.Arg(1)
		mbTrans773 := thrift.NewTMemoryBufferLen(len(arg772))
		defer mbTrans773.Close()
		_, err774 := mbTrans773.WriteString(arg772)
		if err774 != nil {
			Usage()
			return
		}
		factory775 := thrift.NewTJSONProtocolFactory()
		jsProt776 := factory775.GetProtocol(mbTrans773)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsPspecArgs()
		err777 := containerStruct0.ReadField1(jsProt776)
		if err777 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.NewParts_
		value0 := argvalue0
		fmt.Print(client.AddPartitionsPspec(context.Background(), value0))
		fmt.Print("\n")
		break
	case "append_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg780 := flag.Arg(3)
		mbTrans781 := thrift.NewTMemoryBufferLen(len(arg780))
		defer mbTrans781.Close()
		_, err782 := mbTrans781.WriteString(arg780)
		if err782 != nil {
			Usage()
			return
		}
		factory783 := thrift.NewTJSONProtocolFactory()
		jsProt784 := factory783.GetProtocol(mbTrans781)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionArgs()
		err785 := containerStruct2.ReadField3(jsProt784)
		if err785 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.AppendPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "add_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg786 := flag.Arg(1)
		mbTrans787 := thrift.NewTMemoryBufferLen(len(arg786))
		defer mbTrans787.Close()
		_, err788 := mbTrans787.WriteString(arg786)
		if err788 != nil {
			Usage()
			return
		}
		factory789 := thrift.NewTJSONProtocolFactory()
		jsProt790 := factory789.GetProtocol(mbTrans787)
		argvalue0 := hive_metastore.NewAddPartitionsRequest()
		err791 := argvalue0.Read(jsProt790)
		if err791 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartitionsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "append_partition_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendPartitionWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg794 := flag.Arg(3)
		mbTrans795 := thrift.NewTMemoryBufferLen(len(arg794))
		defer mbTrans795.Close()
		_, err796 := mbTrans795.WriteString(arg794)
		if err796 != nil {
			Usage()
			return
		}
		factory797 := thrift.NewTJSONProtocolFactory()
		jsProt798 := factory797.GetProtocol(mbTrans795)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs()
		err799 := containerStruct2.ReadField3(jsProt798)
		if err799 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		arg800 := flag.Arg(4)
		mbTrans801 := thrift.NewTMemoryBufferLen(len(arg800))
		defer mbTrans801.Close()
		_, err802 := mbTrans801.WriteString(arg800)
		if err802 != nil {
			Usage()
			return
		}
		factory803 := thrift.NewTJSONProtocolFactory()
		jsProt804 := factory803.GetProtocol(mbTrans801)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err805 := argvalue3.Read(jsProt804)
		if err805 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AppendPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "append_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AppendPartitionByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "append_partition_by_name_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByNameWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg812 := flag.Arg(4)
		mbTrans813 := thrift.NewTMemoryBufferLen(len(arg812))
		defer mbTrans813.Close()
		_, err814 := mbTrans813.WriteString(arg812)
		if err814 != nil {
			Usage()
			return
		}
		factory815 := thrift.NewTJSONProtocolFactory()
		jsProt816 := factory815.GetProtocol(mbTrans813)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err817 := argvalue3.Read(jsProt816)
		if err817 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AppendPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg820 := flag.Arg(3)
		mbTrans821 := thrift.NewTMemoryBufferLen(len(arg820))
		defer mbTrans821.Close()
		_, err822 := mbTrans821.WriteString(arg820)
		if err822 != nil {
			Usage()
			return
		}
		factory823 := thrift.NewTJSONProtocolFactory()
		jsProt824 := factory823.GetProtocol(mbTrans821)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionArgs()
		err825 := containerStruct2.ReadField3(jsProt824)
		if err825 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartition(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_with_environment_context":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DropPartitionWithEnvironmentContext requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg829 := flag.Arg(3)
		mbTrans830 := thrift.NewTMemoryBufferLen(len(arg829))
		defer mbTrans830.Close()
		_, err831 := mbTrans830.WriteString(arg829)
		if err831 != nil {
			Usage()
			return
		}
		factory832 := thrift.NewTJSONProtocolFactory()
		jsProt833 := factory832.GetProtocol(mbTrans830)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs()
		err834 := containerStruct2.ReadField3(jsProt833)
		if err834 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg836 := flag.Arg(5)
		mbTrans837 := thrift.NewTMemoryBufferLen(len(arg836))
		defer mbTrans837.Close()
		_, err838 := mbTrans837.WriteString(arg836)
		if err838 != nil {
			Usage()
			return
		}
		factory839 := thrift.NewTJSONProtocolFactory()
		jsProt840 := factory839.GetProtocol(mbTrans837)
		argvalue4 := hive_metastore.NewEnvironmentContext()
		err841 := argvalue4.Read(jsProt840)
		if err841 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.DropPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_partition_by_name":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartitionByName(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_by_name_with_environment_context":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DropPartitionByNameWithEnvironmentContext requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg850 := flag.Arg(5)
		mbTrans851 := thrift.NewTMemoryBufferLen(len(arg850))
		defer mbTrans851.Close()
		_, err852 := mbTrans851.WriteString(arg850)
		if err852 != nil {
			Usage()
			return
		}
		factory853 := thrift.NewTJSONProtocolFactory()
		jsProt854 := factory853.GetProtocol(mbTrans851)
		argvalue4 := hive_metastore.NewEnvironmentContext()
		err855 := argvalue4.Read(jsProt854)
		if err855 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.DropPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg856 := flag.Arg(1)
		mbTrans857 := thrift.NewTMemoryBufferLen(len(arg856))
		defer mbTrans857.Close()
		_, err858 := mbTrans857.WriteString(arg856)
		if err858 != nil {
			Usage()
			return
		}
		factory859 := thrift.NewTJSONProtocolFactory()
		jsProt860 := factory859.GetProtocol(mbTrans857)
		argvalue0 := hive_metastore.NewDropPartitionsRequest()
		err861 := argvalue0.Read(jsProt860)
		if err861 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropPartitionsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg864 := flag.Arg(3)
		mbTrans865 := thrift.NewTMemoryBufferLen(len(arg864))
		defer mbTrans865.Close()
		_, err866 := mbTrans865.WriteString(arg864)
		if err866 != nil {
			Usage()
			return
		}
		factory867 := thrift.NewTJSONProtocolFactory()
		jsProt868 := factory867.GetProtocol(mbTrans865)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionArgs()
		err869 := containerStruct2.ReadField3(jsProt868)
		if err869 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.GetPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "exchange_partition":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ExchangePartition requires 5 args")
			flag.Usage()
		}
		arg870 := flag.Arg(1)
		mbTrans871 := thrift.NewTMemoryBufferLen(len(arg870))
		defer mbTrans871.Close()
		_, err872 := mbTrans871.WriteString(arg870)
		if err872 != nil {
			Usage()
			return
		}
		factory873 := thrift.NewTJSONProtocolFactory()
		jsProt874 := factory873.GetProtocol(mbTrans871)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionArgs()
		err875 := containerStruct0.ReadField1(jsProt874)
		if err875 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartitionSpecs
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.ExchangePartition(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "exchange_partitions":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ExchangePartitions requires 5 args")
			flag.Usage()
		}
		arg880 := flag.Arg(1)
		mbTrans881 := thrift.NewTMemoryBufferLen(len(arg880))
		defer mbTrans881.Close()
		_, err882 := mbTrans881.WriteString(arg880)
		if err882 != nil {
			Usage()
			return
		}
		factory883 := thrift.NewTJSONProtocolFactory()
		jsProt884 := factory883.GetProtocol(mbTrans881)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionsArgs()
		err885 := containerStruct0.ReadField1(jsProt884)
		if err885 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartitionSpecs
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.ExchangePartitions(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg892 := flag.Arg(3)
		mbTrans893 := thrift.NewTMemoryBufferLen(len(arg892))
		defer mbTrans893.Close()
		_, err894 := mbTrans893.WriteString(arg892)
		if err894 != nil {
			Usage()
			return
		}
		factory895 := thrift.NewTJSONProtocolFactory()
		jsProt896 := factory895.GetProtocol(mbTrans893)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
		err897 := containerStruct2.ReadField3(jsProt896)
		if err897 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg899 := flag.Arg(5)
		mbTrans900 := thrift.NewTMemoryBufferLen(len(arg899))
		defer mbTrans900.Close()
		_, err901 := mbTrans900.WriteString(arg899)
		if err901 != nil {
			Usage()
			return
		}
		factory902 := thrift.NewTJSONProtocolFactory()
		jsProt903 := factory902.GetProtocol(mbTrans900)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
		err904 := containerStruct4.ReadField5(jsProt903)
		if err904 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionWithAuth(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetPartitionByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err910 := (strconv.Atoi(flag.Arg(3)))
		if err910 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitions(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err913 := (strconv.Atoi(flag.Arg(3)))
		if err913 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg915 := flag.Arg(5)
		mbTrans916 := thrift.NewTMemoryBufferLen(len(arg915))
		defer mbTrans916.Close()
		_, err917 := mbTrans916.WriteString(arg915)
		if err917 != nil {
			Usage()
			return
		}
		factory918 := thrift.NewTJSONProtocolFactory()
		jsProt919 := factory918.GetProtocol(mbTrans916)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionsWithAuthArgs()
		err920 := containerStruct4.ReadField5(jsProt919)
		if err920 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionsWithAuth(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partitions_pspec":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPspec requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err923 := (strconv.Atoi(flag.Arg(3)))
		if err923 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitionsPspec(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err926 := (strconv.Atoi(flag.Arg(3)))
		if err926 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitionNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_values":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionValues requires 1 args")
			flag.Usage()
		}
		arg927 := flag.Arg(1)
		mbTrans928 := thrift.NewTMemoryBufferLen(len(arg927))
		defer mbTrans928.Close()
		_, err929 := mbTrans928.WriteString(arg927)
		if err929 != nil {
			Usage()
			return
		}
		factory930 := thrift.NewTJSONProtocolFactory()
		jsProt931 := factory930.GetProtocol(mbTrans928)
		argvalue0 := hive_metastore.NewPartitionValuesRequest()
		err932 := argvalue0.Read(jsProt931)
		if err932 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionValues(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg935 := flag.Arg(3)
		mbTrans936 := thrift.NewTMemoryBufferLen(len(arg935))
		defer mbTrans936.Close()
		_, err937 := mbTrans936.WriteString(arg935)
		if err937 != nil {
			Usage()
			return
		}
		factory938 := thrift.NewTJSONProtocolFactory()
		jsProt939 := factory938.GetProtocol(mbTrans936)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsArgs()
		err940 := containerStruct2.ReadField3(jsProt939)
		if err940 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err941 := (strconv.Atoi(flag.Arg(4)))
		if err941 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsPs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_ps_with_auth":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg944 := flag.Arg(3)
		mbTrans945 := thrift.NewTMemoryBufferLen(len(arg944))
		defer mbTrans945.Close()
		_, err946 := mbTrans945.WriteString(arg944)
		if err946 != nil {
			Usage()
			return
		}
		factory947 := thrift.NewTJSONProtocolFactory()
		jsProt948 := factory947.GetProtocol(mbTrans945)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
		err949 := containerStruct2.ReadField3(jsProt948)
		if err949 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err950 := (strconv.Atoi(flag.Arg(4)))
		if err950 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		arg952 := flag.Arg(6)
		mbTrans953 := thrift.NewTMemoryBufferLen(len(arg952))
		defer mbTrans953.Close()
		_, err954 := mbTrans953.WriteString(arg952)
		if err954 != nil {
			Usage()
			return
		}
		factory955 := thrift.NewTJSONProtocolFactory()
		jsProt956 := factory955.GetProtocol(mbTrans953)
		containerStruct5 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
		err957 := containerStruct5.ReadField6(jsProt956)
		if err957 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.GroupNames
		value5 := argvalue5
		fmt.Print(client.GetPartitionsPsWithAuth(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "get_partition_names_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg960 := flag.Arg(3)
		mbTrans961 := thrift.NewTMemoryBufferLen(len(arg960))
		defer mbTrans961.Close()
		_, err962 := mbTrans961.WriteString(arg960)
		if err962 != nil {
			Usage()
			return
		}
		factory963 := thrift.NewTJSONProtocolFactory()
		jsProt964 := factory963.GetProtocol(mbTrans961)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionNamesPsArgs()
		err965 := containerStruct2.ReadField3(jsProt964)
		if err965 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err966 := (strconv.Atoi(flag.Arg(4)))
		if err966 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionNamesPs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_by_filter":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err970 := (strconv.Atoi(flag.Arg(4)))
		if err970 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsByFilter(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_part_specs_by_filter":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartSpecsByFilter requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err974 := (strconv.Atoi(flag.Arg(4)))
		if err974 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartSpecsByFilter(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_by_expr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByExpr requires 1 args")
			flag.Usage()
		}
		arg975 := flag.Arg(1)
		mbTrans976 := thrift.NewTMemoryBufferLen(len(arg975))
		defer mbTrans976.Close()
		_, err977 := mbTrans976.WriteString(arg975)
		if err977 != nil {
			Usage()
			return
		}
		factory978 := thrift.NewTJSONProtocolFactory()
		jsProt979 := factory978.GetProtocol(mbTrans976)
		argvalue0 := hive_metastore.NewPartitionsByExprRequest()
		err980 := argvalue0.Read(jsProt979)
		if err980 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsByExpr(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_num_partitions_by_filter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetNumPartitionsByFilter requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetNumPartitionsByFilter(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_by_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg986 := flag.Arg(3)
		mbTrans987 := thrift.NewTMemoryBufferLen(len(arg986))
		defer mbTrans987.Close()
		_, err988 := mbTrans987.WriteString(arg986)
		if err988 != nil {
			Usage()
			return
		}
		factory989 := thrift.NewTJSONProtocolFactory()
		jsProt990 := factory989.GetProtocol(mbTrans987)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsByNamesArgs()
		err991 := containerStruct2.ReadField3(jsProt990)
		if err991 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Names
		value2 := argvalue2
		fmt.Print(client.GetPartitionsByNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg994 := flag.Arg(3)
		mbTrans995 := thrift.NewTMemoryBufferLen(len(arg994))
		defer mbTrans995.Close()
		_, err996 := mbTrans995.WriteString(arg994)
		if err996 != nil {
			Usage()
			return
		}
		factory997 := thrift.NewTJSONProtocolFactory()
		jsProt998 := factory997.GetProtocol(mbTrans995)
		argvalue2 := hive_metastore.NewPartition()
		err999 := argvalue2.Read(jsProt998)
		if err999 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1002 := flag.Arg(3)
		mbTrans1003 := thrift.NewTMemoryBufferLen(len(arg1002))
		defer mbTrans1003.Close()
		_, err1004 := mbTrans1003.WriteString(arg1002)
		if err1004 != nil {
			Usage()
			return
		}
		factory1005 := thrift.NewTJSONProtocolFactory()
		jsProt1006 := factory1005.GetProtocol(mbTrans1003)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsArgs()
		err1007 := containerStruct2.ReadField3(jsProt1006)
		if err1007 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.NewParts_
		value2 := argvalue2
		fmt.Print(client.AlterPartitions(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partitions_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterPartitionsWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1010 := flag.Arg(3)
		mbTrans1011 := thrift.NewTMemoryBufferLen(len(arg1010))
		defer mbTrans1011.Close()
		_, err1012 := mbTrans1011.WriteString(arg1010)
		if err1012 != nil {
			Usage()
			return
		}
		factory1013 := thrift.NewTJSONProtocolFactory()
		jsProt1014 := factory1013.GetProtocol(mbTrans1011)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs()
		err1015 := containerStruct2.ReadField3(jsProt1014)
		if err1015 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.NewParts_
		value2 := argvalue2
		arg1016 := flag.Arg(4)
		mbTrans1017 := thrift.NewTMemoryBufferLen(len(arg1016))
		defer mbTrans1017.Close()
		_, err1018 := mbTrans1017.WriteString(arg1016)
		if err1018 != nil {
			Usage()
			return
		}
		factory1019 := thrift.NewTJSONProtocolFactory()
		jsProt1020 := factory1019.GetProtocol(mbTrans1017)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1021 := argvalue3.Read(jsProt1020)
		if err1021 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterPartitionsWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "alter_partition_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterPartitionWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1024 := flag.Arg(3)
		mbTrans1025 := thrift.NewTMemoryBufferLen(len(arg1024))
		defer mbTrans1025.Close()
		_, err1026 := mbTrans1025.WriteString(arg1024)
		if err1026 != nil {
			Usage()
			return
		}
		factory1027 := thrift.NewTJSONProtocolFactory()
		jsProt1028 := factory1027.GetProtocol(mbTrans1025)
		argvalue2 := hive_metastore.NewPartition()
		err1029 := argvalue2.Read(jsProt1028)
		if err1029 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg1030 := flag.Arg(4)
		mbTrans1031 := thrift.NewTMemoryBufferLen(len(arg1030))
		defer mbTrans1031.Close()
		_, err1032 := mbTrans1031.WriteString(arg1030)
		if err1032 != nil {
			Usage()
			return
		}
		factory1033 := thrift.NewTJSONProtocolFactory()
		jsProt1034 := factory1033.GetProtocol(mbTrans1031)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1035 := argvalue3.Read(jsProt1034)
		if err1035 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "rename_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "RenamePartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1038 := flag.Arg(3)
		mbTrans1039 := thrift.NewTMemoryBufferLen(len(arg1038))
		defer mbTrans1039.Close()
		_, err1040 := mbTrans1039.WriteString(arg1038)
		if err1040 != nil {
			Usage()
			return
		}
		factory1041 := thrift.NewTJSONProtocolFactory()
		jsProt1042 := factory1041.GetProtocol(mbTrans1039)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreRenamePartitionArgs()
		err1043 := containerStruct2.ReadField3(jsProt1042)
		if err1043 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		arg1044 := flag.Arg(4)
		mbTrans1045 := thrift.NewTMemoryBufferLen(len(arg1044))
		defer mbTrans1045.Close()
		_, err1046 := mbTrans1045.WriteString(arg1044)
		if err1046 != nil {
			Usage()
			return
		}
		factory1047 := thrift.NewTJSONProtocolFactory()
		jsProt1048 := factory1047.GetProtocol(mbTrans1045)
		argvalue3 := hive_metastore.NewPartition()
		err1049 := argvalue3.Read(jsProt1048)
		if err1049 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.RenamePartition(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "partition_name_has_valid_characters":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PartitionNameHasValidCharacters requires 2 args")
			flag.Usage()
		}
		arg1050 := flag.Arg(1)
		mbTrans1051 := thrift.NewTMemoryBufferLen(len(arg1050))
		defer mbTrans1051.Close()
		_, err1052 := mbTrans1051.WriteString(arg1050)
		if err1052 != nil {
			Usage()
			return
		}
		factory1053 := thrift.NewTJSONProtocolFactory()
		jsProt1054 := factory1053.GetProtocol(mbTrans1051)
		containerStruct0 := hive_metastore.NewThriftHiveMetastorePartitionNameHasValidCharactersArgs()
		err1055 := containerStruct0.ReadField1(jsProt1054)
		if err1055 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartVals
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.PartitionNameHasValidCharacters(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_config_value":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetConfigValue(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "partition_name_to_vals":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToVals(context.Background(), value0))
		fmt.Print("\n")
		break
	case "partition_name_to_spec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToSpec(context.Background(), value0))
		fmt.Print("\n")
		break
	case "markPartitionForEvent":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MarkPartitionForEvent requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1063 := flag.Arg(3)
		mbTrans1064 := thrift.NewTMemoryBufferLen(len(arg1063))
		defer mbTrans1064.Close()
		_, err1065 := mbTrans1064.WriteString(arg1063)
		if err1065 != nil {
			Usage()
			return
		}
		factory1066 := thrift.NewTJSONProtocolFactory()
		jsProt1067 := factory1066.GetProtocol(mbTrans1064)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreMarkPartitionForEventArgs()
		err1068 := containerStruct2.ReadField3(jsProt1067)
		if err1068 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := hive_metastore.PartitionEventType(tmp3)
		value3 := argvalue3
		fmt.Print(client.MarkPartitionForEvent(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "isPartitionMarkedForEvent":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "IsPartitionMarkedForEvent requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1071 := flag.Arg(3)
		mbTrans1072 := thrift.NewTMemoryBufferLen(len(arg1071))
		defer mbTrans1072.Close()
		_, err1073 := mbTrans1072.WriteString(arg1071)
		if err1073 != nil {
			Usage()
			return
		}
		factory1074 := thrift.NewTJSONProtocolFactory()
		jsProt1075 := factory1074.GetProtocol(mbTrans1072)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreIsPartitionMarkedForEventArgs()
		err1076 := containerStruct2.ReadField3(jsProt1075)
		if err1076 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := hive_metastore.PartitionEventType(tmp3)
		value3 := argvalue3
		fmt.Print(client.IsPartitionMarkedForEvent(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "add_index":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddIndex requires 2 args")
			flag.Usage()
		}
		arg1077 := flag.Arg(1)
		mbTrans1078 := thrift.NewTMemoryBufferLen(len(arg1077))
		defer mbTrans1078.Close()
		_, err1079 := mbTrans1078.WriteString(arg1077)
		if err1079 != nil {
			Usage()
			return
		}
		factory1080 := thrift.NewTJSONProtocolFactory()
		jsProt1081 := factory1080.GetProtocol(mbTrans1078)
		argvalue0 := hive_metastore.NewIndex()
		err1082 := argvalue0.Read(jsProt1081)
		if err1082 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg1083 := flag.Arg(2)
		mbTrans1084 := thrift.NewTMemoryBufferLen(len(arg1083))
		defer mbTrans1084.Close()
		_, err1085 := mbTrans1084.WriteString(arg1083)
		if err1085 != nil {
			Usage()
			return
		}
		factory1086 := thrift.NewTJSONProtocolFactory()
		jsProt1087 := factory1086.GetProtocol(mbTrans1084)
		argvalue1 := hive_metastore.NewTable()
		err1088 := argvalue1.Read(jsProt1087)
		if err1088 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AddIndex(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "alter_index":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterIndex requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg1092 := flag.Arg(4)
		mbTrans1093 := thrift.NewTMemoryBufferLen(len(arg1092))
		defer mbTrans1093.Close()
		_, err1094 := mbTrans1093.WriteString(arg1092)
		if err1094 != nil {
			Usage()
			return
		}
		factory1095 := thrift.NewTJSONProtocolFactory()
		jsProt1096 := factory1095.GetProtocol(mbTrans1093)
		argvalue3 := hive_metastore.NewIndex()
		err1097 := argvalue3.Read(jsProt1096)
		if err1097 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterIndex(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_index_by_name":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropIndexByName requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropIndexByName(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_index_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetIndexByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_indexes":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexes requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1107 := (strconv.Atoi(flag.Arg(3)))
		if err1107 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetIndexes(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_index_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1110 := (strconv.Atoi(flag.Arg(3)))
		if err1110 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetIndexNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_primary_keys":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPrimaryKeys requires 1 args")
			flag.Usage()
		}
		arg1111 := flag.Arg(1)
		mbTrans1112 := thrift.NewTMemoryBufferLen(len(arg1111))
		defer mbTrans1112.Close()
		_, err1113 := mbTrans1112.WriteString(arg1111)
		if err1113 != nil {
			Usage()
			return
		}
		factory1114 := thrift.NewTJSONProtocolFactory()
		jsProt1115 := factory1114.GetProtocol(mbTrans1112)
		argvalue0 := hive_metastore.NewPrimaryKeysRequest()
		err1116 := argvalue0.Read(jsProt1115)
		if err1116 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPrimaryKeys(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_foreign_keys":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetForeignKeys requires 1 args")
			flag.Usage()
		}
		arg1117 := flag.Arg(1)
		mbTrans1118 := thrift.NewTMemoryBufferLen(len(arg1117))
		defer mbTrans1118.Close()
		_, err1119 := mbTrans1118.WriteString(arg1117)
		if err1119 != nil {
			Usage()
			return
		}
		factory1120 := thrift.NewTJSONProtocolFactory()
		jsProt1121 := factory1120.GetProtocol(mbTrans1118)
		argvalue0 := hive_metastore.NewForeignKeysRequest()
		err1122 := argvalue0.Read(jsProt1121)
		if err1122 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetForeignKeys(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_unique_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUniqueConstraints requires 1 args")
			flag.Usage()
		}
		arg1123 := flag.Arg(1)
		mbTrans1124 := thrift.NewTMemoryBufferLen(len(arg1123))
		defer mbTrans1124.Close()
		_, err1125 := mbTrans1124.WriteString(arg1123)
		if err1125 != nil {
			Usage()
			return
		}
		factory1126 := thrift.NewTJSONProtocolFactory()
		jsProt1127 := factory1126.GetProtocol(mbTrans1124)
		argvalue0 := hive_metastore.NewUniqueConstraintsRequest()
		err1128 := argvalue0.Read(jsProt1127)
		if err1128 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUniqueConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_not_null_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNotNullConstraints requires 1 args")
			flag.Usage()
		}
		arg1129 := flag.Arg(1)
		mbTrans1130 := thrift.NewTMemoryBufferLen(len(arg1129))
		defer mbTrans1130.Close()
		_, err1131 := mbTrans1130.WriteString(arg1129)
		if err1131 != nil {
			Usage()
			return
		}
		factory1132 := thrift.NewTJSONProtocolFactory()
		jsProt1133 := factory1132.GetProtocol(mbTrans1130)
		argvalue0 := hive_metastore.NewNotNullConstraintsRequest()
		err1134 := argvalue0.Read(jsProt1133)
		if err1134 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNotNullConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_table_column_statistics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateTableColumnStatistics requires 1 args")
			flag.Usage()
		}
		arg1135 := flag.Arg(1)
		mbTrans1136 := thrift.NewTMemoryBufferLen(len(arg1135))
		defer mbTrans1136.Close()
		_, err1137 := mbTrans1136.WriteString(arg1135)
		if err1137 != nil {
			Usage()
			return
		}
		factory1138 := thrift.NewTJSONProtocolFactory()
		jsProt1139 := factory1138.GetProtocol(mbTrans1136)
		argvalue0 := hive_metastore.NewColumnStatistics()
		err1140 := argvalue0.Read(jsProt1139)
		if err1140 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateTableColumnStatistics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_partition_column_statistics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatistics requires 1 args")
			flag.Usage()
		}
		arg1141 := flag.Arg(1)
		mbTrans1142 := thrift.NewTMemoryBufferLen(len(arg1141))
		defer mbTrans1142.Close()
		_, err1143 := mbTrans1142.WriteString(arg1141)
		if err1143 != nil {
			Usage()
			return
		}
		factory1144 := thrift.NewTJSONProtocolFactory()
		jsProt1145 := factory1144.GetProtocol(mbTrans1142)
		argvalue0 := hive_metastore.NewColumnStatistics()
		err1146 := argvalue0.Read(jsProt1145)
		if err1146 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdatePartitionColumnStatistics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_column_statistics":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableColumnStatistics requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetTableColumnStatistics(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_column_statistics":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionColumnStatistics requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.GetPartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_table_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg1154 := flag.Arg(1)
		mbTrans1155 := thrift.NewTMemoryBufferLen(len(arg1154))
		defer mbTrans1155.Close()
		_, err1156 := mbTrans1155.WriteString(arg1154)
		if err1156 != nil {
			Usage()
			return
		}
		factory1157 := thrift.NewTJSONProtocolFactory()
		jsProt1158 := factory1157.GetProtocol(mbTrans1155)
		argvalue0 := hive_metastore.NewTableStatsRequest()
		err1159 := argvalue0.Read(jsProt1158)
		if err1159 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableStatisticsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg1160 := flag.Arg(1)
		mbTrans1161 := thrift.NewTMemoryBufferLen(len(arg1160))
		defer mbTrans1161.Close()
		_, err1162 := mbTrans1161.WriteString(arg1160)
		if err1162 != nil {
			Usage()
			return
		}
		factory1163 := thrift.NewTJSONProtocolFactory()
		jsProt1164 := factory1163.GetProtocol(mbTrans1161)
		argvalue0 := hive_metastore.NewPartitionsStatsRequest()
		err1165 := argvalue0.Read(jsProt1164)
		if err1165 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsStatisticsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_aggr_stats_for":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAggrStatsFor requires 1 args")
			flag.Usage()
		}
		arg1166 := flag.Arg(1)
		mbTrans1167 := thrift.NewTMemoryBufferLen(len(arg1166))
		defer mbTrans1167.Close()
		_, err1168 := mbTrans1167.WriteString(arg1166)
		if err1168 != nil {
			Usage()
			return
		}
		factory1169 := thrift.NewTJSONProtocolFactory()
		jsProt1170 := factory1169.GetProtocol(mbTrans1167)
		argvalue0 := hive_metastore.NewPartitionsStatsRequest()
		err1171 := argvalue0.Read(jsProt1170)
		if err1171 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAggrStatsFor(context.Background(), value0))
		fmt.Print("\n")
		break
	case "set_aggr_stats_for":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetAggrStatsFor requires 1 args")
			flag.Usage()
		}
		arg1172 := flag.Arg(1)
		mbTrans1173 := thrift.NewTMemoryBufferLen(len(arg1172))
		defer mbTrans1173.Close()
		_, err1174 := mbTrans1173.WriteString(arg1172)
		if err1174 != nil {
			Usage()
			return
		}
		factory1175 := thrift.NewTJSONProtocolFactory()
		jsProt1176 := factory1175.GetProtocol(mbTrans1173)
		argvalue0 := hive_metastore.NewSetPartitionsStatsRequest()
		err1177 := argvalue0.Read(jsProt1176)
		if err1177 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetAggrStatsFor(context.Background(), value0))
		fmt.Print("\n")
		break
	case "delete_partition_column_statistics":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DeletePartitionColumnStatistics requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.DeletePartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "delete_table_column_statistics":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DeleteTableColumnStatistics requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.DeleteTableColumnStatistics(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "create_function":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateFunction requires 1 args")
			flag.Usage()
		}
		arg1185 := flag.Arg(1)
		mbTrans1186 := thrift.NewTMemoryBufferLen(len(arg1185))
		defer mbTrans1186.Close()
		_, err1187 := mbTrans1186.WriteString(arg1185)
		if err1187 != nil {
			Usage()
			return
		}
		factory1188 := thrift.NewTJSONProtocolFactory()
		jsProt1189 := factory1188.GetProtocol(mbTrans1186)
		argvalue0 := hive_metastore.NewFunction()
		err1190 := argvalue0.Read(jsProt1189)
		if err1190 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateFunction(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_function":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DropFunction requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DropFunction(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "alter_function":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterFunction requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1195 := flag.Arg(3)
		mbTrans1196 := thrift.NewTMemoryBufferLen(len(arg1195))
		defer mbTrans1196.Close()
		_, err1197 := mbTrans1196.WriteString(arg1195)
		if err1197 != nil {
			Usage()
			return
		}
		factory1198 := thrift.NewTJSONProtocolFactory()
		jsProt1199 := factory1198.GetProtocol(mbTrans1196)
		argvalue2 := hive_metastore.NewFunction()
		err1200 := argvalue2.Read(jsProt1199)
		if err1200 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterFunction(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_functions":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFunctions requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFunctions(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_function":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFunction requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFunction(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_all_functions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllFunctions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllFunctions(context.Background()))
		fmt.Print("\n")
		break
	case "create_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
			flag.Usage()
		}
		arg1205 := flag.Arg(1)
		mbTrans1206 := thrift.NewTMemoryBufferLen(len(arg1205))
		defer mbTrans1206.Close()
		_, err1207 := mbTrans1206.WriteString(arg1205)
		if err1207 != nil {
			Usage()
			return
		}
		factory1208 := thrift.NewTJSONProtocolFactory()
		jsProt1209 := factory1208.GetProtocol(mbTrans1206)
		argvalue0 := hive_metastore.NewRole()
		err1210 := argvalue0.Read(jsProt1209)
		if err1210 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_role_names":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRoleNames(context.Background()))
		fmt.Print("\n")
		break
	case "grant_role":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive_metastore.PrincipalType(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		tmp4, err := (strconv.Atoi(flag.Arg(5)))
		if err != nil {
			Usage()
			return
		}
		argvalue4 := hive_metastore.PrincipalType(tmp4)
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GrantRole(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "revoke_role":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive_metastore.PrincipalType(tmp2)
		value2 := argvalue2
		fmt.Print(client.RevokeRole(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_roles":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive_metastore.PrincipalType(tmp1)
		value1 := argvalue1
		fmt.Print(client.ListRoles(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "grant_revoke_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantRevokeRole requires 1 args")
			flag.Usage()
		}
		arg1219 := flag.Arg(1)
		mbTrans1220 := thrift.NewTMemoryBufferLen(len(arg1219))
		defer mbTrans1220.Close()
		_, err1221 := mbTrans1220.WriteString(arg1219)
		if err1221 != nil {
			Usage()
			return
		}
		factory1222 := thrift.NewTJSONProtocolFactory()
		jsProt1223 := factory1222.GetProtocol(mbTrans1220)
		argvalue0 := hive_metastore.NewGrantRevokeRoleRequest()
		err1224 := argvalue0.Read(jsProt1223)
		if err1224 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantRevokeRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_principals_in_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPrincipalsInRole requires 1 args")
			flag.Usage()
		}
		arg1225 := flag.Arg(1)
		mbTrans1226 := thrift.NewTMemoryBufferLen(len(arg1225))
		defer mbTrans1226.Close()
		_, err1227 := mbTrans1226.WriteString(arg1225)
		if err1227 != nil {
			Usage()
			return
		}
		factory1228 := thrift.NewTJSONProtocolFactory()
		jsProt1229 := factory1228.GetProtocol(mbTrans1226)
		argvalue0 := hive_metastore.NewGetPrincipalsInRoleRequest()
		err1230 := argvalue0.Read(jsProt1229)
		if err1230 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPrincipalsInRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_role_grants_for_principal":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRoleGrantsForPrincipal requires 1 args")
			flag.Usage()
		}
		arg1231 := flag.Arg(1)
		mbTrans1232 := thrift.NewTMemoryBufferLen(len(arg1231))
		defer mbTrans1232.Close()
		_, err1233 := mbTrans1232.WriteString(arg1231)
		if err1233 != nil {
			Usage()
			return
		}
		factory1234 := thrift.NewTJSONProtocolFactory()
		jsProt1235 := factory1234.GetProtocol(mbTrans1232)
		argvalue0 := hive_metastore.NewGetRoleGrantsForPrincipalRequest()
		err1236 := argvalue0.Read(jsProt1235)
		if err1236 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetRoleGrantsForPrincipal(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_privilege_set":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
			flag.Usage()
		}
		arg1237 := flag.Arg(1)
		mbTrans1238 := thrift.NewTMemoryBufferLen(len(arg1237))
		defer mbTrans1238.Close()
		_, err1239 := mbTrans1238.WriteString(arg1237)
		if err1239 != nil {
			Usage()
			return
		}
		factory1240 := thrift.NewTJSONProtocolFactory()
		jsProt1241 := factory1240.GetProtocol(mbTrans1238)
		argvalue0 := hive_metastore.NewHiveObjectRef()
		err1242 := argvalue0.Read(jsProt1241)
		if err1242 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1244 := flag.Arg(3)
		mbTrans1245 := thrift.NewTMemoryBufferLen(len(arg1244))
		defer mbTrans1245.Close()
		_, err1246 := mbTrans1245.WriteString(arg1244)
		if err1246 != nil {
			Usage()
			return
		}
		factory1247 := thrift.NewTJSONProtocolFactory()
		jsProt1248 := factory1247.GetProtocol(mbTrans1245)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPrivilegeSetArgs()
		err1249 := containerStruct2.ReadField3(jsProt1248)
		if err1249 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.GroupNames
		value2 := argvalue2
		fmt.Print(client.GetPrivilegeSet(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_privileges":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive_metastore.PrincipalType(tmp1)
		value1 := argvalue1
		arg1251 := flag.Arg(3)
		mbTrans1252 := thrift.NewTMemoryBufferLen(len(arg1251))
		defer mbTrans1252.Close()
		_, err1253 := mbTrans1252.WriteString(arg1251)
		if err1253 != nil {
			Usage()
			return
		}
		factory1254 := thrift.NewTJSONProtocolFactory()
		jsProt1255 := factory1254.GetProtocol(mbTrans1252)
		argvalue2 := hive_metastore.NewHiveObjectRef()
		err1256 := argvalue2.Read(jsProt1255)
		if err1256 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.ListPrivileges(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "grant_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
			flag.Usage()
		}
		arg1257 := flag.Arg(1)
		mbTrans1258 := thrift.NewTMemoryBufferLen(len(arg1257))
		defer mbTrans1258.Close()
		_, err1259 := mbTrans1258.WriteString(arg1257)
		if err1259 != nil {
			Usage()
			return
		}
		factory1260 := thrift.NewTJSONProtocolFactory()
		jsProt1261 := factory1260.GetProtocol(mbTrans1258)
		argvalue0 := hive_metastore.NewPrivilegeBag()
		err1262 := argvalue0.Read(jsProt1261)
		if err1262 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantPrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "revoke_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
			flag.Usage()
		}
		arg1263 := flag.Arg(1)
		mbTrans1264 := thrift.NewTMemoryBufferLen(len(arg1263))
		defer mbTrans1264.Close()
		_, err1265 := mbTrans1264.WriteString(arg1263)
		if err1265 != nil {
			Usage()
			return
		}
		factory1266 := thrift.NewTJSONProtocolFactory()
		jsProt1267 := factory1266.GetProtocol(mbTrans1264)
		argvalue0 := hive_metastore.NewPrivilegeBag()
		err1268 := argvalue0.Read(jsProt1267)
		if err1268 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RevokePrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "grant_revoke_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantRevokePrivileges requires 1 args")
			flag.Usage()
		}
		arg1269 := flag.Arg(1)
		mbTrans1270 := thrift.NewTMemoryBufferLen(len(arg1269))
		defer mbTrans1270.Close()
		_, err1271 := mbTrans1270.WriteString(arg1269)
		if err1271 != nil {
			Usage()
			return
		}
		factory1272 := thrift.NewTJSONProtocolFactory()
		jsProt1273 := factory1272.GetProtocol(mbTrans1270)
		argvalue0 := hive_metastore.NewGrantRevokePrivilegeRequest()
		err1274 := argvalue0.Read(jsProt1273)
		if err1274 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantRevokePrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "set_ugi":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetUgi requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1276 := flag.Arg(2)
		mbTrans1277 := thrift.NewTMemoryBufferLen(len(arg1276))
		defer mbTrans1277.Close()
		_, err1278 := mbTrans1277.WriteString(arg1276)
		if err1278 != nil {
			Usage()
			return
		}
		factory1279 := thrift.NewTJSONProtocolFactory()
		jsProt1280 := factory1279.GetProtocol(mbTrans1277)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreSetUgiArgs()
		err1281 := containerStruct1.ReadField2(jsProt1280)
		if err1281 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.GroupNames
		value1 := argvalue1
		fmt.Print(client.SetUgi(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_delegation_token":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetDelegationToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetDelegationToken(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "renew_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RenewDelegationToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "cancel_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.CancelDelegationToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_token":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddToken(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "remove_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RemoveToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_token_identifiers":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllTokenIdentifiers requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllTokenIdentifiers(context.Background()))
		fmt.Print("\n")
		break
	case "add_master_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddMasterKey requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.AddMasterKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_master_key":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateMasterKey requires 2 args")
			flag.Usage()
		}
		tmp0, err1291 := (strconv.Atoi(flag.Arg(1)))
		if err1291 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UpdateMasterKey(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "remove_master_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveMasterKey requires 1 args")
			flag.Usage()
		}
		tmp0, err1293 := (strconv.Atoi(flag.Arg(1)))
		if err1293 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.RemoveMasterKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_master_keys":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetMasterKeys requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetMasterKeys(context.Background()))
		fmt.Print("\n")
		break
	case "get_open_txns":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOpenTxns requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOpenTxns(context.Background()))
		fmt.Print("\n")
		break
	case "get_open_txns_info":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOpenTxnsInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOpenTxnsInfo(context.Background()))
		fmt.Print("\n")
		break
	case "open_txns":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OpenTxns requires 1 args")
			flag.Usage()
		}
		arg1294 := flag.Arg(1)
		mbTrans1295 := thrift.NewTMemoryBufferLen(len(arg1294))
		defer mbTrans1295.Close()
		_, err1296 := mbTrans1295.WriteString(arg1294)
		if err1296 != nil {
			Usage()
			return
		}
		factory1297 := thrift.NewTJSONProtocolFactory()
		jsProt1298 := factory1297.GetProtocol(mbTrans1295)
		argvalue0 := hive_metastore.NewOpenTxnRequest()
		err1299 := argvalue0.Read(jsProt1298)
		if err1299 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OpenTxns(context.Background(), value0))
		fmt.Print("\n")
		break
	case "abort_txn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AbortTxn requires 1 args")
			flag.Usage()
		}
		arg1300 := flag.Arg(1)
		mbTrans1301 := thrift.NewTMemoryBufferLen(len(arg1300))
		defer mbTrans1301.Close()
		_, err1302 := mbTrans1301.WriteString(arg1300)
		if err1302 != nil {
			Usage()
			return
		}
		factory1303 := thrift.NewTJSONProtocolFactory()
		jsProt1304 := factory1303.GetProtocol(mbTrans1301)
		argvalue0 := hive_metastore.NewAbortTxnRequest()
		err1305 := argvalue0.Read(jsProt1304)
		if err1305 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AbortTxn(context.Background(), value0))
		fmt.Print("\n")
		break
	case "abort_txns":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AbortTxns requires 1 args")
			flag.Usage()
		}
		arg1306 := flag.Arg(1)
		mbTrans1307 := thrift.NewTMemoryBufferLen(len(arg1306))
		defer mbTrans1307.Close()
		_, err1308 := mbTrans1307.WriteString(arg1306)
		if err1308 != nil {
			Usage()
			return
		}
		factory1309 := thrift.NewTJSONProtocolFactory()
		jsProt1310 := factory1309.GetProtocol(mbTrans1307)
		argvalue0 := hive_metastore.NewAbortTxnsRequest()
		err1311 := argvalue0.Read(jsProt1310)
		if err1311 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AbortTxns(context.Background(), value0))
		fmt.Print("\n")
		break
	case "commit_txn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CommitTxn requires 1 args")
			flag.Usage()
		}
		arg1312 := flag.Arg(1)
		mbTrans1313 := thrift.NewTMemoryBufferLen(len(arg1312))
		defer mbTrans1313.Close()
		_, err1314 := mbTrans1313.WriteString(arg1312)
		if err1314 != nil {
			Usage()
			return
		}
		factory1315 := thrift.NewTJSONProtocolFactory()
		jsProt1316 := factory1315.GetProtocol(mbTrans1313)
		argvalue0 := hive_metastore.NewCommitTxnRequest()
		err1317 := argvalue0.Read(jsProt1316)
		if err1317 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CommitTxn(context.Background(), value0))
		fmt.Print("\n")
		break
	case "lock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Lock requires 1 args")
			flag.Usage()
		}
		arg1318 := flag.Arg(1)
		mbTrans1319 := thrift.NewTMemoryBufferLen(len(arg1318))
		defer mbTrans1319.Close()
		_, err1320 := mbTrans1319.WriteString(arg1318)
		if err1320 != nil {
			Usage()
			return
		}
		factory1321 := thrift.NewTJSONProtocolFactory()
		jsProt1322 := factory1321.GetProtocol(mbTrans1319)
		argvalue0 := hive_metastore.NewLockRequest()
		err1323 := argvalue0.Read(jsProt1322)
		if err1323 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Lock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "check_lock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CheckLock requires 1 args")
			flag.Usage()
		}
		arg1324 := flag.Arg(1)
		mbTrans1325 := thrift.NewTMemoryBufferLen(len(arg1324))
		defer mbTrans1325.Close()
		_, err1326 := mbTrans1325.WriteString(arg1324)
		if err1326 != nil {
			Usage()
			return
		}
		factory1327 := thrift.NewTJSONProtocolFactory()
		jsProt1328 := factory1327.GetProtocol(mbTrans1325)
		argvalue0 := hive_metastore.NewCheckLockRequest()
		err1329 := argvalue0.Read(jsProt1328)
		if err1329 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CheckLock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "unlock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Unlock requires 1 args")
			flag.Usage()
		}
		arg1330 := flag.Arg(1)
		mbTrans1331 := thrift.NewTMemoryBufferLen(len(arg1330))
		defer mbTrans1331.Close()
		_, err1332 := mbTrans1331.WriteString(arg1330)
		if err1332 != nil {
			Usage()
			return
		}
		factory1333 := thrift.NewTJSONProtocolFactory()
		jsProt1334 := factory1333.GetProtocol(mbTrans1331)
		argvalue0 := hive_metastore.NewUnlockRequest()
		err1335 := argvalue0.Read(jsProt1334)
		if err1335 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Unlock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "show_locks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ShowLocks requires 1 args")
			flag.Usage()
		}
		arg1336 := flag.Arg(1)
		mbTrans1337 := thrift.NewTMemoryBufferLen(len(arg1336))
		defer mbTrans1337.Close()
		_, err1338 := mbTrans1337.WriteString(arg1336)
		if err1338 != nil {
			Usage()
			return
		}
		factory1339 := thrift.NewTJSONProtocolFactory()
		jsProt1340 := factory1339.GetProtocol(mbTrans1337)
		argvalue0 := hive_metastore.NewShowLocksRequest()
		err1341 := argvalue0.Read(jsProt1340)
		if err1341 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ShowLocks(context.Background(), value0))
		fmt.Print("\n")
		break
	case "heartbeat":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Heartbeat requires 1 args")
			flag.Usage()
		}
		arg1342 := flag.Arg(1)
		mbTrans1343 := thrift.NewTMemoryBufferLen(len(arg1342))
		defer mbTrans1343.Close()
		_, err1344 := mbTrans1343.WriteString(arg1342)
		if err1344 != nil {
			Usage()
			return
		}
		factory1345 := thrift.NewTJSONProtocolFactory()
		jsProt1346 := factory1345.GetProtocol(mbTrans1343)
		argvalue0 := hive_metastore.NewHeartbeatRequest()
		err1347 := argvalue0.Read(jsProt1346)
		if err1347 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Heartbeat(context.Background(), value0))
		fmt.Print("\n")
		break
	case "heartbeat_txn_range":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "HeartbeatTxnRange requires 1 args")
			flag.Usage()
		}
		arg1348 := flag.Arg(1)
		mbTrans1349 := thrift.NewTMemoryBufferLen(len(arg1348))
		defer mbTrans1349.Close()
		_, err1350 := mbTrans1349.WriteString(arg1348)
		if err1350 != nil {
			Usage()
			return
		}
		factory1351 := thrift.NewTJSONProtocolFactory()
		jsProt1352 := factory1351.GetProtocol(mbTrans1349)
		argvalue0 := hive_metastore.NewHeartbeatTxnRangeRequest()
		err1353 := argvalue0.Read(jsProt1352)
		if err1353 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.HeartbeatTxnRange(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact requires 1 args")
			flag.Usage()
		}
		arg1354 := flag.Arg(1)
		mbTrans1355 := thrift.NewTMemoryBufferLen(len(arg1354))
		defer mbTrans1355.Close()
		_, err1356 := mbTrans1355.WriteString(arg1354)
		if err1356 != nil {
			Usage()
			return
		}
		factory1357 := thrift.NewTJSONProtocolFactory()
		jsProt1358 := factory1357.GetProtocol(mbTrans1355)
		argvalue0 := hive_metastore.NewCompactionRequest()
		err1359 := argvalue0.Read(jsProt1358)
		if err1359 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Compact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compact2":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact2 requires 1 args")
			flag.Usage()
		}
		arg1360 := flag.Arg(1)
		mbTrans1361 := thrift.NewTMemoryBufferLen(len(arg1360))
		defer mbTrans1361.Close()
		_, err1362 := mbTrans1361.WriteString(arg1360)
		if err1362 != nil {
			Usage()
			return
		}
		factory1363 := thrift.NewTJSONProtocolFactory()
		jsProt1364 := factory1363.GetProtocol(mbTrans1361)
		argvalue0 := hive_metastore.NewCompactionRequest()
		err1365 := argvalue0.Read(jsProt1364)
		if err1365 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Compact2(context.Background(), value0))
		fmt.Print("\n")
		break
	case "show_compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ShowCompact requires 1 args")
			flag.Usage()
		}
		arg1366 := flag.Arg(1)
		mbTrans1367 := thrift.NewTMemoryBufferLen(len(arg1366))
		defer mbTrans1367.Close()
		_, err1368 := mbTrans1367.WriteString(arg1366)
		if err1368 != nil {
			Usage()
			return
		}
		factory1369 := thrift.NewTJSONProtocolFactory()
		jsProt1370 := factory1369.GetProtocol(mbTrans1367)
		argvalue0 := hive_metastore.NewShowCompactRequest()
		err1371 := argvalue0.Read(jsProt1370)
		if err1371 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ShowCompact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_dynamic_partitions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddDynamicPartitions requires 1 args")
			flag.Usage()
		}
		arg1372 := flag.Arg(1)
		mbTrans1373 := thrift.NewTMemoryBufferLen(len(arg1372))
		defer mbTrans1373.Close()
		_, err1374 := mbTrans1373.WriteString(arg1372)
		if err1374 != nil {
			Usage()
			return
		}
		factory1375 := thrift.NewTJSONProtocolFactory()
		jsProt1376 := factory1375.GetProtocol(mbTrans1373)
		argvalue0 := hive_metastore.NewAddDynamicPartitions()
		err1377 := argvalue0.Read(jsProt1376)
		if err1377 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddDynamicPartitions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_next_notification":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNextNotification requires 1 args")
			flag.Usage()
		}
		arg1378 := flag.Arg(1)
		mbTrans1379 := thrift.NewTMemoryBufferLen(len(arg1378))
		defer mbTrans1379.Close()
		_, err1380 := mbTrans1379.WriteString(arg1378)
		if err1380 != nil {
			Usage()
			return
		}
		factory1381 := thrift.NewTJSONProtocolFactory()
		jsProt1382 := factory1381.GetProtocol(mbTrans1379)
		argvalue0 := hive_metastore.NewNotificationEventRequest()
		err1383 := argvalue0.Read(jsProt1382)
		if err1383 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNextNotification(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_current_notificationEventId":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCurrentNotificationEventId requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCurrentNotificationEventId(context.Background()))
		fmt.Print("\n")
		break
	case "get_notification_events_count":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNotificationEventsCount requires 1 args")
			flag.Usage()
		}
		arg1384 := flag.Arg(1)
		mbTrans1385 := thrift.NewTMemoryBufferLen(len(arg1384))
		defer mbTrans1385.Close()
		_, err1386 := mbTrans1385.WriteString(arg1384)
		if err1386 != nil {
			Usage()
			return
		}
		factory1387 := thrift.NewTJSONProtocolFactory()
		jsProt1388 := factory1387.GetProtocol(mbTrans1385)
		argvalue0 := hive_metastore.NewNotificationEventsCountRequest()
		err1389 := argvalue0.Read(jsProt1388)
		if err1389 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNotificationEventsCount(context.Background(), value0))
		fmt.Print("\n")
		break
	case "fire_listener_event":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FireListenerEvent requires 1 args")
			flag.Usage()
		}
		arg1390 := flag.Arg(1)
		mbTrans1391 := thrift.NewTMemoryBufferLen(len(arg1390))
		defer mbTrans1391.Close()
		_, err1392 := mbTrans1391.WriteString(arg1390)
		if err1392 != nil {
			Usage()
			return
		}
		factory1393 := thrift.NewTJSONProtocolFactory()
		jsProt1394 := factory1393.GetProtocol(mbTrans1391)
		argvalue0 := hive_metastore.NewFireEventRequest()
		err1395 := argvalue0.Read(jsProt1394)
		if err1395 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.FireListenerEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "flushCache":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "FlushCache requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.FlushCache(context.Background()))
		fmt.Print("\n")
		break
	case "cm_recycle":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CmRecycle requires 1 args")
			flag.Usage()
		}
		arg1396 := flag.Arg(1)
		mbTrans1397 := thrift.NewTMemoryBufferLen(len(arg1396))
		defer mbTrans1397.Close()
		_, err1398 := mbTrans1397.WriteString(arg1396)
		if err1398 != nil {
			Usage()
			return
		}
		factory1399 := thrift.NewTJSONProtocolFactory()
		jsProt1400 := factory1399.GetProtocol(mbTrans1397)
		argvalue0 := hive_metastore.NewCmRecycleRequest()
		err1401 := argvalue0.Read(jsProt1400)
		if err1401 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CmRecycle(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_file_metadata_by_expr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFileMetadataByExpr requires 1 args")
			flag.Usage()
		}
		arg1402 := flag.Arg(1)
		mbTrans1403 := thrift.NewTMemoryBufferLen(len(arg1402))
		defer mbTrans1403.Close()
		_, err1404 := mbTrans1403.WriteString(arg1402)
		if err1404 != nil {
			Usage()
			return
		}
		factory1405 := thrift.NewTJSONProtocolFactory()
		jsProt1406 := factory1405.GetProtocol(mbTrans1403)
		argvalue0 := hive_metastore.NewGetFileMetadataByExprRequest()
		err1407 := argvalue0.Read(jsProt1406)
		if err1407 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFileMetadataByExpr(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1408 := flag.Arg(1)
		mbTrans1409 := thrift.NewTMemoryBufferLen(len(arg1408))
		defer mbTrans1409.Close()
		_, err1410 := mbTrans1409.WriteString(arg1408)
		if err1410 != nil {
			Usage()
			return
		}
		factory1411 := thrift.NewTJSONProtocolFactory()
		jsProt1412 := factory1411.GetProtocol(mbTrans1409)
		argvalue0 := hive_metastore.NewGetFileMetadataRequest()
		err1413 := argvalue0.Read(jsProt1412)
		if err1413 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "put_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PutFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1414 := flag.Arg(1)
		mbTrans1415 := thrift.NewTMemoryBufferLen(len(arg1414))
		defer mbTrans1415.Close()
		_, err1416 := mbTrans1415.WriteString(arg1414)
		if err1416 != nil {
			Usage()
			return
		}
		factory1417 := thrift.NewTJSONProtocolFactory()
		jsProt1418 := factory1417.GetProtocol(mbTrans1415)
		argvalue0 := hive_metastore.NewPutFileMetadataRequest()
		err1419 := argvalue0.Read(jsProt1418)
		if err1419 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PutFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "clear_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ClearFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1420 := flag.Arg(1)
		mbTrans1421 := thrift.NewTMemoryBufferLen(len(arg1420))
		defer mbTrans1421.Close()
		_, err1422 := mbTrans1421.WriteString(arg1420)
		if err1422 != nil {
			Usage()
			return
		}
		factory1423 := thrift.NewTJSONProtocolFactory()
		jsProt1424 := factory1423.GetProtocol(mbTrans1421)
		argvalue0 := hive_metastore.NewClearFileMetadataRequest()
		err1425 := argvalue0.Read(jsProt1424)
		if err1425 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ClearFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "cache_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CacheFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1426 := flag.Arg(1)
		mbTrans1427 := thrift.NewTMemoryBufferLen(len(arg1426))
		defer mbTrans1427.Close()
		_, err1428 := mbTrans1427.WriteString(arg1426)
		if err1428 != nil {
			Usage()
			return
		}
		factory1429 := thrift.NewTJSONProtocolFactory()
		jsProt1430 := factory1429.GetProtocol(mbTrans1427)
		argvalue0 := hive_metastore.NewCacheFileMetadataRequest()
		err1431 := argvalue0.Read(jsProt1430)
		if err1431 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CacheFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_metastore_db_uuid":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetMetastoreDbUUID requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetMetastoreDbUUID(context.Background()))
		fmt.Print("\n")
		break
	case "create_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1432 := flag.Arg(1)
		mbTrans1433 := thrift.NewTMemoryBufferLen(len(arg1432))
		defer mbTrans1433.Close()
		_, err1434 := mbTrans1433.WriteString(arg1432)
		if err1434 != nil {
			Usage()
			return
		}
		factory1435 := thrift.NewTJSONProtocolFactory()
		jsProt1436 := factory1435.GetProtocol(mbTrans1433)
		argvalue0 := hive_metastore.NewWMCreateResourcePlanRequest()
		err1437 := argvalue0.Read(jsProt1436)
		if err1437 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1438 := flag.Arg(1)
		mbTrans1439 := thrift.NewTMemoryBufferLen(len(arg1438))
		defer mbTrans1439.Close()
		_, err1440 := mbTrans1439.WriteString(arg1438)
		if err1440 != nil {
			Usage()
			return
		}
		factory1441 := thrift.NewTJSONProtocolFactory()
		jsProt1442 := factory1441.GetProtocol(mbTrans1439)
		argvalue0 := hive_metastore.NewWMGetResourcePlanRequest()
		err1443 := argvalue0.Read(jsProt1442)
		if err1443 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_active_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetActiveResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1444 := flag.Arg(1)
		mbTrans1445 := thrift.NewTMemoryBufferLen(len(arg1444))
		defer mbTrans1445.Close()
		_, err1446 := mbTrans1445.WriteString(arg1444)
		if err1446 != nil {
			Usage()
			return
		}
		factory1447 := thrift.NewTJSONProtocolFactory()
		jsProt1448 := factory1447.GetProtocol(mbTrans1445)
		argvalue0 := hive_metastore.NewWMGetActiveResourcePlanRequest()
		err1449 := argvalue0.Read(jsProt1448)
		if err1449 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetActiveResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_resource_plans":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllResourcePlans requires 1 args")
			flag.Usage()
		}
		arg1450 := flag.Arg(1)
		mbTrans1451 := thrift.NewTMemoryBufferLen(len(arg1450))
		defer mbTrans1451.Close()
		_, err1452 := mbTrans1451.WriteString(arg1450)
		if err1452 != nil {
			Usage()
			return
		}
		factory1453 := thrift.NewTJSONProtocolFactory()
		jsProt1454 := factory1453.GetProtocol(mbTrans1451)
		argvalue0 := hive_metastore.NewWMGetAllResourcePlanRequest()
		err1455 := argvalue0.Read(jsProt1454)
		if err1455 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAllResourcePlans(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1456 := flag.Arg(1)
		mbTrans1457 := thrift.NewTMemoryBufferLen(len(arg1456))
		defer mbTrans1457.Close()
		_, err1458 := mbTrans1457.WriteString(arg1456)
		if err1458 != nil {
			Usage()
			return
		}
		factory1459 := thrift.NewTJSONProtocolFactory()
		jsProt1460 := factory1459.GetProtocol(mbTrans1457)
		argvalue0 := hive_metastore.NewWMAlterResourcePlanRequest()
		err1461 := argvalue0.Read(jsProt1460)
		if err1461 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "validate_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ValidateResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1462 := flag.Arg(1)
		mbTrans1463 := thrift.NewTMemoryBufferLen(len(arg1462))
		defer mbTrans1463.Close()
		_, err1464 := mbTrans1463.WriteString(arg1462)
		if err1464 != nil {
			Usage()
			return
		}
		factory1465 := thrift.NewTJSONProtocolFactory()
		jsProt1466 := factory1465.GetProtocol(mbTrans1463)
		argvalue0 := hive_metastore.NewWMValidateResourcePlanRequest()
		err1467 := argvalue0.Read(jsProt1466)
		if err1467 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ValidateResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1468 := flag.Arg(1)
		mbTrans1469 := thrift.NewTMemoryBufferLen(len(arg1468))
		defer mbTrans1469.Close()
		_, err1470 := mbTrans1469.WriteString(arg1468)
		if err1470 != nil {
			Usage()
			return
		}
		factory1471 := thrift.NewTJSONProtocolFactory()
		jsProt1472 := factory1471.GetProtocol(mbTrans1469)
		argvalue0 := hive_metastore.NewWMDropResourcePlanRequest()
		err1473 := argvalue0.Read(jsProt1472)
		if err1473 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateWmTrigger requires 1 args")
			flag.Usage()
		}
		arg1474 := flag.Arg(1)
		mbTrans1475 := thrift.NewTMemoryBufferLen(len(arg1474))
		defer mbTrans1475.Close()
		_, err1476 := mbTrans1475.WriteString(arg1474)
		if err1476 != nil {
			Usage()
			return
		}
		factory1477 := thrift.NewTJSONProtocolFactory()
		jsProt1478 := factory1477.GetProtocol(mbTrans1475)
		argvalue0 := hive_metastore.NewWMCreateTriggerRequest()
		err1479 := argvalue0.Read(jsProt1478)
		if err1479 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterWmTrigger requires 1 args")
			flag.Usage()
		}
		arg1480 := flag.Arg(1)
		mbTrans1481 := thrift.NewTMemoryBufferLen(len(arg1480))
		defer mbTrans1481.Close()
		_, err1482 := mbTrans1481.WriteString(arg1480)
		if err1482 != nil {
			Usage()
			return
		}
		factory1483 := thrift.NewTJSONProtocolFactory()
		jsProt1484 := factory1483.GetProtocol(mbTrans1481)
		argvalue0 := hive_metastore.NewWMAlterTriggerRequest()
		err1485 := argvalue0.Read(jsProt1484)
		if err1485 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropWmTrigger requires 1 args")
			flag.Usage()
		}
		arg1486 := flag.Arg(1)
		mbTrans1487 := thrift.NewTMemoryBufferLen(len(arg1486))
		defer mbTrans1487.Close()
		_, err1488 := mbTrans1487.WriteString(arg1486)
		if err1488 != nil {
			Usage()
			return
		}
		factory1489 := thrift.NewTJSONProtocolFactory()
		jsProt1490 := factory1489.GetProtocol(mbTrans1487)
		argvalue0 := hive_metastore.NewWMDropTriggerRequest()
		err1491 := argvalue0.Read(jsProt1490)
		if err1491 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_triggers_for_resourceplan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTriggersForResourceplan requires 1 args")
			flag.Usage()
		}
		arg1492 := flag.Arg(1)
		mbTrans1493 := thrift.NewTMemoryBufferLen(len(arg1492))
		defer mbTrans1493.Close()
		_, err1494 := mbTrans1493.WriteString(arg1492)
		if err1494 != nil {
			Usage()
			return
		}
		factory1495 := thrift.NewTJSONProtocolFactory()
		jsProt1496 := factory1495.GetProtocol(mbTrans1493)
		argvalue0 := hive_metastore.NewWMGetTriggersForResourePlanRequest()
		err1497 := argvalue0.Read(jsProt1496)
		if err1497 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTriggersForResourceplan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
