/*
 * lakeFS API
 *
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: services@treeverse.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// StagingLocation : location for placing an object when staging it
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StagingLocation {
    #[serde(rename = "physical_address", skip_serializing_if = "Option::is_none")]
    pub physical_address: Option<String>,
    /// if presign=true is passed in the request, this field will contain a pre-signed URL to use when uploading
    #[serde(rename = "presigned_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub presigned_url: Option<Option<String>>,
    /// If present and nonzero, physical_address is a pre-signed URL and will expire at this Unix Epoch time.  This will be shorter than the pre-signed URL lifetime if an authentication token is about to expire.  This field is *optional*. 
    #[serde(rename = "presigned_url_expiry", skip_serializing_if = "Option::is_none")]
    pub presigned_url_expiry: Option<i64>,
}

impl StagingLocation {
    /// location for placing an object when staging it
    pub fn new() -> StagingLocation {
        StagingLocation {
            physical_address: None,
            presigned_url: None,
            presigned_url_expiry: None,
        }
    }
}

