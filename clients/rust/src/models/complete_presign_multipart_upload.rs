/*
 * lakeFS API
 *
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: services@treeverse.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CompletePresignMultipartUpload {
    #[serde(rename = "physical_address")]
    pub physical_address: String,
    /// List of uploaded parts, should be ordered by ascending part number
    #[serde(rename = "parts")]
    pub parts: Vec<models::UploadPart>,
    #[serde(rename = "user_metadata", skip_serializing_if = "Option::is_none")]
    pub user_metadata: Option<std::collections::HashMap<String, String>>,
    /// Object media type
    #[serde(rename = "content_type", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
}

impl CompletePresignMultipartUpload {
    pub fn new(physical_address: String, parts: Vec<models::UploadPart>) -> CompletePresignMultipartUpload {
        CompletePresignMultipartUpload {
            physical_address,
            parts,
            user_metadata: None,
            content_type: None,
        }
    }
}

