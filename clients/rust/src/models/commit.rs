/*
 * lakeFS API
 *
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: services@treeverse.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Commit {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "parents")]
    pub parents: Vec<String>,
    #[serde(rename = "committer")]
    pub committer: String,
    #[serde(rename = "message")]
    pub message: String,
    /// Unix Epoch in seconds
    #[serde(rename = "creation_date")]
    pub creation_date: i64,
    #[serde(rename = "meta_range_id")]
    pub meta_range_id: String,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "generation", skip_serializing_if = "Option::is_none")]
    pub generation: Option<i64>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
}

impl Commit {
    pub fn new(id: String, parents: Vec<String>, committer: String, message: String, creation_date: i64, meta_range_id: String) -> Commit {
        Commit {
            id,
            parents,
            committer,
            message,
            creation_date,
            meta_range_id,
            metadata: None,
            generation: None,
            version: None,
        }
    }
}

