/*
 * lakeFS API
 *
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: services@treeverse.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Diff {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "path")]
    pub path: String,
    #[serde(rename = "path_type")]
    pub path_type: PathType,
    /// represents the size of the added/changed/deleted entry
    #[serde(rename = "size_bytes", skip_serializing_if = "Option::is_none")]
    pub size_bytes: Option<i64>,
}

impl Diff {
    pub fn new(r#type: Type, path: String, path_type: PathType) -> Diff {
        Diff {
            r#type,
            path,
            path_type,
            size_bytes: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "added")]
    Added,
    #[serde(rename = "removed")]
    Removed,
    #[serde(rename = "changed")]
    Changed,
    #[serde(rename = "conflict")]
    Conflict,
    #[serde(rename = "prefix_changed")]
    PrefixChanged,
}

impl Default for Type {
    fn default() -> Type {
        Self::Added
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PathType {
    #[serde(rename = "common_prefix")]
    CommonPrefix,
    #[serde(rename = "object")]
    Object,
}

impl Default for PathType {
    fn default() -> PathType {
        Self::CommonPrefix
    }
}

