/*
 * lakeFS API
 *
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: services@treeverse.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResetCreation {
    /// What to reset according to path.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(rename = "force", skip_serializing_if = "Option::is_none")]
    pub force: Option<bool>,
}

impl ResetCreation {
    pub fn new(r#type: Type) -> ResetCreation {
        ResetCreation {
            r#type,
            path: None,
            force: None,
        }
    }
}
/// What to reset according to path.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "object")]
    Object,
    #[serde(rename = "common_prefix")]
    CommonPrefix,
    #[serde(rename = "reset")]
    Reset,
}

impl Default for Type {
    fn default() -> Type {
        Self::Object
    }
}

