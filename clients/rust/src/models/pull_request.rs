/*
 * lakeFS API
 *
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: services@treeverse.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PullRequest {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "creation_date")]
    pub creation_date: i64,
    #[serde(rename = "author")]
    pub author: String,
    #[serde(rename = "source_branch")]
    pub source_branch: String,
    #[serde(rename = "destination_branch")]
    pub destination_branch: String,
    /// the commit id of merged PRs
    #[serde(rename = "commit_id", skip_serializing_if = "Option::is_none")]
    pub commit_id: Option<String>,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "description")]
    pub description: String,
}

impl PullRequest {
    pub fn new(id: String, creation_date: i64, author: String, source_branch: String, destination_branch: String, status: Status, title: String, description: String) -> PullRequest {
        PullRequest {
            id,
            creation_date,
            author,
            source_branch,
            destination_branch,
            commit_id: None,
            status,
            title,
            description,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "merged")]
    Merged,
}

impl Default for Status {
    fn default() -> Status {
        Self::Open
    }
}

