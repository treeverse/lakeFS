/*
 * lakeFS API
 *
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: services@treeverse.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommitCreation {
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<std::collections::HashMap<String, String>>,
    /// set date to override creation date in the commit (Unix Epoch in seconds)
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<i64>,
    /// sets whether a commit can contain no changes
    #[serde(rename = "allow_empty", skip_serializing_if = "Option::is_none")]
    pub allow_empty: Option<bool>,
    #[serde(rename = "force", skip_serializing_if = "Option::is_none")]
    pub force: Option<bool>,
}

impl CommitCreation {
    pub fn new(message: String) -> CommitCreation {
        CommitCreation {
            message,
            metadata: None,
            date: None,
            allow_empty: None,
            force: None,
        }
    }
}

