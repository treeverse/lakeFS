/*
 * lakeFS API
 *
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: services@treeverse.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LoginConfig {
    /// RBAC will remain enabled on GUI if \"external\".  That only works with an external auth service. 
    #[serde(rename = "RBAC", skip_serializing_if = "Option::is_none")]
    pub rbac: Option<Rbac>,
    /// primary URL to use for login.
    #[serde(rename = "login_url")]
    pub login_url: String,
    /// message to display to users who fail to login; a full sentence that is rendered in HTML and may contain a link to a secondary login method 
    #[serde(rename = "login_failed_message", skip_serializing_if = "Option::is_none")]
    pub login_failed_message: Option<String>,
    /// secondary URL to offer users to use for login.
    #[serde(rename = "fallback_login_url", skip_serializing_if = "Option::is_none")]
    pub fallback_login_url: Option<String>,
    /// label to place on fallback_login_url.
    #[serde(rename = "fallback_login_label", skip_serializing_if = "Option::is_none")]
    pub fallback_login_label: Option<String>,
    /// cookie names used to store JWT
    #[serde(rename = "login_cookie_names")]
    pub login_cookie_names: Vec<String>,
    /// URL to use for logging out.
    #[serde(rename = "logout_url")]
    pub logout_url: String,
}

impl LoginConfig {
    pub fn new(login_url: String, login_cookie_names: Vec<String>, logout_url: String) -> LoginConfig {
        LoginConfig {
            rbac: None,
            login_url,
            login_failed_message: None,
            fallback_login_url: None,
            fallback_login_label: None,
            login_cookie_names,
            logout_url,
        }
    }
}
/// RBAC will remain enabled on GUI if \"external\".  That only works with an external auth service. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Rbac {
    #[serde(rename = "simplified")]
    Simplified,
    #[serde(rename = "external")]
    External,
}

impl Default for Rbac {
    fn default() -> Rbac {
        Self::Simplified
    }
}

