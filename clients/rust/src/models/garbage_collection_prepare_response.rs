/*
 * lakeFS API
 *
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: services@treeverse.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GarbageCollectionPrepareResponse {
    /// a unique identifier generated for this GC job
    #[serde(rename = "run_id")]
    pub run_id: String,
    /// location of the resulting commits csv table (partitioned by run_id)
    #[serde(rename = "gc_commits_location")]
    pub gc_commits_location: String,
    /// location to use for expired addresses parquet table (partitioned by run_id)
    #[serde(rename = "gc_addresses_location")]
    pub gc_addresses_location: String,
    /// a presigned url to download the commits csv
    #[serde(rename = "gc_commits_presigned_url", skip_serializing_if = "Option::is_none")]
    pub gc_commits_presigned_url: Option<String>,
}

impl GarbageCollectionPrepareResponse {
    pub fn new(run_id: String, gc_commits_location: String, gc_addresses_location: String) -> GarbageCollectionPrepareResponse {
        GarbageCollectionPrepareResponse {
            run_id,
            gc_commits_location,
            gc_addresses_location,
            gc_commits_presigned_url: None,
        }
    }
}

