# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: services@treeverse.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lakefs_client import schemas  # noqa: F401


class LoginConfig(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "logout_url",
            "login_url",
            "login_cookie_names",
        }
        
        class properties:
            login_url = schemas.StrSchema
            
            
            class login_cookie_names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'login_cookie_names':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            logout_url = schemas.StrSchema
            
            
            class RBAC(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "simplified": "SIMPLIFIED",
                        "external": "EXTERNAL",
                    }
                
                @schemas.classproperty
                def SIMPLIFIED(cls):
                    return cls("simplified")
                
                @schemas.classproperty
                def EXTERNAL(cls):
                    return cls("external")
            login_failed_message = schemas.StrSchema
            fallback_login_url = schemas.StrSchema
            fallback_login_label = schemas.StrSchema
            __annotations__ = {
                "login_url": login_url,
                "login_cookie_names": login_cookie_names,
                "logout_url": logout_url,
                "RBAC": RBAC,
                "login_failed_message": login_failed_message,
                "fallback_login_url": fallback_login_url,
                "fallback_login_label": fallback_login_label,
            }
    
    logout_url: MetaOapg.properties.logout_url
    login_url: MetaOapg.properties.login_url
    login_cookie_names: MetaOapg.properties.login_cookie_names
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["login_url"]) -> MetaOapg.properties.login_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["login_cookie_names"]) -> MetaOapg.properties.login_cookie_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logout_url"]) -> MetaOapg.properties.logout_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RBAC"]) -> MetaOapg.properties.RBAC: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["login_failed_message"]) -> MetaOapg.properties.login_failed_message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fallback_login_url"]) -> MetaOapg.properties.fallback_login_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fallback_login_label"]) -> MetaOapg.properties.fallback_login_label: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["login_url", "login_cookie_names", "logout_url", "RBAC", "login_failed_message", "fallback_login_url", "fallback_login_label", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["login_url"]) -> MetaOapg.properties.login_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["login_cookie_names"]) -> MetaOapg.properties.login_cookie_names: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logout_url"]) -> MetaOapg.properties.logout_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RBAC"]) -> typing.Union[MetaOapg.properties.RBAC, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["login_failed_message"]) -> typing.Union[MetaOapg.properties.login_failed_message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fallback_login_url"]) -> typing.Union[MetaOapg.properties.fallback_login_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fallback_login_label"]) -> typing.Union[MetaOapg.properties.fallback_login_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["login_url", "login_cookie_names", "logout_url", "RBAC", "login_failed_message", "fallback_login_url", "fallback_login_label", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        logout_url: typing.Union[MetaOapg.properties.logout_url, str, ],
        login_url: typing.Union[MetaOapg.properties.login_url, str, ],
        login_cookie_names: typing.Union[MetaOapg.properties.login_cookie_names, list, tuple, ],
        RBAC: typing.Union[MetaOapg.properties.RBAC, str, schemas.Unset] = schemas.unset,
        login_failed_message: typing.Union[MetaOapg.properties.login_failed_message, str, schemas.Unset] = schemas.unset,
        fallback_login_url: typing.Union[MetaOapg.properties.fallback_login_url, str, schemas.Unset] = schemas.unset,
        fallback_login_label: typing.Union[MetaOapg.properties.fallback_login_label, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LoginConfig':
        return super().__new__(
            cls,
            *_args,
            logout_url=logout_url,
            login_url=login_url,
            login_cookie_names=login_cookie_names,
            RBAC=RBAC,
            login_failed_message=login_failed_message,
            fallback_login_url=fallback_login_url,
            fallback_login_label=fallback_login_label,
            _configuration=_configuration,
            **kwargs,
        )
