# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: services@treeverse.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lakefs_client import schemas  # noqa: F401


class Repository(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "default_branch",
            "creation_date",
            "id",
            "storage_namespace",
        }
        
        class properties:
            id = schemas.StrSchema
            creation_date = schemas.Int64Schema
            default_branch = schemas.StrSchema
            storage_namespace = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "creation_date": creation_date,
                "default_branch": default_branch,
                "storage_namespace": storage_namespace,
            }
    
    default_branch: MetaOapg.properties.default_branch
    creation_date: MetaOapg.properties.creation_date
    id: MetaOapg.properties.id
    storage_namespace: MetaOapg.properties.storage_namespace
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_date"]) -> MetaOapg.properties.creation_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_branch"]) -> MetaOapg.properties.default_branch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storage_namespace"]) -> MetaOapg.properties.storage_namespace: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "creation_date", "default_branch", "storage_namespace", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_date"]) -> MetaOapg.properties.creation_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_branch"]) -> MetaOapg.properties.default_branch: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storage_namespace"]) -> MetaOapg.properties.storage_namespace: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "creation_date", "default_branch", "storage_namespace", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        default_branch: typing.Union[MetaOapg.properties.default_branch, str, ],
        creation_date: typing.Union[MetaOapg.properties.creation_date, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        storage_namespace: typing.Union[MetaOapg.properties.storage_namespace, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Repository':
        return super().__new__(
            cls,
            *_args,
            default_branch=default_branch,
            creation_date=creation_date,
            id=id,
            storage_namespace=storage_namespace,
            _configuration=_configuration,
            **kwargs,
        )
