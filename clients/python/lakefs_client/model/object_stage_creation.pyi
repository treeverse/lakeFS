# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: services@treeverse.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lakefs_client import schemas  # noqa: F401


class ObjectStageCreation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "physical_address",
            "size_bytes",
            "checksum",
        }
        
        class properties:
            physical_address = schemas.StrSchema
            checksum = schemas.StrSchema
            size_bytes = schemas.Int64Schema
            mtime = schemas.Int64Schema
        
            @staticmethod
            def metadata() -> typing.Type['ObjectUserMetadata']:
                return ObjectUserMetadata
            content_type = schemas.StrSchema
            __annotations__ = {
                "physical_address": physical_address,
                "checksum": checksum,
                "size_bytes": size_bytes,
                "mtime": mtime,
                "metadata": metadata,
                "content_type": content_type,
            }
    
    physical_address: MetaOapg.properties.physical_address
    size_bytes: MetaOapg.properties.size_bytes
    checksum: MetaOapg.properties.checksum
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["physical_address"]) -> MetaOapg.properties.physical_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checksum"]) -> MetaOapg.properties.checksum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size_bytes"]) -> MetaOapg.properties.size_bytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mtime"]) -> MetaOapg.properties.mtime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'ObjectUserMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content_type"]) -> MetaOapg.properties.content_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["physical_address", "checksum", "size_bytes", "mtime", "metadata", "content_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["physical_address"]) -> MetaOapg.properties.physical_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checksum"]) -> MetaOapg.properties.checksum: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size_bytes"]) -> MetaOapg.properties.size_bytes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mtime"]) -> typing.Union[MetaOapg.properties.mtime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union['ObjectUserMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content_type"]) -> typing.Union[MetaOapg.properties.content_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["physical_address", "checksum", "size_bytes", "mtime", "metadata", "content_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        physical_address: typing.Union[MetaOapg.properties.physical_address, str, ],
        size_bytes: typing.Union[MetaOapg.properties.size_bytes, decimal.Decimal, int, ],
        checksum: typing.Union[MetaOapg.properties.checksum, str, ],
        mtime: typing.Union[MetaOapg.properties.mtime, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        metadata: typing.Union['ObjectUserMetadata', schemas.Unset] = schemas.unset,
        content_type: typing.Union[MetaOapg.properties.content_type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObjectStageCreation':
        return super().__new__(
            cls,
            *_args,
            physical_address=physical_address,
            size_bytes=size_bytes,
            checksum=checksum,
            mtime=mtime,
            metadata=metadata,
            content_type=content_type,
            _configuration=_configuration,
            **kwargs,
        )

from lakefs_client.model.object_user_metadata import ObjectUserMetadata
