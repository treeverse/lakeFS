# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: services@treeverse.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lakefs_client import schemas  # noqa: F401


class ImportPagination(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "has_more",
            "last_key",
        }
        
        class properties:
            has_more = schemas.BoolSchema
            last_key = schemas.StrSchema
            continuation_token = schemas.StrSchema
            __annotations__ = {
                "has_more": has_more,
                "last_key": last_key,
                "continuation_token": continuation_token,
            }
    
    has_more: MetaOapg.properties.has_more
    last_key: MetaOapg.properties.last_key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_more"]) -> MetaOapg.properties.has_more: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_key"]) -> MetaOapg.properties.last_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["continuation_token"]) -> MetaOapg.properties.continuation_token: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["has_more", "last_key", "continuation_token", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_more"]) -> MetaOapg.properties.has_more: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_key"]) -> MetaOapg.properties.last_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["continuation_token"]) -> typing.Union[MetaOapg.properties.continuation_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["has_more", "last_key", "continuation_token", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        has_more: typing.Union[MetaOapg.properties.has_more, bool, ],
        last_key: typing.Union[MetaOapg.properties.last_key, str, ],
        continuation_token: typing.Union[MetaOapg.properties.continuation_token, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ImportPagination':
        return super().__new__(
            cls,
            *_args,
            has_more=has_more,
            last_key=last_key,
            continuation_token=continuation_token,
            _configuration=_configuration,
            **kwargs,
        )
