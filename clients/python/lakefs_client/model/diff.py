# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: services@treeverse.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lakefs_client import schemas  # noqa: F401


class Diff(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "path",
            "path_type",
            "type",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "added": "ADDED",
                        "removed": "REMOVED",
                        "changed": "CHANGED",
                        "conflict": "CONFLICT",
                        "prefix_changed": "PREFIX_CHANGED",
                    }
                
                @schemas.classproperty
                def ADDED(cls):
                    return cls("added")
                
                @schemas.classproperty
                def REMOVED(cls):
                    return cls("removed")
                
                @schemas.classproperty
                def CHANGED(cls):
                    return cls("changed")
                
                @schemas.classproperty
                def CONFLICT(cls):
                    return cls("conflict")
                
                @schemas.classproperty
                def PREFIX_CHANGED(cls):
                    return cls("prefix_changed")
            path = schemas.StrSchema
            
            
            class path_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "common_prefix": "COMMON_PREFIX",
                        "object": "OBJECT",
                    }
                
                @schemas.classproperty
                def COMMON_PREFIX(cls):
                    return cls("common_prefix")
                
                @schemas.classproperty
                def OBJECT(cls):
                    return cls("object")
            size_bytes = schemas.Int64Schema
            __annotations__ = {
                "type": type,
                "path": path,
                "path_type": path_type,
                "size_bytes": size_bytes,
            }
    
    path: MetaOapg.properties.path
    path_type: MetaOapg.properties.path_type
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path_type"]) -> MetaOapg.properties.path_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size_bytes"]) -> MetaOapg.properties.size_bytes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "path", "path_type", "size_bytes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path_type"]) -> MetaOapg.properties.path_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size_bytes"]) -> typing.Union[MetaOapg.properties.size_bytes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "path", "path_type", "size_bytes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        path: typing.Union[MetaOapg.properties.path, str, ],
        path_type: typing.Union[MetaOapg.properties.path_type, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        size_bytes: typing.Union[MetaOapg.properties.size_bytes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Diff':
        return super().__new__(
            cls,
            *_args,
            path=path,
            path_type=path_type,
            type=type,
            size_bytes=size_bytes,
            _configuration=_configuration,
            **kwargs,
        )
