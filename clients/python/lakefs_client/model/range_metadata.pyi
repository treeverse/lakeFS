# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: services@treeverse.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lakefs_client import schemas  # noqa: F401


class RangeMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "max_key",
            "count",
            "estimated_size",
            "id",
            "min_key",
        }
        
        class properties:
            id = schemas.StrSchema
            min_key = schemas.StrSchema
            max_key = schemas.StrSchema
            count = schemas.IntSchema
            estimated_size = schemas.IntSchema
            __annotations__ = {
                "id": id,
                "min_key": min_key,
                "max_key": max_key,
                "count": count,
                "estimated_size": estimated_size,
            }
    
    max_key: MetaOapg.properties.max_key
    count: MetaOapg.properties.count
    estimated_size: MetaOapg.properties.estimated_size
    id: MetaOapg.properties.id
    min_key: MetaOapg.properties.min_key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min_key"]) -> MetaOapg.properties.min_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_key"]) -> MetaOapg.properties.max_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estimated_size"]) -> MetaOapg.properties.estimated_size: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "min_key", "max_key", "count", "estimated_size", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min_key"]) -> MetaOapg.properties.min_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_key"]) -> MetaOapg.properties.max_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estimated_size"]) -> MetaOapg.properties.estimated_size: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "min_key", "max_key", "count", "estimated_size", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        max_key: typing.Union[MetaOapg.properties.max_key, str, ],
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, ],
        estimated_size: typing.Union[MetaOapg.properties.estimated_size, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        min_key: typing.Union[MetaOapg.properties.min_key, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RangeMetadata':
        return super().__new__(
            cls,
            *_args,
            max_key=max_key,
            count=count,
            estimated_size=estimated_size,
            id=id,
            min_key=min_key,
            _configuration=_configuration,
            **kwargs,
        )
