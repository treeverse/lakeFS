# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: services@treeverse.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lakefs_client import schemas  # noqa: F401


class CredentialsWithSecret(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "access_key_id",
            "secret_access_key",
            "creation_date",
        }
        
        class properties:
            access_key_id = schemas.StrSchema
            secret_access_key = schemas.StrSchema
            creation_date = schemas.Int64Schema
            __annotations__ = {
                "access_key_id": access_key_id,
                "secret_access_key": secret_access_key,
                "creation_date": creation_date,
            }
    
    access_key_id: MetaOapg.properties.access_key_id
    secret_access_key: MetaOapg.properties.secret_access_key
    creation_date: MetaOapg.properties.creation_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_key_id"]) -> MetaOapg.properties.access_key_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret_access_key"]) -> MetaOapg.properties.secret_access_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_date"]) -> MetaOapg.properties.creation_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_key_id", "secret_access_key", "creation_date", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_key_id"]) -> MetaOapg.properties.access_key_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret_access_key"]) -> MetaOapg.properties.secret_access_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_date"]) -> MetaOapg.properties.creation_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_key_id", "secret_access_key", "creation_date", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        access_key_id: typing.Union[MetaOapg.properties.access_key_id, str, ],
        secret_access_key: typing.Union[MetaOapg.properties.secret_access_key, str, ],
        creation_date: typing.Union[MetaOapg.properties.creation_date, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CredentialsWithSecret':
        return super().__new__(
            cls,
            *_args,
            access_key_id=access_key_id,
            secret_access_key=secret_access_key,
            creation_date=creation_date,
            _configuration=_configuration,
            **kwargs,
        )
