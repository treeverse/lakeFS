# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API

    The version of the OpenAPI document: 1.0.0
    Contact: services@treeverse.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
try:
    from pydantic.v1 import validate_call, Field, StrictFloat, StrictStr, StrictInt
except ImportError:
    from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
try:
    from pydantic.v1 import Field, StrictBool, StrictStr, field_validator
except ImportError:
    from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from lakefs_sdk.models.commit_list import CommitList
from lakefs_sdk.models.diff_list import DiffList
from lakefs_sdk.models.find_merge_base_result import FindMergeBaseResult
from lakefs_sdk.models.merge import Merge
from lakefs_sdk.models.merge_result import MergeResult

from lakefs_sdk.api_client import ApiClient, RequestSerialized
from lakefs_sdk.api_response import ApiResponse
from lakefs_sdk.rest import RESTResponseType


class RefsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def diff_refs(
        self,
        repository: StrictStr,
        left_ref: Annotated[StrictStr, Field(description="a reference (could be either a branch or a commit ID)")],
        right_ref: Annotated[StrictStr, Field(description="a reference (could be either a branch or a commit ID) to compare against")],
        after: Annotated[Optional[StrictStr], Field(description="return items after this value")] = None,
        amount: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=-1)]], Field(description="how many items to return")] = None,
        prefix: Annotated[Optional[StrictStr], Field(description="return items prefixed with this value")] = None,
        delimiter: Annotated[Optional[StrictStr], Field(description="delimiter used to group common prefixes by")] = None,
        type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DiffList:
        """diff references


        :param repository: (required)
        :type repository: str
        :param left_ref: a reference (could be either a branch or a commit ID) (required)
        :type left_ref: str
        :param right_ref: a reference (could be either a branch or a commit ID) to compare against (required)
        :type right_ref: str
        :param after: return items after this value
        :type after: str
        :param amount: how many items to return
        :type amount: int
        :param prefix: return items prefixed with this value
        :type prefix: str
        :param delimiter: delimiter used to group common prefixes by
        :type delimiter: str
        :param type:
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._diff_refs_serialize(
            repository=repository,
            left_ref=left_ref,
            right_ref=right_ref,
            after=after,
            amount=amount,
            prefix=prefix,
            delimiter=delimiter,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DiffList",
            '401': "Error",
            '404': "Error",
            '420': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def diff_refs_with_http_info(
        self,
        repository: StrictStr,
        left_ref: Annotated[StrictStr, Field(description="a reference (could be either a branch or a commit ID)")],
        right_ref: Annotated[StrictStr, Field(description="a reference (could be either a branch or a commit ID) to compare against")],
        after: Annotated[Optional[StrictStr], Field(description="return items after this value")] = None,
        amount: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=-1)]], Field(description="how many items to return")] = None,
        prefix: Annotated[Optional[StrictStr], Field(description="return items prefixed with this value")] = None,
        delimiter: Annotated[Optional[StrictStr], Field(description="delimiter used to group common prefixes by")] = None,
        type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DiffList]:
        """diff references


        :param repository: (required)
        :type repository: str
        :param left_ref: a reference (could be either a branch or a commit ID) (required)
        :type left_ref: str
        :param right_ref: a reference (could be either a branch or a commit ID) to compare against (required)
        :type right_ref: str
        :param after: return items after this value
        :type after: str
        :param amount: how many items to return
        :type amount: int
        :param prefix: return items prefixed with this value
        :type prefix: str
        :param delimiter: delimiter used to group common prefixes by
        :type delimiter: str
        :param type:
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._diff_refs_serialize(
            repository=repository,
            left_ref=left_ref,
            right_ref=right_ref,
            after=after,
            amount=amount,
            prefix=prefix,
            delimiter=delimiter,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DiffList",
            '401': "Error",
            '404': "Error",
            '420': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def diff_refs_without_preload_content(
        self,
        repository: StrictStr,
        left_ref: Annotated[StrictStr, Field(description="a reference (could be either a branch or a commit ID)")],
        right_ref: Annotated[StrictStr, Field(description="a reference (could be either a branch or a commit ID) to compare against")],
        after: Annotated[Optional[StrictStr], Field(description="return items after this value")] = None,
        amount: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=-1)]], Field(description="how many items to return")] = None,
        prefix: Annotated[Optional[StrictStr], Field(description="return items prefixed with this value")] = None,
        delimiter: Annotated[Optional[StrictStr], Field(description="delimiter used to group common prefixes by")] = None,
        type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """diff references


        :param repository: (required)
        :type repository: str
        :param left_ref: a reference (could be either a branch or a commit ID) (required)
        :type left_ref: str
        :param right_ref: a reference (could be either a branch or a commit ID) to compare against (required)
        :type right_ref: str
        :param after: return items after this value
        :type after: str
        :param amount: how many items to return
        :type amount: int
        :param prefix: return items prefixed with this value
        :type prefix: str
        :param delimiter: delimiter used to group common prefixes by
        :type delimiter: str
        :param type:
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._diff_refs_serialize(
            repository=repository,
            left_ref=left_ref,
            right_ref=right_ref,
            after=after,
            amount=amount,
            prefix=prefix,
            delimiter=delimiter,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DiffList",
            '401': "Error",
            '404': "Error",
            '420': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _diff_refs_serialize(
        self,
        repository,
        left_ref,
        right_ref,
        after,
        amount,
        prefix,
        delimiter,
        type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository is not None:
            _path_params['repository'] = repository
        if left_ref is not None:
            _path_params['leftRef'] = left_ref
        if right_ref is not None:
            _path_params['rightRef'] = right_ref
        # process the query parameters
        if after is not None:
            
            _query_params.append(('after', after))
            
        if amount is not None:
            
            _query_params.append(('amount', amount))
            
        if prefix is not None:
            
            _query_params.append(('prefix', prefix))
            
        if delimiter is not None:
            
            _query_params.append(('delimiter', delimiter))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basic_auth', 
            'cookie_auth', 
            'oidc_auth', 
            'saml_auth', 
            'jwt_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/repositories/{repository}/refs/{leftRef}/diff/{rightRef}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_merge_base(
        self,
        repository: StrictStr,
        source_ref: Annotated[StrictStr, Field(description="source ref")],
        destination_branch: Annotated[StrictStr, Field(description="destination branch name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FindMergeBaseResult:
        """find the merge base for 2 references


        :param repository: (required)
        :type repository: str
        :param source_ref: source ref (required)
        :type source_ref: str
        :param destination_branch: destination branch name (required)
        :type destination_branch: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_merge_base_serialize(
            repository=repository,
            source_ref=source_ref,
            destination_branch=destination_branch,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindMergeBaseResult",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '420': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_merge_base_with_http_info(
        self,
        repository: StrictStr,
        source_ref: Annotated[StrictStr, Field(description="source ref")],
        destination_branch: Annotated[StrictStr, Field(description="destination branch name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FindMergeBaseResult]:
        """find the merge base for 2 references


        :param repository: (required)
        :type repository: str
        :param source_ref: source ref (required)
        :type source_ref: str
        :param destination_branch: destination branch name (required)
        :type destination_branch: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_merge_base_serialize(
            repository=repository,
            source_ref=source_ref,
            destination_branch=destination_branch,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindMergeBaseResult",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '420': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_merge_base_without_preload_content(
        self,
        repository: StrictStr,
        source_ref: Annotated[StrictStr, Field(description="source ref")],
        destination_branch: Annotated[StrictStr, Field(description="destination branch name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """find the merge base for 2 references


        :param repository: (required)
        :type repository: str
        :param source_ref: source ref (required)
        :type source_ref: str
        :param destination_branch: destination branch name (required)
        :type destination_branch: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_merge_base_serialize(
            repository=repository,
            source_ref=source_ref,
            destination_branch=destination_branch,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindMergeBaseResult",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '420': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_merge_base_serialize(
        self,
        repository,
        source_ref,
        destination_branch,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository is not None:
            _path_params['repository'] = repository
        if source_ref is not None:
            _path_params['sourceRef'] = source_ref
        if destination_branch is not None:
            _path_params['destinationBranch'] = destination_branch
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basic_auth', 
            'cookie_auth', 
            'oidc_auth', 
            'saml_auth', 
            'jwt_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/repositories/{repository}/refs/{sourceRef}/merge/{destinationBranch}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def log_commits(
        self,
        repository: StrictStr,
        ref: StrictStr,
        after: Annotated[Optional[StrictStr], Field(description="return items after this value")] = None,
        amount: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=-1)]], Field(description="how many items to return")] = None,
        objects: Annotated[Optional[List[StrictStr]], Field(description="list of paths, each element is a path of a specific object")] = None,
        prefixes: Annotated[Optional[List[StrictStr]], Field(description="list of paths, each element is a path of a prefix")] = None,
        limit: Annotated[Optional[StrictBool], Field(description="limit the number of items in return to 'amount'. Without further indication on actual number of items.")] = None,
        first_parent: Annotated[Optional[StrictBool], Field(description="if set to true, follow only the first parent upon reaching a merge commit")] = None,
        since: Annotated[Optional[datetime], Field(description="Show commits more recent than a specific date-time. In case used with stop_at parameter, will stop at the first commit that meets any of the conditions.")] = None,
        stop_at: Annotated[Optional[StrictStr], Field(description="A reference to stop at. In case used with since parameter, will stop at the first commit that meets any of the conditions.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CommitList:
        """get commit log from ref. If both objects and prefixes are empty, return all commits.


        :param repository: (required)
        :type repository: str
        :param ref: (required)
        :type ref: str
        :param after: return items after this value
        :type after: str
        :param amount: how many items to return
        :type amount: int
        :param objects: list of paths, each element is a path of a specific object
        :type objects: List[str]
        :param prefixes: list of paths, each element is a path of a prefix
        :type prefixes: List[str]
        :param limit: limit the number of items in return to 'amount'. Without further indication on actual number of items.
        :type limit: bool
        :param first_parent: if set to true, follow only the first parent upon reaching a merge commit
        :type first_parent: bool
        :param since: Show commits more recent than a specific date-time. In case used with stop_at parameter, will stop at the first commit that meets any of the conditions.
        :type since: datetime
        :param stop_at: A reference to stop at. In case used with since parameter, will stop at the first commit that meets any of the conditions.
        :type stop_at: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._log_commits_serialize(
            repository=repository,
            ref=ref,
            after=after,
            amount=amount,
            objects=objects,
            prefixes=prefixes,
            limit=limit,
            first_parent=first_parent,
            since=since,
            stop_at=stop_at,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CommitList",
            '401': "Error",
            '404': "Error",
            '420': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def log_commits_with_http_info(
        self,
        repository: StrictStr,
        ref: StrictStr,
        after: Annotated[Optional[StrictStr], Field(description="return items after this value")] = None,
        amount: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=-1)]], Field(description="how many items to return")] = None,
        objects: Annotated[Optional[List[StrictStr]], Field(description="list of paths, each element is a path of a specific object")] = None,
        prefixes: Annotated[Optional[List[StrictStr]], Field(description="list of paths, each element is a path of a prefix")] = None,
        limit: Annotated[Optional[StrictBool], Field(description="limit the number of items in return to 'amount'. Without further indication on actual number of items.")] = None,
        first_parent: Annotated[Optional[StrictBool], Field(description="if set to true, follow only the first parent upon reaching a merge commit")] = None,
        since: Annotated[Optional[datetime], Field(description="Show commits more recent than a specific date-time. In case used with stop_at parameter, will stop at the first commit that meets any of the conditions.")] = None,
        stop_at: Annotated[Optional[StrictStr], Field(description="A reference to stop at. In case used with since parameter, will stop at the first commit that meets any of the conditions.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CommitList]:
        """get commit log from ref. If both objects and prefixes are empty, return all commits.


        :param repository: (required)
        :type repository: str
        :param ref: (required)
        :type ref: str
        :param after: return items after this value
        :type after: str
        :param amount: how many items to return
        :type amount: int
        :param objects: list of paths, each element is a path of a specific object
        :type objects: List[str]
        :param prefixes: list of paths, each element is a path of a prefix
        :type prefixes: List[str]
        :param limit: limit the number of items in return to 'amount'. Without further indication on actual number of items.
        :type limit: bool
        :param first_parent: if set to true, follow only the first parent upon reaching a merge commit
        :type first_parent: bool
        :param since: Show commits more recent than a specific date-time. In case used with stop_at parameter, will stop at the first commit that meets any of the conditions.
        :type since: datetime
        :param stop_at: A reference to stop at. In case used with since parameter, will stop at the first commit that meets any of the conditions.
        :type stop_at: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._log_commits_serialize(
            repository=repository,
            ref=ref,
            after=after,
            amount=amount,
            objects=objects,
            prefixes=prefixes,
            limit=limit,
            first_parent=first_parent,
            since=since,
            stop_at=stop_at,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CommitList",
            '401': "Error",
            '404': "Error",
            '420': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def log_commits_without_preload_content(
        self,
        repository: StrictStr,
        ref: StrictStr,
        after: Annotated[Optional[StrictStr], Field(description="return items after this value")] = None,
        amount: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=-1)]], Field(description="how many items to return")] = None,
        objects: Annotated[Optional[List[StrictStr]], Field(description="list of paths, each element is a path of a specific object")] = None,
        prefixes: Annotated[Optional[List[StrictStr]], Field(description="list of paths, each element is a path of a prefix")] = None,
        limit: Annotated[Optional[StrictBool], Field(description="limit the number of items in return to 'amount'. Without further indication on actual number of items.")] = None,
        first_parent: Annotated[Optional[StrictBool], Field(description="if set to true, follow only the first parent upon reaching a merge commit")] = None,
        since: Annotated[Optional[datetime], Field(description="Show commits more recent than a specific date-time. In case used with stop_at parameter, will stop at the first commit that meets any of the conditions.")] = None,
        stop_at: Annotated[Optional[StrictStr], Field(description="A reference to stop at. In case used with since parameter, will stop at the first commit that meets any of the conditions.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get commit log from ref. If both objects and prefixes are empty, return all commits.


        :param repository: (required)
        :type repository: str
        :param ref: (required)
        :type ref: str
        :param after: return items after this value
        :type after: str
        :param amount: how many items to return
        :type amount: int
        :param objects: list of paths, each element is a path of a specific object
        :type objects: List[str]
        :param prefixes: list of paths, each element is a path of a prefix
        :type prefixes: List[str]
        :param limit: limit the number of items in return to 'amount'. Without further indication on actual number of items.
        :type limit: bool
        :param first_parent: if set to true, follow only the first parent upon reaching a merge commit
        :type first_parent: bool
        :param since: Show commits more recent than a specific date-time. In case used with stop_at parameter, will stop at the first commit that meets any of the conditions.
        :type since: datetime
        :param stop_at: A reference to stop at. In case used with since parameter, will stop at the first commit that meets any of the conditions.
        :type stop_at: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._log_commits_serialize(
            repository=repository,
            ref=ref,
            after=after,
            amount=amount,
            objects=objects,
            prefixes=prefixes,
            limit=limit,
            first_parent=first_parent,
            since=since,
            stop_at=stop_at,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CommitList",
            '401': "Error",
            '404': "Error",
            '420': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _log_commits_serialize(
        self,
        repository,
        ref,
        after,
        amount,
        objects,
        prefixes,
        limit,
        first_parent,
        since,
        stop_at,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'objects': 'multi',
            'prefixes': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository is not None:
            _path_params['repository'] = repository
        if ref is not None:
            _path_params['ref'] = ref
        # process the query parameters
        if after is not None:
            
            _query_params.append(('after', after))
            
        if amount is not None:
            
            _query_params.append(('amount', amount))
            
        if objects is not None:
            
            _query_params.append(('objects', objects))
            
        if prefixes is not None:
            
            _query_params.append(('prefixes', prefixes))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if first_parent is not None:
            
            _query_params.append(('first_parent', first_parent))
            
        if since is not None:
            if isinstance(since, datetime):
                _query_params.append(
                    (
                        'since',
                        since.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('since', since))
            
        if stop_at is not None:
            
            _query_params.append(('stop_at', stop_at))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basic_auth', 
            'cookie_auth', 
            'oidc_auth', 
            'saml_auth', 
            'jwt_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/repositories/{repository}/refs/{ref}/commits',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def merge_into_branch(
        self,
        repository: StrictStr,
        source_ref: Annotated[StrictStr, Field(description="source ref")],
        destination_branch: Annotated[StrictStr, Field(description="destination branch name")],
        merge: Optional[Merge] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MergeResult:
        """merge references


        :param repository: (required)
        :type repository: str
        :param source_ref: source ref (required)
        :type source_ref: str
        :param destination_branch: destination branch name (required)
        :type destination_branch: str
        :param merge:
        :type merge: Merge
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._merge_into_branch_serialize(
            repository=repository,
            source_ref=source_ref,
            destination_branch=destination_branch,
            merge=merge,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MergeResult",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '409': "MergeResult",
            '412': "Error",
            '420': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def merge_into_branch_with_http_info(
        self,
        repository: StrictStr,
        source_ref: Annotated[StrictStr, Field(description="source ref")],
        destination_branch: Annotated[StrictStr, Field(description="destination branch name")],
        merge: Optional[Merge] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MergeResult]:
        """merge references


        :param repository: (required)
        :type repository: str
        :param source_ref: source ref (required)
        :type source_ref: str
        :param destination_branch: destination branch name (required)
        :type destination_branch: str
        :param merge:
        :type merge: Merge
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._merge_into_branch_serialize(
            repository=repository,
            source_ref=source_ref,
            destination_branch=destination_branch,
            merge=merge,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MergeResult",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '409': "MergeResult",
            '412': "Error",
            '420': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def merge_into_branch_without_preload_content(
        self,
        repository: StrictStr,
        source_ref: Annotated[StrictStr, Field(description="source ref")],
        destination_branch: Annotated[StrictStr, Field(description="destination branch name")],
        merge: Optional[Merge] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """merge references


        :param repository: (required)
        :type repository: str
        :param source_ref: source ref (required)
        :type source_ref: str
        :param destination_branch: destination branch name (required)
        :type destination_branch: str
        :param merge:
        :type merge: Merge
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._merge_into_branch_serialize(
            repository=repository,
            source_ref=source_ref,
            destination_branch=destination_branch,
            merge=merge,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MergeResult",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '409': "MergeResult",
            '412': "Error",
            '420': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _merge_into_branch_serialize(
        self,
        repository,
        source_ref,
        destination_branch,
        merge,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository is not None:
            _path_params['repository'] = repository
        if source_ref is not None:
            _path_params['sourceRef'] = source_ref
        if destination_branch is not None:
            _path_params['destinationBranch'] = destination_branch
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if merge is not None:
            _body_params = merge


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basic_auth', 
            'cookie_auth', 
            'oidc_auth', 
            'saml_auth', 
            'jwt_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/repositories/{repository}/refs/{sourceRef}/merge/{destinationBranch}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


