# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API

    The version of the OpenAPI document: 1.0.0
    Contact: services@treeverse.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class ResetCreation(BaseModel):
    """
    ResetCreation
    """
    operation: Optional[StrictStr] = Field('staged', description="The kind of reset operation to perform.  If \"staged\", uncommitted objects according to type.  If \"hard\", branch must contain no uncommitted objects, and will be reset to refer to ref. ")
    type: StrictStr = Field(..., description="Only allowed for operation=\"staged\".  Specifies what to reset according to path. ")
    ref: Optional[StrictStr] = Field(None, description="Only allowed for operation=\"hard\".  Branch will be reset to this ref. ")
    path: Optional[StrictStr] = None
    force: Optional[StrictBool] = False
    __properties = ["operation", "type", "ref", "path", "force"]

    @validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('staged', 'hard'):
            raise ValueError("must be one of enum values ('staged', 'hard')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('object', 'common_prefix', 'reset'):
            raise ValueError("must be one of enum values ('object', 'common_prefix', 'reset')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ResetCreation:
        """Create an instance of ResetCreation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ResetCreation:
        """Create an instance of ResetCreation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ResetCreation.parse_obj(obj)

        _obj = ResetCreation.parse_obj({
            "operation": obj.get("operation") if obj.get("operation") is not None else 'staged',
            "type": obj.get("type"),
            "ref": obj.get("ref"),
            "path": obj.get("path"),
            "force": obj.get("force") if obj.get("force") is not None else False
        })
        return _obj


