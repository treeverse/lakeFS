# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API

    The version of the OpenAPI document: 1.0.0
    Contact: services@treeverse.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class OtfDiffEntry(BaseModel):
    """
    OtfDiffEntry
    """
    id: StrictStr = Field(...)
    timestamp: StrictInt = Field(...)
    operation: StrictStr = Field(...)
    operation_content: Dict[str, Any] = Field(..., description="free form content describing the returned operation diff")
    operation_type: StrictStr = Field(..., description="the operation category (CUD)")
    __properties = ["id", "timestamp", "operation", "operation_content", "operation_type"]

    @validator('operation_type')
    def operation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('create', 'update', 'delete'):
            raise ValueError("must be one of enum values ('create', 'update', 'delete')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OtfDiffEntry:
        """Create an instance of OtfDiffEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OtfDiffEntry:
        """Create an instance of OtfDiffEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OtfDiffEntry.parse_obj(obj)

        _obj = OtfDiffEntry.parse_obj({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "operation": obj.get("operation"),
            "operation_content": obj.get("operation_content"),
            "operation_type": obj.get("operation_type")
        })
        return _obj


