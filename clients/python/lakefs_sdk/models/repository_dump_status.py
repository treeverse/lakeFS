# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API

    The version of the OpenAPI document: 1.0.0
    Contact: services@treeverse.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from lakefs_sdk.models.refs_dump import RefsDump

class RepositoryDumpStatus(BaseModel):
    """
    RepositoryDumpStatus
    """
    id: StrictStr = Field(..., description="ID of the task")
    done: StrictBool = Field(...)
    update_time: datetime = Field(...)
    error: Optional[StrictStr] = None
    refs: Optional[RefsDump] = None
    __properties = ["id", "done", "update_time", "error", "refs"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RepositoryDumpStatus:
        """Create an instance of RepositoryDumpStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of refs
        if self.refs:
            _dict['refs'] = self.refs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RepositoryDumpStatus:
        """Create an instance of RepositoryDumpStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RepositoryDumpStatus.parse_obj(obj)

        _obj = RepositoryDumpStatus.parse_obj({
            "id": obj.get("id"),
            "done": obj.get("done"),
            "update_time": obj.get("update_time"),
            "error": obj.get("error"),
            "refs": RefsDump.from_dict(obj.get("refs")) if obj.get("refs") is not None else None
        })
        return _obj


