# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API

    The version of the OpenAPI document: 1.0.0
    Contact: services@treeverse.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

try:
    from pydantic.v1 import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
except ImportError:
    from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CommitRecordCreation(BaseModel):
    """
    CommitRecordCreation
    """ # noqa: E501
    commit_id: StrictStr = Field(description="id of the commit record")
    version: Annotated[int, Field(le=1, strict=True, ge=0)] = Field(description="version of the commit record")
    committer: StrictStr = Field(description="committer of the commit record")
    message: StrictStr = Field(description="message of the commit record")
    metarange_id: StrictStr = Field(description="metarange_id of the commit record")
    creation_date: StrictInt = Field(description="Unix Epoch in seconds")
    parents: List[StrictStr] = Field(description="parents of the commit record")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="metadata of the commit record")
    generation: StrictInt = Field(description="generation of the commit record")
    force: Optional[StrictBool] = False
    __properties: ClassVar[List[str]] = ["commit_id", "version", "committer", "message", "metarange_id", "creation_date", "parents", "metadata", "generation", "force"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommitRecordCreation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommitRecordCreation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commit_id": obj.get("commit_id"),
            "version": obj.get("version"),
            "committer": obj.get("committer"),
            "message": obj.get("message"),
            "metarange_id": obj.get("metarange_id"),
            "creation_date": obj.get("creation_date"),
            "parents": obj.get("parents"),
            "metadata": obj.get("metadata"),
            "generation": obj.get("generation"),
            "force": obj.get("force") if obj.get("force") is not None else False
        })
        return _obj


