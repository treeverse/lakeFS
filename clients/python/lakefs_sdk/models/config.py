# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API

    The version of the OpenAPI document: 1.0.0
    Contact: services@treeverse.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

try:
    from pydantic.v1 import BaseModel, ConfigDict
except ImportError:
    from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from lakefs_sdk.models.storage_config import StorageConfig
from lakefs_sdk.models.version_config import VersionConfig
from typing import Optional, Set
from typing_extensions import Self

class Config(BaseModel):
    """
    Config
    """ # noqa: E501
    version_config: Optional[VersionConfig] = None
    storage_config: Optional[StorageConfig] = None
    storage_config_list: Optional[List[StorageConfig]] = None
    __properties: ClassVar[List[str]] = ["version_config", "storage_config", "storage_config_list"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of version_config
        if self.version_config:
            _dict['version_config'] = self.version_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_config
        if self.storage_config:
            _dict['storage_config'] = self.storage_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in storage_config_list (list)
        _items = []
        if self.storage_config_list:
            for _item_storage_config_list in self.storage_config_list:
                if _item_storage_config_list:
                    _items.append(_item_storage_config_list.to_dict())
            _dict['storage_config_list'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "version_config": VersionConfig.from_dict(obj["version_config"]) if obj.get("version_config") is not None else None,
            "storage_config": StorageConfig.from_dict(obj["storage_config"]) if obj.get("storage_config") is not None else None,
            "storage_config_list": [StorageConfig.from_dict(_item) for _item in obj["storage_config_list"]] if obj.get("storage_config_list") is not None else None
        })
        return _obj


