# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API

    The version of the OpenAPI document: 1.0.0
    Contact: services@treeverse.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
try:
    from pydantic.v1 import BaseModel, Field, StrictStr, conlist, constr, validator
except ImportError:
    from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator

class BranchProtectionRule(BaseModel):
    """
    BranchProtectionRule
    """
    pattern: constr(strict=True, min_length=1) = Field(..., description="fnmatch pattern for the branch name, supporting * and ? wildcards")
    blocked_actions: Optional[conlist(StrictStr)] = Field(None, description="List of actions to block on protected branches. If not specified, defaults to [\"staging_write\", \"commit\"]")
    __properties = ["pattern", "blocked_actions"]

    @validator('blocked_actions')
    def blocked_actions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('staging_write', 'commit', 'delete'):
                raise ValueError("each list item must be one of ('staging_write', 'commit', 'delete')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BranchProtectionRule:
        """Create an instance of BranchProtectionRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BranchProtectionRule:
        """Create an instance of BranchProtectionRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BranchProtectionRule.parse_obj(obj)

        _obj = BranchProtectionRule.parse_obj({
            "pattern": obj.get("pattern"),
            "blocked_actions": obj.get("blocked_actions")
        })
        return _obj


