# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API

    The version of the OpenAPI document: 0.1.0
    Contact: services@treeverse.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class StageRangeCreation(BaseModel):
    """
    StageRangeCreation
    """
    from_source_uri: StrictStr = Field(..., alias="fromSourceURI", description="The source location of the ingested files. Must match the lakeFS installation blockstore type.")
    after: StrictStr = Field(..., description="Only objects after this key would be ingested.")
    prepend: StrictStr = Field(..., description="A prefix to prepend to ingested objects.")
    continuation_token: Optional[StrictStr] = Field(None, description="Opaque. Client should pass the continuation_token received from server to continue creation ranges from the same key.")
    staging_token: Optional[StrictStr] = Field(None, description="Opaque. Client should pass staging_token if received from server on previous request")
    __properties = ["fromSourceURI", "after", "prepend", "continuation_token", "staging_token"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StageRangeCreation:
        """Create an instance of StageRangeCreation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StageRangeCreation:
        """Create an instance of StageRangeCreation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StageRangeCreation.parse_obj(obj)

        _obj = StageRangeCreation.parse_obj({
            "from_source_uri": obj.get("fromSourceURI"),
            "after": obj.get("after"),
            "prepend": obj.get("prepend"),
            "continuation_token": obj.get("continuation_token"),
            "staging_token": obj.get("staging_token")
        })
        return _obj


