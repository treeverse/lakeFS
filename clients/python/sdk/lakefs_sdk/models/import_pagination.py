# coding: utf-8

"""
    lakeFS API

    lakeFS HTTP API

    The version of the OpenAPI document: 0.1.0
    Contact: services@treeverse.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class ImportPagination(BaseModel):
    """
    ImportPagination
    """
    has_more: StrictBool = Field(..., description="More keys to be ingested.")
    continuation_token: Optional[StrictStr] = Field(None, description="Opaque. Token used to import the next range.")
    last_key: StrictStr = Field(..., description="Last object store key that was ingested.")
    staging_token: Optional[StrictStr] = Field(None, description="Staging token for skipped objects during ingest")
    __properties = ["has_more", "continuation_token", "last_key", "staging_token"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ImportPagination:
        """Create an instance of ImportPagination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImportPagination:
        """Create an instance of ImportPagination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ImportPagination.parse_obj(obj)

        _obj = ImportPagination.parse_obj({
            "has_more": obj.get("has_more"),
            "continuation_token": obj.get("continuation_token"),
            "last_key": obj.get("last_key"),
            "staging_token": obj.get("staging_token")
        })
        return _obj


