/*
 * lakeFS API
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.lakefs.clients.api;

import io.lakefs.clients.api.ApiException;
import io.lakefs.clients.api.model.Error;
import java.io.File;
import io.lakefs.clients.api.model.ObjectStageCreation;
import io.lakefs.clients.api.model.ObjectStats;
import io.lakefs.clients.api.model.ObjectStatsList;
import io.lakefs.clients.api.model.UnderlyingObjectProperties;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ObjectsApi
 */
@Ignore
public class ObjectsApiTest {

    private final ObjectsApi api = new ObjectsApi();

    
    /**
     * delete object
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteObjectTest() throws ApiException {
        String repository = null;
        String branch = null;
        String path = null;
        api.deleteObject(repository, branch, path);

        // TODO: test validations
    }
    
    /**
     * get object content
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getObjectTest() throws ApiException {
        String repository = null;
        String ref = null;
        String path = null;
        File response = api.getObject(repository, ref, path);

        // TODO: test validations
    }
    
    /**
     * get object properties on underlying storage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnderlyingPropertiesTest() throws ApiException {
        String repository = null;
        String ref = null;
        String path = null;
        UnderlyingObjectProperties response = api.getUnderlyingProperties(repository, ref, path);

        // TODO: test validations
    }
    
    /**
     * list objects under a given prefix
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listObjectsTest() throws ApiException {
        String repository = null;
        String ref = null;
        String prefix = null;
        String after = null;
        Integer amount = null;
        String delimiter = null;
        ObjectStatsList response = api.listObjects(repository, ref, prefix, after, amount, delimiter);

        // TODO: test validations
    }
    
    /**
     * stage an object\&quot;s metadata for the given branch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stageObjectTest() throws ApiException {
        String repository = null;
        String branch = null;
        String path = null;
        ObjectStageCreation objectStageCreation = null;
        ObjectStats response = api.stageObject(repository, branch, path, objectStageCreation);

        // TODO: test validations
    }
    
    /**
     * get object metadata
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void statObjectTest() throws ApiException {
        String repository = null;
        String ref = null;
        String path = null;
        ObjectStats response = api.statObject(repository, ref, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadObjectTest() throws ApiException {
        String repository = null;
        String branch = null;
        String path = null;
        String storageClass = null;
        String ifNoneMatch = null;
        File content = null;
        ObjectStats response = api.uploadObject(repository, branch, path, storageClass, ifNoneMatch, content);

        // TODO: test validations
    }
    
}
