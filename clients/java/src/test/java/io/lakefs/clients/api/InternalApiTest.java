/*
 * lakeFS API
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.lakefs.clients.api;

import io.lakefs.clients.api.ApiException;
import io.lakefs.clients.api.model.AuthCapabilities;
import io.lakefs.clients.api.model.BranchProtectionRule;
import io.lakefs.clients.api.model.CommPrefsInput;
import io.lakefs.clients.api.model.CredentialsWithSecret;
import io.lakefs.clients.api.model.Error;
import io.lakefs.clients.api.model.GarbageCollectionConfig;
import io.lakefs.clients.api.model.GarbageCollectionRules;
import io.lakefs.clients.api.model.InlineObject1;
import io.lakefs.clients.api.model.ObjectStageCreation;
import io.lakefs.clients.api.model.ObjectStats;
import io.lakefs.clients.api.model.RefsDump;
import io.lakefs.clients.api.model.Setup;
import io.lakefs.clients.api.model.SetupState;
import io.lakefs.clients.api.model.StatsEventsList;
import io.lakefs.clients.api.model.StorageConfig;
import io.lakefs.clients.api.model.StorageURI;
import io.lakefs.clients.api.model.VersionConfig;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InternalApi
 */
@Ignore
public class InternalApiTest {

    private final InternalApi api = new InternalApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBranchProtectionRulePreflightTest() throws ApiException {
        String repository = null;
                api.createBranchProtectionRulePreflight(repository);
        // TODO: test validations
    }
    
    /**
     * creates symlink files corresponding to the given directory
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSymlinkFileTest() throws ApiException {
        String repository = null;
        String branch = null;
        String location = null;
                StorageURI response = api.createSymlinkFile(repository, branch, location);
        // TODO: test validations
    }
    
    /**
     * Dump repository refs (tags, commits, branches) to object store Deprecated: a new API will introduce long running operations 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dumpRefsTest() throws ApiException {
        String repository = null;
                RefsDump response = api.dumpRefs(repository);
        // TODO: test validations
    }
    
    /**
     * list authentication capabilities supported
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthCapabilitiesTest() throws ApiException {
                AuthCapabilities response = api.getAuthCapabilities();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * get information of gc settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGarbageCollectionConfigTest() throws ApiException {
                GarbageCollectionConfig response = api.getGarbageCollectionConfig();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * get version of lakeFS server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLakeFSVersionTest() throws ApiException {
                VersionConfig response = api.getLakeFSVersion();
        // TODO: test validations
    }
    
    /**
     * check if the lakeFS installation is already set up
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSetupStateTest() throws ApiException {
                SetupState response = api.getSetupState();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * retrieve lakeFS storage configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStorageConfigTest() throws ApiException {
                StorageConfig response = api.getStorageConfig();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalCreateBranchProtectionRuleTest() throws ApiException {
        String repository = null;
        BranchProtectionRule branchProtectionRule = null;
                api.internalCreateBranchProtectionRule(repository, branchProtectionRule);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalDeleteBranchProtectionRuleTest() throws ApiException {
        String repository = null;
        InlineObject1 inlineObject1 = null;
                api.internalDeleteBranchProtectionRule(repository, inlineObject1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalDeleteGarbageCollectionRulesTest() throws ApiException {
        String repository = null;
                api.internalDeleteGarbageCollectionRules(repository);
        // TODO: test validations
    }
    
    /**
     * get branch protection rules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalGetBranchProtectionRulesTest() throws ApiException {
        String repository = null;
                List<BranchProtectionRule> response = api.internalGetBranchProtectionRules(repository);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalGetGarbageCollectionRulesTest() throws ApiException {
        String repository = null;
                GarbageCollectionRules response = api.internalGetGarbageCollectionRules(repository);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalSetGarbageCollectionRulesTest() throws ApiException {
        String repository = null;
        GarbageCollectionRules garbageCollectionRules = null;
                api.internalSetGarbageCollectionRules(repository, garbageCollectionRules);
        // TODO: test validations
    }
    
    /**
     * post stats events, this endpoint is meant for internal use only
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postStatsEventsTest() throws ApiException {
        StatsEventsList statsEventsList = null;
                api.postStatsEvents(statsEventsList);
        // TODO: test validations
    }
    
    /**
     * Restore repository refs (tags, commits, branches) from object store. Deprecated: a new API will introduce long running operations 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restoreRefsTest() throws ApiException {
        String repository = null;
        RefsDump refsDump = null;
                api.restoreRefs(repository, refsDump);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setGarbageCollectionRulesPreflightTest() throws ApiException {
        String repository = null;
                api.setGarbageCollectionRulesPreflight(repository);
        // TODO: test validations
    }
    
    /**
     * setup lakeFS and create a first user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setupTest() throws ApiException {
        Setup setup = null;
                CredentialsWithSecret response = api.setup(setup);
        // TODO: test validations
    }
    
    /**
     * setup communications preferences
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setupCommPrefsTest() throws ApiException {
        CommPrefsInput commPrefsInput = null;
                api.setupCommPrefs(commPrefsInput);
        // TODO: test validations
    }
    
    /**
     * stage an object&#39;s metadata for the given branch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stageObjectTest() throws ApiException {
        String repository = null;
        String branch = null;
        String path = null;
        ObjectStageCreation objectStageCreation = null;
                ObjectStats response = api.stageObject(repository, branch, path, objectStageCreation);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadObjectPreflightTest() throws ApiException {
        String repository = null;
        String branch = null;
        String path = null;
                api.uploadObjectPreflight(repository, branch, path);
        // TODO: test validations
    }
    
}
