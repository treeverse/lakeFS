/*
 * lakeFS API
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.lakefs.clients.sdk;

import io.lakefs.clients.sdk.ApiException;
import io.lakefs.clients.sdk.model.ACL;
import io.lakefs.clients.sdk.model.AuthenticationToken;
import io.lakefs.clients.sdk.model.Credentials;
import io.lakefs.clients.sdk.model.CredentialsList;
import io.lakefs.clients.sdk.model.CredentialsWithSecret;
import io.lakefs.clients.sdk.model.CurrentUser;
import io.lakefs.clients.sdk.model.Error;
import io.lakefs.clients.sdk.model.ErrorNoACL;
import io.lakefs.clients.sdk.model.ExternalLoginInformation;
import io.lakefs.clients.sdk.model.ExternalPrincipal;
import io.lakefs.clients.sdk.model.ExternalPrincipalCreation;
import io.lakefs.clients.sdk.model.ExternalPrincipalList;
import io.lakefs.clients.sdk.model.Group;
import io.lakefs.clients.sdk.model.GroupCreation;
import io.lakefs.clients.sdk.model.GroupList;
import io.lakefs.clients.sdk.model.LoginInformation;
import io.lakefs.clients.sdk.model.Policy;
import io.lakefs.clients.sdk.model.PolicyList;
import io.lakefs.clients.sdk.model.User;
import io.lakefs.clients.sdk.model.UserCreation;
import io.lakefs.clients.sdk.model.UserList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Disabled
public class AuthApiTest {

    private final AuthApi api = new AuthApi();

    /**
     * add group membership
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addGroupMembershipTest() throws ApiException {
        String groupId = null;
        String userId = null;
        api.addGroupMembership(groupId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * attach policy to group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachPolicyToGroupTest() throws ApiException {
        String groupId = null;
        String policyId = null;
        api.attachPolicyToGroup(groupId, policyId)
                .execute();
        // TODO: test validations
    }

    /**
     * attach policy to user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachPolicyToUserTest() throws ApiException {
        String userId = null;
        String policyId = null;
        api.attachPolicyToUser(userId, policyId)
                .execute();
        // TODO: test validations
    }

    /**
     * create credentials
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCredentialsTest() throws ApiException {
        String userId = null;
        CredentialsWithSecret response = api.createCredentials(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * create group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        GroupCreation groupCreation = null;
        Group response = api.createGroup()
                .groupCreation(groupCreation)
                .execute();
        // TODO: test validations
    }

    /**
     * create policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPolicyTest() throws ApiException {
        Policy policy = null;
        Policy response = api.createPolicy(policy)
                .execute();
        // TODO: test validations
    }

    /**
     * create user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        UserCreation userCreation = null;
        User response = api.createUser()
                .userCreation(userCreation)
                .execute();
        // TODO: test validations
    }

    /**
     * attach external principal to user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserExternalPrincipalTest() throws ApiException {
        String userId = null;
        String principalId = null;
        ExternalPrincipalCreation externalPrincipalCreation = null;
        api.createUserExternalPrincipal(userId, principalId)
                .externalPrincipalCreation(externalPrincipalCreation)
                .execute();
        // TODO: test validations
    }

    /**
     * delete credentials
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCredentialsTest() throws ApiException {
        String userId = null;
        String accessKeyId = null;
        api.deleteCredentials(userId, accessKeyId)
                .execute();
        // TODO: test validations
    }

    /**
     * delete group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        String groupId = null;
        api.deleteGroup(groupId)
                .execute();
        // TODO: test validations
    }

    /**
     * delete group membership
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupMembershipTest() throws ApiException {
        String groupId = null;
        String userId = null;
        api.deleteGroupMembership(groupId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * delete policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePolicyTest() throws ApiException {
        String policyId = null;
        api.deletePolicy(policyId)
                .execute();
        // TODO: test validations
    }

    /**
     * delete user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String userId = null;
        api.deleteUser(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * delete external principal from user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserExternalPrincipalTest() throws ApiException {
        String userId = null;
        String principalId = null;
        api.deleteUserExternalPrincipal(userId, principalId)
                .execute();
        // TODO: test validations
    }

    /**
     * detach policy from group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachPolicyFromGroupTest() throws ApiException {
        String groupId = null;
        String policyId = null;
        api.detachPolicyFromGroup(groupId, policyId)
                .execute();
        // TODO: test validations
    }

    /**
     * detach policy from user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachPolicyFromUserTest() throws ApiException {
        String userId = null;
        String policyId = null;
        api.detachPolicyFromUser(userId, policyId)
                .execute();
        // TODO: test validations
    }

    /**
     * perform a login using an external authenticator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void externalPrincipalLoginTest() throws ApiException {
        ExternalLoginInformation externalLoginInformation = null;
        AuthenticationToken response = api.externalPrincipalLogin()
                .externalLoginInformation(externalLoginInformation)
                .execute();
        // TODO: test validations
    }

    /**
     * get credentials
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCredentialsTest() throws ApiException {
        String userId = null;
        String accessKeyId = null;
        Credentials response = api.getCredentials(userId, accessKeyId)
                .execute();
        // TODO: test validations
    }

    /**
     * get current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserTest() throws ApiException {
        CurrentUser response = api.getCurrentUser()
                .execute();
        // TODO: test validations
    }

    /**
     * describe external principal by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExternalPrincipalTest() throws ApiException {
        String principalId = null;
        ExternalPrincipal response = api.getExternalPrincipal(principalId)
                .execute();
        // TODO: test validations
    }

    /**
     * get group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupTest() throws ApiException {
        String groupId = null;
        Group response = api.getGroup(groupId)
                .execute();
        // TODO: test validations
    }

    /**
     * get ACL of group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupACLTest() throws ApiException {
        String groupId = null;
        ACL response = api.getGroupACL(groupId)
                .execute();
        // TODO: test validations
    }

    /**
     * get policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyTest() throws ApiException {
        String policyId = null;
        Policy response = api.getPolicy(policyId)
                .execute();
        // TODO: test validations
    }

    /**
     * get user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String userId = null;
        User response = api.getUser(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * list group members
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupMembersTest() throws ApiException {
        String groupId = null;
        String prefix = null;
        String after = null;
        Integer amount = null;
        UserList response = api.listGroupMembers(groupId)
                .prefix(prefix)
                .after(after)
                .amount(amount)
                .execute();
        // TODO: test validations
    }

    /**
     * list group policies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupPoliciesTest() throws ApiException {
        String groupId = null;
        String prefix = null;
        String after = null;
        Integer amount = null;
        PolicyList response = api.listGroupPolicies(groupId)
                .prefix(prefix)
                .after(after)
                .amount(amount)
                .execute();
        // TODO: test validations
    }

    /**
     * list groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupsTest() throws ApiException {
        String prefix = null;
        String after = null;
        Integer amount = null;
        GroupList response = api.listGroups()
                .prefix(prefix)
                .after(after)
                .amount(amount)
                .execute();
        // TODO: test validations
    }

    /**
     * list policies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPoliciesTest() throws ApiException {
        String prefix = null;
        String after = null;
        Integer amount = null;
        PolicyList response = api.listPolicies()
                .prefix(prefix)
                .after(after)
                .amount(amount)
                .execute();
        // TODO: test validations
    }

    /**
     * list user credentials
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserCredentialsTest() throws ApiException {
        String userId = null;
        String prefix = null;
        String after = null;
        Integer amount = null;
        CredentialsList response = api.listUserCredentials(userId)
                .prefix(prefix)
                .after(after)
                .amount(amount)
                .execute();
        // TODO: test validations
    }

    /**
     * list user external policies attached to a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserExternalPrincipalsTest() throws ApiException {
        String userId = null;
        String prefix = null;
        String after = null;
        Integer amount = null;
        ExternalPrincipalList response = api.listUserExternalPrincipals(userId)
                .prefix(prefix)
                .after(after)
                .amount(amount)
                .execute();
        // TODO: test validations
    }

    /**
     * list user groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserGroupsTest() throws ApiException {
        String userId = null;
        String prefix = null;
        String after = null;
        Integer amount = null;
        GroupList response = api.listUserGroups(userId)
                .prefix(prefix)
                .after(after)
                .amount(amount)
                .execute();
        // TODO: test validations
    }

    /**
     * list user policies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserPoliciesTest() throws ApiException {
        String userId = null;
        String prefix = null;
        String after = null;
        Integer amount = null;
        Boolean effective = null;
        PolicyList response = api.listUserPolicies(userId)
                .prefix(prefix)
                .after(after)
                .amount(amount)
                .effective(effective)
                .execute();
        // TODO: test validations
    }

    /**
     * list users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        String prefix = null;
        String after = null;
        Integer amount = null;
        UserList response = api.listUsers()
                .prefix(prefix)
                .after(after)
                .amount(amount)
                .execute();
        // TODO: test validations
    }

    /**
     * perform a login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        LoginInformation loginInformation = null;
        AuthenticationToken response = api.login()
                .loginInformation(loginInformation)
                .execute();
        // TODO: test validations
    }

    /**
     * set ACL of group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setGroupACLTest() throws ApiException {
        String groupId = null;
        ACL ACL = null;
        api.setGroupACL(groupId, ACL)
                .execute();
        // TODO: test validations
    }

    /**
     * update policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePolicyTest() throws ApiException {
        String policyId = null;
        Policy policy = null;
        Policy response = api.updatePolicy(policyId, policy)
                .execute();
        // TODO: test validations
    }

}
