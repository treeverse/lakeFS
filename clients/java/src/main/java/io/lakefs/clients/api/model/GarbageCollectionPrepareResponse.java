/*
 * lakeFS API
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.lakefs.clients.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * GarbageCollectionPrepareResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GarbageCollectionPrepareResponse {
  public static final String SERIALIZED_NAME_RUN_ID = "run_id";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private String runId;

  public static final String SERIALIZED_NAME_GC_COMMITS_LOCATION = "gc_commits_location";
  @SerializedName(SERIALIZED_NAME_GC_COMMITS_LOCATION)
  private String gcCommitsLocation;

  public static final String SERIALIZED_NAME_GC_ADDRESSES_LOCATION = "gc_addresses_location";
  @SerializedName(SERIALIZED_NAME_GC_ADDRESSES_LOCATION)
  private String gcAddressesLocation;


  public GarbageCollectionPrepareResponse runId(String runId) {
    
    this.runId = runId;
    return this;
  }

   /**
   * a unique identifier generated for this GC job
   * @return runId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "64eaa103-d726-4a33-bcb8-7c0b4abfe09e", required = true, value = "a unique identifier generated for this GC job")

  public String getRunId() {
    return runId;
  }


  public void setRunId(String runId) {
    this.runId = runId;
  }


  public GarbageCollectionPrepareResponse gcCommitsLocation(String gcCommitsLocation) {
    
    this.gcCommitsLocation = gcCommitsLocation;
    return this;
  }

   /**
   * location of the resulting commits csv table (partitioned by run_id)
   * @return gcCommitsLocation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "s3://my-storage-namespace/_lakefs/retention/commits", required = true, value = "location of the resulting commits csv table (partitioned by run_id)")

  public String getGcCommitsLocation() {
    return gcCommitsLocation;
  }


  public void setGcCommitsLocation(String gcCommitsLocation) {
    this.gcCommitsLocation = gcCommitsLocation;
  }


  public GarbageCollectionPrepareResponse gcAddressesLocation(String gcAddressesLocation) {
    
    this.gcAddressesLocation = gcAddressesLocation;
    return this;
  }

   /**
   * location to use for expired addresses parquet table (partitioned by run_id)
   * @return gcAddressesLocation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "s3://my-storage-namespace/_lakefs/retention/addresses", required = true, value = "location to use for expired addresses parquet table (partitioned by run_id)")

  public String getGcAddressesLocation() {
    return gcAddressesLocation;
  }


  public void setGcAddressesLocation(String gcAddressesLocation) {
    this.gcAddressesLocation = gcAddressesLocation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GarbageCollectionPrepareResponse garbageCollectionPrepareResponse = (GarbageCollectionPrepareResponse) o;
    return Objects.equals(this.runId, garbageCollectionPrepareResponse.runId) &&
        Objects.equals(this.gcCommitsLocation, garbageCollectionPrepareResponse.gcCommitsLocation) &&
        Objects.equals(this.gcAddressesLocation, garbageCollectionPrepareResponse.gcAddressesLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(runId, gcCommitsLocation, gcAddressesLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GarbageCollectionPrepareResponse {\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    gcCommitsLocation: ").append(toIndentedString(gcCommitsLocation)).append("\n");
    sb.append("    gcAddressesLocation: ").append(toIndentedString(gcAddressesLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

