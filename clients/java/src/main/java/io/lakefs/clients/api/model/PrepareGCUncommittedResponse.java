/*
 * lakeFS API
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.lakefs.clients.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.lakefs.clients.api.JSON;

/**
 * PrepareGCUncommittedResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PrepareGCUncommittedResponse {
  public static final String SERIALIZED_NAME_RUN_ID = "run_id";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private String runId;

  public static final String SERIALIZED_NAME_GC_UNCOMMITTED_LOCATION = "gc_uncommitted_location";
  @SerializedName(SERIALIZED_NAME_GC_UNCOMMITTED_LOCATION)
  private String gcUncommittedLocation;

  public static final String SERIALIZED_NAME_CONTINUATION_TOKEN = "continuation_token";
  @SerializedName(SERIALIZED_NAME_CONTINUATION_TOKEN)
  private String continuationToken;

  public PrepareGCUncommittedResponse() {
  }

  public PrepareGCUncommittedResponse runId(String runId) {
    
    this.runId = runId;
    return this;
  }

   /**
   * Get runId
   * @return runId
  **/
  @javax.annotation.Nonnull

  public String getRunId() {
    return runId;
  }


  public void setRunId(String runId) {
    this.runId = runId;
  }


  public PrepareGCUncommittedResponse gcUncommittedLocation(String gcUncommittedLocation) {
    
    this.gcUncommittedLocation = gcUncommittedLocation;
    return this;
  }

   /**
   * location of uncommitted information data
   * @return gcUncommittedLocation
  **/
  @javax.annotation.Nonnull

  public String getGcUncommittedLocation() {
    return gcUncommittedLocation;
  }


  public void setGcUncommittedLocation(String gcUncommittedLocation) {
    this.gcUncommittedLocation = gcUncommittedLocation;
  }


  public PrepareGCUncommittedResponse continuationToken(String continuationToken) {
    
    this.continuationToken = continuationToken;
    return this;
  }

   /**
   * Get continuationToken
   * @return continuationToken
  **/
  @javax.annotation.Nullable

  public String getContinuationToken() {
    return continuationToken;
  }


  public void setContinuationToken(String continuationToken) {
    this.continuationToken = continuationToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrepareGCUncommittedResponse prepareGCUncommittedResponse = (PrepareGCUncommittedResponse) o;
    return Objects.equals(this.runId, prepareGCUncommittedResponse.runId) &&
        Objects.equals(this.gcUncommittedLocation, prepareGCUncommittedResponse.gcUncommittedLocation) &&
        Objects.equals(this.continuationToken, prepareGCUncommittedResponse.continuationToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(runId, gcUncommittedLocation, continuationToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrepareGCUncommittedResponse {\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    gcUncommittedLocation: ").append(toIndentedString(gcUncommittedLocation)).append("\n");
    sb.append("    continuationToken: ").append(toIndentedString(continuationToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("run_id");
    openapiFields.add("gc_uncommitted_location");
    openapiFields.add("continuation_token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("run_id");
    openapiRequiredFields.add("gc_uncommitted_location");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PrepareGCUncommittedResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PrepareGCUncommittedResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrepareGCUncommittedResponse is not found in the empty JSON string", PrepareGCUncommittedResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PrepareGCUncommittedResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrepareGCUncommittedResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PrepareGCUncommittedResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("run_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `run_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("run_id").toString()));
      }
      if (!jsonObj.get("gc_uncommitted_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gc_uncommitted_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gc_uncommitted_location").toString()));
      }
      if ((jsonObj.get("continuation_token") != null && !jsonObj.get("continuation_token").isJsonNull()) && !jsonObj.get("continuation_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continuation_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continuation_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrepareGCUncommittedResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrepareGCUncommittedResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrepareGCUncommittedResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrepareGCUncommittedResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PrepareGCUncommittedResponse>() {
           @Override
           public void write(JsonWriter out, PrepareGCUncommittedResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrepareGCUncommittedResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PrepareGCUncommittedResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PrepareGCUncommittedResponse
  * @throws IOException if the JSON string is invalid with respect to PrepareGCUncommittedResponse
  */
  public static PrepareGCUncommittedResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrepareGCUncommittedResponse.class);
  }

 /**
  * Convert an instance of PrepareGCUncommittedResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

