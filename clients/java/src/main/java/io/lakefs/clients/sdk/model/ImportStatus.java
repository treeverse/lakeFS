/*
 * lakeFS API
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.lakefs.clients.sdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.lakefs.clients.sdk.model.Commit;
import io.lakefs.clients.sdk.model.Error;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.lakefs.clients.sdk.JSON;

/**
 * ImportStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class ImportStatus {
  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  @javax.annotation.Nonnull
  private Boolean completed;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "update_time";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  @javax.annotation.Nonnull
  private OffsetDateTime updateTime;

  public static final String SERIALIZED_NAME_INGESTED_OBJECTS = "ingested_objects";
  @SerializedName(SERIALIZED_NAME_INGESTED_OBJECTS)
  @javax.annotation.Nullable
  private Long ingestedObjects;

  public static final String SERIALIZED_NAME_METARANGE_ID = "metarange_id";
  @SerializedName(SERIALIZED_NAME_METARANGE_ID)
  @javax.annotation.Nullable
  private String metarangeId;

  public static final String SERIALIZED_NAME_COMMIT = "commit";
  @SerializedName(SERIALIZED_NAME_COMMIT)
  @javax.annotation.Nullable
  private Commit commit;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nullable
  private Error error;

  public ImportStatus() {
  }

  public ImportStatus completed(@javax.annotation.Nonnull Boolean completed) {
    this.completed = completed;
    return this;
  }

  /**
   * Get completed
   * @return completed
   */
  @javax.annotation.Nonnull
  public Boolean getCompleted() {
    return completed;
  }

  public void setCompleted(@javax.annotation.Nonnull Boolean completed) {
    this.completed = completed;
  }


  public ImportStatus updateTime(@javax.annotation.Nonnull OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Get updateTime
   * @return updateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(@javax.annotation.Nonnull OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }


  public ImportStatus ingestedObjects(@javax.annotation.Nullable Long ingestedObjects) {
    this.ingestedObjects = ingestedObjects;
    return this;
  }

  /**
   * Number of objects processed so far
   * @return ingestedObjects
   */
  @javax.annotation.Nullable
  public Long getIngestedObjects() {
    return ingestedObjects;
  }

  public void setIngestedObjects(@javax.annotation.Nullable Long ingestedObjects) {
    this.ingestedObjects = ingestedObjects;
  }


  public ImportStatus metarangeId(@javax.annotation.Nullable String metarangeId) {
    this.metarangeId = metarangeId;
    return this;
  }

  /**
   * Get metarangeId
   * @return metarangeId
   */
  @javax.annotation.Nullable
  public String getMetarangeId() {
    return metarangeId;
  }

  public void setMetarangeId(@javax.annotation.Nullable String metarangeId) {
    this.metarangeId = metarangeId;
  }


  public ImportStatus commit(@javax.annotation.Nullable Commit commit) {
    this.commit = commit;
    return this;
  }

  /**
   * Get commit
   * @return commit
   */
  @javax.annotation.Nullable
  public Commit getCommit() {
    return commit;
  }

  public void setCommit(@javax.annotation.Nullable Commit commit) {
    this.commit = commit;
  }


  public ImportStatus error(@javax.annotation.Nullable Error error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Error getError() {
    return error;
  }

  public void setError(@javax.annotation.Nullable Error error) {
    this.error = error;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ImportStatus instance itself
   */
  public ImportStatus putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportStatus importStatus = (ImportStatus) o;
    return Objects.equals(this.completed, importStatus.completed) &&
        Objects.equals(this.updateTime, importStatus.updateTime) &&
        Objects.equals(this.ingestedObjects, importStatus.ingestedObjects) &&
        Objects.equals(this.metarangeId, importStatus.metarangeId) &&
        Objects.equals(this.commit, importStatus.commit) &&
        Objects.equals(this.error, importStatus.error)&&
        Objects.equals(this.additionalProperties, importStatus.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completed, updateTime, ingestedObjects, metarangeId, commit, error, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportStatus {\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    ingestedObjects: ").append(toIndentedString(ingestedObjects)).append("\n");
    sb.append("    metarangeId: ").append(toIndentedString(metarangeId)).append("\n");
    sb.append("    commit: ").append(toIndentedString(commit)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completed");
    openapiFields.add("update_time");
    openapiFields.add("ingested_objects");
    openapiFields.add("metarange_id");
    openapiFields.add("commit");
    openapiFields.add("error");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("completed");
    openapiRequiredFields.add("update_time");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportStatus is not found in the empty JSON string", ImportStatus.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportStatus.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("metarange_id") != null && !jsonObj.get("metarange_id").isJsonNull()) && !jsonObj.get("metarange_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metarange_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metarange_id").toString()));
      }
      // validate the optional field `commit`
      if (jsonObj.get("commit") != null && !jsonObj.get("commit").isJsonNull()) {
        Commit.validateJsonElement(jsonObj.get("commit"));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        Error.validateJsonElement(jsonObj.get("error"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportStatus>() {
           @Override
           public void write(JsonWriter out, ImportStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ImportStatus instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportStatus
   * @throws IOException if the JSON string is invalid with respect to ImportStatus
   */
  public static ImportStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportStatus.class);
  }

  /**
   * Convert an instance of ImportStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

