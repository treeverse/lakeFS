/*
 * lakeFS API
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.lakefs.clients.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * FindMergeBaseResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FindMergeBaseResult {
  public static final String SERIALIZED_NAME_SOURCE_COMMIT_I_D = "SourceCommitID";
  @SerializedName(SERIALIZED_NAME_SOURCE_COMMIT_I_D)
  private String sourceCommitID;

  public static final String SERIALIZED_NAME_DESTINATION_COMMIT_I_D = "DestinationCommitID";
  @SerializedName(SERIALIZED_NAME_DESTINATION_COMMIT_I_D)
  private String destinationCommitID;

  public static final String SERIALIZED_NAME_BASE_COMMIT_I_D = "BaseCommitID";
  @SerializedName(SERIALIZED_NAME_BASE_COMMIT_I_D)
  private String baseCommitID;


  public FindMergeBaseResult sourceCommitID(String sourceCommitID) {
    
    this.sourceCommitID = sourceCommitID;
    return this;
  }

   /**
   * The commit ID of the merge source
   * @return sourceCommitID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The commit ID of the merge source")

  public String getSourceCommitID() {
    return sourceCommitID;
  }


  public void setSourceCommitID(String sourceCommitID) {
    this.sourceCommitID = sourceCommitID;
  }


  public FindMergeBaseResult destinationCommitID(String destinationCommitID) {
    
    this.destinationCommitID = destinationCommitID;
    return this;
  }

   /**
   * The commit ID of the merge destination
   * @return destinationCommitID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The commit ID of the merge destination")

  public String getDestinationCommitID() {
    return destinationCommitID;
  }


  public void setDestinationCommitID(String destinationCommitID) {
    this.destinationCommitID = destinationCommitID;
  }


  public FindMergeBaseResult baseCommitID(String baseCommitID) {
    
    this.baseCommitID = baseCommitID;
    return this;
  }

   /**
   * The commit ID of the merge base
   * @return baseCommitID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The commit ID of the merge base")

  public String getBaseCommitID() {
    return baseCommitID;
  }


  public void setBaseCommitID(String baseCommitID) {
    this.baseCommitID = baseCommitID;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindMergeBaseResult findMergeBaseResult = (FindMergeBaseResult) o;
    return Objects.equals(this.sourceCommitID, findMergeBaseResult.sourceCommitID) &&
        Objects.equals(this.destinationCommitID, findMergeBaseResult.destinationCommitID) &&
        Objects.equals(this.baseCommitID, findMergeBaseResult.baseCommitID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceCommitID, destinationCommitID, baseCommitID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindMergeBaseResult {\n");
    sb.append("    sourceCommitID: ").append(toIndentedString(sourceCommitID)).append("\n");
    sb.append("    destinationCommitID: ").append(toIndentedString(destinationCommitID)).append("\n");
    sb.append("    baseCommitID: ").append(toIndentedString(baseCommitID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

