/*
 * lakeFS API
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.lakefs.clients.sdk;

import io.lakefs.clients.sdk.ApiCallback;
import io.lakefs.clients.sdk.ApiClient;
import io.lakefs.clients.sdk.ApiException;
import io.lakefs.clients.sdk.ApiResponse;
import io.lakefs.clients.sdk.Configuration;
import io.lakefs.clients.sdk.Pair;
import io.lakefs.clients.sdk.ProgressRequestBody;
import io.lakefs.clients.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.lakefs.clients.sdk.model.Error;
import io.lakefs.clients.sdk.model.IcebergPullRequest;
import io.lakefs.clients.sdk.model.IcebergPushRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RemotesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RemotesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RemotesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call pullIcebergTableCall(String catalog, IcebergPullRequest icebergPullRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = icebergPullRequest;

        // create path and map variables
        String localVarPath = "/iceberg/remotes/{catalog}/pull"
            .replace("{" + "catalog" + "}", localVarApiClient.escapeString(catalog.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic_auth", "cookie_auth", "oidc_auth", "saml_auth", "jwt_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullIcebergTableValidateBeforeCall(String catalog, IcebergPullRequest icebergPullRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalog' is set
        if (catalog == null) {
            throw new ApiException("Missing the required parameter 'catalog' when calling pullIcebergTable(Async)");
        }

        return pullIcebergTableCall(catalog, icebergPullRequest, _callback);

    }


    private ApiResponse<Void> pullIcebergTableWithHttpInfo(String catalog, IcebergPullRequest icebergPullRequest) throws ApiException {
        okhttp3.Call localVarCall = pullIcebergTableValidateBeforeCall(catalog, icebergPullRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call pullIcebergTableAsync(String catalog, IcebergPullRequest icebergPullRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullIcebergTableValidateBeforeCall(catalog, icebergPullRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIpullIcebergTableRequest {
        private final String catalog;
        private IcebergPullRequest icebergPullRequest;

        private APIpullIcebergTableRequest(String catalog) {
            this.catalog = catalog;
        }

        /**
         * Set icebergPullRequest
         * @param icebergPullRequest  (optional)
         * @return APIpullIcebergTableRequest
         */
        public APIpullIcebergTableRequest icebergPullRequest(IcebergPullRequest icebergPullRequest) {
            this.icebergPullRequest = icebergPullRequest;
            return this;
        }

        /**
         * Build call for pullIcebergTable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully pulled table from remote </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pullIcebergTableCall(catalog, icebergPullRequest, _callback);
        }

        /**
         * Execute pullIcebergTable request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully pulled table from remote </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            pullIcebergTableWithHttpInfo(catalog, icebergPullRequest);
        }

        /**
         * Execute pullIcebergTable request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully pulled table from remote </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return pullIcebergTableWithHttpInfo(catalog, icebergPullRequest);
        }

        /**
         * Execute pullIcebergTable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully pulled table from remote </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return pullIcebergTableAsync(catalog, icebergPullRequest, _callback);
        }
    }

    /**
     * take a table previously pushed from lakeFS into a remote catalog, and pull its state back into the originating lakeFS repository
     * 
     * @param catalog  (required)
     * @return APIpullIcebergTableRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successfully pulled table from remote </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public APIpullIcebergTableRequest pullIcebergTable(String catalog) {
        return new APIpullIcebergTableRequest(catalog);
    }
    private okhttp3.Call pushIcebergTableCall(String catalog, IcebergPushRequest icebergPushRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = icebergPushRequest;

        // create path and map variables
        String localVarPath = "/iceberg/remotes/{catalog}/push"
            .replace("{" + "catalog" + "}", localVarApiClient.escapeString(catalog.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic_auth", "cookie_auth", "oidc_auth", "saml_auth", "jwt_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pushIcebergTableValidateBeforeCall(String catalog, IcebergPushRequest icebergPushRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalog' is set
        if (catalog == null) {
            throw new ApiException("Missing the required parameter 'catalog' when calling pushIcebergTable(Async)");
        }

        return pushIcebergTableCall(catalog, icebergPushRequest, _callback);

    }


    private ApiResponse<Void> pushIcebergTableWithHttpInfo(String catalog, IcebergPushRequest icebergPushRequest) throws ApiException {
        okhttp3.Call localVarCall = pushIcebergTableValidateBeforeCall(catalog, icebergPushRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call pushIcebergTableAsync(String catalog, IcebergPushRequest icebergPushRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pushIcebergTableValidateBeforeCall(catalog, icebergPushRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIpushIcebergTableRequest {
        private final String catalog;
        private IcebergPushRequest icebergPushRequest;

        private APIpushIcebergTableRequest(String catalog) {
            this.catalog = catalog;
        }

        /**
         * Set icebergPushRequest
         * @param icebergPushRequest  (optional)
         * @return APIpushIcebergTableRequest
         */
        public APIpushIcebergTableRequest icebergPushRequest(IcebergPushRequest icebergPushRequest) {
            this.icebergPushRequest = icebergPushRequest;
            return this;
        }

        /**
         * Build call for pushIcebergTable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully pushed table to remote </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pushIcebergTableCall(catalog, icebergPushRequest, _callback);
        }

        /**
         * Execute pushIcebergTable request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully pushed table to remote </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            pushIcebergTableWithHttpInfo(catalog, icebergPushRequest);
        }

        /**
         * Execute pushIcebergTable request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully pushed table to remote </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return pushIcebergTableWithHttpInfo(catalog, icebergPushRequest);
        }

        /**
         * Execute pushIcebergTable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully pushed table to remote </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return pushIcebergTableAsync(catalog, icebergPushRequest, _callback);
        }
    }

    /**
     * register existing lakeFS table in remote catalog
     * 
     * @param catalog  (required)
     * @return APIpushIcebergTableRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successfully pushed table to remote </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public APIpushIcebergTableRequest pushIcebergTable(String catalog) {
        return new APIpushIcebergTableRequest(catalog);
    }
}
