/*
 * lakeFS API
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.lakefs.clients.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.lakefs.clients.api.JSON;

/**
 * VersionConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VersionConfig {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_UPGRADE_RECOMMENDED = "upgrade_recommended";
  @SerializedName(SERIALIZED_NAME_UPGRADE_RECOMMENDED)
  private Boolean upgradeRecommended;

  public static final String SERIALIZED_NAME_UPGRADE_URL = "upgrade_url";
  @SerializedName(SERIALIZED_NAME_UPGRADE_URL)
  private String upgradeUrl;

  public VersionConfig() {
  }

  public VersionConfig version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public VersionConfig upgradeRecommended(Boolean upgradeRecommended) {
    
    this.upgradeRecommended = upgradeRecommended;
    return this;
  }

   /**
   * Get upgradeRecommended
   * @return upgradeRecommended
  **/
  @javax.annotation.Nullable

  public Boolean getUpgradeRecommended() {
    return upgradeRecommended;
  }


  public void setUpgradeRecommended(Boolean upgradeRecommended) {
    this.upgradeRecommended = upgradeRecommended;
  }


  public VersionConfig upgradeUrl(String upgradeUrl) {
    
    this.upgradeUrl = upgradeUrl;
    return this;
  }

   /**
   * Get upgradeUrl
   * @return upgradeUrl
  **/
  @javax.annotation.Nullable

  public String getUpgradeUrl() {
    return upgradeUrl;
  }


  public void setUpgradeUrl(String upgradeUrl) {
    this.upgradeUrl = upgradeUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionConfig versionConfig = (VersionConfig) o;
    return Objects.equals(this.version, versionConfig.version) &&
        Objects.equals(this.upgradeRecommended, versionConfig.upgradeRecommended) &&
        Objects.equals(this.upgradeUrl, versionConfig.upgradeUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, upgradeRecommended, upgradeUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionConfig {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    upgradeRecommended: ").append(toIndentedString(upgradeRecommended)).append("\n");
    sb.append("    upgradeUrl: ").append(toIndentedString(upgradeUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("upgrade_recommended");
    openapiFields.add("upgrade_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VersionConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VersionConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VersionConfig is not found in the empty JSON string", VersionConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!VersionConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VersionConfig` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("upgrade_url") != null && !jsonObj.get("upgrade_url").isJsonNull()) && !jsonObj.get("upgrade_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgrade_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgrade_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VersionConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VersionConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VersionConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VersionConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<VersionConfig>() {
           @Override
           public void write(JsonWriter out, VersionConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VersionConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VersionConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VersionConfig
  * @throws IOException if the JSON string is invalid with respect to VersionConfig
  */
  public static VersionConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VersionConfig.class);
  }

 /**
  * Convert an instance of VersionConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

