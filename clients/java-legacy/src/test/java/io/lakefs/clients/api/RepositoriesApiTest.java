/*
 * lakeFS API
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.lakefs.clients.api;

import io.lakefs.clients.api.ApiException;
import io.lakefs.clients.api.model.BranchProtectionRule;
import io.lakefs.clients.api.model.Error;
import io.lakefs.clients.api.model.GarbageCollectionRules;
import io.lakefs.clients.api.model.Repository;
import io.lakefs.clients.api.model.RepositoryCreation;
import io.lakefs.clients.api.model.RepositoryList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RepositoriesApi
 */
@Ignore
public class RepositoriesApiTest {

    private final RepositoriesApi api = new RepositoriesApi();

    
    /**
     * create repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepositoryTest() throws ApiException {
        RepositoryCreation repositoryCreation = null;
        Boolean bare = null;
                Repository response = api.createRepository(repositoryCreation, bare);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGCRulesTest() throws ApiException {
        String repository = null;
                api.deleteGCRules(repository);
        // TODO: test validations
    }
    
    /**
     * delete repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRepositoryTest() throws ApiException {
        String repository = null;
                api.deleteRepository(repository);
        // TODO: test validations
    }
    
    /**
     * get branch protection rules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBranchProtectionRulesTest() throws ApiException {
        String repository = null;
                List<BranchProtectionRule> response = api.getBranchProtectionRules(repository);
        // TODO: test validations
    }
    
    /**
     * get repository GC rules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGCRulesTest() throws ApiException {
        String repository = null;
                GarbageCollectionRules response = api.getGCRules(repository);
        // TODO: test validations
    }
    
    /**
     * get repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepositoryTest() throws ApiException {
        String repository = null;
                Repository response = api.getRepository(repository);
        // TODO: test validations
    }
    
    /**
     * get repository metadata
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepositoryMetadataTest() throws ApiException {
        String repository = null;
                Map<String, String> response = api.getRepositoryMetadata(repository);
        // TODO: test validations
    }
    
    /**
     * list repositories
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRepositoriesTest() throws ApiException {
        String prefix = null;
        String after = null;
        Integer amount = null;
                RepositoryList response = api.listRepositories(prefix, after, amount);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBranchProtectionRulesTest() throws ApiException {
        String repository = null;
        List<BranchProtectionRule> branchProtectionRule = null;
        String ifMatch = null;
                api.setBranchProtectionRules(repository, branchProtectionRule, ifMatch);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setGCRulesTest() throws ApiException {
        String repository = null;
        GarbageCollectionRules garbageCollectionRules = null;
                api.setGCRules(repository, garbageCollectionRules);
        // TODO: test validations
    }
    
}
