/*
 * lakeFS API
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.lakefs.clients.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * PullRequestAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PullRequestAllOf {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_SOURCE_BRANCH = "source_branch";
  @SerializedName(SERIALIZED_NAME_SOURCE_BRANCH)
  private String sourceBranch;

  public static final String SERIALIZED_NAME_DESTINATION_BRANCH = "destination_branch";
  @SerializedName(SERIALIZED_NAME_DESTINATION_BRANCH)
  private String destinationBranch;

  public static final String SERIALIZED_NAME_MERGED_COMMIT_ID = "merged_commit_id";
  @SerializedName(SERIALIZED_NAME_MERGED_COMMIT_ID)
  private String mergedCommitId;

  public static final String SERIALIZED_NAME_CLOSED_DATE = "closed_date";
  @SerializedName(SERIALIZED_NAME_CLOSED_DATE)
  private OffsetDateTime closedDate;


  public PullRequestAllOf id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public PullRequestAllOf creationDate(OffsetDateTime creationDate) {
    
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public PullRequestAllOf author(String author) {
    
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAuthor() {
    return author;
  }


  public void setAuthor(String author) {
    this.author = author;
  }


  public PullRequestAllOf sourceBranch(String sourceBranch) {
    
    this.sourceBranch = sourceBranch;
    return this;
  }

   /**
   * Get sourceBranch
   * @return sourceBranch
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSourceBranch() {
    return sourceBranch;
  }


  public void setSourceBranch(String sourceBranch) {
    this.sourceBranch = sourceBranch;
  }


  public PullRequestAllOf destinationBranch(String destinationBranch) {
    
    this.destinationBranch = destinationBranch;
    return this;
  }

   /**
   * Get destinationBranch
   * @return destinationBranch
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDestinationBranch() {
    return destinationBranch;
  }


  public void setDestinationBranch(String destinationBranch) {
    this.destinationBranch = destinationBranch;
  }


  public PullRequestAllOf mergedCommitId(String mergedCommitId) {
    
    this.mergedCommitId = mergedCommitId;
    return this;
  }

   /**
   * the commit id of merged PRs
   * @return mergedCommitId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the commit id of merged PRs")

  public String getMergedCommitId() {
    return mergedCommitId;
  }


  public void setMergedCommitId(String mergedCommitId) {
    this.mergedCommitId = mergedCommitId;
  }


  public PullRequestAllOf closedDate(OffsetDateTime closedDate) {
    
    this.closedDate = closedDate;
    return this;
  }

   /**
   * Get closedDate
   * @return closedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getClosedDate() {
    return closedDate;
  }


  public void setClosedDate(OffsetDateTime closedDate) {
    this.closedDate = closedDate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullRequestAllOf pullRequestAllOf = (PullRequestAllOf) o;
    return Objects.equals(this.id, pullRequestAllOf.id) &&
        Objects.equals(this.creationDate, pullRequestAllOf.creationDate) &&
        Objects.equals(this.author, pullRequestAllOf.author) &&
        Objects.equals(this.sourceBranch, pullRequestAllOf.sourceBranch) &&
        Objects.equals(this.destinationBranch, pullRequestAllOf.destinationBranch) &&
        Objects.equals(this.mergedCommitId, pullRequestAllOf.mergedCommitId) &&
        Objects.equals(this.closedDate, pullRequestAllOf.closedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, creationDate, author, sourceBranch, destinationBranch, mergedCommitId, closedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullRequestAllOf {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    sourceBranch: ").append(toIndentedString(sourceBranch)).append("\n");
    sb.append("    destinationBranch: ").append(toIndentedString(destinationBranch)).append("\n");
    sb.append("    mergedCommitId: ").append(toIndentedString(mergedCommitId)).append("\n");
    sb.append("    closedDate: ").append(toIndentedString(closedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

