// Code generated by MockGen. DO NOT EDIT.
// Source: graveler/committed/sstable/serialization.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	graveler "github.com/treeverse/lakefs/graveler"
	reflect "reflect"
)

// Mockserializer is a mock of serializer interface
type Mockserializer struct {
	ctrl     *gomock.Controller
	recorder *MockserializerMockRecorder
}

// MockserializerMockRecorder is the mock recorder for Mockserializer
type MockserializerMockRecorder struct {
	mock *Mockserializer
}

// NewMockserializer creates a new mock instance
func NewMockserializer(ctrl *gomock.Controller) *Mockserializer {
	mock := &Mockserializer{ctrl: ctrl}
	mock.recorder = &MockserializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockserializer) EXPECT() *MockserializerMockRecorder {
	return m.recorder
}

// SerializeValue mocks base method
func (m *Mockserializer) SerializeValue(inVal graveler.Value) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SerializeValue", inVal)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SerializeValue indicates an expected call of SerializeValue
func (mr *MockserializerMockRecorder) SerializeValue(inVal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SerializeValue", reflect.TypeOf((*Mockserializer)(nil).SerializeValue), inVal)
}

// DeserializeValue mocks base method
func (m *Mockserializer) DeserializeValue(bytes []byte) (*graveler.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeserializeValue", bytes)
	ret0, _ := ret[0].(*graveler.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeserializeValue indicates an expected call of DeserializeValue
func (mr *MockserializerMockRecorder) DeserializeValue(bytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeserializeValue", reflect.TypeOf((*Mockserializer)(nil).DeserializeValue), bytes)
}
