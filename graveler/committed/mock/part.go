// Code generated by MockGen. DO NOT EDIT.
// Source: graveler/committed/part.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	graveler "github.com/treeverse/lakefs/graveler"
	committed "github.com/treeverse/lakefs/graveler/committed"
	reflect "reflect"
)

// MockPartManager is a mock of PartManager interface
type MockPartManager struct {
	ctrl     *gomock.Controller
	recorder *MockPartManagerMockRecorder
}

// MockPartManagerMockRecorder is the mock recorder for MockPartManager
type MockPartManagerMockRecorder struct {
	mock *MockPartManager
}

// NewMockPartManager creates a new mock instance
func NewMockPartManager(ctrl *gomock.Controller) *MockPartManager {
	mock := &MockPartManager{ctrl: ctrl}
	mock.recorder = &MockPartManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPartManager) EXPECT() *MockPartManagerMockRecorder {
	return m.recorder
}

// GetValue mocks base method
func (m *MockPartManager) GetValue(ns committed.Namespace, key graveler.Key, pid committed.ID) (*graveler.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", ns, key, pid)
	ret0, _ := ret[0].(*graveler.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue
func (mr *MockPartManagerMockRecorder) GetValue(ns, key, pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockPartManager)(nil).GetValue), ns, key, pid)
}

// NewPartIterator mocks base method
func (m *MockPartManager) NewPartIterator(ns committed.Namespace, pid committed.ID, from graveler.Key) (graveler.ValueIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPartIterator", ns, pid, from)
	ret0, _ := ret[0].(graveler.ValueIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPartIterator indicates an expected call of NewPartIterator
func (mr *MockPartManagerMockRecorder) NewPartIterator(ns, pid, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPartIterator", reflect.TypeOf((*MockPartManager)(nil).NewPartIterator), ns, pid, from)
}

// GetWriter mocks base method
func (m *MockPartManager) GetWriter(ns committed.Namespace) (committed.Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWriter", ns)
	ret0, _ := ret[0].(committed.Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWriter indicates an expected call of GetWriter
func (mr *MockPartManagerMockRecorder) GetWriter(ns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWriter", reflect.TypeOf((*MockPartManager)(nil).GetWriter), ns)
}

// MockWriter is a mock of Writer interface
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// WriteRecord mocks base method
func (m *MockWriter) WriteRecord(record graveler.ValueRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRecord", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRecord indicates an expected call of WriteRecord
func (mr *MockWriterMockRecorder) WriteRecord(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRecord", reflect.TypeOf((*MockWriter)(nil).WriteRecord), record)
}

// Close mocks base method
func (m *MockWriter) Close() (*committed.WriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(*committed.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close
func (mr *MockWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriter)(nil).Close))
}

// MockBatchWriterCloser is a mock of BatchWriterCloser interface
type MockBatchWriterCloser struct {
	ctrl     *gomock.Controller
	recorder *MockBatchWriterCloserMockRecorder
}

// MockBatchWriterCloserMockRecorder is the mock recorder for MockBatchWriterCloser
type MockBatchWriterCloserMockRecorder struct {
	mock *MockBatchWriterCloser
}

// NewMockBatchWriterCloser creates a new mock instance
func NewMockBatchWriterCloser(ctrl *gomock.Controller) *MockBatchWriterCloser {
	mock := &MockBatchWriterCloser{ctrl: ctrl}
	mock.recorder = &MockBatchWriterCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatchWriterCloser) EXPECT() *MockBatchWriterCloserMockRecorder {
	return m.recorder
}

// CloseWriterAsync mocks base method
func (m *MockBatchWriterCloser) CloseWriterAsync(arg0 committed.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWriterAsync", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWriterAsync indicates an expected call of CloseWriterAsync
func (mr *MockBatchWriterCloserMockRecorder) CloseWriterAsync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWriterAsync", reflect.TypeOf((*MockBatchWriterCloser)(nil).CloseWriterAsync), arg0)
}

// Wait mocks base method
func (m *MockBatchWriterCloser) Wait() ([]committed.WriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].([]committed.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait
func (mr *MockBatchWriterCloserMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockBatchWriterCloser)(nil).Wait))
}
