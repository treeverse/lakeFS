version: "3"
services:

  lakefs-setup:
    image: treeverse/lakefs:latest
    container_name: lakefs-setup
    networks:
      - lakefs-network
    depends_on:
      - postgres
      - minio-setup
    environment:
      - LAKEFS_AUTH_ENCRYPT_SECRET_KEY=some random secret string
      - LAKEFS_DATABASE_CONNECTION_STRING=postgres://lakefs:lakefs@postgres/postgres?sslmode=disable
      - LAKECTL_CREDENTIALS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
      - LAKECTL_CREDENTIALS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
      - LAKECTL_SERVER_ENDPOINT_URL=http://lakefs:8000
    entrypoint: ["/app/wait-for", "postgres:5432", "--", "sh", "-c",
      "lakefs setup --user-name docker --access-key-id AKIAIOSFODNN7EXAMPLE --secret-access-key wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY && lakectl repo create lakefs://example s3://example"
      ]

  minio-setup:
    image: minio/mc
    container_name: minio-setup
    networks:
      - lakefs-network
    environment:
        - MC_HOST_lakefs=http://minioadmin:minioadmin@minio:9000
    depends_on:
      - minio
    command: ["mb", "lakefs/example"]

  minio:
    image: minio/minio
    container_name: minio
    networks:
      - lakefs-network
    ports:
      - 9000:9000
      - 9001:9001
    entrypoint: ["minio", "server", "/data", "--console-address", ":9001"]

  lakefs:
    image: treeverse/lakefs:latest
    container_name: lakefs
    networks:
      - lakefs-network
    ports:
      - 8000:8000
    depends_on:
      - postgres
    environment:
      - LAKEFS_BLOCKSTORE_TYPE=s3
      - LAKEFS_BLOCKSTORE_S3_FORCE_PATH_STYLE=true
      - LAKEFS_BLOCKSTORE_S3_ENDPOINT=http://minio:9000
      - LAKEFS_BLOCKSTORE_S3_CREDENTIALS_ACCESS_KEY_ID=minioadmin
      - LAKEFS_BLOCKSTORE_S3_CREDENTIALS_SECRET_ACCESS_KEY=minioadmin
      - LAKEFS_AUTH_ENCRYPT_SECRET_KEY=some random secret string
      - LAKEFS_DATABASE_CONNECTION_STRING=postgres://lakefs:lakefs@postgres/postgres?sslmode=disable
      - LAKEFS_GATEWAYS_S3_DOMAIN_NAME=s3.docker.lakefs.io:8000
      - LAKEFS_STATS_ENABLED=false
      - LAKEFS_LOGGING_LEVEL
    entrypoint: ["/app/wait-for", "postgres:5432", "--", "/app/lakefs", "run"]

  postgres:
    image: postgres:11
    container_name: postgres
    networks:
      - lakefs-network
    environment:
      POSTGRES_USER: lakefs
      POSTGRES_PASSWORD: lakefs

  mariadb:
    image: mariadb:10
    container_name: mariadb
    networks:
      - lakefs-network
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: metastore_db

  hive-metastore:
    build: hive
    container_name: hive
    networks:
      - lakefs-network
    depends_on:
      - mariadb
    ports:
      - 9083:9083
    environment:
      - DB_URI=mariadb:3306
    volumes:
      - ./etc/hive-site.xml:/opt/apache-hive-bin/conf/hive-site.xml
    links:
      - lakefs:s3.docker.lakefs.io

  hive-server:
    build: hive
    container_name: hiveserver2
    networks:
      - lakefs-network
    depends_on:
      - hive-metastore
    environment:
      - DB_URI=mariadb:3306
    volumes:
      - ./etc/hive-site.xml:/opt/apache-hive-bin/conf/hive-site.xml
    links:
      - lakefs:s3.docker.lakefs.io
    entrypoint: ["hive", "--service", "hiveserver2", "--hiveconf", "hive.root.logger=INFO,console"]
  
  hive-client:
    build: hive
    networks:
      - lakefs-network
    profiles: ["client"]
    entrypoint: ["beeline", "-u", "jdbc:hive2://hiveserver2:10000"]
  
  trino:
    image: trinodb/trino:358
    container_name: trino
    networks:
      - lakefs-network
    links:
      - lakefs:s3.docker.lakefs.io
    volumes:
      - ./etc/s3.properties:/etc/trino/catalog/s3.properties

  trino-client:
    image: trinodb/trino:358
    networks:
      - lakefs-network
    profiles: ["client"]
    entrypoint: ["trino", "--server", "trino:8080", "--catalog", "s3", "--schema", "default"]

  spark:
    image: docker.io/bitnami/spark:3
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - 18080:8080
    networks:
      - lakefs-network
    volumes:
      - ./etc/hive-site.xml:/opt/bitnami/spark/conf/hive-site.xml
    links:
      - lakefs:s3.docker.lakefs.io

  spark-worker:
    image: docker.io/bitnami/spark:3
    ports:
      - 8081
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      - lakefs-network
    deploy:
      replicas: 3
    volumes:
      - ./etc/hive-site.xml:/opt/bitnami/spark/conf/hive-site.xml
    links:
      - lakefs:s3.docker.lakefs.io

  spark-submit:
    image: docker.io/bitnami/spark:3
    profiles: ["client"]
    entrypoint: /opt/bitnami/spark/bin/spark-submit
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./:/local
      - ./etc/hive-site.xml:/opt/bitnami/spark/conf/hive-site.xml
    networks:
      - lakefs-network
    links:
      - lakefs:s3.docker.lakefs.io

  spark-sql:
    image: docker.io/bitnami/spark:3
    profiles: ["client"]
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./:/local
      - ./etc/hive-site.xml:/opt/bitnami/spark/conf/hive-site.xml
    command: ["spark-sql", "--master", "spark://spark:7077"]
    networks:
      - lakefs-network
    links:
      - lakefs:s3.docker.lakefs.io

networks:
  lakefs-network:
    name: lakefs
