openapi: "3.0.0"

info:
  title: lakeFS authorization API
  description: authorization API used to manages users, groups, credentials and policies
  version: 0.1.0

servers:
  - url: "/api/v1"
    description: lakeFS authentication endpoint

security:
  - jwt_token: []

components:
  securitySchemes:
    jwt_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  parameters:
    PaginationPrefix:
      description: This value is being used in order to indicate the prefix of the items that lakeFS wants to get 
                  in the result. I.e lakeFS expects all the items in the result will begin with this prefix.
      in: query
      name: prefix
      allowEmptyValue: true
      schema:
        type: string
        default: ""

    PaginationAfter:
      in: query
      name: after
      description: This value is being used in order to indicate the string from which will be returned the items. I.e 
                  the items that will be returned will start with a string after this value in an ordered items list.
                  It means that your items list that is being returned must be sorted based on the id. We use this 
                  parameter in our paginator component which sets the last id as a string to the after parameter in
                  order to ask from the server the next items for the next page that will include the items after
                  this after value.
      allowEmptyValue: true
      schema:
        type: string
        default: ""

    PaginationAmount:
      description: This value is being used in order to indicate the server how many items to return so that lakeFS
                  will show this amount of results in the current page.
      in: query
      name: amount
      allowEmptyValue: true
      schema:
        type: integer
        minimum: -1
        maximum: 1000
        default: 100

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    Pagination:
      description: These parameters are required in order to for lakeFS to show the results with pagination in the page.
      type: object
      required:
        - has_more
        - max_per_page
        - results
        - next_offset
      properties:
        has_more:
          type: boolean
          description: Next page is available
        next_offset:
          type: string
          description: A string that is used to retrieve the next page - in the next page will be shown all the results 
                      that appear after the next_offset in the sorted result.
        results:
          type: integer
          minimum: 0
          description: Number of values found in the results
        max_per_page:
          type: integer
          minimum: 0
          description: Maximal number of entries per page

    VersionConfig:
      type: object
      required:
        - version
      properties:
        version:
          type: string

    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: short message explaining the error
          type: string

    User:
      type: object
      required:
        - username
        - creation_date
        - encryptedPassword
        - source
      properties:
        username:
          type: string
          description: a unique identifier for the user.
        creation_date:
          type: integer
          format: int64
          description: Unix Epoch in seconds
        encryptedPassword:
          type: string
          format: byte
          description: you can pass it empty.
        source:
          type: string
          description: Can be "internal".
        friendly_name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        external_id:
          type: string
          description: Not used.
          nullable: true

    UserPassword:
      type: object
      required:
        - encryptedPassword
      properties:
        encryptedPassword:
          type: string
          format: byte

    UserCreation:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          minLength: 1
          description: A unique identifier for the user. For password-based authentication, it is the email.
        email:
          type: string
          description: If passed  the email  will be passes will be a string equal to the 
                      username. The email is refered from the username.
        friendlyName:
          type: string
          description: If passed it Passed as nil .
        source:
          type: string
          description: If passed it Passed as "internal".
        encryptedPassword:
          type: string
          format: byte
          description: If passed it Passed as nil .
        external_id:
          type: string
          description: If passed it Passed as nil .
        invite:
          type: boolean
          description: If passed and true, send an invitation by email. Otherwise, only create the user.

    Credentials:
      type: object
      required:
        - access_key_id
        - creation_date
      properties:
        access_key_id:
          type: string
        creation_date:
          type: integer
          format: int64
          description: Unix Epoch in seconds

    CredentialsList:
      type: object
      required:
        - pagination
        - results
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        results:
          type: array
          description: An array of Credentials object sorted by access_key_id.
          items:
            $ref: "#/components/schemas/Credentials"

    CredentialsWithSecret:
      description: looks like
      type: object
      required:
        - access_key_id
        - secret_access_key
        - creation_date
      properties:
        access_key_id:
          type: string
        secret_access_key:
          type: string
        creation_date:
          type: integer
          format: int64
          description: Unix Epoch in seconds
        user_name:
          type: string
          description: A unique identifier for the user. In password-based authentication should be the email. 
                      You don't need to include it in the response.
        user_id:
          type: integer
          format: int64
          deprecated: true

    Group:
      description: Note that if you don't provide an id, lakeFS will convert the name you provide to the ID of the user.
      type: object
      required:
        - name
        - creation_date
      properties:
        name:
          type: string
          description: A unique identifier of the user with a readable name.
        creation_date:
          type: integer
          format: int64
          description: Unix Epoch in seconds.
        description:
          type: string
        id:
          type: string
          description: A unique identifier of the user.

    GroupList:
      type: object
      required:
        - results
        - pagination
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        results:
          type: array
          description: The results array must be sorted by the name property of the Group object.
          items:
            $ref: "#/components/schemas/Group"

    UserList:
      type: object
      required:
        - pagination
        - results
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        results:
          type: array
          description: The array should be sorted by the username property in the User object.
          items:
            $ref: "#/components/schemas/User"

    GroupCreation:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: the id is a unique identifier for the group and it is a readable group name
        description:
          type: string

    Statement:
      type: object
      description: explanation about how the properties should look like can be found here. attachhhhh link!!!!!!!!!!!!
      required:
        - effect
        - resource
        - action
      properties:
        effect:
          type: string
          enum: [ allow, deny ]
        resource:
          type: string
        action:
          type: array
          items:
            type: string
          minItems: 1

    Policy:
      type: object
      required:
        - name
        - statement
      properties:
        name:
          type: string
          description: a unique readable policy name.
        creation_date:
          type: integer
          format: int64
          description: Unix Epoch in seconds
          nullable: true
        statement:
          type: array
          items:
            $ref: "#/components/schemas/Statement"
          minItems: 1
        acl:
          type: string
          description: This is for lakeFS internal usage only. Access control list assigned to this policy (if exists).
          nullable: true

    PolicyList:
      type: object
      required:
        - pagination
        - results
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        results:
          type: array
          description: The results list should be sorted by the "name" property that in the
                      Policy object.
          items:
            $ref: "#/components/schemas/Policy"

    ClaimTokenId:
      type: object
      required:
        - token_id
        - expires_at
      properties:
        token_id:
          type: string
        expires_at:
          type: integer
          format: int64
          description: Unix Epoch in seconds

    ExternalPrincipal:
      type: object
      required:
        - user_id
        - id
      properties:
        user_id:
          type: string
        id:
          type: string
    ExternalPrincipalList:
      type: object
      required:
        - pagination
        - results
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        results:
          type: array
          items:
            $ref: "#/components/schemas/ExternalPrincipal"

paths:
  /auth/users:
    description: This endpoint outputs a list of all the users in this lakeFS server. In the webui
                the you will find this page that is triggered from this endpoint under Administration ->
                Users. The input is the pagination parameters and the rest params???????????????????
                and the output is the Pagination object and the list of results. The results list should be sorted by 
                the username unique key that in the User object.
                From the UserList -> results array for each User object, Internaly we convert the username in the User object to Id param.
                Also we save the  creation date. also friendly_name, email  which you passed which you can pass as empty.
                webui shows the user in this hirarchy
                the function name that should implement this endpoint should be named "listUsers".
                To check with Guy about the other params!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    get:
      tags:
        - auth
        - users
      operationId: listUsers
      summary: list users
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
        - in: query
          name: id
          allowEmptyValue: true
          schema:
            type: integer
            format: int64
        - in: query
          name: email
          allowEmptyValue: true
          schema:
            type: string
        - in: query
          name: external_id
          schema:
            type: string
      responses:
        200:
          description: user list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"
    post:
      description: This endpoint is used to create a new user to lakeFS. In the webui
                  you can create new users in 2 ways 1. Go to Administration ->
                  Users and click on Invite User 2. Go to Administration -> Users and click on Create API User. 
                  The input is passed to the request body and the output is a User object.
                  We will pass to your server a request body with 
                  the key Content-Type=application/json in the header.
                  the function name that should implement this endpoint should be named "createUser".
                  This function is also being called in the setup phase when creating the admin user with "admin" 
                  username, source="internal" .
      tags:
        - auth
        - users
      operationId: createUser
      summary: create user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreation"
      responses:
        201:
          description: make sure the username is equal to the username that was passed in the input. 
                      We don't use the rest params.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        409:
          $ref: "#/components/responses/Conflict"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    get:
      tags:
        - auth
        - users
      operationId: getUser
      summary: get user
      responses:
        200:
          description: user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - auth
        - users
      operationId: deleteUser
      summary: delete user
      responses:
        204:
          description: user deleted successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/password:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    put:
      deprecated: true
      tags:
        - auth
        - users
      operationId: updatePassword
      summary: update users password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPassword"
      responses:
        200:
          description: password updated succesfully
        400:
          $ref: "#/components/responses/ValidationError"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/friendly_name:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    put:
      tags:
        - auth
        - users
      operationId: updateUserFriendlyName
      summary: update users friendly name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - friendly_name
              type: object
              properties:
                friendly_name:
                  type: string
      responses:
        204:
          description: friendly name updated succesfully
        400:
          $ref: "#/components/responses/ValidationError"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/groups:
    get:
      description: This endpoint lists of the groups in lakeFS.
                  In the webui
                  you will find this page that is triggered from this endpoint for each user under Administration ->
                  Groups. The input is the pagination parameters and the output is the Pagination object
                  and the list of results. The results list should be sorted by the "name" property that in the
                  Group object in the results array in the GroupList object.
                  the function name that should implement this endpoint should be named "listGroups".
      tags:
        - auth
        - groups
      operationId: listGroups
      summary: list groups
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      responses:
        200:
          description: group list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupList"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"

    post:
      description: This endpoint is used to create a group in lakeFS.
                  In the webui
                  you will trigger this endpoint by clicking on Administration ->
                  Groups -> Create Group. The input is passed to the request body and the output is a Group object. We will pass 
                  to your server a request body with
                  the key Content-Type=application/json in the header.
                  Note that lakeFS will pass as input the id property as specified in GroupCreation as a unique readable group name.
                  LaakeFS will get the Group object and expects the name property to be a unique readable group name and if the id
                  property in the Group object wasn't specified it will store the name in the id field.
                  the function name that should implement this endpoint should be named "createGroup".
                  LakeFS calls to this endpoint in the setup stage. When it creates the admin user, it calles to this
                  endpoint with the group IDs "Admins", "SuperUsers", "Developers" and "Viewers" and it expects

      tags:
        - auth
        - groups
      operationId: createGroup
      summary: create group
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupCreation"
      responses:
        201:
          description: group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/groups/{groupId}:
    parameters:
      - in: path
        name: groupId
        required: true
        schema:
          type: string
    get:
      description: This endpoint outputs the details for a specific group.
                  In the webui
                  this endpoint is triggered for a group after clicking on Administration ->
                  Groups -> someGroupId. The input is a unique groupId that corresponds to existing group ID in your
                  groups list as a path param. and the output is the Group object. In the webui we will use the name
                  property in the Group object and pass it to the ID property on lakeFS side so in the webui you will
                  get only 3 params in the response "creation_date", "description" that can be empty and "id" which is the 
                  name param in the Group object. LakeFS calls this endpoint with the "Admins" groupID in the setup phase in order to check that 
                  the "Admins" group was created.
                  the function name that should implement this endpoint should be named "getGroup".
      tags:
        - auth
        - groups
      operationId: getGroup
      summary: get group
      responses:
        200:
          description: group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"
    delete:
      description: This endpoint deletes a group.
                  In the webui
                  this endpoint is triggered for a group after clicking on Administration ->
                  Groups  then selecting the group a user would like to delete and pressing on 'Delete Selected'. 
                  The input is a unique groupId that corresponds to existing group ID in your
                  groups list as a path param. no output if was deleted successfuly. 
                  the function name that should implement this endpoint should be named "deleteGroup".
      tags:
        - auth
        - groups
      operationId: deleteGroup
      summary: delete group
      responses:
        204:
          description: group deleted successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/policies:
    get:
      description: This endpoint lists of the groups in lakeFS.
                  In the webui
                  you will find this page that is triggered from this endpoint in Administration ->
                  Policies. The input is the pagination parameters and the output is the Pagination object
                  and the list of results. The results list should be sorted by the "name" property that in the
                  Policy object in the results array in the PolicyList object. LakeFS converts the "name" property of 
                  the Policy object to "id" property in it's internal Policy object.
                  the function name that should implement this endpoint should be named "listPolicies".

      tags:
        - auth
        - policies
      operationId: listPolicies
      summary: list policies
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      responses:
        200:
          description: policy list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyList"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"
    post:
      description: This endpoint is used to create a policy in lakeFS.
                  In the webui
                  you will trigger this endpoint by clicking on Administration ->
                  Policies -> Create Policy. The input is passed to the request body and the output is a Policy object. We will pass
                  to your server a request body with
                  the key Content-Type=application/json in the header.
                  The output's parameters should be the same as the input's params.
                  the function name that should implement this endpoint should be named "createPolicy".
                  LakeFS calls to this endpoint in the setup stage. When it creates the admin user, it calles to this
                  endpoint with some default policies needed to be created. The policies Id (names) that will be sent
                  "FSFullAccess", "FSReadWriteAll", "FSReadAll", "RepoManagementFullAccess", "PRReadWriteAll", 
                  "RepoManagementReadAll", "AuthFullAccess", "AuthManageOwnCredentials"

      tags:
        - auth
        - policies
      operationId: createPolicy
      summary: create policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Policy"
      responses:
        201:
          description: policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/ValidationError"
        409:
          $ref: "#/components/responses/Conflict"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/policies/{policyId}:
    parameters:
      - in: path
        name: policyId
        required: true
        schema:
          type: string
    get:
      description: This endpoint outputs a specific policies's details.
                  In the webui
                  you will find this page that is triggered from this endpoint in Administration ->
                  Policies -> somePolicyId. The input is the unique policyId and the output is the Policy object. 
                  LakeFS converts the "name" property of
                  the Policy object to "id" property in it's internal Policy object.
                  the function name that should implement this endpoint should be named "getPolicy".
      tags:
        - auth
        - policies
      operationId: getPolicy
      summary: get policy
      responses:
        200:
          description: policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

    put:
      description: This endpoint is used to update a policy in lakeFS.
                  In the webui
                  you will trigger this endpoint by clicking on Administration ->
                  Policies -> somePolicyId -> Edit. The input is the unique policyId(name) and passed to the request 
                  body and the output is the updated Policy object (same body that was sent to this API). We will pass
                  to your server a request body with
                  the key Content-Type=application/json in the header.
                  The output's parameters should be the same as in the input's body params.
                  the function name that should implement this endpoint should be named "updatePolicy".
      tags:
        - auth
        - policies
      operationId: updatePolicy
      summary: update policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Policy"
      responses:
        200:
          description: policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        400:
          $ref: "#/components/responses/ValidationError"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"

    delete:
      description: This endpoint deletes a policy.
                  In the webui
                  this endpoint is triggered for a policy after clicking on Administration ->
                  Policies then selecting the policy a user would like to delete and pressing on 'Delete Selected'.
                  The input is a unique policyId that corresponds to existing policy ID in your
                  policies list as a path param. no output if was deleted successfuly.
                  the function name that should implement this endpoint should be named "deletePolicy".
      tags:
        - auth
        - policies
      operationId: deletePolicy
      summary: delete policy
      responses:
        204:
          description: policy deleted successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/groups/{groupId}/members:
    parameters:
      - in: path
        name: groupId
        required: true
        schema:
          type: string
    get:
      description: This endpoint outputs for a specific group a list of the users that are attached to it.
                  In the webui
                  the you will find this page that is triggered from this endpoint for each user under Administration ->
                  Groups -> someGroupId -> Group Membership tab. The input is the groupId and the pagination parameters and the output is the Pagination object
                  and the list of results. The results list should be sorted by the "username" property that in the
                  User object in the results array in the UserList object.
                  the function name that should implement this endpoint should be named "listGroupMembers".
      tags:
        - auth
        - groups
      operationId: listGroupMembers
      summary: list group members
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      responses:
        200:
          description: group member list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/groups/{groupId}/members/{userId}:
    parameters:
      - in: path
        name: groupId
        required: true
        schema:
          type: string
      - in: path
        name: userId
        required: true
        schema:
          type: string
    put:
      description: This endpoint adds a specific user to a specific group.
                  In the webui
                  the you will find this page that is triggered from this endpoint for each user under Administration ->
                  Groups -> someGroupId -> Group Membership tab -> Add members. The input is the groupId and the userId 
                  (username) and there is no output when the user was addedd to the group succesfully. 
                  the function name that should implement this endpoint should be named "addGroupMembership".
      tags:
        - auth
        - groups
      operationId: addGroupMembership
      summary: add group membership
      responses:
        201:
          description: membership added successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

    delete:
      description: This endpoint deletes a specific user from a specific group.
                  In the webui
                  the you will find this page that is triggered from this endpoint for each user under Administration ->
                  Groups -> someGroupId -> Group Membership tab.Then on the rightmost column in the table click on the 
                  "Remove" button. The input is the groupId and the userId
                  (username) and there is no output when the user was deleted from the group succesfully.
                  the function name that should implement this endpoint should be named "deleteGroupMembership".
      tags:
        - auth
        - groups
      operationId: deleteGroupMembership
      summary: delete group membership
      responses:
        204:
          description: membership deleted successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/credentials:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    get:
      description: This endpoint outputs for a specific user's a list of his all access_key_id with it's creation_date. 
                  In the UI, in the 
                  Administration -> My Credentials page, this endpoint is being called with userId=admin. In the webui 
                  the you will find this page that is triggered from this endpoint for each user under Administration -> 
                  Users -> userId -> 
                  Access Credentials. The input is the pagination parameters and the output is the Pagination object 
                  and the list of results. The results list should be sorted by the "access_key_id" key that in the 
                  Credentials object in the results array in the CredentialsList object.
                  the function name that should implement this endpoint should be named "listUserCredentials".
                  In the path parameter lakeFS pass a unique userId that corresponds to existing user ID in your
                  users list.
      tags:
        - auth
        - credentials
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      operationId: listUserCredentials
      summary: list user credentials
      responses:
        200:
          description: credential list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialsList"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

    post:
      description: This endpoint creates new credentials for a specific user. lakeFs creates the Access Key ID and the
                  Secret Access Key and passes it to the server. The input is the access_key and secret_key strings 
                  that lakeFS creates for the user and the output is .....
                  the function name that should implement this endpoint should be named "createCredentials".
                  In the path parameter lakeFS pass a unique userId that corresponds to existing user ID in your
                  users list. Note that if one of the parameters is empty, you should create random values for these
                  2 parameters and save theses credentials for the user. When lakeFS firsts initialized, theses 
                  2 credentials parameters should be created for the "admin" user with this specific userId. In the 
                  webui this endpoint is triggered after clicking on the Create Access key under 
                  Administration -> My Credentials for the admin user and under the Administration -> Users -> userId ->
                  Access Credentials for some specific other user.
      parameters:
        - in: query
          name: access_key
          schema:
            type: string
        - in: query
          name: secret_key
          schema:
            type: string
      tags:
        - auth
        - credentials
      operationId: createCredentials
      summary: create credentials
      responses:
        201:
          description: credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialsWithSecret"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/credentials/{accessKeyId}:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      - in: path
        name: accessKeyId
        required: true
        schema:
          type: string
    delete:
      description: This endpoint deletes credentials for a specific user. The inputs are the userId and accessKeyId and 
                  the output is void.
                  the function name that should implement this endpoint should be named "deleteCredentials".
                  In the path parameter lakeFS pass a unique userId that corresponds to existing user ID in your
                  users list. In the webUI you can trigger this endpoint by clicking on Administration -> My Credentials 
                  for the admin user and under the Administration -> Users -> userId ->
                  Access Credentials for some specific other user and then clicking on the "Revoke" button in the 
                  right column in the table of access keys.
      tags:
        - auth
        - credentials
      operationId: deleteCredentials
      summary: delete credentials
      responses:
        204:
          description: credentials deleted successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

    get:
      description: Why need it and how to trigger this endpoint in the webUI?????????????????????????????????????????
      tags:
        - auth
        - credentials
      operationId: getCredentialsForUser
      summary: get credentials
      responses:
        200:
          description: credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credentials"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/credentials/{accessKeyId}:
    description: Why need it and how to trigger this endpoint in the webUI?????????????????????????????????????????
                if we do use it, document that the list should be sorted?
    parameters:
      - in: path
        name: accessKeyId
        required: true
        schema:
          type: string
    get:
      tags:
        - auth
        - credentials
      operationId: getCredentials
      summary: get credentials
      responses:
        200:
          description: credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialsWithSecret"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/groups:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    get:
      tags:
        - auth
        - users
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      operationId: listUserGroups
      summary: list user groups
      responses:
        200:
          description: group list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupList"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/policies:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    get:
      tags:
        - auth
        - users
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
        - in: query
          name: effective
          schema:
            type: boolean
            default: false
          description: will return all distinct policies attached to the user or any of its groups
      operationId: listUserPolicies
      summary: list user policies
      responses:
        200:
          description: policy list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyList"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/policies/{policyId}:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      - in: path
        name: policyId
        required: true
        schema:
          type: string
    put:
      tags:
        - auth
        - users
      operationId: attachPolicyToUser
      summary: attach policy to user
      responses:
        201:
          description: policy attached successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - auth
        - users
      operationId: detachPolicyFromUser
      summary: detach policy from user
      responses:
        204:
          description: policy detached successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/groups/{groupId}/policies:
    parameters:
      - in: path
        name: groupId
        required: true
        schema:
          type: string
    get:
      description: This endpoint outputs the list of policies that are attached to a specific  group.
                  In the webui
                  you will find this page that is triggered from this endpoint in Administration ->
                  Groups -> somePolicyId -> Attached Policies tab. The input is the unique groupId and the pagination 
                  params and the output is a PolicyList object which has 2 things "pagination" for the pagination purpose 
                  and "results". The results should be sorted by the "name" property.
                  LakeFS converts the "name" property of
                  the Policy object to "id" property in it's internal Policy object.
                  the function name that should implement this endpoint should be named "listGroupPolicies".
      tags:
        - auth
        - groups
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      operationId: listGroupPolicies
      summary: list group policies
      responses:
        200:
          description: policy list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyList"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/groups/{groupId}/policies/{policyId}:
    parameters:
      - in: path
        name: groupId
        required: true
        schema:
          type: string
      - in: path
        name: policyId
        required: true
        schema:
          type: string
    put:
      description: This endpoint attaches a policy to a specific group.
                  In the webui
                  you will find this page that is triggered from this endpoint in Administration ->
                  Groups -> Attached Policies -> Attach Policy. The input is the unique groupId and policyId and no 
                  output when attached successfuly.
                  the function name that should implement this endpoint should be named "attachPolicyToGroup".
      tags:
        - auth
        - groups
      operationId: attachPolicyToGroup
      summary: attach policy to group
      responses:
        201:
          description: policy attached successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

    delete:
      description: This endpoint detaches a policy from a specific group.
        In the webui
        you will find this page that is triggered from this endpoint in Administration ->
        Groups -> Attached Policies tab. Then on the rightmost column in the table you will see a button called "Remove". 
        Click on that to delete.
        The input is the unique groupId and policyId and no output when detached successfuly.
        the function name that should implement this endpoint should be named "detachPolicyFromGroup".
      tags:
        - auth
        - groups
      operationId: detachPolicyFromGroup
      summary: detach policy from group
      responses:
        204:
          description: policy detached successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/tokenid/claim:
    post:
      deprecated: true
      tags:
        - auth
      operationId: claimTokenId
      summary: claim a token ID, returns validation error if already claimed
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClaimTokenId"
      responses:
        201:
          description: token id claimed
        400:
          description: validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"
  /auth/users/{userId}/external/principals/ls:
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      get:
        tags:
          - auth
          - experimental
        parameters:
          - $ref: "#/components/parameters/PaginationPrefix"
          - $ref: "#/components/parameters/PaginationAfter"
          - $ref: "#/components/parameters/PaginationAmount"
        operationId: listUserExternalPrincipals
        summary: list external principals for user
        responses:
          200:
            description: external principals
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ExternalPrincipalList"
          401:
            $ref: "#/components/responses/Unauthorized"
          404:
            $ref: "#/components/responses/NotFound"
          default:
            $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/external/principals:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      - in: query
        name: principalId
        required: true
        schema:
          type: string
    post:
      tags:
        - auth
        - experimental
      operationId: createUserExternalPrincipal
      summary: Create principal as external identity connected to lakeFS user
      responses:
        201:
          description: external principal created successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        409:
          $ref: "#/components/responses/Conflict"
        420:
          description: too many requests
        default:
          $ref: "#/components/responses/ServerError"
    delete:
        tags:
            - auth
            - experimental
        operationId: deleteUserExternalPrincipal
        summary: delete external principal from user's external principal list
        responses:
            204:
              description: external principal deleted
            401:
              $ref: "#/components/responses/Unauthorized"
            404:
              $ref: "#/components/responses/NotFound"
            default:
              $ref: "#/components/responses/ServerError"

  /auth/external/principals:
    parameters:
      - in: query
        name: principalId
        required: true
        schema:
          type: string
    get:
      tags:
        - auth
        - external
        - experimental
      operationId: getExternalPrincipal
      summary: describe external principal by id 
      responses:
        200:
          description: external principal
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalPrincipal"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        420:
          description: too many requests
        default:
          $ref: "#/components/responses/ServerError"          

  /healthcheck:
    get:
      operationId: healthCheck
      security: [ ]
      tags:
        - healthCheck
      description: check that the API server is up and running
      responses:
        204:
          description: NoContent

  /config/version:
    get:
      tags:
        - config
      operationId: getVersion
      description: get server version
      responses:
        200:
          description: external authorization API server version
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConfig"
