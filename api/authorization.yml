openapi: "3.0.0"

info:
  title: lakeFS authorization API
  description: authorization API used to manages users, groups, credentials and policies
  version: 0.1.0

servers:
  - url: "/api/v1"
    description: lakeFS authentication endpoint

security:
  - jwt_token: []

components:
  securitySchemes:
    jwt_token:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    PaginationPrefix:
      description: Indicates the prefix that all returned items must start with. lakeFS uses this value to filter
        results accordingly.
      in: query
      name: prefix
      allowEmptyValue: true
      schema:
        type: string
        default: ""

    PaginationAfter:
      in: query
      name: after
      description: Used to indicate the starting point for the returned items. Items must be sorted by some parameter,
        and the response should include only items that come after the "after" value in the ordered list.
        This parameter is used by the lakeFS paginator, which sets the last item's value as the "after" value
        to retrieve the next page of results.
      allowEmptyValue: true
      schema:
        type: string
        default: ""

    PaginationAmount:
      description: Specifies the number of items the server should return. lakeFS uses this value to determine how many
        results to display on the current page.
      in: query
      name: amount
      allowEmptyValue: true
      schema:
        type: integer
        minimum: -1
        maximum: 1000
        default: 100

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    Pagination:
      description: These parameters are required for lakeFS to display paginated results on the page.
      type: object
      required:
        - has_more
        - max_per_page
        - results
        - next_offset
      properties:
        has_more:
          type: boolean
          description: Next page is available.
        next_offset:
          type: string
          description: A string used to retrieve the next page of results. The next page will include all items that
            appear after the next_offset in the sorted list.
        results:
          type: integer
          minimum: 0
          description: Number of values in the results.
        max_per_page:
          type: integer
          minimum: 0
          description: Maximum number of entries per page. Not currently used, so it can be set to 0.

    VersionConfig:
      type: object
      required:
        - version
      properties:
        version:
          type: string

    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: Short message explaining the error
          type: string

    User:
      type: object
      required:
        - name
        - username
        - creation_date
        - encryptedPassword
      properties:
        name:
          type: string
          deprecated: true
          description: Not used.
        username:
          type: string
          description: A unique identifier for the user.
        creation_date:
          type: integer
          format: int64
          description: Unix Epoch in seconds.
        friendly_name:
          type: string
          description: Can be empty.
        email:
          type: string
          description: Can be empty.
        source:
          type: string
          description: Can be set to "internal" or left empty when implementing an RBAC server.
        encryptedPassword:
          type: string
          format: byte
          description: Can be empty.
        external_id:
          type: string
          description: For internal use only. Can be empty.

    UserPassword:
      type: object
      required:
        - encryptedPassword
      properties:
        encryptedPassword:
          type: string
          format: byte

    UserCreation:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          minLength: 1
          description: A unique identifier for the user. For password-based authentication, it is the email.
        email:
          type: string
          description: If provided, the email will be set to the same value as the username. In this case, the email
            is derived from the username.
        friendlyName:
          type: string
          description: Can be empty.
        source:
          type: string
          description: Can be set to "internal" or left empty when implementing an RBAC server.
        encryptedPassword:
          type: string
          format: byte
          description: Can be empty.
        external_id:
          type: string
          description: For internal usage. Can be empty.
        invite:
          type: boolean
          description: If passed and true, send an invitation by email. Otherwise, only create the user.

    Credentials:
      type: object
      required:
        - access_key_id
        - creation_date
      properties:
        access_key_id:
          type: string
        creation_date:
          type: integer
          format: int64
          description: Unix Epoch in seconds

    CredentialsList:
      type: object
      required:
        - pagination
        - results
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        results:
          type: array
          description: An array of Credential objects sorted by their access_key_id property.
          items:
            $ref: "#/components/schemas/Credentials"

    CredentialsWithSecret:
      type: object
      required:
        - access_key_id
        - secret_access_key
        - creation_date
        - user_id
      properties:
        access_key_id:
          type: string
        secret_access_key:
          type: string
        creation_date:
          type: integer
          format: int64
          description: Unix Epoch in seconds.
        user_id:
          type: integer
          format: int64
          deprecated: true
        user_name:
          type: string
          description: Important - this filed is required instead of the user_id which is depricated!
            A unique identifier for the user. In password-based authentication should be the email.

    Group:
      description: If not provided, the ID will be automatically generated by converting the given name into a group ID.
      type: object
      required:
        - name
        - creation_date
      properties:
        id:
          type: string
          description: A unique identifier of the group.
        name:
          type: string
          description: A unique identifier for the group, represented by a human-readable name.
        description:
          type: string
        creation_date:
          type: integer
          format: int64
          description: Unix Epoch in seconds.

    GroupList:
      type: object
      required:
        - results
        - pagination
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        results:
          type: array
          description: The results array must be sorted by the name property of each Group object.
          items:
            $ref: "#/components/schemas/Group"

    UserList:
      type: object
      required:
        - pagination
        - results
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        results:
          type: array
          description: The array must be sorted by the username property of each User object.
          items:
            $ref: "#/components/schemas/User"

    GroupCreation:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: A unique identifier for the group, represented by a human-readable name.
        description:
          type: string

    Statement:
      type: object
      description: Details about the expected structure of the properties can be found in the lakeFS documentation.
      required:
        - effect
        - resource
        - action
      properties:
        effect:
          type: string
          enum: [ allow, deny ]
        resource:
          type: string
        action:
          type: array
          items:
            type: string
          minItems: 1

    Policy:
      type: object
      required:
        - name
        - statement
      properties:
        name:
          type: string
          description: A unique, human-readable name for the policy.
        creation_date:
          type: integer
          format: int64
          description: Unix Epoch in seconds. Can be empty.
        statement:
          type: array
          items:
            $ref: "#/components/schemas/Statement"
          minItems: 1
        acl:
          type: string
          description: For internal use by lakeFS only. Not required when implementing an RBAC auth server.
            Represents the access control list assigned to this policy, if it exists.

    PolicyList:
      type: object
      required:
        - pagination
        - results
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        results:
          type: array
          description: The results list must be sorted by the name property of each Policy object.
          items:
            $ref: "#/components/schemas/Policy"

    ClaimTokenId:
      description: For internal lakeFS usage only.
      type: object
      required:
        - token_id
        - expires_at
      properties:
        token_id:
          type: string
        expires_at:
          type: integer
          format: int64
          description: Unix Epoch in seconds

    ExternalPrincipal:
      description: For internal lakeFS usage only.
      type: object
      required:
        - user_id
        - id
      properties:
        user_id:
          type: string
        id:
          type: string

    ExternalPrincipalList:
      description: For internal lakeFS usage only.
      type: object
      required:
        - pagination
        - results
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        results:
          type: array
          items:
            $ref: "#/components/schemas/ExternalPrincipal"

paths:
  /auth/users:
    get:
      description: Returns a list of all the users. Accepts pagination parameters as input and returns a
        Pagination object along with a list of users. The results must be sorted by the username property of
        each User object. Internally, lakeFS converts the username value to the id field and stores the
        creation_date, along with optional fields such as friendly_name and email. This endpoint should be
        implemented in a function named listUsers.
      tags:
        - auth
        - users
      operationId: listUsers
      summary: list users
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
        - in: query
          deprecated: true
          name: id
          allowEmptyValue: true
          schema:
            type: integer
            format: int64
        - in: query
          deprecated: true
          name: email
          allowEmptyValue: true
          schema:
            type: string
        - in: query
          description: Used only in lakeFS Enterprise; not applicable in the OSS version.
          name: external_id
          schema:
            type: string
      responses:
        200:
          description: User list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"
    post:
      description: Creates a new user. The input is provided in the request body, and the response returns a
        User object. This endpoint is also used during the setup phase to create the initial admin user with
        username="admin" and source="internal". This endpoint should be implemented in a function named
        createUser.
      tags:
        - auth
        - users
      operationId: createUser
      summary: create user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreation"
      responses:
        201:
          description: The username in the response must match the username provided in the input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        409:
          $ref: "#/components/responses/Conflict"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    get:
      description: Returns the details of a specific user. Takes a unique userId as a path parameter, which must match
        an existing user ID. The response returns a User object. Internally, lakeFS uses the
        creation_date, email, and id (derived from the username) fields from the response. This endpoint
        should be implemented in a function named getUser.
      tags:
        - auth
        - users
      operationId: getUser
      summary: get user
      responses:
        200:
          description: User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"
    delete:
      description: Deletes a user. Takes a unique userId (username) as a path parameter, which must match an existing
        user ID in your users list. No output is returned if the deletion is successful. This endpoint should
        be implemented in a function named deleteUser.
      tags:
        - auth
        - users
      operationId: deleteUser
      summary: delete user
      responses:
        204:
          description: User deleted successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/password:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    put:
      deprecated: true
      tags:
        - auth
        - users
      operationId: updatePassword
      summary: update users password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPassword"
      responses:
        200:
          description: Password updated successfully.
        400:
          $ref: "#/components/responses/ValidationError"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/friendly_name:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    put:
      description: Updates the friendly_name field of a user. Takes a unique userId as a path parameter and a new
        friendly_name in the request body. No output is returned if the update is successful. This endpoint
        should be implemented in a function named updateUserFriendlyName.
      tags:
        - auth
        - users
      operationId: updateUserFriendlyName
      summary: update users friendly name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - friendly_name
              type: object
              properties:
                friendly_name:
                  type: string
      responses:
        204:
          description: Friendly name was successfully updated.
        400:
          $ref: "#/components/responses/ValidationError"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/groups:
    get:
      description: Returns a list of groups. Accepts pagination parameters as input and returns a Pagination
        object along with a list of groups. The results must be sorted by the name property of each Group
        object in the GroupList response. This endpoint should be implemented in a function named listGroups.
      tags:
        - auth
        - groups
      operationId: listGroups
      summary: list groups
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      responses:
        200:
          description: group list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupList"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"

    post:
      description: Creates a new group. The input is provided in the request body, and the response returns a
        Group object. lakeFS expects the name property to be a unique, human-readable group name.
        If the id field is not specified, lakeFS will use the name value as the id. lakeFS calls this endpoint
        during the setup stage to create initial groups, including "Admins", "SuperUsers", "Developers", and
        "Viewers". This endpoint should be implemented in a function named createGroup.
      tags:
        - auth
        - groups
      operationId: createGroup
      summary: create group
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupCreation"
      responses:
        201:
          description: group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/groups/{groupId}:
    parameters:
      - in: path
        name: groupId
        required: true
        schema:
          type: string
    get:
      description: Returns the details of a specific group. Takes a unique groupId as a path parameter, which must
        match an existing group ID. The response returns a Group object. Internally,
        lakeFS converts the name property in the Group object to the id used on the lakeFS side. During the
        setup phase, lakeFS calls this endpoint with the "Admins" group ID to verify that the group was
        created. This endpoint should be implemented in a function named getGroup.
      tags:
        - auth
        - groups
      operationId: getGroup
      summary: get group
      responses:
        200:
          description: group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"
    delete:
      description: Deletes a group. Takes a unique groupId as a path parameter, which must match an existing group ID. 
        No output is returned if the deletion is successful. This endpoint should be
        implemented in a function named deleteGroup.
      tags:
        - auth
        - groups
      operationId: deleteGroup
      summary: delete group
      responses:
        204:
          description: Group deleted successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/policies:
    get:
      description: Returns a list of policies. Accepts pagination parameters as input and returns a
        Pagination object along with a list of policies. The results must be sorted by the name property of
        each Policy object in the PolicyList response. lakeFS internally converts the name property of each
        Policy object to the id field. This endpoint should be implemented in a function named listPolicies.

      tags:
        - auth
        - policies
      operationId: listPolicies
      summary: list policies
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      responses:
        200:
          description: policy list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyList"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"
    post:
      description: Creates a new policy. The input is provided in the request body, and the response returns
        a Policy object. The response fields should match the input parameters. lakeFS calls this endpoint
        during the setup phase to create default policies required for operation. The policy IDs (names) that
        will be sent include "FSFullAccess", "FSReadWriteAll", "FSReadAll", "RepoManagementFullAccess",
        "PRReadWriteAll", "RepoManagementReadAll", "AuthFullAccess", and "AuthManageOwnCredentials".
        This endpoint should be implemented in a function named createPolicy.
      tags:
        - auth
        - policies
      operationId: createPolicy
      summary: create policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Policy"
      responses:
        201:
          description: policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        401:
          $ref: "#/components/responses/Unauthorized"
        400:
          $ref: "#/components/responses/ValidationError"
        409:
          $ref: "#/components/responses/Conflict"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/policies/{policyId}:
    parameters:
      - in: path
        name: policyId
        required: true
        schema:
          type: string
    get:
      description: Returns the details of a specific policy. Takes a unique policyId as input and returns a Policy
        object. lakeFS converts the name property of the Policy object to the id property in its internal
        Policy representation. This endpoint should be implemented in a function named getPolicy.
      tags:
        - auth
        - policies
      operationId: getPolicy
      summary: get policy
      responses:
        200:
          description: policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

    put:
      description: Updates an existing policy. Takes a unique policyId (name) and a request body containing
        the updated policy details, and returns the updated Policy object. The response fields should match
        those provided in the request body. This endpoint should be implemented in a function named
        updatePolicy.
      tags:
        - auth
        - policies
      operationId: updatePolicy
      summary: update policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Policy"
      responses:
        200:
          description: policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        400:
          $ref: "#/components/responses/ValidationError"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"

    delete:
      description: Deletes a policy. Takes a unique policyId as a path parameter, which must match an existing policy
        ID. No output is returned if the deletion is successful. This endpoint should be
        implemented in a function named deletePolicy.
      tags:
        - auth
        - policies
      operationId: deletePolicy
      summary: delete policy
      responses:
        204:
          description: policy deleted successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/groups/{groupId}/members:
    parameters:
      - in: path
        name: groupId
        required: true
        schema:
          type: string
    get:
      description: Returns the list of users associated with a specific group. Takes the groupId and pagination
        parameters as input, and returns a Pagination object along with the list of users. The results must be
        sorted by the username property of each User object in the UserList response. This endpoint should
        be implemented in a function named listGroupMembers.
      tags:
        - auth
        - groups
      operationId: listGroupMembers
      summary: list group members
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      responses:
        200:
          description: group member list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/groups/{groupId}/members/{userId}:
    parameters:
      - in: path
        name: groupId
        required: true
        schema:
          type: string
      - in: path
        name: userId
        required: true
        schema:
          type: string
    put:
      description: Adds a specific user to a specific group. Takes the groupId and userId (username) as input.
        No output is returned if the user is successfully added to the group. This endpoint should be
        implemented in a function named addGroupMembership.
      tags:
        - auth
        - groups
      operationId: addGroupMembership
      summary: add group membership
      responses:
        201:
          description: membership added successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

    delete:
      description: Removes a specific user from a specific group. Takes the groupId and userId (username) as input.
        No output is returned if the user is successfully removed from the group. This endpoint should be
        implemented in a function named deleteGroupMembership.
      tags:
        - auth
        - groups
      operationId: deleteGroupMembership
      summary: delete group membership
      responses:
        204:
          description: membership deleted successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/credentials:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    get:
      description: Returns a list of all access_key_ids and their creation dates for a specific user. Takes a unique
        userId that matches an existing user along with pagination parameters. The response includes a Pagination 
        object and a list of results sorted by the access_key_id field in Credentials object within the CredentialsList. 
        This endpoint should be implemented in a function named listUserCredentials.
      tags:
        - auth
        - credentials
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      operationId: listUserCredentials
      summary: list user credentials
      responses:
        200:
          description: credential list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialsList"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

    post:
      description: Creates new credentials for a specific user. The input might include access_key and secret_key, and
        the output is a CredentialsWithSecret object where the username field is required. If either the
        access_key or secret_key is empty, RBAC server should generate random values for both and save
        them for the user. The path parameter includes a unique userId that matches an existing user. During lakeFS 
        initialization, credentials must be created for the "admin" userId, and lakeFS will invoke this API to perform 
        that action. This endpoint should be implemented in a function named createCredentials.
      parameters:
        - in: query
          name: access_key
          schema:
            type: string
        - in: query
          name: secret_key
          schema:
            type: string
      tags:
        - auth
        - credentials
      operationId: createCredentials
      summary: create credentials
      responses:
        201:
          description: credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialsWithSecret"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/credentials/{accessKeyId}:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      - in: path
        name: accessKeyId
        required: true
        schema:
          type: string
    delete:
      description: Deletes credentials for a specific user. Takes the userId and accessKeyId as input. The path
        parameter includes a unique userId that matches an existing user. No output is returned if the deletion is 
        successful. This endpoint should be implemented in a function named deleteCredentials.
      tags:
        - auth
        - credentials
      operationId: deleteCredentials
      summary: delete credentials
      responses:
        204:
          description: Credentials deleted successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

    get:
      description: Returns a specific user's credentials. Takes the user's userId and a specific accessKeyId associated
        with that user as input. The output includes the user's access key id and creation date. This endpoint should 
        be implemented in a function named getCredentialsForUser.
      tags:
        - auth
        - credentials
      operationId: getCredentialsForUser
      summary: get credentials for a user
      responses:
        200:
          description: credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credentials"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/credentials/{accessKeyId}:
    parameters:
      - in: path
        name: accessKeyId
        required: true
        schema:
          type: string
    get:
      description: Returns the credentials details associated with a specific accessKeyId. The input is the accessKeyId,
        and the output is a CredentialsWithSecret object containing all credential details.
        Note that the previously required user_id is now deprecated, and the username is required instead, even
        though it is not listed under the "required" label in this yaml. This endpoint should
        be implemented in a function named getCredentials.
      tags:
        - auth
        - credentials
      operationId: getCredentials
      summary: get credentials
      responses:
        200:
          description: credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialsWithSecret"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/groups:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    get:
      description: Returns the list of groups that a specific user is associated with. Takes a unique userId
        and pagination parameters as input, and returns a Pagination object along with the list of results.
        The results must be sorted by the name property of each Group object in the GroupList. This endpoint
        should be implemented in a function named listUserGroups.
      tags:
        - auth
        - users
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      operationId: listUserGroups
      summary: list user groups
      responses:
        200:
          description: group list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupList"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/policies:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    get:
      description: Returns the list of policies associated with a specific user. If the effective input is true, the
        response should include all policies attached to the user directly and through any groups the user
        belongs to. If effective is false, only policies directly attached to the user should be returned.
        The input includes a unique userId corresponding to an existing user, pagination parameters, and the
        effective boolean. The output includes a Pagination object and a list of results sorted by the name
        field of each Policy object in the PolicyList. This endpoint should be implemented in a function
        named listUserPolicies.

      tags:
        - auth
        - users
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
        - in: query
          name: effective
          schema:
            type: boolean
            default: false
          description: If true, return all distinct policies attached to the user or any of the groups the user belongs
            to, otherwise, return only the policies directly attached to the user.
      operationId: listUserPolicies
      summary: list user policies
      responses:
        200:
          description: policy list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyList"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/policies/{policyId}:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      - in: path
        name: policyId
        required: true
        schema:
          type: string
    put:
      description: Attaches a policy to a specific user. Takes a unique userId and policyId as input. No output is
        returned if the attachment is successful. This endpoint should be implemented in a function named
        attachPolicyToUser.
      tags:
        - auth
        - users
      operationId: attachPolicyToUser
      summary: attach policy to user
      responses:
        201:
          description: Policy attached successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"
    delete:
      description: Detaches a policy from a specific user. Takes a unique policyId and userId as input. No output is
        returned if the detachment is successful. This endpoint should be implemented in a function named
        detachPolicyFromUser.
      tags:
        - auth
        - users
      operationId: detachPolicyFromUser
      summary: detach policy from user
      responses:
        204:
          description: Policy detached successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/groups/{groupId}/policies:
    parameters:
      - in: path
        name: groupId
        required: true
        schema:
          type: string
    get:
      description: Returns the list of policies attached to a specific group. Takes a unique groupId and pagination
        parameters as input. The output includes a Pagination object and a list of results sorted by the name
        field of each Policy object in the PolicyList. lakeFS internally converts the name property of the
        Policy object to the id field. This endpoint should be implemented in a function named
        listGroupPolicies.
      tags:
        - auth
        - groups
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      operationId: listGroupPolicies
      summary: list group policies
      responses:
        200:
          description: Policy list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyList"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/groups/{groupId}/policies/{policyId}:
    parameters:
      - in: path
        name: groupId
        required: true
        schema:
          type: string
      - in: path
        name: policyId
        required: true
        schema:
          type: string
    put:
      description: Attaches a policy to a specific group. Takes a unique groupId and policyId as input. No output is
        returned if the attachment is successful. This endpoint should be implemented in a function named
        attachPolicyToGroup.
      tags:
        - auth
        - groups
      operationId: attachPolicyToGroup
      summary: attach policy to group
      responses:
        201:
          description: Policy attached successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

    delete:
      description: Detaches a policy from a specific group. Takes a unique groupId and policyId as input. No output is
        returned if the detachment is successful. This endpoint should be implemented in a function named detachPolicyFromGroup.
      tags:
        - auth
        - groups
      operationId: detachPolicyFromGroup
      summary: detach policy from group
      responses:
        204:
          description: Policy detached successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/tokenid/claim:
    post:
      deprecated: true
      tags:
        - auth
      operationId: claimTokenId
      summary: claim a token ID, returns validation error if already claimed
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClaimTokenId"
      responses:
        201:
          description: token id claimed
        400:
          description: validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/external/principals/ls:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    get:
      tags:
        - auth
        - experimental
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      operationId: listUserExternalPrincipals
      summary: list external principals for user
      responses:
        200:
          description: external principals
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalPrincipalList"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/users/{userId}/external/principals:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      - in: query
        name: principalId
        required: true
        schema:
          type: string
    post:
      tags:
        - auth
        - experimental
      operationId: createUserExternalPrincipal
      summary: Create principal as external identity connected to lakeFS user
      responses:
        201:
          description: external principal created successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        409:
          $ref: "#/components/responses/Conflict"
        420:
          description: too many requests
        default:
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - auth
        - experimental
      operationId: deleteUserExternalPrincipal
      summary: delete external principal from user's external principal list
      responses:
        204:
          description: external principal deleted
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/ServerError"

  /auth/external/principals:
    parameters:
      - in: query
        name: principalId
        required: true
        schema:
          type: string
    get:
      tags:
        - auth
        - external
        - experimental
      operationId: getExternalPrincipal
      summary: describe external principal by id
      responses:
        200:
          description: external principal
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalPrincipal"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        420:
          description: too many requests
        default:
          $ref: "#/components/responses/ServerError"

  /healthcheck:
    get:
      operationId: healthCheck
      security: [ ]
      tags:
        - healthCheck
      description: check that the API server is up and running
      responses:
        204:
          description: NoContent

  /config/version:
    get:
      tags:
        - config
      operationId: getVersion
      description: get server version
      responses:
        200:
          description: external authorization API server version
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConfig"
