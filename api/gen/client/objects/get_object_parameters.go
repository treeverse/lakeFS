// Code generated by go-swagger; DO NOT EDIT.

package objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetObjectParams creates a new GetObjectParams object
// with the default values initialized.
func NewGetObjectParams() *GetObjectParams {
	var ()
	return &GetObjectParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetObjectParamsWithTimeout creates a new GetObjectParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetObjectParamsWithTimeout(timeout time.Duration) *GetObjectParams {
	var ()
	return &GetObjectParams{

		timeout: timeout,
	}
}

// NewGetObjectParamsWithContext creates a new GetObjectParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetObjectParamsWithContext(ctx context.Context) *GetObjectParams {
	var ()
	return &GetObjectParams{

		Context: ctx,
	}
}

// NewGetObjectParamsWithHTTPClient creates a new GetObjectParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetObjectParamsWithHTTPClient(client *http.Client) *GetObjectParams {
	var ()
	return &GetObjectParams{
		HTTPClient: client,
	}
}

/*GetObjectParams contains all the parameters to send to the API endpoint
for the get object operation typically these are written to a http.Request
*/
type GetObjectParams struct {

	/*Path*/
	Path string
	/*Ref
	  a reference (could be either a branch ID or a commit ID)

	*/
	Ref string
	/*RepositoryID*/
	RepositoryID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get object params
func (o *GetObjectParams) WithTimeout(timeout time.Duration) *GetObjectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get object params
func (o *GetObjectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get object params
func (o *GetObjectParams) WithContext(ctx context.Context) *GetObjectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get object params
func (o *GetObjectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get object params
func (o *GetObjectParams) WithHTTPClient(client *http.Client) *GetObjectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get object params
func (o *GetObjectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPath adds the path to the get object params
func (o *GetObjectParams) WithPath(path string) *GetObjectParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get object params
func (o *GetObjectParams) SetPath(path string) {
	o.Path = path
}

// WithRef adds the ref to the get object params
func (o *GetObjectParams) WithRef(ref string) *GetObjectParams {
	o.SetRef(ref)
	return o
}

// SetRef adds the ref to the get object params
func (o *GetObjectParams) SetRef(ref string) {
	o.Ref = ref
}

// WithRepositoryID adds the repositoryID to the get object params
func (o *GetObjectParams) WithRepositoryID(repositoryID string) *GetObjectParams {
	o.SetRepositoryID(repositoryID)
	return o
}

// SetRepositoryID adds the repositoryId to the get object params
func (o *GetObjectParams) SetRepositoryID(repositoryID string) {
	o.RepositoryID = repositoryID
}

// WriteToRequest writes these params to a swagger request
func (o *GetObjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param path
	qrPath := o.Path
	qPath := qrPath
	if qPath != "" {
		if err := r.SetQueryParam("path", qPath); err != nil {
			return err
		}
	}

	// path param ref
	if err := r.SetPathParam("ref", o.Ref); err != nil {
		return err
	}

	// path param repositoryId
	if err := r.SetPathParam("repositoryId", o.RepositoryID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
