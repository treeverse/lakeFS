// Code generated by go-swagger; DO NOT EDIT.

package branches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/treeverse/lakefs/api/gen/models"
)

// NewCreateBranchParams creates a new CreateBranchParams object
// with the default values initialized.
func NewCreateBranchParams() *CreateBranchParams {
	var ()
	return &CreateBranchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateBranchParamsWithTimeout creates a new CreateBranchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateBranchParamsWithTimeout(timeout time.Duration) *CreateBranchParams {
	var ()
	return &CreateBranchParams{

		timeout: timeout,
	}
}

// NewCreateBranchParamsWithContext creates a new CreateBranchParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateBranchParamsWithContext(ctx context.Context) *CreateBranchParams {
	var ()
	return &CreateBranchParams{

		Context: ctx,
	}
}

// NewCreateBranchParamsWithHTTPClient creates a new CreateBranchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateBranchParamsWithHTTPClient(client *http.Client) *CreateBranchParams {
	var ()
	return &CreateBranchParams{
		HTTPClient: client,
	}
}

/*CreateBranchParams contains all the parameters to send to the API endpoint
for the create branch operation typically these are written to a http.Request
*/
type CreateBranchParams struct {

	/*Branch*/
	Branch *models.BranchCreation
	/*RepositoryID*/
	RepositoryID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create branch params
func (o *CreateBranchParams) WithTimeout(timeout time.Duration) *CreateBranchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create branch params
func (o *CreateBranchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create branch params
func (o *CreateBranchParams) WithContext(ctx context.Context) *CreateBranchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create branch params
func (o *CreateBranchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create branch params
func (o *CreateBranchParams) WithHTTPClient(client *http.Client) *CreateBranchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create branch params
func (o *CreateBranchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBranch adds the branch to the create branch params
func (o *CreateBranchParams) WithBranch(branch *models.BranchCreation) *CreateBranchParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the create branch params
func (o *CreateBranchParams) SetBranch(branch *models.BranchCreation) {
	o.Branch = branch
}

// WithRepositoryID adds the repositoryID to the create branch params
func (o *CreateBranchParams) WithRepositoryID(repositoryID string) *CreateBranchParams {
	o.SetRepositoryID(repositoryID)
	return o
}

// SetRepositoryID adds the repositoryId to the create branch params
func (o *CreateBranchParams) SetRepositoryID(repositoryID string) {
	o.RepositoryID = repositoryID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateBranchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Branch != nil {
		if err := r.SetBodyParam(o.Branch); err != nil {
			return err
		}
	}

	// path param repositoryId
	if err := r.SetPathParam("repositoryId", o.RepositoryID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
