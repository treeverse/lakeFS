// Code generated by go-swagger; DO NOT EDIT.

package branches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/treeverse/lakefs/api/gen/models"
)

// GetBranchReader is a Reader for the GetBranch structure.
type GetBranchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBranchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBranchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetBranchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBranchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetBranchDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetBranchOK creates a GetBranchOK with default headers values
func NewGetBranchOK() *GetBranchOK {
	return &GetBranchOK{}
}

/*GetBranchOK handles this case with default header values.

branch
*/
type GetBranchOK struct {
	Payload *models.Ref
}

func (o *GetBranchOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{repositoryId}/branches/{branchId}][%d] getBranchOK  %+v", 200, o.Payload)
}

func (o *GetBranchOK) GetPayload() *models.Ref {
	return o.Payload
}

func (o *GetBranchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Ref)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBranchUnauthorized creates a GetBranchUnauthorized with default headers values
func NewGetBranchUnauthorized() *GetBranchUnauthorized {
	return &GetBranchUnauthorized{}
}

/*GetBranchUnauthorized handles this case with default header values.

Unauthorized
*/
type GetBranchUnauthorized struct {
	Payload *models.Error
}

func (o *GetBranchUnauthorized) Error() string {
	return fmt.Sprintf("[GET /repositories/{repositoryId}/branches/{branchId}][%d] getBranchUnauthorized  %+v", 401, o.Payload)
}

func (o *GetBranchUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetBranchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBranchNotFound creates a GetBranchNotFound with default headers values
func NewGetBranchNotFound() *GetBranchNotFound {
	return &GetBranchNotFound{}
}

/*GetBranchNotFound handles this case with default header values.

branch not found
*/
type GetBranchNotFound struct {
	Payload *models.Error
}

func (o *GetBranchNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{repositoryId}/branches/{branchId}][%d] getBranchNotFound  %+v", 404, o.Payload)
}

func (o *GetBranchNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetBranchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBranchDefault creates a GetBranchDefault with default headers values
func NewGetBranchDefault(code int) *GetBranchDefault {
	return &GetBranchDefault{
		_statusCode: code,
	}
}

/*GetBranchDefault handles this case with default header values.

generic error response
*/
type GetBranchDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get branch default response
func (o *GetBranchDefault) Code() int {
	return o._statusCode
}

func (o *GetBranchDefault) Error() string {
	return fmt.Sprintf("[GET /repositories/{repositoryId}/branches/{branchId}][%d] getBranch default  %+v", o._statusCode, o.Payload)
}

func (o *GetBranchDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetBranchDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
