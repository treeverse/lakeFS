// Code generated by go-swagger; DO NOT EDIT.

package refs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDiffRefsParams creates a new DiffRefsParams object
// with the default values initialized.
func NewDiffRefsParams() *DiffRefsParams {
	var ()
	return &DiffRefsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDiffRefsParamsWithTimeout creates a new DiffRefsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDiffRefsParamsWithTimeout(timeout time.Duration) *DiffRefsParams {
	var ()
	return &DiffRefsParams{

		timeout: timeout,
	}
}

// NewDiffRefsParamsWithContext creates a new DiffRefsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDiffRefsParamsWithContext(ctx context.Context) *DiffRefsParams {
	var ()
	return &DiffRefsParams{

		Context: ctx,
	}
}

// NewDiffRefsParamsWithHTTPClient creates a new DiffRefsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDiffRefsParamsWithHTTPClient(client *http.Client) *DiffRefsParams {
	var ()
	return &DiffRefsParams{
		HTTPClient: client,
	}
}

/*DiffRefsParams contains all the parameters to send to the API endpoint
for the diff refs operation typically these are written to a http.Request
*/
type DiffRefsParams struct {

	/*LeftRef
	  a reference (could be either a branch ID or a commit ID)

	*/
	LeftRef string
	/*RepositoryID*/
	RepositoryID string
	/*RightRef
	  a reference (could be either a branch ID or a commit ID) to compare against

	*/
	RightRef string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the diff refs params
func (o *DiffRefsParams) WithTimeout(timeout time.Duration) *DiffRefsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the diff refs params
func (o *DiffRefsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the diff refs params
func (o *DiffRefsParams) WithContext(ctx context.Context) *DiffRefsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the diff refs params
func (o *DiffRefsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the diff refs params
func (o *DiffRefsParams) WithHTTPClient(client *http.Client) *DiffRefsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the diff refs params
func (o *DiffRefsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLeftRef adds the leftRef to the diff refs params
func (o *DiffRefsParams) WithLeftRef(leftRef string) *DiffRefsParams {
	o.SetLeftRef(leftRef)
	return o
}

// SetLeftRef adds the leftRef to the diff refs params
func (o *DiffRefsParams) SetLeftRef(leftRef string) {
	o.LeftRef = leftRef
}

// WithRepositoryID adds the repositoryID to the diff refs params
func (o *DiffRefsParams) WithRepositoryID(repositoryID string) *DiffRefsParams {
	o.SetRepositoryID(repositoryID)
	return o
}

// SetRepositoryID adds the repositoryId to the diff refs params
func (o *DiffRefsParams) SetRepositoryID(repositoryID string) {
	o.RepositoryID = repositoryID
}

// WithRightRef adds the rightRef to the diff refs params
func (o *DiffRefsParams) WithRightRef(rightRef string) *DiffRefsParams {
	o.SetRightRef(rightRef)
	return o
}

// SetRightRef adds the rightRef to the diff refs params
func (o *DiffRefsParams) SetRightRef(rightRef string) {
	o.RightRef = rightRef
}

// WriteToRequest writes these params to a swagger request
func (o *DiffRefsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param leftRef
	if err := r.SetPathParam("leftRef", o.LeftRef); err != nil {
		return err
	}

	// path param repositoryId
	if err := r.SetPathParam("repositoryId", o.RepositoryID); err != nil {
		return err
	}

	// path param rightRef
	if err := r.SetPathParam("rightRef", o.RightRef); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
