// Code generated by go-swagger; DO NOT EDIT.

package objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"github.com/treeverse/lakefs/api/gen/models"
)

// GetObjectHandlerFunc turns a function with the right signature into a get object handler
type GetObjectHandlerFunc func(GetObjectParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetObjectHandlerFunc) Handle(params GetObjectParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetObjectHandler interface for that can handle valid get object params
type GetObjectHandler interface {
	Handle(GetObjectParams, *models.User) middleware.Responder
}

// NewGetObject creates a new http.Handler for the get object operation
func NewGetObject(ctx *middleware.Context, handler GetObjectHandler) *GetObject {
	return &GetObject{Context: ctx, Handler: handler}
}

/*GetObject swagger:route GET /repositories/{repositoryId}/refs/{ref}/objects objects getObject

get object content

*/
type GetObject struct {
	Context *middleware.Context
	Handler GetObjectHandler
}

func (o *GetObject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetObjectParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
