// Code generated by go-swagger; DO NOT EDIT.

package objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListObjectsParams creates a new ListObjectsParams object
// no default values defined in spec.
func NewListObjectsParams() ListObjectsParams {

	return ListObjectsParams{}
}

// ListObjectsParams contains all the bound params for the list objects operation
// typically these are obtained from a http.Request
//
// swagger:parameters listObjects
type ListObjectsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	After *string
	/*
	  In: query
	*/
	Amount *int64
	/*a reference (could be either a branch ID or a commit ID)
	  Required: true
	  In: path
	*/
	Ref string
	/*
	  Required: true
	  In: path
	*/
	RepositoryID string
	/*
	  In: query
	*/
	Tree *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListObjectsParams() beforehand.
func (o *ListObjectsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAfter, qhkAfter, _ := qs.GetOK("after")
	if err := o.bindAfter(qAfter, qhkAfter, route.Formats); err != nil {
		res = append(res, err)
	}

	qAmount, qhkAmount, _ := qs.GetOK("amount")
	if err := o.bindAmount(qAmount, qhkAmount, route.Formats); err != nil {
		res = append(res, err)
	}

	rRef, rhkRef, _ := route.Params.GetOK("ref")
	if err := o.bindRef(rRef, rhkRef, route.Formats); err != nil {
		res = append(res, err)
	}

	rRepositoryID, rhkRepositoryID, _ := route.Params.GetOK("repositoryId")
	if err := o.bindRepositoryID(rRepositoryID, rhkRepositoryID, route.Formats); err != nil {
		res = append(res, err)
	}

	qTree, qhkTree, _ := qs.GetOK("tree")
	if err := o.bindTree(qTree, qhkTree, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAfter binds and validates parameter After from query.
func (o *ListObjectsParams) bindAfter(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.After = &raw

	return nil
}

// bindAmount binds and validates parameter Amount from query.
func (o *ListObjectsParams) bindAmount(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("amount", "query", "int64", raw)
	}
	o.Amount = &value

	return nil
}

// bindRef binds and validates parameter Ref from path.
func (o *ListObjectsParams) bindRef(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Ref = raw

	return nil
}

// bindRepositoryID binds and validates parameter RepositoryID from path.
func (o *ListObjectsParams) bindRepositoryID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.RepositoryID = raw

	return nil
}

// bindTree binds and validates parameter Tree from query.
func (o *ListObjectsParams) bindTree(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Tree = &raw

	return nil
}
