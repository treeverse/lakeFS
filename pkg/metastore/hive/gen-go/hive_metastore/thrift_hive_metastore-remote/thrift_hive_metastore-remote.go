// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/treeverse/lakefs/pkg/metastore/hive/gen-go/hive_metastore"
)

var _ = hive_metastore.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  string getMetaConf(string key)")
  fmt.Fprintln(os.Stderr, "  void setMetaConf(string key, string value)")
  fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
  fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
  fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData, bool cascade)")
  fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
  fmt.Fprintln(os.Stderr, "   get_all_databases()")
  fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
  fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
  fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
  fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
  fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
  fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
  fmt.Fprintln(os.Stderr, "   get_fields_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
  fmt.Fprintln(os.Stderr, "   get_schema_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
  fmt.Fprintln(os.Stderr, "  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void create_table_with_constraints(Table tbl,  primaryKeys,  foreignKeys,  uniqueConstraints,  notNullConstraints)")
  fmt.Fprintln(os.Stderr, "  void drop_constraint(DropConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_primary_key(AddPrimaryKeyRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_foreign_key(AddForeignKeyRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_unique_constraint(AddUniqueConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_not_null_constraint(AddNotNullConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  void drop_table_with_environment_context(string dbname, string name, bool deleteData, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void truncate_table(string dbName, string tableName,  partNames)")
  fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
  fmt.Fprintln(os.Stderr, "   get_tables_by_type(string db_name, string pattern, string tableType)")
  fmt.Fprintln(os.Stderr, "   get_table_meta(string db_patterns, string tbl_patterns,  tbl_types)")
  fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
  fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
  fmt.Fprintln(os.Stderr, "   get_table_objects_by_name(string dbname,  tbl_names)")
  fmt.Fprintln(os.Stderr, "  GetTableResult get_table_req(GetTableRequest req)")
  fmt.Fprintln(os.Stderr, "  GetTablesResult get_table_objects_by_name_req(GetTablesRequest req)")
  fmt.Fprintln(os.Stderr, "   get_table_names_by_filter(string dbname, string filter, i16 max_tables)")
  fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
  fmt.Fprintln(os.Stderr, "  void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void alter_table_with_cascade(string dbname, string tbl_name, Table new_tbl, bool cascade)")
  fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
  fmt.Fprintln(os.Stderr, "  Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  i32 add_partitions( new_parts)")
  fmt.Fprintln(os.Stderr, "  i32 add_partitions_pspec( new_parts)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
  fmt.Fprintln(os.Stderr, "  AddPartitionsResult add_partitions_req(AddPartitionsRequest request)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_with_environment_context(string db_name, string tbl_name,  part_vals, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_with_environment_context(string db_name, string tbl_name,  part_vals, bool deleteData, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  DropPartitionsResult drop_partitions_req(DropPartitionsRequest req)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
  fmt.Fprintln(os.Stderr, "  Partition exchange_partition( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
  fmt.Fprintln(os.Stderr, "   exchange_partitions( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
  fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   get_partitions_pspec(string db_name, string tbl_name, i32 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "  PartitionValuesResponse get_partition_values(PartitionValuesRequest request)")
  fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_part_specs_by_filter(string db_name, string tbl_name, string filter, i32 max_parts)")
  fmt.Fprintln(os.Stderr, "  PartitionsByExprResult get_partitions_by_expr(PartitionsByExprRequest req)")
  fmt.Fprintln(os.Stderr, "  i32 get_num_partitions_by_filter(string db_name, string tbl_name, string filter)")
  fmt.Fprintln(os.Stderr, "   get_partitions_by_names(string db_name, string tbl_name,  names)")
  fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
  fmt.Fprintln(os.Stderr, "  void alter_partitions(string db_name, string tbl_name,  new_parts)")
  fmt.Fprintln(os.Stderr, "  void alter_partitions_with_environment_context(string db_name, string tbl_name,  new_parts, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void rename_partition(string db_name, string tbl_name,  part_vals, Partition new_part)")
  fmt.Fprintln(os.Stderr, "  bool partition_name_has_valid_characters( part_vals, bool throw_exception)")
  fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
  fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
  fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
  fmt.Fprintln(os.Stderr, "  void markPartitionForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
  fmt.Fprintln(os.Stderr, "  bool isPartitionMarkedForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
  fmt.Fprintln(os.Stderr, "  Index add_index(Index new_index, Table index_table)")
  fmt.Fprintln(os.Stderr, "  void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)")
  fmt.Fprintln(os.Stderr, "  bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  Index get_index_by_name(string db_name, string tbl_name, string index_name)")
  fmt.Fprintln(os.Stderr, "   get_indexes(string db_name, string tbl_name, i16 max_indexes)")
  fmt.Fprintln(os.Stderr, "   get_index_names(string db_name, string tbl_name, i16 max_indexes)")
  fmt.Fprintln(os.Stderr, "  PrimaryKeysResponse get_primary_keys(PrimaryKeysRequest request)")
  fmt.Fprintln(os.Stderr, "  ForeignKeysResponse get_foreign_keys(ForeignKeysRequest request)")
  fmt.Fprintln(os.Stderr, "  UniqueConstraintsResponse get_unique_constraints(UniqueConstraintsRequest request)")
  fmt.Fprintln(os.Stderr, "  NotNullConstraintsResponse get_not_null_constraints(NotNullConstraintsRequest request)")
  fmt.Fprintln(os.Stderr, "  bool update_table_column_statistics(ColumnStatistics stats_obj)")
  fmt.Fprintln(os.Stderr, "  bool update_partition_column_statistics(ColumnStatistics stats_obj)")
  fmt.Fprintln(os.Stderr, "  ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  TableStatsResult get_table_statistics_req(TableStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  PartitionsStatsResult get_partitions_statistics_req(PartitionsStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  AggrStats get_aggr_stats_for(PartitionsStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  bool set_aggr_stats_for(SetPartitionsStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  bool delete_table_column_statistics(string db_name, string tbl_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  void create_function(Function func)")
  fmt.Fprintln(os.Stderr, "  void drop_function(string dbName, string funcName)")
  fmt.Fprintln(os.Stderr, "  void alter_function(string dbName, string funcName, Function newFunc)")
  fmt.Fprintln(os.Stderr, "   get_functions(string dbName, string pattern)")
  fmt.Fprintln(os.Stderr, "  Function get_function(string dbName, string funcName)")
  fmt.Fprintln(os.Stderr, "  GetAllFunctionsResponse get_all_functions()")
  fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
  fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
  fmt.Fprintln(os.Stderr, "   get_role_names()")
  fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
  fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
  fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
  fmt.Fprintln(os.Stderr, "  GrantRevokeRoleResponse grant_revoke_role(GrantRevokeRoleRequest request)")
  fmt.Fprintln(os.Stderr, "  GetPrincipalsInRoleResponse get_principals_in_role(GetPrincipalsInRoleRequest request)")
  fmt.Fprintln(os.Stderr, "  GetRoleGrantsForPrincipalResponse get_role_grants_for_principal(GetRoleGrantsForPrincipalRequest request)")
  fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
  fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
  fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
  fmt.Fprintln(os.Stderr, "  GrantRevokePrivilegeResponse grant_revoke_privileges(GrantRevokePrivilegeRequest request)")
  fmt.Fprintln(os.Stderr, "   set_ugi(string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)")
  fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
  fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
  fmt.Fprintln(os.Stderr, "  bool add_token(string token_identifier, string delegation_token)")
  fmt.Fprintln(os.Stderr, "  bool remove_token(string token_identifier)")
  fmt.Fprintln(os.Stderr, "  string get_token(string token_identifier)")
  fmt.Fprintln(os.Stderr, "   get_all_token_identifiers()")
  fmt.Fprintln(os.Stderr, "  i32 add_master_key(string key)")
  fmt.Fprintln(os.Stderr, "  void update_master_key(i32 seq_number, string key)")
  fmt.Fprintln(os.Stderr, "  bool remove_master_key(i32 key_seq)")
  fmt.Fprintln(os.Stderr, "   get_master_keys()")
  fmt.Fprintln(os.Stderr, "  GetOpenTxnsResponse get_open_txns()")
  fmt.Fprintln(os.Stderr, "  GetOpenTxnsInfoResponse get_open_txns_info()")
  fmt.Fprintln(os.Stderr, "  OpenTxnsResponse open_txns(OpenTxnRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void abort_txn(AbortTxnRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void abort_txns(AbortTxnsRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void commit_txn(CommitTxnRequest rqst)")
  fmt.Fprintln(os.Stderr, "  LockResponse lock(LockRequest rqst)")
  fmt.Fprintln(os.Stderr, "  LockResponse check_lock(CheckLockRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void unlock(UnlockRequest rqst)")
  fmt.Fprintln(os.Stderr, "  ShowLocksResponse show_locks(ShowLocksRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void heartbeat(HeartbeatRequest ids)")
  fmt.Fprintln(os.Stderr, "  HeartbeatTxnRangeResponse heartbeat_txn_range(HeartbeatTxnRangeRequest txns)")
  fmt.Fprintln(os.Stderr, "  void compact(CompactionRequest rqst)")
  fmt.Fprintln(os.Stderr, "  CompactionResponse compact2(CompactionRequest rqst)")
  fmt.Fprintln(os.Stderr, "  ShowCompactResponse show_compact(ShowCompactRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void add_dynamic_partitions(AddDynamicPartitions rqst)")
  fmt.Fprintln(os.Stderr, "  NotificationEventResponse get_next_notification(NotificationEventRequest rqst)")
  fmt.Fprintln(os.Stderr, "  CurrentNotificationEventId get_current_notificationEventId()")
  fmt.Fprintln(os.Stderr, "  NotificationEventsCountResponse get_notification_events_count(NotificationEventsCountRequest rqst)")
  fmt.Fprintln(os.Stderr, "  FireEventResponse fire_listener_event(FireEventRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void flushCache()")
  fmt.Fprintln(os.Stderr, "  CmRecycleResponse cm_recycle(CmRecycleRequest request)")
  fmt.Fprintln(os.Stderr, "  GetFileMetadataByExprResult get_file_metadata_by_expr(GetFileMetadataByExprRequest req)")
  fmt.Fprintln(os.Stderr, "  GetFileMetadataResult get_file_metadata(GetFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  PutFileMetadataResult put_file_metadata(PutFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  ClearFileMetadataResult clear_file_metadata(ClearFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  CacheFileMetadataResult cache_file_metadata(CacheFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  string get_metastore_db_uuid()")
  fmt.Fprintln(os.Stderr, "  WMCreateResourcePlanResponse create_resource_plan(WMCreateResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetResourcePlanResponse get_resource_plan(WMGetResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetActiveResourcePlanResponse get_active_resource_plan(WMGetActiveResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetAllResourcePlanResponse get_all_resource_plans(WMGetAllResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMAlterResourcePlanResponse alter_resource_plan(WMAlterResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMValidateResourcePlanResponse validate_resource_plan(WMValidateResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMDropResourcePlanResponse drop_resource_plan(WMDropResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMCreateTriggerResponse create_wm_trigger(WMCreateTriggerRequest request)")
  fmt.Fprintln(os.Stderr, "  WMAlterTriggerResponse alter_wm_trigger(WMAlterTriggerRequest request)")
  fmt.Fprintln(os.Stderr, "  WMDropTriggerResponse drop_wm_trigger(WMDropTriggerRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetTriggersForResourePlanResponse get_triggers_for_resourceplan(WMGetTriggersForResourePlanRequest request)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := hive_metastore.NewThriftHiveMetastoreClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getMetaConf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMetaConf requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMetaConf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setMetaConf":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetMetaConf requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetMetaConf(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "create_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
      flag.Usage()
    }
    arg1213 := flag.Arg(1)
    mbTrans1214 := thrift.NewTMemoryBufferLen(len(arg1213))
    defer mbTrans1214.Close()
    _, err1215 := mbTrans1214.WriteString(arg1213)
    if err1215 != nil {
      Usage()
      return
    }
    factory1216 := thrift.NewTJSONProtocolFactory()
    jsProt1217 := factory1216.GetProtocol(mbTrans1214)
    argvalue0 := hive_metastore.NewDatabase()
    err1218 := argvalue0.Read(context.Background(), jsProt1217)
    if err1218 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateDatabase(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabase(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_database":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DropDatabase requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropDatabase(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_databases":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabases(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_all_databases":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllDatabases(context.Background()))
    fmt.Print("\n")
    break
  case "alter_database":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1225 := flag.Arg(2)
    mbTrans1226 := thrift.NewTMemoryBufferLen(len(arg1225))
    defer mbTrans1226.Close()
    _, err1227 := mbTrans1226.WriteString(arg1225)
    if err1227 != nil {
      Usage()
      return
    }
    factory1228 := thrift.NewTJSONProtocolFactory()
    jsProt1229 := factory1228.GetProtocol(mbTrans1226)
    argvalue1 := hive_metastore.NewDatabase()
    err1230 := argvalue1.Read(context.Background(), jsProt1229)
    if err1230 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AlterDatabase(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetType requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
      flag.Usage()
    }
    arg1232 := flag.Arg(1)
    mbTrans1233 := thrift.NewTMemoryBufferLen(len(arg1232))
    defer mbTrans1233.Close()
    _, err1234 := mbTrans1233.WriteString(arg1232)
    if err1234 != nil {
      Usage()
      return
    }
    factory1235 := thrift.NewTJSONProtocolFactory()
    jsProt1236 := factory1235.GetProtocol(mbTrans1233)
    argvalue0 := hive_metastore.NewType()
    err1237 := argvalue0.Read(context.Background(), jsProt1236)
    if err1237 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropType requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_type_all":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetTypeAll(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_fields":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFields(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_fields_with_environment_context":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetFieldsWithEnvironmentContext requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1244 := flag.Arg(3)
    mbTrans1245 := thrift.NewTMemoryBufferLen(len(arg1244))
    defer mbTrans1245.Close()
    _, err1246 := mbTrans1245.WriteString(arg1244)
    if err1246 != nil {
      Usage()
      return
    }
    factory1247 := thrift.NewTJSONProtocolFactory()
    jsProt1248 := factory1247.GetProtocol(mbTrans1245)
    argvalue2 := hive_metastore.NewEnvironmentContext()
    err1249 := argvalue2.Read(context.Background(), jsProt1248)
    if err1249 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetFieldsWithEnvironmentContext(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_schema":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetSchema(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_schema_with_environment_context":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetSchemaWithEnvironmentContext requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1254 := flag.Arg(3)
    mbTrans1255 := thrift.NewTMemoryBufferLen(len(arg1254))
    defer mbTrans1255.Close()
    _, err1256 := mbTrans1255.WriteString(arg1254)
    if err1256 != nil {
      Usage()
      return
    }
    factory1257 := thrift.NewTJSONProtocolFactory()
    jsProt1258 := factory1257.GetProtocol(mbTrans1255)
    argvalue2 := hive_metastore.NewEnvironmentContext()
    err1259 := argvalue2.Read(context.Background(), jsProt1258)
    if err1259 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetSchemaWithEnvironmentContext(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "create_table":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
      flag.Usage()
    }
    arg1260 := flag.Arg(1)
    mbTrans1261 := thrift.NewTMemoryBufferLen(len(arg1260))
    defer mbTrans1261.Close()
    _, err1262 := mbTrans1261.WriteString(arg1260)
    if err1262 != nil {
      Usage()
      return
    }
    factory1263 := thrift.NewTJSONProtocolFactory()
    jsProt1264 := factory1263.GetProtocol(mbTrans1261)
    argvalue0 := hive_metastore.NewTable()
    err1265 := argvalue0.Read(context.Background(), jsProt1264)
    if err1265 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_table_with_environment_context":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateTableWithEnvironmentContext requires 2 args")
      flag.Usage()
    }
    arg1266 := flag.Arg(1)
    mbTrans1267 := thrift.NewTMemoryBufferLen(len(arg1266))
    defer mbTrans1267.Close()
    _, err1268 := mbTrans1267.WriteString(arg1266)
    if err1268 != nil {
      Usage()
      return
    }
    factory1269 := thrift.NewTJSONProtocolFactory()
    jsProt1270 := factory1269.GetProtocol(mbTrans1267)
    argvalue0 := hive_metastore.NewTable()
    err1271 := argvalue0.Read(context.Background(), jsProt1270)
    if err1271 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1272 := flag.Arg(2)
    mbTrans1273 := thrift.NewTMemoryBufferLen(len(arg1272))
    defer mbTrans1273.Close()
    _, err1274 := mbTrans1273.WriteString(arg1272)
    if err1274 != nil {
      Usage()
      return
    }
    factory1275 := thrift.NewTJSONProtocolFactory()
    jsProt1276 := factory1275.GetProtocol(mbTrans1273)
    argvalue1 := hive_metastore.NewEnvironmentContext()
    err1277 := argvalue1.Read(context.Background(), jsProt1276)
    if err1277 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateTableWithEnvironmentContext(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "create_table_with_constraints":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "CreateTableWithConstraints requires 5 args")
      flag.Usage()
    }
    arg1278 := flag.Arg(1)
    mbTrans1279 := thrift.NewTMemoryBufferLen(len(arg1278))
    defer mbTrans1279.Close()
    _, err1280 := mbTrans1279.WriteString(arg1278)
    if err1280 != nil {
      Usage()
      return
    }
    factory1281 := thrift.NewTJSONProtocolFactory()
    jsProt1282 := factory1281.GetProtocol(mbTrans1279)
    argvalue0 := hive_metastore.NewTable()
    err1283 := argvalue0.Read(context.Background(), jsProt1282)
    if err1283 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1284 := flag.Arg(2)
    mbTrans1285 := thrift.NewTMemoryBufferLen(len(arg1284))
    defer mbTrans1285.Close()
    _, err1286 := mbTrans1285.WriteString(arg1284)
    if err1286 != nil { 
      Usage()
      return
    }
    factory1287 := thrift.NewTJSONProtocolFactory()
    jsProt1288 := factory1287.GetProtocol(mbTrans1285)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err1289 := containerStruct1.ReadField2(context.Background(), jsProt1288)
    if err1289 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.PrimaryKeys
    value1 := argvalue1
    arg1290 := flag.Arg(3)
    mbTrans1291 := thrift.NewTMemoryBufferLen(len(arg1290))
    defer mbTrans1291.Close()
    _, err1292 := mbTrans1291.WriteString(arg1290)
    if err1292 != nil { 
      Usage()
      return
    }
    factory1293 := thrift.NewTJSONProtocolFactory()
    jsProt1294 := factory1293.GetProtocol(mbTrans1291)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err1295 := containerStruct2.ReadField3(context.Background(), jsProt1294)
    if err1295 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ForeignKeys
    value2 := argvalue2
    arg1296 := flag.Arg(4)
    mbTrans1297 := thrift.NewTMemoryBufferLen(len(arg1296))
    defer mbTrans1297.Close()
    _, err1298 := mbTrans1297.WriteString(arg1296)
    if err1298 != nil { 
      Usage()
      return
    }
    factory1299 := thrift.NewTJSONProtocolFactory()
    jsProt1300 := factory1299.GetProtocol(mbTrans1297)
    containerStruct3 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err1301 := containerStruct3.ReadField4(context.Background(), jsProt1300)
    if err1301 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.UniqueConstraints
    value3 := argvalue3
    arg1302 := flag.Arg(5)
    mbTrans1303 := thrift.NewTMemoryBufferLen(len(arg1302))
    defer mbTrans1303.Close()
    _, err1304 := mbTrans1303.WriteString(arg1302)
    if err1304 != nil { 
      Usage()
      return
    }
    factory1305 := thrift.NewTJSONProtocolFactory()
    jsProt1306 := factory1305.GetProtocol(mbTrans1303)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err1307 := containerStruct4.ReadField5(context.Background(), jsProt1306)
    if err1307 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.NotNullConstraints
    value4 := argvalue4
    fmt.Print(client.CreateTableWithConstraints(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "drop_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropConstraint requires 1 args")
      flag.Usage()
    }
    arg1308 := flag.Arg(1)
    mbTrans1309 := thrift.NewTMemoryBufferLen(len(arg1308))
    defer mbTrans1309.Close()
    _, err1310 := mbTrans1309.WriteString(arg1308)
    if err1310 != nil {
      Usage()
      return
    }
    factory1311 := thrift.NewTJSONProtocolFactory()
    jsProt1312 := factory1311.GetProtocol(mbTrans1309)
    argvalue0 := hive_metastore.NewDropConstraintRequest()
    err1313 := argvalue0.Read(context.Background(), jsProt1312)
    if err1313 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropConstraint(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_primary_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPrimaryKey requires 1 args")
      flag.Usage()
    }
    arg1314 := flag.Arg(1)
    mbTrans1315 := thrift.NewTMemoryBufferLen(len(arg1314))
    defer mbTrans1315.Close()
    _, err1316 := mbTrans1315.WriteString(arg1314)
    if err1316 != nil {
      Usage()
      return
    }
    factory1317 := thrift.NewTJSONProtocolFactory()
    jsProt1318 := factory1317.GetProtocol(mbTrans1315)
    argvalue0 := hive_metastore.NewAddPrimaryKeyRequest()
    err1319 := argvalue0.Read(context.Background(), jsProt1318)
    if err1319 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPrimaryKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_foreign_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddForeignKey requires 1 args")
      flag.Usage()
    }
    arg1320 := flag.Arg(1)
    mbTrans1321 := thrift.NewTMemoryBufferLen(len(arg1320))
    defer mbTrans1321.Close()
    _, err1322 := mbTrans1321.WriteString(arg1320)
    if err1322 != nil {
      Usage()
      return
    }
    factory1323 := thrift.NewTJSONProtocolFactory()
    jsProt1324 := factory1323.GetProtocol(mbTrans1321)
    argvalue0 := hive_metastore.NewAddForeignKeyRequest()
    err1325 := argvalue0.Read(context.Background(), jsProt1324)
    if err1325 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddForeignKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_unique_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddUniqueConstraint requires 1 args")
      flag.Usage()
    }
    arg1326 := flag.Arg(1)
    mbTrans1327 := thrift.NewTMemoryBufferLen(len(arg1326))
    defer mbTrans1327.Close()
    _, err1328 := mbTrans1327.WriteString(arg1326)
    if err1328 != nil {
      Usage()
      return
    }
    factory1329 := thrift.NewTJSONProtocolFactory()
    jsProt1330 := factory1329.GetProtocol(mbTrans1327)
    argvalue0 := hive_metastore.NewAddUniqueConstraintRequest()
    err1331 := argvalue0.Read(context.Background(), jsProt1330)
    if err1331 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddUniqueConstraint(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_not_null_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddNotNullConstraint requires 1 args")
      flag.Usage()
    }
    arg1332 := flag.Arg(1)
    mbTrans1333 := thrift.NewTMemoryBufferLen(len(arg1332))
    defer mbTrans1333.Close()
    _, err1334 := mbTrans1333.WriteString(arg1332)
    if err1334 != nil {
      Usage()
      return
    }
    factory1335 := thrift.NewTJSONProtocolFactory()
    jsProt1336 := factory1335.GetProtocol(mbTrans1333)
    argvalue0 := hive_metastore.NewAddNotNullConstraintRequest()
    err1337 := argvalue0.Read(context.Background(), jsProt1336)
    if err1337 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddNotNullConstraint(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropTable(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "drop_table_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropTableWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    arg1344 := flag.Arg(4)
    mbTrans1345 := thrift.NewTMemoryBufferLen(len(arg1344))
    defer mbTrans1345.Close()
    _, err1346 := mbTrans1345.WriteString(arg1344)
    if err1346 != nil {
      Usage()
      return
    }
    factory1347 := thrift.NewTJSONProtocolFactory()
    jsProt1348 := factory1347.GetProtocol(mbTrans1345)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1349 := argvalue3.Read(context.Background(), jsProt1348)
    if err1349 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DropTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "truncate_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TruncateTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1352 := flag.Arg(3)
    mbTrans1353 := thrift.NewTMemoryBufferLen(len(arg1352))
    defer mbTrans1353.Close()
    _, err1354 := mbTrans1353.WriteString(arg1352)
    if err1354 != nil { 
      Usage()
      return
    }
    factory1355 := thrift.NewTJSONProtocolFactory()
    jsProt1356 := factory1355.GetProtocol(mbTrans1353)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreTruncateTableArgs()
    err1357 := containerStruct2.ReadField3(context.Background(), jsProt1356)
    if err1357 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartNames
    value2 := argvalue2
    fmt.Print(client.TruncateTable(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_tables":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTables(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_tables_by_type":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTablesByType requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetTablesByType(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_table_meta":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableMeta requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1365 := flag.Arg(3)
    mbTrans1366 := thrift.NewTMemoryBufferLen(len(arg1365))
    defer mbTrans1366.Close()
    _, err1367 := mbTrans1366.WriteString(arg1365)
    if err1367 != nil { 
      Usage()
      return
    }
    factory1368 := thrift.NewTJSONProtocolFactory()
    jsProt1369 := factory1368.GetProtocol(mbTrans1366)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetTableMetaArgs()
    err1370 := containerStruct2.ReadField3(context.Background(), jsProt1369)
    if err1370 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.TblTypes
    value2 := argvalue2
    fmt.Print(client.GetTableMeta(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_all_tables":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAllTables(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_table_objects_by_name":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTableObjectsByName requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1375 := flag.Arg(2)
    mbTrans1376 := thrift.NewTMemoryBufferLen(len(arg1375))
    defer mbTrans1376.Close()
    _, err1377 := mbTrans1376.WriteString(arg1375)
    if err1377 != nil { 
      Usage()
      return
    }
    factory1378 := thrift.NewTJSONProtocolFactory()
    jsProt1379 := factory1378.GetProtocol(mbTrans1376)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreGetTableObjectsByNameArgs()
    err1380 := containerStruct1.ReadField2(context.Background(), jsProt1379)
    if err1380 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.TblNames
    value1 := argvalue1
    fmt.Print(client.GetTableObjectsByName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_table_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableReq requires 1 args")
      flag.Usage()
    }
    arg1381 := flag.Arg(1)
    mbTrans1382 := thrift.NewTMemoryBufferLen(len(arg1381))
    defer mbTrans1382.Close()
    _, err1383 := mbTrans1382.WriteString(arg1381)
    if err1383 != nil {
      Usage()
      return
    }
    factory1384 := thrift.NewTJSONProtocolFactory()
    jsProt1385 := factory1384.GetProtocol(mbTrans1382)
    argvalue0 := hive_metastore.NewGetTableRequest()
    err1386 := argvalue0.Read(context.Background(), jsProt1385)
    if err1386 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table_objects_by_name_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableObjectsByNameReq requires 1 args")
      flag.Usage()
    }
    arg1387 := flag.Arg(1)
    mbTrans1388 := thrift.NewTMemoryBufferLen(len(arg1387))
    defer mbTrans1388.Close()
    _, err1389 := mbTrans1388.WriteString(arg1387)
    if err1389 != nil {
      Usage()
      return
    }
    factory1390 := thrift.NewTJSONProtocolFactory()
    jsProt1391 := factory1390.GetProtocol(mbTrans1388)
    argvalue0 := hive_metastore.NewGetTablesRequest()
    err1392 := argvalue0.Read(context.Background(), jsProt1391)
    if err1392 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableObjectsByNameReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table_names_by_filter":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableNamesByFilter requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1395 := (strconv.Atoi(flag.Arg(3)))
    if err1395 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetTableNamesByFilter(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1398 := flag.Arg(3)
    mbTrans1399 := thrift.NewTMemoryBufferLen(len(arg1398))
    defer mbTrans1399.Close()
    _, err1400 := mbTrans1399.WriteString(arg1398)
    if err1400 != nil {
      Usage()
      return
    }
    factory1401 := thrift.NewTJSONProtocolFactory()
    jsProt1402 := factory1401.GetProtocol(mbTrans1399)
    argvalue2 := hive_metastore.NewTable()
    err1403 := argvalue2.Read(context.Background(), jsProt1402)
    if err1403 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterTable(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_table_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterTableWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1406 := flag.Arg(3)
    mbTrans1407 := thrift.NewTMemoryBufferLen(len(arg1406))
    defer mbTrans1407.Close()
    _, err1408 := mbTrans1407.WriteString(arg1406)
    if err1408 != nil {
      Usage()
      return
    }
    factory1409 := thrift.NewTJSONProtocolFactory()
    jsProt1410 := factory1409.GetProtocol(mbTrans1407)
    argvalue2 := hive_metastore.NewTable()
    err1411 := argvalue2.Read(context.Background(), jsProt1410)
    if err1411 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1412 := flag.Arg(4)
    mbTrans1413 := thrift.NewTMemoryBufferLen(len(arg1412))
    defer mbTrans1413.Close()
    _, err1414 := mbTrans1413.WriteString(arg1412)
    if err1414 != nil {
      Usage()
      return
    }
    factory1415 := thrift.NewTJSONProtocolFactory()
    jsProt1416 := factory1415.GetProtocol(mbTrans1413)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1417 := argvalue3.Read(context.Background(), jsProt1416)
    if err1417 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "alter_table_with_cascade":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterTableWithCascade requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1420 := flag.Arg(3)
    mbTrans1421 := thrift.NewTMemoryBufferLen(len(arg1420))
    defer mbTrans1421.Close()
    _, err1422 := mbTrans1421.WriteString(arg1420)
    if err1422 != nil {
      Usage()
      return
    }
    factory1423 := thrift.NewTJSONProtocolFactory()
    jsProt1424 := factory1423.GetProtocol(mbTrans1421)
    argvalue2 := hive_metastore.NewTable()
    err1425 := argvalue2.Read(context.Background(), jsProt1424)
    if err1425 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.AlterTableWithCascade(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "add_partition":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
      flag.Usage()
    }
    arg1427 := flag.Arg(1)
    mbTrans1428 := thrift.NewTMemoryBufferLen(len(arg1427))
    defer mbTrans1428.Close()
    _, err1429 := mbTrans1428.WriteString(arg1427)
    if err1429 != nil {
      Usage()
      return
    }
    factory1430 := thrift.NewTJSONProtocolFactory()
    jsProt1431 := factory1430.GetProtocol(mbTrans1428)
    argvalue0 := hive_metastore.NewPartition()
    err1432 := argvalue0.Read(context.Background(), jsProt1431)
    if err1432 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPartition(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_partition_with_environment_context":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddPartitionWithEnvironmentContext requires 2 args")
      flag.Usage()
    }
    arg1433 := flag.Arg(1)
    mbTrans1434 := thrift.NewTMemoryBufferLen(len(arg1433))
    defer mbTrans1434.Close()
    _, err1435 := mbTrans1434.WriteString(arg1433)
    if err1435 != nil {
      Usage()
      return
    }
    factory1436 := thrift.NewTJSONProtocolFactory()
    jsProt1437 := factory1436.GetProtocol(mbTrans1434)
    argvalue0 := hive_metastore.NewPartition()
    err1438 := argvalue0.Read(context.Background(), jsProt1437)
    if err1438 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1439 := flag.Arg(2)
    mbTrans1440 := thrift.NewTMemoryBufferLen(len(arg1439))
    defer mbTrans1440.Close()
    _, err1441 := mbTrans1440.WriteString(arg1439)
    if err1441 != nil {
      Usage()
      return
    }
    factory1442 := thrift.NewTJSONProtocolFactory()
    jsProt1443 := factory1442.GetProtocol(mbTrans1440)
    argvalue1 := hive_metastore.NewEnvironmentContext()
    err1444 := argvalue1.Read(context.Background(), jsProt1443)
    if err1444 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddPartitionWithEnvironmentContext(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "add_partitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartitions requires 1 args")
      flag.Usage()
    }
    arg1445 := flag.Arg(1)
    mbTrans1446 := thrift.NewTMemoryBufferLen(len(arg1445))
    defer mbTrans1446.Close()
    _, err1447 := mbTrans1446.WriteString(arg1445)
    if err1447 != nil { 
      Usage()
      return
    }
    factory1448 := thrift.NewTJSONProtocolFactory()
    jsProt1449 := factory1448.GetProtocol(mbTrans1446)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsArgs()
    err1450 := containerStruct0.ReadField1(context.Background(), jsProt1449)
    if err1450 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.NewParts_
    value0 := argvalue0
    fmt.Print(client.AddPartitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_partitions_pspec":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartitionsPspec requires 1 args")
      flag.Usage()
    }
    arg1451 := flag.Arg(1)
    mbTrans1452 := thrift.NewTMemoryBufferLen(len(arg1451))
    defer mbTrans1452.Close()
    _, err1453 := mbTrans1452.WriteString(arg1451)
    if err1453 != nil { 
      Usage()
      return
    }
    factory1454 := thrift.NewTJSONProtocolFactory()
    jsProt1455 := factory1454.GetProtocol(mbTrans1452)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsPspecArgs()
    err1456 := containerStruct0.ReadField1(context.Background(), jsProt1455)
    if err1456 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.NewParts_
    value0 := argvalue0
    fmt.Print(client.AddPartitionsPspec(context.Background(), value0))
    fmt.Print("\n")
    break
  case "append_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1459 := flag.Arg(3)
    mbTrans1460 := thrift.NewTMemoryBufferLen(len(arg1459))
    defer mbTrans1460.Close()
    _, err1461 := mbTrans1460.WriteString(arg1459)
    if err1461 != nil { 
      Usage()
      return
    }
    factory1462 := thrift.NewTJSONProtocolFactory()
    jsProt1463 := factory1462.GetProtocol(mbTrans1460)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionArgs()
    err1464 := containerStruct2.ReadField3(context.Background(), jsProt1463)
    if err1464 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.AppendPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "add_partitions_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartitionsReq requires 1 args")
      flag.Usage()
    }
    arg1465 := flag.Arg(1)
    mbTrans1466 := thrift.NewTMemoryBufferLen(len(arg1465))
    defer mbTrans1466.Close()
    _, err1467 := mbTrans1466.WriteString(arg1465)
    if err1467 != nil {
      Usage()
      return
    }
    factory1468 := thrift.NewTJSONProtocolFactory()
    jsProt1469 := factory1468.GetProtocol(mbTrans1466)
    argvalue0 := hive_metastore.NewAddPartitionsRequest()
    err1470 := argvalue0.Read(context.Background(), jsProt1469)
    if err1470 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPartitionsReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "append_partition_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AppendPartitionWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1473 := flag.Arg(3)
    mbTrans1474 := thrift.NewTMemoryBufferLen(len(arg1473))
    defer mbTrans1474.Close()
    _, err1475 := mbTrans1474.WriteString(arg1473)
    if err1475 != nil { 
      Usage()
      return
    }
    factory1476 := thrift.NewTJSONProtocolFactory()
    jsProt1477 := factory1476.GetProtocol(mbTrans1474)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs()
    err1478 := containerStruct2.ReadField3(context.Background(), jsProt1477)
    if err1478 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    arg1479 := flag.Arg(4)
    mbTrans1480 := thrift.NewTMemoryBufferLen(len(arg1479))
    defer mbTrans1480.Close()
    _, err1481 := mbTrans1480.WriteString(arg1479)
    if err1481 != nil {
      Usage()
      return
    }
    factory1482 := thrift.NewTJSONProtocolFactory()
    jsProt1483 := factory1482.GetProtocol(mbTrans1480)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1484 := argvalue3.Read(context.Background(), jsProt1483)
    if err1484 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AppendPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "append_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AppendPartitionByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "append_partition_by_name_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AppendPartitionByNameWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1491 := flag.Arg(4)
    mbTrans1492 := thrift.NewTMemoryBufferLen(len(arg1491))
    defer mbTrans1492.Close()
    _, err1493 := mbTrans1492.WriteString(arg1491)
    if err1493 != nil {
      Usage()
      return
    }
    factory1494 := thrift.NewTJSONProtocolFactory()
    jsProt1495 := factory1494.GetProtocol(mbTrans1492)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1496 := argvalue3.Read(context.Background(), jsProt1495)
    if err1496 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AppendPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1499 := flag.Arg(3)
    mbTrans1500 := thrift.NewTMemoryBufferLen(len(arg1499))
    defer mbTrans1500.Close()
    _, err1501 := mbTrans1500.WriteString(arg1499)
    if err1501 != nil { 
      Usage()
      return
    }
    factory1502 := thrift.NewTJSONProtocolFactory()
    jsProt1503 := factory1502.GetProtocol(mbTrans1500)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionArgs()
    err1504 := containerStruct2.ReadField3(context.Background(), jsProt1503)
    if err1504 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartition(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition_with_environment_context":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DropPartitionWithEnvironmentContext requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1508 := flag.Arg(3)
    mbTrans1509 := thrift.NewTMemoryBufferLen(len(arg1508))
    defer mbTrans1509.Close()
    _, err1510 := mbTrans1509.WriteString(arg1508)
    if err1510 != nil { 
      Usage()
      return
    }
    factory1511 := thrift.NewTJSONProtocolFactory()
    jsProt1512 := factory1511.GetProtocol(mbTrans1509)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs()
    err1513 := containerStruct2.ReadField3(context.Background(), jsProt1512)
    if err1513 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    arg1515 := flag.Arg(5)
    mbTrans1516 := thrift.NewTMemoryBufferLen(len(arg1515))
    defer mbTrans1516.Close()
    _, err1517 := mbTrans1516.WriteString(arg1515)
    if err1517 != nil {
      Usage()
      return
    }
    factory1518 := thrift.NewTJSONProtocolFactory()
    jsProt1519 := factory1518.GetProtocol(mbTrans1516)
    argvalue4 := hive_metastore.NewEnvironmentContext()
    err1520 := argvalue4.Read(context.Background(), jsProt1519)
    if err1520 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DropPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "drop_partition_by_name":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartitionByName(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition_by_name_with_environment_context":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DropPartitionByNameWithEnvironmentContext requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    arg1529 := flag.Arg(5)
    mbTrans1530 := thrift.NewTMemoryBufferLen(len(arg1529))
    defer mbTrans1530.Close()
    _, err1531 := mbTrans1530.WriteString(arg1529)
    if err1531 != nil {
      Usage()
      return
    }
    factory1532 := thrift.NewTJSONProtocolFactory()
    jsProt1533 := factory1532.GetProtocol(mbTrans1530)
    argvalue4 := hive_metastore.NewEnvironmentContext()
    err1534 := argvalue4.Read(context.Background(), jsProt1533)
    if err1534 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DropPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "drop_partitions_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropPartitionsReq requires 1 args")
      flag.Usage()
    }
    arg1535 := flag.Arg(1)
    mbTrans1536 := thrift.NewTMemoryBufferLen(len(arg1535))
    defer mbTrans1536.Close()
    _, err1537 := mbTrans1536.WriteString(arg1535)
    if err1537 != nil {
      Usage()
      return
    }
    factory1538 := thrift.NewTJSONProtocolFactory()
    jsProt1539 := factory1538.GetProtocol(mbTrans1536)
    argvalue0 := hive_metastore.NewDropPartitionsRequest()
    err1540 := argvalue0.Read(context.Background(), jsProt1539)
    if err1540 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropPartitionsReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1543 := flag.Arg(3)
    mbTrans1544 := thrift.NewTMemoryBufferLen(len(arg1543))
    defer mbTrans1544.Close()
    _, err1545 := mbTrans1544.WriteString(arg1543)
    if err1545 != nil { 
      Usage()
      return
    }
    factory1546 := thrift.NewTJSONProtocolFactory()
    jsProt1547 := factory1546.GetProtocol(mbTrans1544)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionArgs()
    err1548 := containerStruct2.ReadField3(context.Background(), jsProt1547)
    if err1548 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.GetPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "exchange_partition":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "ExchangePartition requires 5 args")
      flag.Usage()
    }
    arg1549 := flag.Arg(1)
    mbTrans1550 := thrift.NewTMemoryBufferLen(len(arg1549))
    defer mbTrans1550.Close()
    _, err1551 := mbTrans1550.WriteString(arg1549)
    if err1551 != nil { 
      Usage()
      return
    }
    factory1552 := thrift.NewTJSONProtocolFactory()
    jsProt1553 := factory1552.GetProtocol(mbTrans1550)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionArgs()
    err1554 := containerStruct0.ReadField1(context.Background(), jsProt1553)
    if err1554 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PartitionSpecs
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.ExchangePartition(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "exchange_partitions":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "ExchangePartitions requires 5 args")
      flag.Usage()
    }
    arg1559 := flag.Arg(1)
    mbTrans1560 := thrift.NewTMemoryBufferLen(len(arg1559))
    defer mbTrans1560.Close()
    _, err1561 := mbTrans1560.WriteString(arg1559)
    if err1561 != nil { 
      Usage()
      return
    }
    factory1562 := thrift.NewTJSONProtocolFactory()
    jsProt1563 := factory1562.GetProtocol(mbTrans1560)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionsArgs()
    err1564 := containerStruct0.ReadField1(context.Background(), jsProt1563)
    if err1564 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PartitionSpecs
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.ExchangePartitions(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1571 := flag.Arg(3)
    mbTrans1572 := thrift.NewTMemoryBufferLen(len(arg1571))
    defer mbTrans1572.Close()
    _, err1573 := mbTrans1572.WriteString(arg1571)
    if err1573 != nil { 
      Usage()
      return
    }
    factory1574 := thrift.NewTJSONProtocolFactory()
    jsProt1575 := factory1574.GetProtocol(mbTrans1572)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
    err1576 := containerStruct2.ReadField3(context.Background(), jsProt1575)
    if err1576 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1578 := flag.Arg(5)
    mbTrans1579 := thrift.NewTMemoryBufferLen(len(arg1578))
    defer mbTrans1579.Close()
    _, err1580 := mbTrans1579.WriteString(arg1578)
    if err1580 != nil { 
      Usage()
      return
    }
    factory1581 := thrift.NewTJSONProtocolFactory()
    jsProt1582 := factory1581.GetProtocol(mbTrans1579)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
    err1583 := containerStruct4.ReadField5(context.Background(), jsProt1582)
    if err1583 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionWithAuth(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetPartitionByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1589 := (strconv.Atoi(flag.Arg(3)))
    if err1589 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitions(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1592 := (strconv.Atoi(flag.Arg(3)))
    if err1592 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1594 := flag.Arg(5)
    mbTrans1595 := thrift.NewTMemoryBufferLen(len(arg1594))
    defer mbTrans1595.Close()
    _, err1596 := mbTrans1595.WriteString(arg1594)
    if err1596 != nil { 
      Usage()
      return
    }
    factory1597 := thrift.NewTJSONProtocolFactory()
    jsProt1598 := factory1597.GetProtocol(mbTrans1595)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionsWithAuthArgs()
    err1599 := containerStruct4.ReadField5(context.Background(), jsProt1598)
    if err1599 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionsWithAuth(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partitions_pspec":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPspec requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1602 := (strconv.Atoi(flag.Arg(3)))
    if err1602 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitionsPspec(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1605 := (strconv.Atoi(flag.Arg(3)))
    if err1605 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitionNames(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_values":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionValues requires 1 args")
      flag.Usage()
    }
    arg1606 := flag.Arg(1)
    mbTrans1607 := thrift.NewTMemoryBufferLen(len(arg1606))
    defer mbTrans1607.Close()
    _, err1608 := mbTrans1607.WriteString(arg1606)
    if err1608 != nil {
      Usage()
      return
    }
    factory1609 := thrift.NewTJSONProtocolFactory()
    jsProt1610 := factory1609.GetProtocol(mbTrans1607)
    argvalue0 := hive_metastore.NewPartitionValuesRequest()
    err1611 := argvalue0.Read(context.Background(), jsProt1610)
    if err1611 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionValues(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_partitions_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1614 := flag.Arg(3)
    mbTrans1615 := thrift.NewTMemoryBufferLen(len(arg1614))
    defer mbTrans1615.Close()
    _, err1616 := mbTrans1615.WriteString(arg1614)
    if err1616 != nil { 
      Usage()
      return
    }
    factory1617 := thrift.NewTJSONProtocolFactory()
    jsProt1618 := factory1617.GetProtocol(mbTrans1615)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsArgs()
    err1619 := containerStruct2.ReadField3(context.Background(), jsProt1618)
    if err1619 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err1620 := (strconv.Atoi(flag.Arg(4)))
    if err1620 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsPs(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_ps_with_auth":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1623 := flag.Arg(3)
    mbTrans1624 := thrift.NewTMemoryBufferLen(len(arg1623))
    defer mbTrans1624.Close()
    _, err1625 := mbTrans1624.WriteString(arg1623)
    if err1625 != nil { 
      Usage()
      return
    }
    factory1626 := thrift.NewTJSONProtocolFactory()
    jsProt1627 := factory1626.GetProtocol(mbTrans1624)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
    err1628 := containerStruct2.ReadField3(context.Background(), jsProt1627)
    if err1628 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err1629 := (strconv.Atoi(flag.Arg(4)))
    if err1629 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg1631 := flag.Arg(6)
    mbTrans1632 := thrift.NewTMemoryBufferLen(len(arg1631))
    defer mbTrans1632.Close()
    _, err1633 := mbTrans1632.WriteString(arg1631)
    if err1633 != nil { 
      Usage()
      return
    }
    factory1634 := thrift.NewTJSONProtocolFactory()
    jsProt1635 := factory1634.GetProtocol(mbTrans1632)
    containerStruct5 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
    err1636 := containerStruct5.ReadField6(context.Background(), jsProt1635)
    if err1636 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.GroupNames
    value5 := argvalue5
    fmt.Print(client.GetPartitionsPsWithAuth(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "get_partition_names_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1639 := flag.Arg(3)
    mbTrans1640 := thrift.NewTMemoryBufferLen(len(arg1639))
    defer mbTrans1640.Close()
    _, err1641 := mbTrans1640.WriteString(arg1639)
    if err1641 != nil { 
      Usage()
      return
    }
    factory1642 := thrift.NewTJSONProtocolFactory()
    jsProt1643 := factory1642.GetProtocol(mbTrans1640)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionNamesPsArgs()
    err1644 := containerStruct2.ReadField3(context.Background(), jsProt1643)
    if err1644 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err1645 := (strconv.Atoi(flag.Arg(4)))
    if err1645 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionNamesPs(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_by_filter":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err1649 := (strconv.Atoi(flag.Arg(4)))
    if err1649 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsByFilter(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_part_specs_by_filter":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartSpecsByFilter requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err1653 := (strconv.Atoi(flag.Arg(4)))
    if err1653 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartSpecsByFilter(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_by_expr":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByExpr requires 1 args")
      flag.Usage()
    }
    arg1654 := flag.Arg(1)
    mbTrans1655 := thrift.NewTMemoryBufferLen(len(arg1654))
    defer mbTrans1655.Close()
    _, err1656 := mbTrans1655.WriteString(arg1654)
    if err1656 != nil {
      Usage()
      return
    }
    factory1657 := thrift.NewTJSONProtocolFactory()
    jsProt1658 := factory1657.GetProtocol(mbTrans1655)
    argvalue0 := hive_metastore.NewPartitionsByExprRequest()
    err1659 := argvalue0.Read(context.Background(), jsProt1658)
    if err1659 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionsByExpr(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_num_partitions_by_filter":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNumPartitionsByFilter requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetNumPartitionsByFilter(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_by_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1665 := flag.Arg(3)
    mbTrans1666 := thrift.NewTMemoryBufferLen(len(arg1665))
    defer mbTrans1666.Close()
    _, err1667 := mbTrans1666.WriteString(arg1665)
    if err1667 != nil { 
      Usage()
      return
    }
    factory1668 := thrift.NewTJSONProtocolFactory()
    jsProt1669 := factory1668.GetProtocol(mbTrans1666)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsByNamesArgs()
    err1670 := containerStruct2.ReadField3(context.Background(), jsProt1669)
    if err1670 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Names
    value2 := argvalue2
    fmt.Print(client.GetPartitionsByNames(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1673 := flag.Arg(3)
    mbTrans1674 := thrift.NewTMemoryBufferLen(len(arg1673))
    defer mbTrans1674.Close()
    _, err1675 := mbTrans1674.WriteString(arg1673)
    if err1675 != nil {
      Usage()
      return
    }
    factory1676 := thrift.NewTJSONProtocolFactory()
    jsProt1677 := factory1676.GetProtocol(mbTrans1674)
    argvalue2 := hive_metastore.NewPartition()
    err1678 := argvalue2.Read(context.Background(), jsProt1677)
    if err1678 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterPartitions requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1681 := flag.Arg(3)
    mbTrans1682 := thrift.NewTMemoryBufferLen(len(arg1681))
    defer mbTrans1682.Close()
    _, err1683 := mbTrans1682.WriteString(arg1681)
    if err1683 != nil { 
      Usage()
      return
    }
    factory1684 := thrift.NewTJSONProtocolFactory()
    jsProt1685 := factory1684.GetProtocol(mbTrans1682)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsArgs()
    err1686 := containerStruct2.ReadField3(context.Background(), jsProt1685)
    if err1686 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.NewParts_
    value2 := argvalue2
    fmt.Print(client.AlterPartitions(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partitions_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterPartitionsWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1689 := flag.Arg(3)
    mbTrans1690 := thrift.NewTMemoryBufferLen(len(arg1689))
    defer mbTrans1690.Close()
    _, err1691 := mbTrans1690.WriteString(arg1689)
    if err1691 != nil { 
      Usage()
      return
    }
    factory1692 := thrift.NewTJSONProtocolFactory()
    jsProt1693 := factory1692.GetProtocol(mbTrans1690)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs()
    err1694 := containerStruct2.ReadField3(context.Background(), jsProt1693)
    if err1694 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.NewParts_
    value2 := argvalue2
    arg1695 := flag.Arg(4)
    mbTrans1696 := thrift.NewTMemoryBufferLen(len(arg1695))
    defer mbTrans1696.Close()
    _, err1697 := mbTrans1696.WriteString(arg1695)
    if err1697 != nil {
      Usage()
      return
    }
    factory1698 := thrift.NewTJSONProtocolFactory()
    jsProt1699 := factory1698.GetProtocol(mbTrans1696)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1700 := argvalue3.Read(context.Background(), jsProt1699)
    if err1700 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterPartitionsWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "alter_partition_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterPartitionWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1703 := flag.Arg(3)
    mbTrans1704 := thrift.NewTMemoryBufferLen(len(arg1703))
    defer mbTrans1704.Close()
    _, err1705 := mbTrans1704.WriteString(arg1703)
    if err1705 != nil {
      Usage()
      return
    }
    factory1706 := thrift.NewTJSONProtocolFactory()
    jsProt1707 := factory1706.GetProtocol(mbTrans1704)
    argvalue2 := hive_metastore.NewPartition()
    err1708 := argvalue2.Read(context.Background(), jsProt1707)
    if err1708 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1709 := flag.Arg(4)
    mbTrans1710 := thrift.NewTMemoryBufferLen(len(arg1709))
    defer mbTrans1710.Close()
    _, err1711 := mbTrans1710.WriteString(arg1709)
    if err1711 != nil {
      Usage()
      return
    }
    factory1712 := thrift.NewTJSONProtocolFactory()
    jsProt1713 := factory1712.GetProtocol(mbTrans1710)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1714 := argvalue3.Read(context.Background(), jsProt1713)
    if err1714 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "rename_partition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RenamePartition requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1717 := flag.Arg(3)
    mbTrans1718 := thrift.NewTMemoryBufferLen(len(arg1717))
    defer mbTrans1718.Close()
    _, err1719 := mbTrans1718.WriteString(arg1717)
    if err1719 != nil { 
      Usage()
      return
    }
    factory1720 := thrift.NewTJSONProtocolFactory()
    jsProt1721 := factory1720.GetProtocol(mbTrans1718)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreRenamePartitionArgs()
    err1722 := containerStruct2.ReadField3(context.Background(), jsProt1721)
    if err1722 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    arg1723 := flag.Arg(4)
    mbTrans1724 := thrift.NewTMemoryBufferLen(len(arg1723))
    defer mbTrans1724.Close()
    _, err1725 := mbTrans1724.WriteString(arg1723)
    if err1725 != nil {
      Usage()
      return
    }
    factory1726 := thrift.NewTJSONProtocolFactory()
    jsProt1727 := factory1726.GetProtocol(mbTrans1724)
    argvalue3 := hive_metastore.NewPartition()
    err1728 := argvalue3.Read(context.Background(), jsProt1727)
    if err1728 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.RenamePartition(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "partition_name_has_valid_characters":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionNameHasValidCharacters requires 2 args")
      flag.Usage()
    }
    arg1729 := flag.Arg(1)
    mbTrans1730 := thrift.NewTMemoryBufferLen(len(arg1729))
    defer mbTrans1730.Close()
    _, err1731 := mbTrans1730.WriteString(arg1729)
    if err1731 != nil { 
      Usage()
      return
    }
    factory1732 := thrift.NewTJSONProtocolFactory()
    jsProt1733 := factory1732.GetProtocol(mbTrans1730)
    containerStruct0 := hive_metastore.NewThriftHiveMetastorePartitionNameHasValidCharactersArgs()
    err1734 := containerStruct0.ReadField1(context.Background(), jsProt1733)
    if err1734 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PartVals
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.PartitionNameHasValidCharacters(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_config_value":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetConfigValue(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partition_name_to_vals":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToVals(context.Background(), value0))
    fmt.Print("\n")
    break
  case "partition_name_to_spec":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToSpec(context.Background(), value0))
    fmt.Print("\n")
    break
  case "markPartitionForEvent":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "MarkPartitionForEvent requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1742 := flag.Arg(3)
    mbTrans1743 := thrift.NewTMemoryBufferLen(len(arg1742))
    defer mbTrans1743.Close()
    _, err1744 := mbTrans1743.WriteString(arg1742)
    if err1744 != nil { 
      Usage()
      return
    }
    factory1745 := thrift.NewTJSONProtocolFactory()
    jsProt1746 := factory1745.GetProtocol(mbTrans1743)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreMarkPartitionForEventArgs()
    err1747 := containerStruct2.ReadField3(context.Background(), jsProt1746)
    if err1747 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := hive_metastore.PartitionEventType(tmp3)
    value3 := argvalue3
    fmt.Print(client.MarkPartitionForEvent(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "isPartitionMarkedForEvent":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "IsPartitionMarkedForEvent requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1750 := flag.Arg(3)
    mbTrans1751 := thrift.NewTMemoryBufferLen(len(arg1750))
    defer mbTrans1751.Close()
    _, err1752 := mbTrans1751.WriteString(arg1750)
    if err1752 != nil { 
      Usage()
      return
    }
    factory1753 := thrift.NewTJSONProtocolFactory()
    jsProt1754 := factory1753.GetProtocol(mbTrans1751)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreIsPartitionMarkedForEventArgs()
    err1755 := containerStruct2.ReadField3(context.Background(), jsProt1754)
    if err1755 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := hive_metastore.PartitionEventType(tmp3)
    value3 := argvalue3
    fmt.Print(client.IsPartitionMarkedForEvent(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "add_index":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddIndex requires 2 args")
      flag.Usage()
    }
    arg1756 := flag.Arg(1)
    mbTrans1757 := thrift.NewTMemoryBufferLen(len(arg1756))
    defer mbTrans1757.Close()
    _, err1758 := mbTrans1757.WriteString(arg1756)
    if err1758 != nil {
      Usage()
      return
    }
    factory1759 := thrift.NewTJSONProtocolFactory()
    jsProt1760 := factory1759.GetProtocol(mbTrans1757)
    argvalue0 := hive_metastore.NewIndex()
    err1761 := argvalue0.Read(context.Background(), jsProt1760)
    if err1761 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1762 := flag.Arg(2)
    mbTrans1763 := thrift.NewTMemoryBufferLen(len(arg1762))
    defer mbTrans1763.Close()
    _, err1764 := mbTrans1763.WriteString(arg1762)
    if err1764 != nil {
      Usage()
      return
    }
    factory1765 := thrift.NewTJSONProtocolFactory()
    jsProt1766 := factory1765.GetProtocol(mbTrans1763)
    argvalue1 := hive_metastore.NewTable()
    err1767 := argvalue1.Read(context.Background(), jsProt1766)
    if err1767 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddIndex(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alter_index":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterIndex requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1771 := flag.Arg(4)
    mbTrans1772 := thrift.NewTMemoryBufferLen(len(arg1771))
    defer mbTrans1772.Close()
    _, err1773 := mbTrans1772.WriteString(arg1771)
    if err1773 != nil {
      Usage()
      return
    }
    factory1774 := thrift.NewTJSONProtocolFactory()
    jsProt1775 := factory1774.GetProtocol(mbTrans1772)
    argvalue3 := hive_metastore.NewIndex()
    err1776 := argvalue3.Read(context.Background(), jsProt1775)
    if err1776 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterIndex(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_index_by_name":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropIndexByName requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropIndexByName(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_index_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetIndexByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_indexes":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexes requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1786 := (strconv.Atoi(flag.Arg(3)))
    if err1786 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetIndexes(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_index_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1789 := (strconv.Atoi(flag.Arg(3)))
    if err1789 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetIndexNames(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_primary_keys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPrimaryKeys requires 1 args")
      flag.Usage()
    }
    arg1790 := flag.Arg(1)
    mbTrans1791 := thrift.NewTMemoryBufferLen(len(arg1790))
    defer mbTrans1791.Close()
    _, err1792 := mbTrans1791.WriteString(arg1790)
    if err1792 != nil {
      Usage()
      return
    }
    factory1793 := thrift.NewTJSONProtocolFactory()
    jsProt1794 := factory1793.GetProtocol(mbTrans1791)
    argvalue0 := hive_metastore.NewPrimaryKeysRequest()
    err1795 := argvalue0.Read(context.Background(), jsProt1794)
    if err1795 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPrimaryKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_foreign_keys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetForeignKeys requires 1 args")
      flag.Usage()
    }
    arg1796 := flag.Arg(1)
    mbTrans1797 := thrift.NewTMemoryBufferLen(len(arg1796))
    defer mbTrans1797.Close()
    _, err1798 := mbTrans1797.WriteString(arg1796)
    if err1798 != nil {
      Usage()
      return
    }
    factory1799 := thrift.NewTJSONProtocolFactory()
    jsProt1800 := factory1799.GetProtocol(mbTrans1797)
    argvalue0 := hive_metastore.NewForeignKeysRequest()
    err1801 := argvalue0.Read(context.Background(), jsProt1800)
    if err1801 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetForeignKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_unique_constraints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUniqueConstraints requires 1 args")
      flag.Usage()
    }
    arg1802 := flag.Arg(1)
    mbTrans1803 := thrift.NewTMemoryBufferLen(len(arg1802))
    defer mbTrans1803.Close()
    _, err1804 := mbTrans1803.WriteString(arg1802)
    if err1804 != nil {
      Usage()
      return
    }
    factory1805 := thrift.NewTJSONProtocolFactory()
    jsProt1806 := factory1805.GetProtocol(mbTrans1803)
    argvalue0 := hive_metastore.NewUniqueConstraintsRequest()
    err1807 := argvalue0.Read(context.Background(), jsProt1806)
    if err1807 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUniqueConstraints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_not_null_constraints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNotNullConstraints requires 1 args")
      flag.Usage()
    }
    arg1808 := flag.Arg(1)
    mbTrans1809 := thrift.NewTMemoryBufferLen(len(arg1808))
    defer mbTrans1809.Close()
    _, err1810 := mbTrans1809.WriteString(arg1808)
    if err1810 != nil {
      Usage()
      return
    }
    factory1811 := thrift.NewTJSONProtocolFactory()
    jsProt1812 := factory1811.GetProtocol(mbTrans1809)
    argvalue0 := hive_metastore.NewNotNullConstraintsRequest()
    err1813 := argvalue0.Read(context.Background(), jsProt1812)
    if err1813 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNotNullConstraints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_table_column_statistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateTableColumnStatistics requires 1 args")
      flag.Usage()
    }
    arg1814 := flag.Arg(1)
    mbTrans1815 := thrift.NewTMemoryBufferLen(len(arg1814))
    defer mbTrans1815.Close()
    _, err1816 := mbTrans1815.WriteString(arg1814)
    if err1816 != nil {
      Usage()
      return
    }
    factory1817 := thrift.NewTJSONProtocolFactory()
    jsProt1818 := factory1817.GetProtocol(mbTrans1815)
    argvalue0 := hive_metastore.NewColumnStatistics()
    err1819 := argvalue0.Read(context.Background(), jsProt1818)
    if err1819 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateTableColumnStatistics(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_partition_column_statistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatistics requires 1 args")
      flag.Usage()
    }
    arg1820 := flag.Arg(1)
    mbTrans1821 := thrift.NewTMemoryBufferLen(len(arg1820))
    defer mbTrans1821.Close()
    _, err1822 := mbTrans1821.WriteString(arg1820)
    if err1822 != nil {
      Usage()
      return
    }
    factory1823 := thrift.NewTJSONProtocolFactory()
    jsProt1824 := factory1823.GetProtocol(mbTrans1821)
    argvalue0 := hive_metastore.NewColumnStatistics()
    err1825 := argvalue0.Read(context.Background(), jsProt1824)
    if err1825 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdatePartitionColumnStatistics(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table_column_statistics":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableColumnStatistics requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetTableColumnStatistics(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_column_statistics":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionColumnStatistics requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetPartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_table_statistics_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableStatisticsReq requires 1 args")
      flag.Usage()
    }
    arg1833 := flag.Arg(1)
    mbTrans1834 := thrift.NewTMemoryBufferLen(len(arg1833))
    defer mbTrans1834.Close()
    _, err1835 := mbTrans1834.WriteString(arg1833)
    if err1835 != nil {
      Usage()
      return
    }
    factory1836 := thrift.NewTJSONProtocolFactory()
    jsProt1837 := factory1836.GetProtocol(mbTrans1834)
    argvalue0 := hive_metastore.NewTableStatsRequest()
    err1838 := argvalue0.Read(context.Background(), jsProt1837)
    if err1838 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableStatisticsReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_partitions_statistics_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionsStatisticsReq requires 1 args")
      flag.Usage()
    }
    arg1839 := flag.Arg(1)
    mbTrans1840 := thrift.NewTMemoryBufferLen(len(arg1839))
    defer mbTrans1840.Close()
    _, err1841 := mbTrans1840.WriteString(arg1839)
    if err1841 != nil {
      Usage()
      return
    }
    factory1842 := thrift.NewTJSONProtocolFactory()
    jsProt1843 := factory1842.GetProtocol(mbTrans1840)
    argvalue0 := hive_metastore.NewPartitionsStatsRequest()
    err1844 := argvalue0.Read(context.Background(), jsProt1843)
    if err1844 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionsStatisticsReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_aggr_stats_for":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAggrStatsFor requires 1 args")
      flag.Usage()
    }
    arg1845 := flag.Arg(1)
    mbTrans1846 := thrift.NewTMemoryBufferLen(len(arg1845))
    defer mbTrans1846.Close()
    _, err1847 := mbTrans1846.WriteString(arg1845)
    if err1847 != nil {
      Usage()
      return
    }
    factory1848 := thrift.NewTJSONProtocolFactory()
    jsProt1849 := factory1848.GetProtocol(mbTrans1846)
    argvalue0 := hive_metastore.NewPartitionsStatsRequest()
    err1850 := argvalue0.Read(context.Background(), jsProt1849)
    if err1850 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAggrStatsFor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_aggr_stats_for":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetAggrStatsFor requires 1 args")
      flag.Usage()
    }
    arg1851 := flag.Arg(1)
    mbTrans1852 := thrift.NewTMemoryBufferLen(len(arg1851))
    defer mbTrans1852.Close()
    _, err1853 := mbTrans1852.WriteString(arg1851)
    if err1853 != nil {
      Usage()
      return
    }
    factory1854 := thrift.NewTJSONProtocolFactory()
    jsProt1855 := factory1854.GetProtocol(mbTrans1852)
    argvalue0 := hive_metastore.NewSetPartitionsStatsRequest()
    err1856 := argvalue0.Read(context.Background(), jsProt1855)
    if err1856 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetAggrStatsFor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "delete_partition_column_statistics":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DeletePartitionColumnStatistics requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.DeletePartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "delete_table_column_statistics":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteTableColumnStatistics requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteTableColumnStatistics(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "create_function":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateFunction requires 1 args")
      flag.Usage()
    }
    arg1864 := flag.Arg(1)
    mbTrans1865 := thrift.NewTMemoryBufferLen(len(arg1864))
    defer mbTrans1865.Close()
    _, err1866 := mbTrans1865.WriteString(arg1864)
    if err1866 != nil {
      Usage()
      return
    }
    factory1867 := thrift.NewTJSONProtocolFactory()
    jsProt1868 := factory1867.GetProtocol(mbTrans1865)
    argvalue0 := hive_metastore.NewFunction()
    err1869 := argvalue0.Read(context.Background(), jsProt1868)
    if err1869 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateFunction(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_function":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DropFunction requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DropFunction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alter_function":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterFunction requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1874 := flag.Arg(3)
    mbTrans1875 := thrift.NewTMemoryBufferLen(len(arg1874))
    defer mbTrans1875.Close()
    _, err1876 := mbTrans1875.WriteString(arg1874)
    if err1876 != nil {
      Usage()
      return
    }
    factory1877 := thrift.NewTJSONProtocolFactory()
    jsProt1878 := factory1877.GetProtocol(mbTrans1875)
    argvalue2 := hive_metastore.NewFunction()
    err1879 := argvalue2.Read(context.Background(), jsProt1878)
    if err1879 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterFunction(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_functions":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFunctions requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFunctions(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_function":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFunction requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFunction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_all_functions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllFunctions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllFunctions(context.Background()))
    fmt.Print("\n")
    break
  case "create_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
      flag.Usage()
    }
    arg1884 := flag.Arg(1)
    mbTrans1885 := thrift.NewTMemoryBufferLen(len(arg1884))
    defer mbTrans1885.Close()
    _, err1886 := mbTrans1885.WriteString(arg1884)
    if err1886 != nil {
      Usage()
      return
    }
    factory1887 := thrift.NewTJSONProtocolFactory()
    jsProt1888 := factory1887.GetProtocol(mbTrans1885)
    argvalue0 := hive_metastore.NewRole()
    err1889 := argvalue0.Read(context.Background(), jsProt1888)
    if err1889 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_role_names":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRoleNames(context.Background()))
    fmt.Print("\n")
    break
  case "grant_role":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_metastore.PrincipalType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := hive_metastore.PrincipalType(tmp4)
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GrantRole(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "revoke_role":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_metastore.PrincipalType(tmp2)
    value2 := argvalue2
    fmt.Print(client.RevokeRole(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_roles":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_metastore.PrincipalType(tmp1)
    value1 := argvalue1
    fmt.Print(client.ListRoles(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "grant_revoke_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantRevokeRole requires 1 args")
      flag.Usage()
    }
    arg1898 := flag.Arg(1)
    mbTrans1899 := thrift.NewTMemoryBufferLen(len(arg1898))
    defer mbTrans1899.Close()
    _, err1900 := mbTrans1899.WriteString(arg1898)
    if err1900 != nil {
      Usage()
      return
    }
    factory1901 := thrift.NewTJSONProtocolFactory()
    jsProt1902 := factory1901.GetProtocol(mbTrans1899)
    argvalue0 := hive_metastore.NewGrantRevokeRoleRequest()
    err1903 := argvalue0.Read(context.Background(), jsProt1902)
    if err1903 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantRevokeRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_principals_in_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPrincipalsInRole requires 1 args")
      flag.Usage()
    }
    arg1904 := flag.Arg(1)
    mbTrans1905 := thrift.NewTMemoryBufferLen(len(arg1904))
    defer mbTrans1905.Close()
    _, err1906 := mbTrans1905.WriteString(arg1904)
    if err1906 != nil {
      Usage()
      return
    }
    factory1907 := thrift.NewTJSONProtocolFactory()
    jsProt1908 := factory1907.GetProtocol(mbTrans1905)
    argvalue0 := hive_metastore.NewGetPrincipalsInRoleRequest()
    err1909 := argvalue0.Read(context.Background(), jsProt1908)
    if err1909 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPrincipalsInRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_role_grants_for_principal":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoleGrantsForPrincipal requires 1 args")
      flag.Usage()
    }
    arg1910 := flag.Arg(1)
    mbTrans1911 := thrift.NewTMemoryBufferLen(len(arg1910))
    defer mbTrans1911.Close()
    _, err1912 := mbTrans1911.WriteString(arg1910)
    if err1912 != nil {
      Usage()
      return
    }
    factory1913 := thrift.NewTJSONProtocolFactory()
    jsProt1914 := factory1913.GetProtocol(mbTrans1911)
    argvalue0 := hive_metastore.NewGetRoleGrantsForPrincipalRequest()
    err1915 := argvalue0.Read(context.Background(), jsProt1914)
    if err1915 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetRoleGrantsForPrincipal(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_privilege_set":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
      flag.Usage()
    }
    arg1916 := flag.Arg(1)
    mbTrans1917 := thrift.NewTMemoryBufferLen(len(arg1916))
    defer mbTrans1917.Close()
    _, err1918 := mbTrans1917.WriteString(arg1916)
    if err1918 != nil {
      Usage()
      return
    }
    factory1919 := thrift.NewTJSONProtocolFactory()
    jsProt1920 := factory1919.GetProtocol(mbTrans1917)
    argvalue0 := hive_metastore.NewHiveObjectRef()
    err1921 := argvalue0.Read(context.Background(), jsProt1920)
    if err1921 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1923 := flag.Arg(3)
    mbTrans1924 := thrift.NewTMemoryBufferLen(len(arg1923))
    defer mbTrans1924.Close()
    _, err1925 := mbTrans1924.WriteString(arg1923)
    if err1925 != nil { 
      Usage()
      return
    }
    factory1926 := thrift.NewTJSONProtocolFactory()
    jsProt1927 := factory1926.GetProtocol(mbTrans1924)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPrivilegeSetArgs()
    err1928 := containerStruct2.ReadField3(context.Background(), jsProt1927)
    if err1928 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.GroupNames
    value2 := argvalue2
    fmt.Print(client.GetPrivilegeSet(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_privileges":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_metastore.PrincipalType(tmp1)
    value1 := argvalue1
    arg1930 := flag.Arg(3)
    mbTrans1931 := thrift.NewTMemoryBufferLen(len(arg1930))
    defer mbTrans1931.Close()
    _, err1932 := mbTrans1931.WriteString(arg1930)
    if err1932 != nil {
      Usage()
      return
    }
    factory1933 := thrift.NewTJSONProtocolFactory()
    jsProt1934 := factory1933.GetProtocol(mbTrans1931)
    argvalue2 := hive_metastore.NewHiveObjectRef()
    err1935 := argvalue2.Read(context.Background(), jsProt1934)
    if err1935 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ListPrivileges(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "grant_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
      flag.Usage()
    }
    arg1936 := flag.Arg(1)
    mbTrans1937 := thrift.NewTMemoryBufferLen(len(arg1936))
    defer mbTrans1937.Close()
    _, err1938 := mbTrans1937.WriteString(arg1936)
    if err1938 != nil {
      Usage()
      return
    }
    factory1939 := thrift.NewTJSONProtocolFactory()
    jsProt1940 := factory1939.GetProtocol(mbTrans1937)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err1941 := argvalue0.Read(context.Background(), jsProt1940)
    if err1941 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantPrivileges(context.Background(), value0))
    fmt.Print("\n")
    break
  case "revoke_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
      flag.Usage()
    }
    arg1942 := flag.Arg(1)
    mbTrans1943 := thrift.NewTMemoryBufferLen(len(arg1942))
    defer mbTrans1943.Close()
    _, err1944 := mbTrans1943.WriteString(arg1942)
    if err1944 != nil {
      Usage()
      return
    }
    factory1945 := thrift.NewTJSONProtocolFactory()
    jsProt1946 := factory1945.GetProtocol(mbTrans1943)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err1947 := argvalue0.Read(context.Background(), jsProt1946)
    if err1947 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RevokePrivileges(context.Background(), value0))
    fmt.Print("\n")
    break
  case "grant_revoke_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantRevokePrivileges requires 1 args")
      flag.Usage()
    }
    arg1948 := flag.Arg(1)
    mbTrans1949 := thrift.NewTMemoryBufferLen(len(arg1948))
    defer mbTrans1949.Close()
    _, err1950 := mbTrans1949.WriteString(arg1948)
    if err1950 != nil {
      Usage()
      return
    }
    factory1951 := thrift.NewTJSONProtocolFactory()
    jsProt1952 := factory1951.GetProtocol(mbTrans1949)
    argvalue0 := hive_metastore.NewGrantRevokePrivilegeRequest()
    err1953 := argvalue0.Read(context.Background(), jsProt1952)
    if err1953 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantRevokePrivileges(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_ugi":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetUgi requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1955 := flag.Arg(2)
    mbTrans1956 := thrift.NewTMemoryBufferLen(len(arg1955))
    defer mbTrans1956.Close()
    _, err1957 := mbTrans1956.WriteString(arg1955)
    if err1957 != nil { 
      Usage()
      return
    }
    factory1958 := thrift.NewTJSONProtocolFactory()
    jsProt1959 := factory1958.GetProtocol(mbTrans1956)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreSetUgiArgs()
    err1960 := containerStruct1.ReadField2(context.Background(), jsProt1959)
    if err1960 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.GroupNames
    value1 := argvalue1
    fmt.Print(client.SetUgi(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_delegation_token":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetDelegationToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetDelegationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "renew_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RenewDelegationToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cancel_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CancelDelegationToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_token":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AddToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "remove_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RemoveToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_all_token_identifiers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllTokenIdentifiers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllTokenIdentifiers(context.Background()))
    fmt.Print("\n")
    break
  case "add_master_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddMasterKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.AddMasterKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_master_key":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateMasterKey requires 2 args")
      flag.Usage()
    }
    tmp0, err1970 := (strconv.Atoi(flag.Arg(1)))
    if err1970 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateMasterKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "remove_master_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveMasterKey requires 1 args")
      flag.Usage()
    }
    tmp0, err1972 := (strconv.Atoi(flag.Arg(1)))
    if err1972 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveMasterKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_master_keys":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetMasterKeys requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetMasterKeys(context.Background()))
    fmt.Print("\n")
    break
  case "get_open_txns":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOpenTxns requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOpenTxns(context.Background()))
    fmt.Print("\n")
    break
  case "get_open_txns_info":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOpenTxnsInfo requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOpenTxnsInfo(context.Background()))
    fmt.Print("\n")
    break
  case "open_txns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenTxns requires 1 args")
      flag.Usage()
    }
    arg1973 := flag.Arg(1)
    mbTrans1974 := thrift.NewTMemoryBufferLen(len(arg1973))
    defer mbTrans1974.Close()
    _, err1975 := mbTrans1974.WriteString(arg1973)
    if err1975 != nil {
      Usage()
      return
    }
    factory1976 := thrift.NewTJSONProtocolFactory()
    jsProt1977 := factory1976.GetProtocol(mbTrans1974)
    argvalue0 := hive_metastore.NewOpenTxnRequest()
    err1978 := argvalue0.Read(context.Background(), jsProt1977)
    if err1978 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenTxns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "abort_txn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AbortTxn requires 1 args")
      flag.Usage()
    }
    arg1979 := flag.Arg(1)
    mbTrans1980 := thrift.NewTMemoryBufferLen(len(arg1979))
    defer mbTrans1980.Close()
    _, err1981 := mbTrans1980.WriteString(arg1979)
    if err1981 != nil {
      Usage()
      return
    }
    factory1982 := thrift.NewTJSONProtocolFactory()
    jsProt1983 := factory1982.GetProtocol(mbTrans1980)
    argvalue0 := hive_metastore.NewAbortTxnRequest()
    err1984 := argvalue0.Read(context.Background(), jsProt1983)
    if err1984 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AbortTxn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "abort_txns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AbortTxns requires 1 args")
      flag.Usage()
    }
    arg1985 := flag.Arg(1)
    mbTrans1986 := thrift.NewTMemoryBufferLen(len(arg1985))
    defer mbTrans1986.Close()
    _, err1987 := mbTrans1986.WriteString(arg1985)
    if err1987 != nil {
      Usage()
      return
    }
    factory1988 := thrift.NewTJSONProtocolFactory()
    jsProt1989 := factory1988.GetProtocol(mbTrans1986)
    argvalue0 := hive_metastore.NewAbortTxnsRequest()
    err1990 := argvalue0.Read(context.Background(), jsProt1989)
    if err1990 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AbortTxns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "commit_txn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CommitTxn requires 1 args")
      flag.Usage()
    }
    arg1991 := flag.Arg(1)
    mbTrans1992 := thrift.NewTMemoryBufferLen(len(arg1991))
    defer mbTrans1992.Close()
    _, err1993 := mbTrans1992.WriteString(arg1991)
    if err1993 != nil {
      Usage()
      return
    }
    factory1994 := thrift.NewTJSONProtocolFactory()
    jsProt1995 := factory1994.GetProtocol(mbTrans1992)
    argvalue0 := hive_metastore.NewCommitTxnRequest()
    err1996 := argvalue0.Read(context.Background(), jsProt1995)
    if err1996 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CommitTxn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "lock":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Lock requires 1 args")
      flag.Usage()
    }
    arg1997 := flag.Arg(1)
    mbTrans1998 := thrift.NewTMemoryBufferLen(len(arg1997))
    defer mbTrans1998.Close()
    _, err1999 := mbTrans1998.WriteString(arg1997)
    if err1999 != nil {
      Usage()
      return
    }
    factory2000 := thrift.NewTJSONProtocolFactory()
    jsProt2001 := factory2000.GetProtocol(mbTrans1998)
    argvalue0 := hive_metastore.NewLockRequest()
    err2002 := argvalue0.Read(context.Background(), jsProt2001)
    if err2002 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Lock(context.Background(), value0))
    fmt.Print("\n")
    break
  case "check_lock":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CheckLock requires 1 args")
      flag.Usage()
    }
    arg2003 := flag.Arg(1)
    mbTrans2004 := thrift.NewTMemoryBufferLen(len(arg2003))
    defer mbTrans2004.Close()
    _, err2005 := mbTrans2004.WriteString(arg2003)
    if err2005 != nil {
      Usage()
      return
    }
    factory2006 := thrift.NewTJSONProtocolFactory()
    jsProt2007 := factory2006.GetProtocol(mbTrans2004)
    argvalue0 := hive_metastore.NewCheckLockRequest()
    err2008 := argvalue0.Read(context.Background(), jsProt2007)
    if err2008 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CheckLock(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unlock":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Unlock requires 1 args")
      flag.Usage()
    }
    arg2009 := flag.Arg(1)
    mbTrans2010 := thrift.NewTMemoryBufferLen(len(arg2009))
    defer mbTrans2010.Close()
    _, err2011 := mbTrans2010.WriteString(arg2009)
    if err2011 != nil {
      Usage()
      return
    }
    factory2012 := thrift.NewTJSONProtocolFactory()
    jsProt2013 := factory2012.GetProtocol(mbTrans2010)
    argvalue0 := hive_metastore.NewUnlockRequest()
    err2014 := argvalue0.Read(context.Background(), jsProt2013)
    if err2014 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Unlock(context.Background(), value0))
    fmt.Print("\n")
    break
  case "show_locks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ShowLocks requires 1 args")
      flag.Usage()
    }
    arg2015 := flag.Arg(1)
    mbTrans2016 := thrift.NewTMemoryBufferLen(len(arg2015))
    defer mbTrans2016.Close()
    _, err2017 := mbTrans2016.WriteString(arg2015)
    if err2017 != nil {
      Usage()
      return
    }
    factory2018 := thrift.NewTJSONProtocolFactory()
    jsProt2019 := factory2018.GetProtocol(mbTrans2016)
    argvalue0 := hive_metastore.NewShowLocksRequest()
    err2020 := argvalue0.Read(context.Background(), jsProt2019)
    if err2020 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ShowLocks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "heartbeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Heartbeat requires 1 args")
      flag.Usage()
    }
    arg2021 := flag.Arg(1)
    mbTrans2022 := thrift.NewTMemoryBufferLen(len(arg2021))
    defer mbTrans2022.Close()
    _, err2023 := mbTrans2022.WriteString(arg2021)
    if err2023 != nil {
      Usage()
      return
    }
    factory2024 := thrift.NewTJSONProtocolFactory()
    jsProt2025 := factory2024.GetProtocol(mbTrans2022)
    argvalue0 := hive_metastore.NewHeartbeatRequest()
    err2026 := argvalue0.Read(context.Background(), jsProt2025)
    if err2026 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Heartbeat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "heartbeat_txn_range":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HeartbeatTxnRange requires 1 args")
      flag.Usage()
    }
    arg2027 := flag.Arg(1)
    mbTrans2028 := thrift.NewTMemoryBufferLen(len(arg2027))
    defer mbTrans2028.Close()
    _, err2029 := mbTrans2028.WriteString(arg2027)
    if err2029 != nil {
      Usage()
      return
    }
    factory2030 := thrift.NewTJSONProtocolFactory()
    jsProt2031 := factory2030.GetProtocol(mbTrans2028)
    argvalue0 := hive_metastore.NewHeartbeatTxnRangeRequest()
    err2032 := argvalue0.Read(context.Background(), jsProt2031)
    if err2032 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HeartbeatTxnRange(context.Background(), value0))
    fmt.Print("\n")
    break
  case "compact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Compact requires 1 args")
      flag.Usage()
    }
    arg2033 := flag.Arg(1)
    mbTrans2034 := thrift.NewTMemoryBufferLen(len(arg2033))
    defer mbTrans2034.Close()
    _, err2035 := mbTrans2034.WriteString(arg2033)
    if err2035 != nil {
      Usage()
      return
    }
    factory2036 := thrift.NewTJSONProtocolFactory()
    jsProt2037 := factory2036.GetProtocol(mbTrans2034)
    argvalue0 := hive_metastore.NewCompactionRequest()
    err2038 := argvalue0.Read(context.Background(), jsProt2037)
    if err2038 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Compact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "compact2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Compact2 requires 1 args")
      flag.Usage()
    }
    arg2039 := flag.Arg(1)
    mbTrans2040 := thrift.NewTMemoryBufferLen(len(arg2039))
    defer mbTrans2040.Close()
    _, err2041 := mbTrans2040.WriteString(arg2039)
    if err2041 != nil {
      Usage()
      return
    }
    factory2042 := thrift.NewTJSONProtocolFactory()
    jsProt2043 := factory2042.GetProtocol(mbTrans2040)
    argvalue0 := hive_metastore.NewCompactionRequest()
    err2044 := argvalue0.Read(context.Background(), jsProt2043)
    if err2044 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Compact2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "show_compact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ShowCompact requires 1 args")
      flag.Usage()
    }
    arg2045 := flag.Arg(1)
    mbTrans2046 := thrift.NewTMemoryBufferLen(len(arg2045))
    defer mbTrans2046.Close()
    _, err2047 := mbTrans2046.WriteString(arg2045)
    if err2047 != nil {
      Usage()
      return
    }
    factory2048 := thrift.NewTJSONProtocolFactory()
    jsProt2049 := factory2048.GetProtocol(mbTrans2046)
    argvalue0 := hive_metastore.NewShowCompactRequest()
    err2050 := argvalue0.Read(context.Background(), jsProt2049)
    if err2050 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ShowCompact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_dynamic_partitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddDynamicPartitions requires 1 args")
      flag.Usage()
    }
    arg2051 := flag.Arg(1)
    mbTrans2052 := thrift.NewTMemoryBufferLen(len(arg2051))
    defer mbTrans2052.Close()
    _, err2053 := mbTrans2052.WriteString(arg2051)
    if err2053 != nil {
      Usage()
      return
    }
    factory2054 := thrift.NewTJSONProtocolFactory()
    jsProt2055 := factory2054.GetProtocol(mbTrans2052)
    argvalue0 := hive_metastore.NewAddDynamicPartitions()
    err2056 := argvalue0.Read(context.Background(), jsProt2055)
    if err2056 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddDynamicPartitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_next_notification":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNextNotification requires 1 args")
      flag.Usage()
    }
    arg2057 := flag.Arg(1)
    mbTrans2058 := thrift.NewTMemoryBufferLen(len(arg2057))
    defer mbTrans2058.Close()
    _, err2059 := mbTrans2058.WriteString(arg2057)
    if err2059 != nil {
      Usage()
      return
    }
    factory2060 := thrift.NewTJSONProtocolFactory()
    jsProt2061 := factory2060.GetProtocol(mbTrans2058)
    argvalue0 := hive_metastore.NewNotificationEventRequest()
    err2062 := argvalue0.Read(context.Background(), jsProt2061)
    if err2062 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNextNotification(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_current_notificationEventId":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCurrentNotificationEventId requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCurrentNotificationEventId(context.Background()))
    fmt.Print("\n")
    break
  case "get_notification_events_count":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNotificationEventsCount requires 1 args")
      flag.Usage()
    }
    arg2063 := flag.Arg(1)
    mbTrans2064 := thrift.NewTMemoryBufferLen(len(arg2063))
    defer mbTrans2064.Close()
    _, err2065 := mbTrans2064.WriteString(arg2063)
    if err2065 != nil {
      Usage()
      return
    }
    factory2066 := thrift.NewTJSONProtocolFactory()
    jsProt2067 := factory2066.GetProtocol(mbTrans2064)
    argvalue0 := hive_metastore.NewNotificationEventsCountRequest()
    err2068 := argvalue0.Read(context.Background(), jsProt2067)
    if err2068 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNotificationEventsCount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fire_listener_event":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FireListenerEvent requires 1 args")
      flag.Usage()
    }
    arg2069 := flag.Arg(1)
    mbTrans2070 := thrift.NewTMemoryBufferLen(len(arg2069))
    defer mbTrans2070.Close()
    _, err2071 := mbTrans2070.WriteString(arg2069)
    if err2071 != nil {
      Usage()
      return
    }
    factory2072 := thrift.NewTJSONProtocolFactory()
    jsProt2073 := factory2072.GetProtocol(mbTrans2070)
    argvalue0 := hive_metastore.NewFireEventRequest()
    err2074 := argvalue0.Read(context.Background(), jsProt2073)
    if err2074 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FireListenerEvent(context.Background(), value0))
    fmt.Print("\n")
    break
  case "flushCache":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "FlushCache requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.FlushCache(context.Background()))
    fmt.Print("\n")
    break
  case "cm_recycle":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CmRecycle requires 1 args")
      flag.Usage()
    }
    arg2075 := flag.Arg(1)
    mbTrans2076 := thrift.NewTMemoryBufferLen(len(arg2075))
    defer mbTrans2076.Close()
    _, err2077 := mbTrans2076.WriteString(arg2075)
    if err2077 != nil {
      Usage()
      return
    }
    factory2078 := thrift.NewTJSONProtocolFactory()
    jsProt2079 := factory2078.GetProtocol(mbTrans2076)
    argvalue0 := hive_metastore.NewCmRecycleRequest()
    err2080 := argvalue0.Read(context.Background(), jsProt2079)
    if err2080 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CmRecycle(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_file_metadata_by_expr":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFileMetadataByExpr requires 1 args")
      flag.Usage()
    }
    arg2081 := flag.Arg(1)
    mbTrans2082 := thrift.NewTMemoryBufferLen(len(arg2081))
    defer mbTrans2082.Close()
    _, err2083 := mbTrans2082.WriteString(arg2081)
    if err2083 != nil {
      Usage()
      return
    }
    factory2084 := thrift.NewTJSONProtocolFactory()
    jsProt2085 := factory2084.GetProtocol(mbTrans2082)
    argvalue0 := hive_metastore.NewGetFileMetadataByExprRequest()
    err2086 := argvalue0.Read(context.Background(), jsProt2085)
    if err2086 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFileMetadataByExpr(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFileMetadata requires 1 args")
      flag.Usage()
    }
    arg2087 := flag.Arg(1)
    mbTrans2088 := thrift.NewTMemoryBufferLen(len(arg2087))
    defer mbTrans2088.Close()
    _, err2089 := mbTrans2088.WriteString(arg2087)
    if err2089 != nil {
      Usage()
      return
    }
    factory2090 := thrift.NewTJSONProtocolFactory()
    jsProt2091 := factory2090.GetProtocol(mbTrans2088)
    argvalue0 := hive_metastore.NewGetFileMetadataRequest()
    err2092 := argvalue0.Read(context.Background(), jsProt2091)
    if err2092 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFileMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "put_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PutFileMetadata requires 1 args")
      flag.Usage()
    }
    arg2093 := flag.Arg(1)
    mbTrans2094 := thrift.NewTMemoryBufferLen(len(arg2093))
    defer mbTrans2094.Close()
    _, err2095 := mbTrans2094.WriteString(arg2093)
    if err2095 != nil {
      Usage()
      return
    }
    factory2096 := thrift.NewTJSONProtocolFactory()
    jsProt2097 := factory2096.GetProtocol(mbTrans2094)
    argvalue0 := hive_metastore.NewPutFileMetadataRequest()
    err2098 := argvalue0.Read(context.Background(), jsProt2097)
    if err2098 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PutFileMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "clear_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ClearFileMetadata requires 1 args")
      flag.Usage()
    }
    arg2099 := flag.Arg(1)
    mbTrans2100 := thrift.NewTMemoryBufferLen(len(arg2099))
    defer mbTrans2100.Close()
    _, err2101 := mbTrans2100.WriteString(arg2099)
    if err2101 != nil {
      Usage()
      return
    }
    factory2102 := thrift.NewTJSONProtocolFactory()
    jsProt2103 := factory2102.GetProtocol(mbTrans2100)
    argvalue0 := hive_metastore.NewClearFileMetadataRequest()
    err2104 := argvalue0.Read(context.Background(), jsProt2103)
    if err2104 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearFileMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cache_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CacheFileMetadata requires 1 args")
      flag.Usage()
    }
    arg2105 := flag.Arg(1)
    mbTrans2106 := thrift.NewTMemoryBufferLen(len(arg2105))
    defer mbTrans2106.Close()
    _, err2107 := mbTrans2106.WriteString(arg2105)
    if err2107 != nil {
      Usage()
      return
    }
    factory2108 := thrift.NewTJSONProtocolFactory()
    jsProt2109 := factory2108.GetProtocol(mbTrans2106)
    argvalue0 := hive_metastore.NewCacheFileMetadataRequest()
    err2110 := argvalue0.Read(context.Background(), jsProt2109)
    if err2110 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CacheFileMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_metastore_db_uuid":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetMetastoreDbUUID requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetMetastoreDbUUID(context.Background()))
    fmt.Print("\n")
    break
  case "create_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateResourcePlan requires 1 args")
      flag.Usage()
    }
    arg2111 := flag.Arg(1)
    mbTrans2112 := thrift.NewTMemoryBufferLen(len(arg2111))
    defer mbTrans2112.Close()
    _, err2113 := mbTrans2112.WriteString(arg2111)
    if err2113 != nil {
      Usage()
      return
    }
    factory2114 := thrift.NewTJSONProtocolFactory()
    jsProt2115 := factory2114.GetProtocol(mbTrans2112)
    argvalue0 := hive_metastore.NewWMCreateResourcePlanRequest()
    err2116 := argvalue0.Read(context.Background(), jsProt2115)
    if err2116 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetResourcePlan requires 1 args")
      flag.Usage()
    }
    arg2117 := flag.Arg(1)
    mbTrans2118 := thrift.NewTMemoryBufferLen(len(arg2117))
    defer mbTrans2118.Close()
    _, err2119 := mbTrans2118.WriteString(arg2117)
    if err2119 != nil {
      Usage()
      return
    }
    factory2120 := thrift.NewTJSONProtocolFactory()
    jsProt2121 := factory2120.GetProtocol(mbTrans2118)
    argvalue0 := hive_metastore.NewWMGetResourcePlanRequest()
    err2122 := argvalue0.Read(context.Background(), jsProt2121)
    if err2122 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_active_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetActiveResourcePlan requires 1 args")
      flag.Usage()
    }
    arg2123 := flag.Arg(1)
    mbTrans2124 := thrift.NewTMemoryBufferLen(len(arg2123))
    defer mbTrans2124.Close()
    _, err2125 := mbTrans2124.WriteString(arg2123)
    if err2125 != nil {
      Usage()
      return
    }
    factory2126 := thrift.NewTJSONProtocolFactory()
    jsProt2127 := factory2126.GetProtocol(mbTrans2124)
    argvalue0 := hive_metastore.NewWMGetActiveResourcePlanRequest()
    err2128 := argvalue0.Read(context.Background(), jsProt2127)
    if err2128 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetActiveResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_all_resource_plans":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllResourcePlans requires 1 args")
      flag.Usage()
    }
    arg2129 := flag.Arg(1)
    mbTrans2130 := thrift.NewTMemoryBufferLen(len(arg2129))
    defer mbTrans2130.Close()
    _, err2131 := mbTrans2130.WriteString(arg2129)
    if err2131 != nil {
      Usage()
      return
    }
    factory2132 := thrift.NewTJSONProtocolFactory()
    jsProt2133 := factory2132.GetProtocol(mbTrans2130)
    argvalue0 := hive_metastore.NewWMGetAllResourcePlanRequest()
    err2134 := argvalue0.Read(context.Background(), jsProt2133)
    if err2134 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAllResourcePlans(context.Background(), value0))
    fmt.Print("\n")
    break
  case "alter_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterResourcePlan requires 1 args")
      flag.Usage()
    }
    arg2135 := flag.Arg(1)
    mbTrans2136 := thrift.NewTMemoryBufferLen(len(arg2135))
    defer mbTrans2136.Close()
    _, err2137 := mbTrans2136.WriteString(arg2135)
    if err2137 != nil {
      Usage()
      return
    }
    factory2138 := thrift.NewTJSONProtocolFactory()
    jsProt2139 := factory2138.GetProtocol(mbTrans2136)
    argvalue0 := hive_metastore.NewWMAlterResourcePlanRequest()
    err2140 := argvalue0.Read(context.Background(), jsProt2139)
    if err2140 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "validate_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ValidateResourcePlan requires 1 args")
      flag.Usage()
    }
    arg2141 := flag.Arg(1)
    mbTrans2142 := thrift.NewTMemoryBufferLen(len(arg2141))
    defer mbTrans2142.Close()
    _, err2143 := mbTrans2142.WriteString(arg2141)
    if err2143 != nil {
      Usage()
      return
    }
    factory2144 := thrift.NewTJSONProtocolFactory()
    jsProt2145 := factory2144.GetProtocol(mbTrans2142)
    argvalue0 := hive_metastore.NewWMValidateResourcePlanRequest()
    err2146 := argvalue0.Read(context.Background(), jsProt2145)
    if err2146 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ValidateResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropResourcePlan requires 1 args")
      flag.Usage()
    }
    arg2147 := flag.Arg(1)
    mbTrans2148 := thrift.NewTMemoryBufferLen(len(arg2147))
    defer mbTrans2148.Close()
    _, err2149 := mbTrans2148.WriteString(arg2147)
    if err2149 != nil {
      Usage()
      return
    }
    factory2150 := thrift.NewTJSONProtocolFactory()
    jsProt2151 := factory2150.GetProtocol(mbTrans2148)
    argvalue0 := hive_metastore.NewWMDropResourcePlanRequest()
    err2152 := argvalue0.Read(context.Background(), jsProt2151)
    if err2152 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_wm_trigger":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateWmTrigger requires 1 args")
      flag.Usage()
    }
    arg2153 := flag.Arg(1)
    mbTrans2154 := thrift.NewTMemoryBufferLen(len(arg2153))
    defer mbTrans2154.Close()
    _, err2155 := mbTrans2154.WriteString(arg2153)
    if err2155 != nil {
      Usage()
      return
    }
    factory2156 := thrift.NewTJSONProtocolFactory()
    jsProt2157 := factory2156.GetProtocol(mbTrans2154)
    argvalue0 := hive_metastore.NewWMCreateTriggerRequest()
    err2158 := argvalue0.Read(context.Background(), jsProt2157)
    if err2158 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateWmTrigger(context.Background(), value0))
    fmt.Print("\n")
    break
  case "alter_wm_trigger":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterWmTrigger requires 1 args")
      flag.Usage()
    }
    arg2159 := flag.Arg(1)
    mbTrans2160 := thrift.NewTMemoryBufferLen(len(arg2159))
    defer mbTrans2160.Close()
    _, err2161 := mbTrans2160.WriteString(arg2159)
    if err2161 != nil {
      Usage()
      return
    }
    factory2162 := thrift.NewTJSONProtocolFactory()
    jsProt2163 := factory2162.GetProtocol(mbTrans2160)
    argvalue0 := hive_metastore.NewWMAlterTriggerRequest()
    err2164 := argvalue0.Read(context.Background(), jsProt2163)
    if err2164 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterWmTrigger(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_wm_trigger":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropWmTrigger requires 1 args")
      flag.Usage()
    }
    arg2165 := flag.Arg(1)
    mbTrans2166 := thrift.NewTMemoryBufferLen(len(arg2165))
    defer mbTrans2166.Close()
    _, err2167 := mbTrans2166.WriteString(arg2165)
    if err2167 != nil {
      Usage()
      return
    }
    factory2168 := thrift.NewTJSONProtocolFactory()
    jsProt2169 := factory2168.GetProtocol(mbTrans2166)
    argvalue0 := hive_metastore.NewWMDropTriggerRequest()
    err2170 := argvalue0.Read(context.Background(), jsProt2169)
    if err2170 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropWmTrigger(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_triggers_for_resourceplan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTriggersForResourceplan requires 1 args")
      flag.Usage()
    }
    arg2171 := flag.Arg(1)
    mbTrans2172 := thrift.NewTMemoryBufferLen(len(arg2171))
    defer mbTrans2172.Close()
    _, err2173 := mbTrans2172.WriteString(arg2171)
    if err2173 != nil {
      Usage()
      return
    }
    factory2174 := thrift.NewTJSONProtocolFactory()
    jsProt2175 := factory2174.GetProtocol(mbTrans2172)
    argvalue0 := hive_metastore.NewWMGetTriggersForResourePlanRequest()
    err2176 := argvalue0.Read(context.Background(), jsProt2175)
    if err2176 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTriggersForResourceplan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
