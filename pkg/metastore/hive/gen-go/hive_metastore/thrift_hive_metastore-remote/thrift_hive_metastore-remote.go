// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/treeverse/lakefs/pkg/metastore/hive/gen-go/hive_metastore"
)

var _ = hive_metastore.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  string getMetaConf(string key)")
  fmt.Fprintln(os.Stderr, "  void setMetaConf(string key, string value)")
  fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
  fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
  fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData, bool cascade)")
  fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
  fmt.Fprintln(os.Stderr, "   get_all_databases()")
  fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
  fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
  fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
  fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
  fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
  fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
  fmt.Fprintln(os.Stderr, "   get_fields_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
  fmt.Fprintln(os.Stderr, "   get_schema_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
  fmt.Fprintln(os.Stderr, "  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void create_table_with_constraints(Table tbl,  primaryKeys,  foreignKeys,  uniqueConstraints,  notNullConstraints)")
  fmt.Fprintln(os.Stderr, "  void drop_constraint(DropConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_primary_key(AddPrimaryKeyRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_foreign_key(AddForeignKeyRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_unique_constraint(AddUniqueConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_not_null_constraint(AddNotNullConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  void drop_table_with_environment_context(string dbname, string name, bool deleteData, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void truncate_table(string dbName, string tableName,  partNames)")
  fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
  fmt.Fprintln(os.Stderr, "   get_tables_by_type(string db_name, string pattern, string tableType)")
  fmt.Fprintln(os.Stderr, "   get_table_meta(string db_patterns, string tbl_patterns,  tbl_types)")
  fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
  fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
  fmt.Fprintln(os.Stderr, "   get_table_objects_by_name(string dbname,  tbl_names)")
  fmt.Fprintln(os.Stderr, "  GetTableResult get_table_req(GetTableRequest req)")
  fmt.Fprintln(os.Stderr, "  GetTablesResult get_table_objects_by_name_req(GetTablesRequest req)")
  fmt.Fprintln(os.Stderr, "   get_table_names_by_filter(string dbname, string filter, i16 max_tables)")
  fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
  fmt.Fprintln(os.Stderr, "  void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void alter_table_with_cascade(string dbname, string tbl_name, Table new_tbl, bool cascade)")
  fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
  fmt.Fprintln(os.Stderr, "  Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  i32 add_partitions( new_parts)")
  fmt.Fprintln(os.Stderr, "  i32 add_partitions_pspec( new_parts)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
  fmt.Fprintln(os.Stderr, "  AddPartitionsResult add_partitions_req(AddPartitionsRequest request)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_with_environment_context(string db_name, string tbl_name,  part_vals, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_with_environment_context(string db_name, string tbl_name,  part_vals, bool deleteData, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  DropPartitionsResult drop_partitions_req(DropPartitionsRequest req)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
  fmt.Fprintln(os.Stderr, "  Partition exchange_partition( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
  fmt.Fprintln(os.Stderr, "   exchange_partitions( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
  fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   get_partitions_pspec(string db_name, string tbl_name, i32 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "  PartitionValuesResponse get_partition_values(PartitionValuesRequest request)")
  fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_part_specs_by_filter(string db_name, string tbl_name, string filter, i32 max_parts)")
  fmt.Fprintln(os.Stderr, "  PartitionsByExprResult get_partitions_by_expr(PartitionsByExprRequest req)")
  fmt.Fprintln(os.Stderr, "  i32 get_num_partitions_by_filter(string db_name, string tbl_name, string filter)")
  fmt.Fprintln(os.Stderr, "   get_partitions_by_names(string db_name, string tbl_name,  names)")
  fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
  fmt.Fprintln(os.Stderr, "  void alter_partitions(string db_name, string tbl_name,  new_parts)")
  fmt.Fprintln(os.Stderr, "  void alter_partitions_with_environment_context(string db_name, string tbl_name,  new_parts, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void rename_partition(string db_name, string tbl_name,  part_vals, Partition new_part)")
  fmt.Fprintln(os.Stderr, "  bool partition_name_has_valid_characters( part_vals, bool throw_exception)")
  fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
  fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
  fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
  fmt.Fprintln(os.Stderr, "  void markPartitionForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
  fmt.Fprintln(os.Stderr, "  bool isPartitionMarkedForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
  fmt.Fprintln(os.Stderr, "  Index add_index(Index new_index, Table index_table)")
  fmt.Fprintln(os.Stderr, "  void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)")
  fmt.Fprintln(os.Stderr, "  bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  Index get_index_by_name(string db_name, string tbl_name, string index_name)")
  fmt.Fprintln(os.Stderr, "   get_indexes(string db_name, string tbl_name, i16 max_indexes)")
  fmt.Fprintln(os.Stderr, "   get_index_names(string db_name, string tbl_name, i16 max_indexes)")
  fmt.Fprintln(os.Stderr, "  PrimaryKeysResponse get_primary_keys(PrimaryKeysRequest request)")
  fmt.Fprintln(os.Stderr, "  ForeignKeysResponse get_foreign_keys(ForeignKeysRequest request)")
  fmt.Fprintln(os.Stderr, "  UniqueConstraintsResponse get_unique_constraints(UniqueConstraintsRequest request)")
  fmt.Fprintln(os.Stderr, "  NotNullConstraintsResponse get_not_null_constraints(NotNullConstraintsRequest request)")
  fmt.Fprintln(os.Stderr, "  bool update_table_column_statistics(ColumnStatistics stats_obj)")
  fmt.Fprintln(os.Stderr, "  bool update_partition_column_statistics(ColumnStatistics stats_obj)")
  fmt.Fprintln(os.Stderr, "  ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  TableStatsResult get_table_statistics_req(TableStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  PartitionsStatsResult get_partitions_statistics_req(PartitionsStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  AggrStats get_aggr_stats_for(PartitionsStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  bool set_aggr_stats_for(SetPartitionsStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  bool delete_table_column_statistics(string db_name, string tbl_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  void create_function(Function func)")
  fmt.Fprintln(os.Stderr, "  void drop_function(string dbName, string funcName)")
  fmt.Fprintln(os.Stderr, "  void alter_function(string dbName, string funcName, Function newFunc)")
  fmt.Fprintln(os.Stderr, "   get_functions(string dbName, string pattern)")
  fmt.Fprintln(os.Stderr, "  Function get_function(string dbName, string funcName)")
  fmt.Fprintln(os.Stderr, "  GetAllFunctionsResponse get_all_functions()")
  fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
  fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
  fmt.Fprintln(os.Stderr, "   get_role_names()")
  fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
  fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
  fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
  fmt.Fprintln(os.Stderr, "  GrantRevokeRoleResponse grant_revoke_role(GrantRevokeRoleRequest request)")
  fmt.Fprintln(os.Stderr, "  GetPrincipalsInRoleResponse get_principals_in_role(GetPrincipalsInRoleRequest request)")
  fmt.Fprintln(os.Stderr, "  GetRoleGrantsForPrincipalResponse get_role_grants_for_principal(GetRoleGrantsForPrincipalRequest request)")
  fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
  fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
  fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
  fmt.Fprintln(os.Stderr, "  GrantRevokePrivilegeResponse grant_revoke_privileges(GrantRevokePrivilegeRequest request)")
  fmt.Fprintln(os.Stderr, "   set_ugi(string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)")
  fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
  fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
  fmt.Fprintln(os.Stderr, "  bool add_token(string token_identifier, string delegation_token)")
  fmt.Fprintln(os.Stderr, "  bool remove_token(string token_identifier)")
  fmt.Fprintln(os.Stderr, "  string get_token(string token_identifier)")
  fmt.Fprintln(os.Stderr, "   get_all_token_identifiers()")
  fmt.Fprintln(os.Stderr, "  i32 add_master_key(string key)")
  fmt.Fprintln(os.Stderr, "  void update_master_key(i32 seq_number, string key)")
  fmt.Fprintln(os.Stderr, "  bool remove_master_key(i32 key_seq)")
  fmt.Fprintln(os.Stderr, "   get_master_keys()")
  fmt.Fprintln(os.Stderr, "  GetOpenTxnsResponse get_open_txns()")
  fmt.Fprintln(os.Stderr, "  GetOpenTxnsInfoResponse get_open_txns_info()")
  fmt.Fprintln(os.Stderr, "  OpenTxnsResponse open_txns(OpenTxnRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void abort_txn(AbortTxnRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void abort_txns(AbortTxnsRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void commit_txn(CommitTxnRequest rqst)")
  fmt.Fprintln(os.Stderr, "  LockResponse lock(LockRequest rqst)")
  fmt.Fprintln(os.Stderr, "  LockResponse check_lock(CheckLockRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void unlock(UnlockRequest rqst)")
  fmt.Fprintln(os.Stderr, "  ShowLocksResponse show_locks(ShowLocksRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void heartbeat(HeartbeatRequest ids)")
  fmt.Fprintln(os.Stderr, "  HeartbeatTxnRangeResponse heartbeat_txn_range(HeartbeatTxnRangeRequest txns)")
  fmt.Fprintln(os.Stderr, "  void compact(CompactionRequest rqst)")
  fmt.Fprintln(os.Stderr, "  CompactionResponse compact2(CompactionRequest rqst)")
  fmt.Fprintln(os.Stderr, "  ShowCompactResponse show_compact(ShowCompactRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void add_dynamic_partitions(AddDynamicPartitions rqst)")
  fmt.Fprintln(os.Stderr, "  NotificationEventResponse get_next_notification(NotificationEventRequest rqst)")
  fmt.Fprintln(os.Stderr, "  CurrentNotificationEventId get_current_notificationEventId()")
  fmt.Fprintln(os.Stderr, "  NotificationEventsCountResponse get_notification_events_count(NotificationEventsCountRequest rqst)")
  fmt.Fprintln(os.Stderr, "  FireEventResponse fire_listener_event(FireEventRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void flushCache()")
  fmt.Fprintln(os.Stderr, "  CmRecycleResponse cm_recycle(CmRecycleRequest request)")
  fmt.Fprintln(os.Stderr, "  GetFileMetadataByExprResult get_file_metadata_by_expr(GetFileMetadataByExprRequest req)")
  fmt.Fprintln(os.Stderr, "  GetFileMetadataResult get_file_metadata(GetFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  PutFileMetadataResult put_file_metadata(PutFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  ClearFileMetadataResult clear_file_metadata(ClearFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  CacheFileMetadataResult cache_file_metadata(CacheFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  string get_metastore_db_uuid()")
  fmt.Fprintln(os.Stderr, "  WMCreateResourcePlanResponse create_resource_plan(WMCreateResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetResourcePlanResponse get_resource_plan(WMGetResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetActiveResourcePlanResponse get_active_resource_plan(WMGetActiveResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetAllResourcePlanResponse get_all_resource_plans(WMGetAllResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMAlterResourcePlanResponse alter_resource_plan(WMAlterResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMValidateResourcePlanResponse validate_resource_plan(WMValidateResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMDropResourcePlanResponse drop_resource_plan(WMDropResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMCreateTriggerResponse create_wm_trigger(WMCreateTriggerRequest request)")
  fmt.Fprintln(os.Stderr, "  WMAlterTriggerResponse alter_wm_trigger(WMAlterTriggerRequest request)")
  fmt.Fprintln(os.Stderr, "  WMDropTriggerResponse drop_wm_trigger(WMDropTriggerRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetTriggersForResourePlanResponse get_triggers_for_resourceplan(WMGetTriggersForResourePlanRequest request)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := hive_metastore.NewThriftHiveMetastoreClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getMetaConf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMetaConf requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMetaConf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setMetaConf":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetMetaConf requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetMetaConf(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "create_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
      flag.Usage()
    }
    arg627 := flag.Arg(1)
    mbTrans628 := thrift.NewTMemoryBufferLen(len(arg627))
    defer mbTrans628.Close()
    _, err629 := mbTrans628.WriteString(arg627)
    if err629 != nil {
      Usage()
      return
    }
    factory630 := thrift.NewTJSONProtocolFactory()
    jsProt631 := factory630.GetProtocol(mbTrans628)
    argvalue0 := hive_metastore.NewDatabase()
    err632 := argvalue0.Read(context.Background(), jsProt631)
    if err632 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateDatabase(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabase(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_database":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DropDatabase requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropDatabase(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_databases":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabases(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_all_databases":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllDatabases(context.Background()))
    fmt.Print("\n")
    break
  case "alter_database":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg639 := flag.Arg(2)
    mbTrans640 := thrift.NewTMemoryBufferLen(len(arg639))
    defer mbTrans640.Close()
    _, err641 := mbTrans640.WriteString(arg639)
    if err641 != nil {
      Usage()
      return
    }
    factory642 := thrift.NewTJSONProtocolFactory()
    jsProt643 := factory642.GetProtocol(mbTrans640)
    argvalue1 := hive_metastore.NewDatabase()
    err644 := argvalue1.Read(context.Background(), jsProt643)
    if err644 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AlterDatabase(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetType requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
      flag.Usage()
    }
    arg646 := flag.Arg(1)
    mbTrans647 := thrift.NewTMemoryBufferLen(len(arg646))
    defer mbTrans647.Close()
    _, err648 := mbTrans647.WriteString(arg646)
    if err648 != nil {
      Usage()
      return
    }
    factory649 := thrift.NewTJSONProtocolFactory()
    jsProt650 := factory649.GetProtocol(mbTrans647)
    argvalue0 := hive_metastore.NewType()
    err651 := argvalue0.Read(context.Background(), jsProt650)
    if err651 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropType requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_type_all":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetTypeAll(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_fields":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFields(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_fields_with_environment_context":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetFieldsWithEnvironmentContext requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg658 := flag.Arg(3)
    mbTrans659 := thrift.NewTMemoryBufferLen(len(arg658))
    defer mbTrans659.Close()
    _, err660 := mbTrans659.WriteString(arg658)
    if err660 != nil {
      Usage()
      return
    }
    factory661 := thrift.NewTJSONProtocolFactory()
    jsProt662 := factory661.GetProtocol(mbTrans659)
    argvalue2 := hive_metastore.NewEnvironmentContext()
    err663 := argvalue2.Read(context.Background(), jsProt662)
    if err663 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetFieldsWithEnvironmentContext(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_schema":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetSchema(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_schema_with_environment_context":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetSchemaWithEnvironmentContext requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg668 := flag.Arg(3)
    mbTrans669 := thrift.NewTMemoryBufferLen(len(arg668))
    defer mbTrans669.Close()
    _, err670 := mbTrans669.WriteString(arg668)
    if err670 != nil {
      Usage()
      return
    }
    factory671 := thrift.NewTJSONProtocolFactory()
    jsProt672 := factory671.GetProtocol(mbTrans669)
    argvalue2 := hive_metastore.NewEnvironmentContext()
    err673 := argvalue2.Read(context.Background(), jsProt672)
    if err673 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetSchemaWithEnvironmentContext(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "create_table":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
      flag.Usage()
    }
    arg674 := flag.Arg(1)
    mbTrans675 := thrift.NewTMemoryBufferLen(len(arg674))
    defer mbTrans675.Close()
    _, err676 := mbTrans675.WriteString(arg674)
    if err676 != nil {
      Usage()
      return
    }
    factory677 := thrift.NewTJSONProtocolFactory()
    jsProt678 := factory677.GetProtocol(mbTrans675)
    argvalue0 := hive_metastore.NewTable()
    err679 := argvalue0.Read(context.Background(), jsProt678)
    if err679 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_table_with_environment_context":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateTableWithEnvironmentContext requires 2 args")
      flag.Usage()
    }
    arg680 := flag.Arg(1)
    mbTrans681 := thrift.NewTMemoryBufferLen(len(arg680))
    defer mbTrans681.Close()
    _, err682 := mbTrans681.WriteString(arg680)
    if err682 != nil {
      Usage()
      return
    }
    factory683 := thrift.NewTJSONProtocolFactory()
    jsProt684 := factory683.GetProtocol(mbTrans681)
    argvalue0 := hive_metastore.NewTable()
    err685 := argvalue0.Read(context.Background(), jsProt684)
    if err685 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg686 := flag.Arg(2)
    mbTrans687 := thrift.NewTMemoryBufferLen(len(arg686))
    defer mbTrans687.Close()
    _, err688 := mbTrans687.WriteString(arg686)
    if err688 != nil {
      Usage()
      return
    }
    factory689 := thrift.NewTJSONProtocolFactory()
    jsProt690 := factory689.GetProtocol(mbTrans687)
    argvalue1 := hive_metastore.NewEnvironmentContext()
    err691 := argvalue1.Read(context.Background(), jsProt690)
    if err691 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateTableWithEnvironmentContext(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "create_table_with_constraints":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "CreateTableWithConstraints requires 5 args")
      flag.Usage()
    }
    arg692 := flag.Arg(1)
    mbTrans693 := thrift.NewTMemoryBufferLen(len(arg692))
    defer mbTrans693.Close()
    _, err694 := mbTrans693.WriteString(arg692)
    if err694 != nil {
      Usage()
      return
    }
    factory695 := thrift.NewTJSONProtocolFactory()
    jsProt696 := factory695.GetProtocol(mbTrans693)
    argvalue0 := hive_metastore.NewTable()
    err697 := argvalue0.Read(context.Background(), jsProt696)
    if err697 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg698 := flag.Arg(2)
    mbTrans699 := thrift.NewTMemoryBufferLen(len(arg698))
    defer mbTrans699.Close()
    _, err700 := mbTrans699.WriteString(arg698)
    if err700 != nil { 
      Usage()
      return
    }
    factory701 := thrift.NewTJSONProtocolFactory()
    jsProt702 := factory701.GetProtocol(mbTrans699)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err703 := containerStruct1.ReadField2(context.Background(), jsProt702)
    if err703 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.PrimaryKeys
    value1 := argvalue1
    arg704 := flag.Arg(3)
    mbTrans705 := thrift.NewTMemoryBufferLen(len(arg704))
    defer mbTrans705.Close()
    _, err706 := mbTrans705.WriteString(arg704)
    if err706 != nil { 
      Usage()
      return
    }
    factory707 := thrift.NewTJSONProtocolFactory()
    jsProt708 := factory707.GetProtocol(mbTrans705)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err709 := containerStruct2.ReadField3(context.Background(), jsProt708)
    if err709 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ForeignKeys
    value2 := argvalue2
    arg710 := flag.Arg(4)
    mbTrans711 := thrift.NewTMemoryBufferLen(len(arg710))
    defer mbTrans711.Close()
    _, err712 := mbTrans711.WriteString(arg710)
    if err712 != nil { 
      Usage()
      return
    }
    factory713 := thrift.NewTJSONProtocolFactory()
    jsProt714 := factory713.GetProtocol(mbTrans711)
    containerStruct3 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err715 := containerStruct3.ReadField4(context.Background(), jsProt714)
    if err715 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.UniqueConstraints
    value3 := argvalue3
    arg716 := flag.Arg(5)
    mbTrans717 := thrift.NewTMemoryBufferLen(len(arg716))
    defer mbTrans717.Close()
    _, err718 := mbTrans717.WriteString(arg716)
    if err718 != nil { 
      Usage()
      return
    }
    factory719 := thrift.NewTJSONProtocolFactory()
    jsProt720 := factory719.GetProtocol(mbTrans717)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err721 := containerStruct4.ReadField5(context.Background(), jsProt720)
    if err721 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.NotNullConstraints
    value4 := argvalue4
    fmt.Print(client.CreateTableWithConstraints(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "drop_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropConstraint requires 1 args")
      flag.Usage()
    }
    arg722 := flag.Arg(1)
    mbTrans723 := thrift.NewTMemoryBufferLen(len(arg722))
    defer mbTrans723.Close()
    _, err724 := mbTrans723.WriteString(arg722)
    if err724 != nil {
      Usage()
      return
    }
    factory725 := thrift.NewTJSONProtocolFactory()
    jsProt726 := factory725.GetProtocol(mbTrans723)
    argvalue0 := hive_metastore.NewDropConstraintRequest()
    err727 := argvalue0.Read(context.Background(), jsProt726)
    if err727 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropConstraint(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_primary_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPrimaryKey requires 1 args")
      flag.Usage()
    }
    arg728 := flag.Arg(1)
    mbTrans729 := thrift.NewTMemoryBufferLen(len(arg728))
    defer mbTrans729.Close()
    _, err730 := mbTrans729.WriteString(arg728)
    if err730 != nil {
      Usage()
      return
    }
    factory731 := thrift.NewTJSONProtocolFactory()
    jsProt732 := factory731.GetProtocol(mbTrans729)
    argvalue0 := hive_metastore.NewAddPrimaryKeyRequest()
    err733 := argvalue0.Read(context.Background(), jsProt732)
    if err733 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPrimaryKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_foreign_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddForeignKey requires 1 args")
      flag.Usage()
    }
    arg734 := flag.Arg(1)
    mbTrans735 := thrift.NewTMemoryBufferLen(len(arg734))
    defer mbTrans735.Close()
    _, err736 := mbTrans735.WriteString(arg734)
    if err736 != nil {
      Usage()
      return
    }
    factory737 := thrift.NewTJSONProtocolFactory()
    jsProt738 := factory737.GetProtocol(mbTrans735)
    argvalue0 := hive_metastore.NewAddForeignKeyRequest()
    err739 := argvalue0.Read(context.Background(), jsProt738)
    if err739 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddForeignKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_unique_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddUniqueConstraint requires 1 args")
      flag.Usage()
    }
    arg740 := flag.Arg(1)
    mbTrans741 := thrift.NewTMemoryBufferLen(len(arg740))
    defer mbTrans741.Close()
    _, err742 := mbTrans741.WriteString(arg740)
    if err742 != nil {
      Usage()
      return
    }
    factory743 := thrift.NewTJSONProtocolFactory()
    jsProt744 := factory743.GetProtocol(mbTrans741)
    argvalue0 := hive_metastore.NewAddUniqueConstraintRequest()
    err745 := argvalue0.Read(context.Background(), jsProt744)
    if err745 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddUniqueConstraint(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_not_null_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddNotNullConstraint requires 1 args")
      flag.Usage()
    }
    arg746 := flag.Arg(1)
    mbTrans747 := thrift.NewTMemoryBufferLen(len(arg746))
    defer mbTrans747.Close()
    _, err748 := mbTrans747.WriteString(arg746)
    if err748 != nil {
      Usage()
      return
    }
    factory749 := thrift.NewTJSONProtocolFactory()
    jsProt750 := factory749.GetProtocol(mbTrans747)
    argvalue0 := hive_metastore.NewAddNotNullConstraintRequest()
    err751 := argvalue0.Read(context.Background(), jsProt750)
    if err751 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddNotNullConstraint(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropTable(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "drop_table_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropTableWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    arg758 := flag.Arg(4)
    mbTrans759 := thrift.NewTMemoryBufferLen(len(arg758))
    defer mbTrans759.Close()
    _, err760 := mbTrans759.WriteString(arg758)
    if err760 != nil {
      Usage()
      return
    }
    factory761 := thrift.NewTJSONProtocolFactory()
    jsProt762 := factory761.GetProtocol(mbTrans759)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err763 := argvalue3.Read(context.Background(), jsProt762)
    if err763 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DropTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "truncate_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TruncateTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg766 := flag.Arg(3)
    mbTrans767 := thrift.NewTMemoryBufferLen(len(arg766))
    defer mbTrans767.Close()
    _, err768 := mbTrans767.WriteString(arg766)
    if err768 != nil { 
      Usage()
      return
    }
    factory769 := thrift.NewTJSONProtocolFactory()
    jsProt770 := factory769.GetProtocol(mbTrans767)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreTruncateTableArgs()
    err771 := containerStruct2.ReadField3(context.Background(), jsProt770)
    if err771 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartNames
    value2 := argvalue2
    fmt.Print(client.TruncateTable(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_tables":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTables(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_tables_by_type":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTablesByType requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetTablesByType(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_table_meta":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableMeta requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg779 := flag.Arg(3)
    mbTrans780 := thrift.NewTMemoryBufferLen(len(arg779))
    defer mbTrans780.Close()
    _, err781 := mbTrans780.WriteString(arg779)
    if err781 != nil { 
      Usage()
      return
    }
    factory782 := thrift.NewTJSONProtocolFactory()
    jsProt783 := factory782.GetProtocol(mbTrans780)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetTableMetaArgs()
    err784 := containerStruct2.ReadField3(context.Background(), jsProt783)
    if err784 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.TblTypes
    value2 := argvalue2
    fmt.Print(client.GetTableMeta(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_all_tables":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAllTables(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_table_objects_by_name":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTableObjectsByName requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg789 := flag.Arg(2)
    mbTrans790 := thrift.NewTMemoryBufferLen(len(arg789))
    defer mbTrans790.Close()
    _, err791 := mbTrans790.WriteString(arg789)
    if err791 != nil { 
      Usage()
      return
    }
    factory792 := thrift.NewTJSONProtocolFactory()
    jsProt793 := factory792.GetProtocol(mbTrans790)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreGetTableObjectsByNameArgs()
    err794 := containerStruct1.ReadField2(context.Background(), jsProt793)
    if err794 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.TblNames
    value1 := argvalue1
    fmt.Print(client.GetTableObjectsByName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_table_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableReq requires 1 args")
      flag.Usage()
    }
    arg795 := flag.Arg(1)
    mbTrans796 := thrift.NewTMemoryBufferLen(len(arg795))
    defer mbTrans796.Close()
    _, err797 := mbTrans796.WriteString(arg795)
    if err797 != nil {
      Usage()
      return
    }
    factory798 := thrift.NewTJSONProtocolFactory()
    jsProt799 := factory798.GetProtocol(mbTrans796)
    argvalue0 := hive_metastore.NewGetTableRequest()
    err800 := argvalue0.Read(context.Background(), jsProt799)
    if err800 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table_objects_by_name_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableObjectsByNameReq requires 1 args")
      flag.Usage()
    }
    arg801 := flag.Arg(1)
    mbTrans802 := thrift.NewTMemoryBufferLen(len(arg801))
    defer mbTrans802.Close()
    _, err803 := mbTrans802.WriteString(arg801)
    if err803 != nil {
      Usage()
      return
    }
    factory804 := thrift.NewTJSONProtocolFactory()
    jsProt805 := factory804.GetProtocol(mbTrans802)
    argvalue0 := hive_metastore.NewGetTablesRequest()
    err806 := argvalue0.Read(context.Background(), jsProt805)
    if err806 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableObjectsByNameReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table_names_by_filter":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableNamesByFilter requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err809 := (strconv.Atoi(flag.Arg(3)))
    if err809 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetTableNamesByFilter(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg812 := flag.Arg(3)
    mbTrans813 := thrift.NewTMemoryBufferLen(len(arg812))
    defer mbTrans813.Close()
    _, err814 := mbTrans813.WriteString(arg812)
    if err814 != nil {
      Usage()
      return
    }
    factory815 := thrift.NewTJSONProtocolFactory()
    jsProt816 := factory815.GetProtocol(mbTrans813)
    argvalue2 := hive_metastore.NewTable()
    err817 := argvalue2.Read(context.Background(), jsProt816)
    if err817 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterTable(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_table_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterTableWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg820 := flag.Arg(3)
    mbTrans821 := thrift.NewTMemoryBufferLen(len(arg820))
    defer mbTrans821.Close()
    _, err822 := mbTrans821.WriteString(arg820)
    if err822 != nil {
      Usage()
      return
    }
    factory823 := thrift.NewTJSONProtocolFactory()
    jsProt824 := factory823.GetProtocol(mbTrans821)
    argvalue2 := hive_metastore.NewTable()
    err825 := argvalue2.Read(context.Background(), jsProt824)
    if err825 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg826 := flag.Arg(4)
    mbTrans827 := thrift.NewTMemoryBufferLen(len(arg826))
    defer mbTrans827.Close()
    _, err828 := mbTrans827.WriteString(arg826)
    if err828 != nil {
      Usage()
      return
    }
    factory829 := thrift.NewTJSONProtocolFactory()
    jsProt830 := factory829.GetProtocol(mbTrans827)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err831 := argvalue3.Read(context.Background(), jsProt830)
    if err831 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "alter_table_with_cascade":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterTableWithCascade requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg834 := flag.Arg(3)
    mbTrans835 := thrift.NewTMemoryBufferLen(len(arg834))
    defer mbTrans835.Close()
    _, err836 := mbTrans835.WriteString(arg834)
    if err836 != nil {
      Usage()
      return
    }
    factory837 := thrift.NewTJSONProtocolFactory()
    jsProt838 := factory837.GetProtocol(mbTrans835)
    argvalue2 := hive_metastore.NewTable()
    err839 := argvalue2.Read(context.Background(), jsProt838)
    if err839 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.AlterTableWithCascade(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "add_partition":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
      flag.Usage()
    }
    arg841 := flag.Arg(1)
    mbTrans842 := thrift.NewTMemoryBufferLen(len(arg841))
    defer mbTrans842.Close()
    _, err843 := mbTrans842.WriteString(arg841)
    if err843 != nil {
      Usage()
      return
    }
    factory844 := thrift.NewTJSONProtocolFactory()
    jsProt845 := factory844.GetProtocol(mbTrans842)
    argvalue0 := hive_metastore.NewPartition()
    err846 := argvalue0.Read(context.Background(), jsProt845)
    if err846 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPartition(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_partition_with_environment_context":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddPartitionWithEnvironmentContext requires 2 args")
      flag.Usage()
    }
    arg847 := flag.Arg(1)
    mbTrans848 := thrift.NewTMemoryBufferLen(len(arg847))
    defer mbTrans848.Close()
    _, err849 := mbTrans848.WriteString(arg847)
    if err849 != nil {
      Usage()
      return
    }
    factory850 := thrift.NewTJSONProtocolFactory()
    jsProt851 := factory850.GetProtocol(mbTrans848)
    argvalue0 := hive_metastore.NewPartition()
    err852 := argvalue0.Read(context.Background(), jsProt851)
    if err852 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg853 := flag.Arg(2)
    mbTrans854 := thrift.NewTMemoryBufferLen(len(arg853))
    defer mbTrans854.Close()
    _, err855 := mbTrans854.WriteString(arg853)
    if err855 != nil {
      Usage()
      return
    }
    factory856 := thrift.NewTJSONProtocolFactory()
    jsProt857 := factory856.GetProtocol(mbTrans854)
    argvalue1 := hive_metastore.NewEnvironmentContext()
    err858 := argvalue1.Read(context.Background(), jsProt857)
    if err858 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddPartitionWithEnvironmentContext(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "add_partitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartitions requires 1 args")
      flag.Usage()
    }
    arg859 := flag.Arg(1)
    mbTrans860 := thrift.NewTMemoryBufferLen(len(arg859))
    defer mbTrans860.Close()
    _, err861 := mbTrans860.WriteString(arg859)
    if err861 != nil { 
      Usage()
      return
    }
    factory862 := thrift.NewTJSONProtocolFactory()
    jsProt863 := factory862.GetProtocol(mbTrans860)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsArgs()
    err864 := containerStruct0.ReadField1(context.Background(), jsProt863)
    if err864 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.NewParts_
    value0 := argvalue0
    fmt.Print(client.AddPartitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_partitions_pspec":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartitionsPspec requires 1 args")
      flag.Usage()
    }
    arg865 := flag.Arg(1)
    mbTrans866 := thrift.NewTMemoryBufferLen(len(arg865))
    defer mbTrans866.Close()
    _, err867 := mbTrans866.WriteString(arg865)
    if err867 != nil { 
      Usage()
      return
    }
    factory868 := thrift.NewTJSONProtocolFactory()
    jsProt869 := factory868.GetProtocol(mbTrans866)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsPspecArgs()
    err870 := containerStruct0.ReadField1(context.Background(), jsProt869)
    if err870 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.NewParts_
    value0 := argvalue0
    fmt.Print(client.AddPartitionsPspec(context.Background(), value0))
    fmt.Print("\n")
    break
  case "append_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg873 := flag.Arg(3)
    mbTrans874 := thrift.NewTMemoryBufferLen(len(arg873))
    defer mbTrans874.Close()
    _, err875 := mbTrans874.WriteString(arg873)
    if err875 != nil { 
      Usage()
      return
    }
    factory876 := thrift.NewTJSONProtocolFactory()
    jsProt877 := factory876.GetProtocol(mbTrans874)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionArgs()
    err878 := containerStruct2.ReadField3(context.Background(), jsProt877)
    if err878 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.AppendPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "add_partitions_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartitionsReq requires 1 args")
      flag.Usage()
    }
    arg879 := flag.Arg(1)
    mbTrans880 := thrift.NewTMemoryBufferLen(len(arg879))
    defer mbTrans880.Close()
    _, err881 := mbTrans880.WriteString(arg879)
    if err881 != nil {
      Usage()
      return
    }
    factory882 := thrift.NewTJSONProtocolFactory()
    jsProt883 := factory882.GetProtocol(mbTrans880)
    argvalue0 := hive_metastore.NewAddPartitionsRequest()
    err884 := argvalue0.Read(context.Background(), jsProt883)
    if err884 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPartitionsReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "append_partition_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AppendPartitionWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg887 := flag.Arg(3)
    mbTrans888 := thrift.NewTMemoryBufferLen(len(arg887))
    defer mbTrans888.Close()
    _, err889 := mbTrans888.WriteString(arg887)
    if err889 != nil { 
      Usage()
      return
    }
    factory890 := thrift.NewTJSONProtocolFactory()
    jsProt891 := factory890.GetProtocol(mbTrans888)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs()
    err892 := containerStruct2.ReadField3(context.Background(), jsProt891)
    if err892 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    arg893 := flag.Arg(4)
    mbTrans894 := thrift.NewTMemoryBufferLen(len(arg893))
    defer mbTrans894.Close()
    _, err895 := mbTrans894.WriteString(arg893)
    if err895 != nil {
      Usage()
      return
    }
    factory896 := thrift.NewTJSONProtocolFactory()
    jsProt897 := factory896.GetProtocol(mbTrans894)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err898 := argvalue3.Read(context.Background(), jsProt897)
    if err898 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AppendPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "append_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AppendPartitionByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "append_partition_by_name_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AppendPartitionByNameWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg905 := flag.Arg(4)
    mbTrans906 := thrift.NewTMemoryBufferLen(len(arg905))
    defer mbTrans906.Close()
    _, err907 := mbTrans906.WriteString(arg905)
    if err907 != nil {
      Usage()
      return
    }
    factory908 := thrift.NewTJSONProtocolFactory()
    jsProt909 := factory908.GetProtocol(mbTrans906)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err910 := argvalue3.Read(context.Background(), jsProt909)
    if err910 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AppendPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg913 := flag.Arg(3)
    mbTrans914 := thrift.NewTMemoryBufferLen(len(arg913))
    defer mbTrans914.Close()
    _, err915 := mbTrans914.WriteString(arg913)
    if err915 != nil { 
      Usage()
      return
    }
    factory916 := thrift.NewTJSONProtocolFactory()
    jsProt917 := factory916.GetProtocol(mbTrans914)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionArgs()
    err918 := containerStruct2.ReadField3(context.Background(), jsProt917)
    if err918 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartition(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition_with_environment_context":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DropPartitionWithEnvironmentContext requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg922 := flag.Arg(3)
    mbTrans923 := thrift.NewTMemoryBufferLen(len(arg922))
    defer mbTrans923.Close()
    _, err924 := mbTrans923.WriteString(arg922)
    if err924 != nil { 
      Usage()
      return
    }
    factory925 := thrift.NewTJSONProtocolFactory()
    jsProt926 := factory925.GetProtocol(mbTrans923)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs()
    err927 := containerStruct2.ReadField3(context.Background(), jsProt926)
    if err927 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    arg929 := flag.Arg(5)
    mbTrans930 := thrift.NewTMemoryBufferLen(len(arg929))
    defer mbTrans930.Close()
    _, err931 := mbTrans930.WriteString(arg929)
    if err931 != nil {
      Usage()
      return
    }
    factory932 := thrift.NewTJSONProtocolFactory()
    jsProt933 := factory932.GetProtocol(mbTrans930)
    argvalue4 := hive_metastore.NewEnvironmentContext()
    err934 := argvalue4.Read(context.Background(), jsProt933)
    if err934 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DropPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "drop_partition_by_name":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartitionByName(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition_by_name_with_environment_context":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DropPartitionByNameWithEnvironmentContext requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    arg943 := flag.Arg(5)
    mbTrans944 := thrift.NewTMemoryBufferLen(len(arg943))
    defer mbTrans944.Close()
    _, err945 := mbTrans944.WriteString(arg943)
    if err945 != nil {
      Usage()
      return
    }
    factory946 := thrift.NewTJSONProtocolFactory()
    jsProt947 := factory946.GetProtocol(mbTrans944)
    argvalue4 := hive_metastore.NewEnvironmentContext()
    err948 := argvalue4.Read(context.Background(), jsProt947)
    if err948 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DropPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "drop_partitions_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropPartitionsReq requires 1 args")
      flag.Usage()
    }
    arg949 := flag.Arg(1)
    mbTrans950 := thrift.NewTMemoryBufferLen(len(arg949))
    defer mbTrans950.Close()
    _, err951 := mbTrans950.WriteString(arg949)
    if err951 != nil {
      Usage()
      return
    }
    factory952 := thrift.NewTJSONProtocolFactory()
    jsProt953 := factory952.GetProtocol(mbTrans950)
    argvalue0 := hive_metastore.NewDropPartitionsRequest()
    err954 := argvalue0.Read(context.Background(), jsProt953)
    if err954 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropPartitionsReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg957 := flag.Arg(3)
    mbTrans958 := thrift.NewTMemoryBufferLen(len(arg957))
    defer mbTrans958.Close()
    _, err959 := mbTrans958.WriteString(arg957)
    if err959 != nil { 
      Usage()
      return
    }
    factory960 := thrift.NewTJSONProtocolFactory()
    jsProt961 := factory960.GetProtocol(mbTrans958)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionArgs()
    err962 := containerStruct2.ReadField3(context.Background(), jsProt961)
    if err962 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.GetPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "exchange_partition":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "ExchangePartition requires 5 args")
      flag.Usage()
    }
    arg963 := flag.Arg(1)
    mbTrans964 := thrift.NewTMemoryBufferLen(len(arg963))
    defer mbTrans964.Close()
    _, err965 := mbTrans964.WriteString(arg963)
    if err965 != nil { 
      Usage()
      return
    }
    factory966 := thrift.NewTJSONProtocolFactory()
    jsProt967 := factory966.GetProtocol(mbTrans964)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionArgs()
    err968 := containerStruct0.ReadField1(context.Background(), jsProt967)
    if err968 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PartitionSpecs
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.ExchangePartition(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "exchange_partitions":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "ExchangePartitions requires 5 args")
      flag.Usage()
    }
    arg973 := flag.Arg(1)
    mbTrans974 := thrift.NewTMemoryBufferLen(len(arg973))
    defer mbTrans974.Close()
    _, err975 := mbTrans974.WriteString(arg973)
    if err975 != nil { 
      Usage()
      return
    }
    factory976 := thrift.NewTJSONProtocolFactory()
    jsProt977 := factory976.GetProtocol(mbTrans974)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionsArgs()
    err978 := containerStruct0.ReadField1(context.Background(), jsProt977)
    if err978 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PartitionSpecs
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.ExchangePartitions(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg985 := flag.Arg(3)
    mbTrans986 := thrift.NewTMemoryBufferLen(len(arg985))
    defer mbTrans986.Close()
    _, err987 := mbTrans986.WriteString(arg985)
    if err987 != nil { 
      Usage()
      return
    }
    factory988 := thrift.NewTJSONProtocolFactory()
    jsProt989 := factory988.GetProtocol(mbTrans986)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
    err990 := containerStruct2.ReadField3(context.Background(), jsProt989)
    if err990 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg992 := flag.Arg(5)
    mbTrans993 := thrift.NewTMemoryBufferLen(len(arg992))
    defer mbTrans993.Close()
    _, err994 := mbTrans993.WriteString(arg992)
    if err994 != nil { 
      Usage()
      return
    }
    factory995 := thrift.NewTJSONProtocolFactory()
    jsProt996 := factory995.GetProtocol(mbTrans993)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
    err997 := containerStruct4.ReadField5(context.Background(), jsProt996)
    if err997 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionWithAuth(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetPartitionByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1003 := (strconv.Atoi(flag.Arg(3)))
    if err1003 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitions(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1006 := (strconv.Atoi(flag.Arg(3)))
    if err1006 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1008 := flag.Arg(5)
    mbTrans1009 := thrift.NewTMemoryBufferLen(len(arg1008))
    defer mbTrans1009.Close()
    _, err1010 := mbTrans1009.WriteString(arg1008)
    if err1010 != nil { 
      Usage()
      return
    }
    factory1011 := thrift.NewTJSONProtocolFactory()
    jsProt1012 := factory1011.GetProtocol(mbTrans1009)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionsWithAuthArgs()
    err1013 := containerStruct4.ReadField5(context.Background(), jsProt1012)
    if err1013 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionsWithAuth(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partitions_pspec":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPspec requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1016 := (strconv.Atoi(flag.Arg(3)))
    if err1016 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitionsPspec(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1019 := (strconv.Atoi(flag.Arg(3)))
    if err1019 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitionNames(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_values":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionValues requires 1 args")
      flag.Usage()
    }
    arg1020 := flag.Arg(1)
    mbTrans1021 := thrift.NewTMemoryBufferLen(len(arg1020))
    defer mbTrans1021.Close()
    _, err1022 := mbTrans1021.WriteString(arg1020)
    if err1022 != nil {
      Usage()
      return
    }
    factory1023 := thrift.NewTJSONProtocolFactory()
    jsProt1024 := factory1023.GetProtocol(mbTrans1021)
    argvalue0 := hive_metastore.NewPartitionValuesRequest()
    err1025 := argvalue0.Read(context.Background(), jsProt1024)
    if err1025 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionValues(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_partitions_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1028 := flag.Arg(3)
    mbTrans1029 := thrift.NewTMemoryBufferLen(len(arg1028))
    defer mbTrans1029.Close()
    _, err1030 := mbTrans1029.WriteString(arg1028)
    if err1030 != nil { 
      Usage()
      return
    }
    factory1031 := thrift.NewTJSONProtocolFactory()
    jsProt1032 := factory1031.GetProtocol(mbTrans1029)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsArgs()
    err1033 := containerStruct2.ReadField3(context.Background(), jsProt1032)
    if err1033 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err1034 := (strconv.Atoi(flag.Arg(4)))
    if err1034 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsPs(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_ps_with_auth":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1037 := flag.Arg(3)
    mbTrans1038 := thrift.NewTMemoryBufferLen(len(arg1037))
    defer mbTrans1038.Close()
    _, err1039 := mbTrans1038.WriteString(arg1037)
    if err1039 != nil { 
      Usage()
      return
    }
    factory1040 := thrift.NewTJSONProtocolFactory()
    jsProt1041 := factory1040.GetProtocol(mbTrans1038)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
    err1042 := containerStruct2.ReadField3(context.Background(), jsProt1041)
    if err1042 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err1043 := (strconv.Atoi(flag.Arg(4)))
    if err1043 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg1045 := flag.Arg(6)
    mbTrans1046 := thrift.NewTMemoryBufferLen(len(arg1045))
    defer mbTrans1046.Close()
    _, err1047 := mbTrans1046.WriteString(arg1045)
    if err1047 != nil { 
      Usage()
      return
    }
    factory1048 := thrift.NewTJSONProtocolFactory()
    jsProt1049 := factory1048.GetProtocol(mbTrans1046)
    containerStruct5 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
    err1050 := containerStruct5.ReadField6(context.Background(), jsProt1049)
    if err1050 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.GroupNames
    value5 := argvalue5
    fmt.Print(client.GetPartitionsPsWithAuth(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "get_partition_names_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1053 := flag.Arg(3)
    mbTrans1054 := thrift.NewTMemoryBufferLen(len(arg1053))
    defer mbTrans1054.Close()
    _, err1055 := mbTrans1054.WriteString(arg1053)
    if err1055 != nil { 
      Usage()
      return
    }
    factory1056 := thrift.NewTJSONProtocolFactory()
    jsProt1057 := factory1056.GetProtocol(mbTrans1054)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionNamesPsArgs()
    err1058 := containerStruct2.ReadField3(context.Background(), jsProt1057)
    if err1058 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err1059 := (strconv.Atoi(flag.Arg(4)))
    if err1059 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionNamesPs(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_by_filter":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err1063 := (strconv.Atoi(flag.Arg(4)))
    if err1063 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsByFilter(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_part_specs_by_filter":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartSpecsByFilter requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err1067 := (strconv.Atoi(flag.Arg(4)))
    if err1067 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartSpecsByFilter(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_by_expr":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByExpr requires 1 args")
      flag.Usage()
    }
    arg1068 := flag.Arg(1)
    mbTrans1069 := thrift.NewTMemoryBufferLen(len(arg1068))
    defer mbTrans1069.Close()
    _, err1070 := mbTrans1069.WriteString(arg1068)
    if err1070 != nil {
      Usage()
      return
    }
    factory1071 := thrift.NewTJSONProtocolFactory()
    jsProt1072 := factory1071.GetProtocol(mbTrans1069)
    argvalue0 := hive_metastore.NewPartitionsByExprRequest()
    err1073 := argvalue0.Read(context.Background(), jsProt1072)
    if err1073 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionsByExpr(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_num_partitions_by_filter":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNumPartitionsByFilter requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetNumPartitionsByFilter(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_by_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1079 := flag.Arg(3)
    mbTrans1080 := thrift.NewTMemoryBufferLen(len(arg1079))
    defer mbTrans1080.Close()
    _, err1081 := mbTrans1080.WriteString(arg1079)
    if err1081 != nil { 
      Usage()
      return
    }
    factory1082 := thrift.NewTJSONProtocolFactory()
    jsProt1083 := factory1082.GetProtocol(mbTrans1080)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsByNamesArgs()
    err1084 := containerStruct2.ReadField3(context.Background(), jsProt1083)
    if err1084 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Names
    value2 := argvalue2
    fmt.Print(client.GetPartitionsByNames(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1087 := flag.Arg(3)
    mbTrans1088 := thrift.NewTMemoryBufferLen(len(arg1087))
    defer mbTrans1088.Close()
    _, err1089 := mbTrans1088.WriteString(arg1087)
    if err1089 != nil {
      Usage()
      return
    }
    factory1090 := thrift.NewTJSONProtocolFactory()
    jsProt1091 := factory1090.GetProtocol(mbTrans1088)
    argvalue2 := hive_metastore.NewPartition()
    err1092 := argvalue2.Read(context.Background(), jsProt1091)
    if err1092 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterPartitions requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1095 := flag.Arg(3)
    mbTrans1096 := thrift.NewTMemoryBufferLen(len(arg1095))
    defer mbTrans1096.Close()
    _, err1097 := mbTrans1096.WriteString(arg1095)
    if err1097 != nil { 
      Usage()
      return
    }
    factory1098 := thrift.NewTJSONProtocolFactory()
    jsProt1099 := factory1098.GetProtocol(mbTrans1096)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsArgs()
    err1100 := containerStruct2.ReadField3(context.Background(), jsProt1099)
    if err1100 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.NewParts_
    value2 := argvalue2
    fmt.Print(client.AlterPartitions(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partitions_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterPartitionsWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1103 := flag.Arg(3)
    mbTrans1104 := thrift.NewTMemoryBufferLen(len(arg1103))
    defer mbTrans1104.Close()
    _, err1105 := mbTrans1104.WriteString(arg1103)
    if err1105 != nil { 
      Usage()
      return
    }
    factory1106 := thrift.NewTJSONProtocolFactory()
    jsProt1107 := factory1106.GetProtocol(mbTrans1104)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs()
    err1108 := containerStruct2.ReadField3(context.Background(), jsProt1107)
    if err1108 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.NewParts_
    value2 := argvalue2
    arg1109 := flag.Arg(4)
    mbTrans1110 := thrift.NewTMemoryBufferLen(len(arg1109))
    defer mbTrans1110.Close()
    _, err1111 := mbTrans1110.WriteString(arg1109)
    if err1111 != nil {
      Usage()
      return
    }
    factory1112 := thrift.NewTJSONProtocolFactory()
    jsProt1113 := factory1112.GetProtocol(mbTrans1110)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1114 := argvalue3.Read(context.Background(), jsProt1113)
    if err1114 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterPartitionsWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "alter_partition_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterPartitionWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1117 := flag.Arg(3)
    mbTrans1118 := thrift.NewTMemoryBufferLen(len(arg1117))
    defer mbTrans1118.Close()
    _, err1119 := mbTrans1118.WriteString(arg1117)
    if err1119 != nil {
      Usage()
      return
    }
    factory1120 := thrift.NewTJSONProtocolFactory()
    jsProt1121 := factory1120.GetProtocol(mbTrans1118)
    argvalue2 := hive_metastore.NewPartition()
    err1122 := argvalue2.Read(context.Background(), jsProt1121)
    if err1122 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1123 := flag.Arg(4)
    mbTrans1124 := thrift.NewTMemoryBufferLen(len(arg1123))
    defer mbTrans1124.Close()
    _, err1125 := mbTrans1124.WriteString(arg1123)
    if err1125 != nil {
      Usage()
      return
    }
    factory1126 := thrift.NewTJSONProtocolFactory()
    jsProt1127 := factory1126.GetProtocol(mbTrans1124)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1128 := argvalue3.Read(context.Background(), jsProt1127)
    if err1128 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "rename_partition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RenamePartition requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1131 := flag.Arg(3)
    mbTrans1132 := thrift.NewTMemoryBufferLen(len(arg1131))
    defer mbTrans1132.Close()
    _, err1133 := mbTrans1132.WriteString(arg1131)
    if err1133 != nil { 
      Usage()
      return
    }
    factory1134 := thrift.NewTJSONProtocolFactory()
    jsProt1135 := factory1134.GetProtocol(mbTrans1132)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreRenamePartitionArgs()
    err1136 := containerStruct2.ReadField3(context.Background(), jsProt1135)
    if err1136 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    arg1137 := flag.Arg(4)
    mbTrans1138 := thrift.NewTMemoryBufferLen(len(arg1137))
    defer mbTrans1138.Close()
    _, err1139 := mbTrans1138.WriteString(arg1137)
    if err1139 != nil {
      Usage()
      return
    }
    factory1140 := thrift.NewTJSONProtocolFactory()
    jsProt1141 := factory1140.GetProtocol(mbTrans1138)
    argvalue3 := hive_metastore.NewPartition()
    err1142 := argvalue3.Read(context.Background(), jsProt1141)
    if err1142 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.RenamePartition(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "partition_name_has_valid_characters":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionNameHasValidCharacters requires 2 args")
      flag.Usage()
    }
    arg1143 := flag.Arg(1)
    mbTrans1144 := thrift.NewTMemoryBufferLen(len(arg1143))
    defer mbTrans1144.Close()
    _, err1145 := mbTrans1144.WriteString(arg1143)
    if err1145 != nil { 
      Usage()
      return
    }
    factory1146 := thrift.NewTJSONProtocolFactory()
    jsProt1147 := factory1146.GetProtocol(mbTrans1144)
    containerStruct0 := hive_metastore.NewThriftHiveMetastorePartitionNameHasValidCharactersArgs()
    err1148 := containerStruct0.ReadField1(context.Background(), jsProt1147)
    if err1148 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PartVals
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.PartitionNameHasValidCharacters(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_config_value":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetConfigValue(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partition_name_to_vals":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToVals(context.Background(), value0))
    fmt.Print("\n")
    break
  case "partition_name_to_spec":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToSpec(context.Background(), value0))
    fmt.Print("\n")
    break
  case "markPartitionForEvent":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "MarkPartitionForEvent requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1156 := flag.Arg(3)
    mbTrans1157 := thrift.NewTMemoryBufferLen(len(arg1156))
    defer mbTrans1157.Close()
    _, err1158 := mbTrans1157.WriteString(arg1156)
    if err1158 != nil { 
      Usage()
      return
    }
    factory1159 := thrift.NewTJSONProtocolFactory()
    jsProt1160 := factory1159.GetProtocol(mbTrans1157)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreMarkPartitionForEventArgs()
    err1161 := containerStruct2.ReadField3(context.Background(), jsProt1160)
    if err1161 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := hive_metastore.PartitionEventType(tmp3)
    value3 := argvalue3
    fmt.Print(client.MarkPartitionForEvent(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "isPartitionMarkedForEvent":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "IsPartitionMarkedForEvent requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1164 := flag.Arg(3)
    mbTrans1165 := thrift.NewTMemoryBufferLen(len(arg1164))
    defer mbTrans1165.Close()
    _, err1166 := mbTrans1165.WriteString(arg1164)
    if err1166 != nil { 
      Usage()
      return
    }
    factory1167 := thrift.NewTJSONProtocolFactory()
    jsProt1168 := factory1167.GetProtocol(mbTrans1165)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreIsPartitionMarkedForEventArgs()
    err1169 := containerStruct2.ReadField3(context.Background(), jsProt1168)
    if err1169 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := hive_metastore.PartitionEventType(tmp3)
    value3 := argvalue3
    fmt.Print(client.IsPartitionMarkedForEvent(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "add_index":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddIndex requires 2 args")
      flag.Usage()
    }
    arg1170 := flag.Arg(1)
    mbTrans1171 := thrift.NewTMemoryBufferLen(len(arg1170))
    defer mbTrans1171.Close()
    _, err1172 := mbTrans1171.WriteString(arg1170)
    if err1172 != nil {
      Usage()
      return
    }
    factory1173 := thrift.NewTJSONProtocolFactory()
    jsProt1174 := factory1173.GetProtocol(mbTrans1171)
    argvalue0 := hive_metastore.NewIndex()
    err1175 := argvalue0.Read(context.Background(), jsProt1174)
    if err1175 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1176 := flag.Arg(2)
    mbTrans1177 := thrift.NewTMemoryBufferLen(len(arg1176))
    defer mbTrans1177.Close()
    _, err1178 := mbTrans1177.WriteString(arg1176)
    if err1178 != nil {
      Usage()
      return
    }
    factory1179 := thrift.NewTJSONProtocolFactory()
    jsProt1180 := factory1179.GetProtocol(mbTrans1177)
    argvalue1 := hive_metastore.NewTable()
    err1181 := argvalue1.Read(context.Background(), jsProt1180)
    if err1181 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddIndex(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alter_index":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterIndex requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1185 := flag.Arg(4)
    mbTrans1186 := thrift.NewTMemoryBufferLen(len(arg1185))
    defer mbTrans1186.Close()
    _, err1187 := mbTrans1186.WriteString(arg1185)
    if err1187 != nil {
      Usage()
      return
    }
    factory1188 := thrift.NewTJSONProtocolFactory()
    jsProt1189 := factory1188.GetProtocol(mbTrans1186)
    argvalue3 := hive_metastore.NewIndex()
    err1190 := argvalue3.Read(context.Background(), jsProt1189)
    if err1190 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterIndex(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_index_by_name":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropIndexByName requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropIndexByName(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_index_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetIndexByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_indexes":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexes requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1200 := (strconv.Atoi(flag.Arg(3)))
    if err1200 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetIndexes(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_index_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1203 := (strconv.Atoi(flag.Arg(3)))
    if err1203 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetIndexNames(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_primary_keys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPrimaryKeys requires 1 args")
      flag.Usage()
    }
    arg1204 := flag.Arg(1)
    mbTrans1205 := thrift.NewTMemoryBufferLen(len(arg1204))
    defer mbTrans1205.Close()
    _, err1206 := mbTrans1205.WriteString(arg1204)
    if err1206 != nil {
      Usage()
      return
    }
    factory1207 := thrift.NewTJSONProtocolFactory()
    jsProt1208 := factory1207.GetProtocol(mbTrans1205)
    argvalue0 := hive_metastore.NewPrimaryKeysRequest()
    err1209 := argvalue0.Read(context.Background(), jsProt1208)
    if err1209 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPrimaryKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_foreign_keys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetForeignKeys requires 1 args")
      flag.Usage()
    }
    arg1210 := flag.Arg(1)
    mbTrans1211 := thrift.NewTMemoryBufferLen(len(arg1210))
    defer mbTrans1211.Close()
    _, err1212 := mbTrans1211.WriteString(arg1210)
    if err1212 != nil {
      Usage()
      return
    }
    factory1213 := thrift.NewTJSONProtocolFactory()
    jsProt1214 := factory1213.GetProtocol(mbTrans1211)
    argvalue0 := hive_metastore.NewForeignKeysRequest()
    err1215 := argvalue0.Read(context.Background(), jsProt1214)
    if err1215 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetForeignKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_unique_constraints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUniqueConstraints requires 1 args")
      flag.Usage()
    }
    arg1216 := flag.Arg(1)
    mbTrans1217 := thrift.NewTMemoryBufferLen(len(arg1216))
    defer mbTrans1217.Close()
    _, err1218 := mbTrans1217.WriteString(arg1216)
    if err1218 != nil {
      Usage()
      return
    }
    factory1219 := thrift.NewTJSONProtocolFactory()
    jsProt1220 := factory1219.GetProtocol(mbTrans1217)
    argvalue0 := hive_metastore.NewUniqueConstraintsRequest()
    err1221 := argvalue0.Read(context.Background(), jsProt1220)
    if err1221 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUniqueConstraints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_not_null_constraints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNotNullConstraints requires 1 args")
      flag.Usage()
    }
    arg1222 := flag.Arg(1)
    mbTrans1223 := thrift.NewTMemoryBufferLen(len(arg1222))
    defer mbTrans1223.Close()
    _, err1224 := mbTrans1223.WriteString(arg1222)
    if err1224 != nil {
      Usage()
      return
    }
    factory1225 := thrift.NewTJSONProtocolFactory()
    jsProt1226 := factory1225.GetProtocol(mbTrans1223)
    argvalue0 := hive_metastore.NewNotNullConstraintsRequest()
    err1227 := argvalue0.Read(context.Background(), jsProt1226)
    if err1227 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNotNullConstraints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_table_column_statistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateTableColumnStatistics requires 1 args")
      flag.Usage()
    }
    arg1228 := flag.Arg(1)
    mbTrans1229 := thrift.NewTMemoryBufferLen(len(arg1228))
    defer mbTrans1229.Close()
    _, err1230 := mbTrans1229.WriteString(arg1228)
    if err1230 != nil {
      Usage()
      return
    }
    factory1231 := thrift.NewTJSONProtocolFactory()
    jsProt1232 := factory1231.GetProtocol(mbTrans1229)
    argvalue0 := hive_metastore.NewColumnStatistics()
    err1233 := argvalue0.Read(context.Background(), jsProt1232)
    if err1233 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateTableColumnStatistics(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_partition_column_statistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatistics requires 1 args")
      flag.Usage()
    }
    arg1234 := flag.Arg(1)
    mbTrans1235 := thrift.NewTMemoryBufferLen(len(arg1234))
    defer mbTrans1235.Close()
    _, err1236 := mbTrans1235.WriteString(arg1234)
    if err1236 != nil {
      Usage()
      return
    }
    factory1237 := thrift.NewTJSONProtocolFactory()
    jsProt1238 := factory1237.GetProtocol(mbTrans1235)
    argvalue0 := hive_metastore.NewColumnStatistics()
    err1239 := argvalue0.Read(context.Background(), jsProt1238)
    if err1239 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdatePartitionColumnStatistics(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table_column_statistics":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableColumnStatistics requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetTableColumnStatistics(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_column_statistics":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionColumnStatistics requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetPartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_table_statistics_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableStatisticsReq requires 1 args")
      flag.Usage()
    }
    arg1247 := flag.Arg(1)
    mbTrans1248 := thrift.NewTMemoryBufferLen(len(arg1247))
    defer mbTrans1248.Close()
    _, err1249 := mbTrans1248.WriteString(arg1247)
    if err1249 != nil {
      Usage()
      return
    }
    factory1250 := thrift.NewTJSONProtocolFactory()
    jsProt1251 := factory1250.GetProtocol(mbTrans1248)
    argvalue0 := hive_metastore.NewTableStatsRequest()
    err1252 := argvalue0.Read(context.Background(), jsProt1251)
    if err1252 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableStatisticsReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_partitions_statistics_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionsStatisticsReq requires 1 args")
      flag.Usage()
    }
    arg1253 := flag.Arg(1)
    mbTrans1254 := thrift.NewTMemoryBufferLen(len(arg1253))
    defer mbTrans1254.Close()
    _, err1255 := mbTrans1254.WriteString(arg1253)
    if err1255 != nil {
      Usage()
      return
    }
    factory1256 := thrift.NewTJSONProtocolFactory()
    jsProt1257 := factory1256.GetProtocol(mbTrans1254)
    argvalue0 := hive_metastore.NewPartitionsStatsRequest()
    err1258 := argvalue0.Read(context.Background(), jsProt1257)
    if err1258 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionsStatisticsReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_aggr_stats_for":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAggrStatsFor requires 1 args")
      flag.Usage()
    }
    arg1259 := flag.Arg(1)
    mbTrans1260 := thrift.NewTMemoryBufferLen(len(arg1259))
    defer mbTrans1260.Close()
    _, err1261 := mbTrans1260.WriteString(arg1259)
    if err1261 != nil {
      Usage()
      return
    }
    factory1262 := thrift.NewTJSONProtocolFactory()
    jsProt1263 := factory1262.GetProtocol(mbTrans1260)
    argvalue0 := hive_metastore.NewPartitionsStatsRequest()
    err1264 := argvalue0.Read(context.Background(), jsProt1263)
    if err1264 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAggrStatsFor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_aggr_stats_for":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetAggrStatsFor requires 1 args")
      flag.Usage()
    }
    arg1265 := flag.Arg(1)
    mbTrans1266 := thrift.NewTMemoryBufferLen(len(arg1265))
    defer mbTrans1266.Close()
    _, err1267 := mbTrans1266.WriteString(arg1265)
    if err1267 != nil {
      Usage()
      return
    }
    factory1268 := thrift.NewTJSONProtocolFactory()
    jsProt1269 := factory1268.GetProtocol(mbTrans1266)
    argvalue0 := hive_metastore.NewSetPartitionsStatsRequest()
    err1270 := argvalue0.Read(context.Background(), jsProt1269)
    if err1270 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetAggrStatsFor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "delete_partition_column_statistics":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DeletePartitionColumnStatistics requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.DeletePartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "delete_table_column_statistics":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteTableColumnStatistics requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteTableColumnStatistics(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "create_function":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateFunction requires 1 args")
      flag.Usage()
    }
    arg1278 := flag.Arg(1)
    mbTrans1279 := thrift.NewTMemoryBufferLen(len(arg1278))
    defer mbTrans1279.Close()
    _, err1280 := mbTrans1279.WriteString(arg1278)
    if err1280 != nil {
      Usage()
      return
    }
    factory1281 := thrift.NewTJSONProtocolFactory()
    jsProt1282 := factory1281.GetProtocol(mbTrans1279)
    argvalue0 := hive_metastore.NewFunction()
    err1283 := argvalue0.Read(context.Background(), jsProt1282)
    if err1283 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateFunction(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_function":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DropFunction requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DropFunction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alter_function":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterFunction requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1288 := flag.Arg(3)
    mbTrans1289 := thrift.NewTMemoryBufferLen(len(arg1288))
    defer mbTrans1289.Close()
    _, err1290 := mbTrans1289.WriteString(arg1288)
    if err1290 != nil {
      Usage()
      return
    }
    factory1291 := thrift.NewTJSONProtocolFactory()
    jsProt1292 := factory1291.GetProtocol(mbTrans1289)
    argvalue2 := hive_metastore.NewFunction()
    err1293 := argvalue2.Read(context.Background(), jsProt1292)
    if err1293 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterFunction(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_functions":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFunctions requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFunctions(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_function":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFunction requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFunction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_all_functions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllFunctions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllFunctions(context.Background()))
    fmt.Print("\n")
    break
  case "create_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
      flag.Usage()
    }
    arg1298 := flag.Arg(1)
    mbTrans1299 := thrift.NewTMemoryBufferLen(len(arg1298))
    defer mbTrans1299.Close()
    _, err1300 := mbTrans1299.WriteString(arg1298)
    if err1300 != nil {
      Usage()
      return
    }
    factory1301 := thrift.NewTJSONProtocolFactory()
    jsProt1302 := factory1301.GetProtocol(mbTrans1299)
    argvalue0 := hive_metastore.NewRole()
    err1303 := argvalue0.Read(context.Background(), jsProt1302)
    if err1303 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_role_names":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRoleNames(context.Background()))
    fmt.Print("\n")
    break
  case "grant_role":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_metastore.PrincipalType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := hive_metastore.PrincipalType(tmp4)
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GrantRole(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "revoke_role":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_metastore.PrincipalType(tmp2)
    value2 := argvalue2
    fmt.Print(client.RevokeRole(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_roles":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_metastore.PrincipalType(tmp1)
    value1 := argvalue1
    fmt.Print(client.ListRoles(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "grant_revoke_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantRevokeRole requires 1 args")
      flag.Usage()
    }
    arg1312 := flag.Arg(1)
    mbTrans1313 := thrift.NewTMemoryBufferLen(len(arg1312))
    defer mbTrans1313.Close()
    _, err1314 := mbTrans1313.WriteString(arg1312)
    if err1314 != nil {
      Usage()
      return
    }
    factory1315 := thrift.NewTJSONProtocolFactory()
    jsProt1316 := factory1315.GetProtocol(mbTrans1313)
    argvalue0 := hive_metastore.NewGrantRevokeRoleRequest()
    err1317 := argvalue0.Read(context.Background(), jsProt1316)
    if err1317 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantRevokeRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_principals_in_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPrincipalsInRole requires 1 args")
      flag.Usage()
    }
    arg1318 := flag.Arg(1)
    mbTrans1319 := thrift.NewTMemoryBufferLen(len(arg1318))
    defer mbTrans1319.Close()
    _, err1320 := mbTrans1319.WriteString(arg1318)
    if err1320 != nil {
      Usage()
      return
    }
    factory1321 := thrift.NewTJSONProtocolFactory()
    jsProt1322 := factory1321.GetProtocol(mbTrans1319)
    argvalue0 := hive_metastore.NewGetPrincipalsInRoleRequest()
    err1323 := argvalue0.Read(context.Background(), jsProt1322)
    if err1323 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPrincipalsInRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_role_grants_for_principal":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoleGrantsForPrincipal requires 1 args")
      flag.Usage()
    }
    arg1324 := flag.Arg(1)
    mbTrans1325 := thrift.NewTMemoryBufferLen(len(arg1324))
    defer mbTrans1325.Close()
    _, err1326 := mbTrans1325.WriteString(arg1324)
    if err1326 != nil {
      Usage()
      return
    }
    factory1327 := thrift.NewTJSONProtocolFactory()
    jsProt1328 := factory1327.GetProtocol(mbTrans1325)
    argvalue0 := hive_metastore.NewGetRoleGrantsForPrincipalRequest()
    err1329 := argvalue0.Read(context.Background(), jsProt1328)
    if err1329 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetRoleGrantsForPrincipal(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_privilege_set":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
      flag.Usage()
    }
    arg1330 := flag.Arg(1)
    mbTrans1331 := thrift.NewTMemoryBufferLen(len(arg1330))
    defer mbTrans1331.Close()
    _, err1332 := mbTrans1331.WriteString(arg1330)
    if err1332 != nil {
      Usage()
      return
    }
    factory1333 := thrift.NewTJSONProtocolFactory()
    jsProt1334 := factory1333.GetProtocol(mbTrans1331)
    argvalue0 := hive_metastore.NewHiveObjectRef()
    err1335 := argvalue0.Read(context.Background(), jsProt1334)
    if err1335 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1337 := flag.Arg(3)
    mbTrans1338 := thrift.NewTMemoryBufferLen(len(arg1337))
    defer mbTrans1338.Close()
    _, err1339 := mbTrans1338.WriteString(arg1337)
    if err1339 != nil { 
      Usage()
      return
    }
    factory1340 := thrift.NewTJSONProtocolFactory()
    jsProt1341 := factory1340.GetProtocol(mbTrans1338)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPrivilegeSetArgs()
    err1342 := containerStruct2.ReadField3(context.Background(), jsProt1341)
    if err1342 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.GroupNames
    value2 := argvalue2
    fmt.Print(client.GetPrivilegeSet(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_privileges":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_metastore.PrincipalType(tmp1)
    value1 := argvalue1
    arg1344 := flag.Arg(3)
    mbTrans1345 := thrift.NewTMemoryBufferLen(len(arg1344))
    defer mbTrans1345.Close()
    _, err1346 := mbTrans1345.WriteString(arg1344)
    if err1346 != nil {
      Usage()
      return
    }
    factory1347 := thrift.NewTJSONProtocolFactory()
    jsProt1348 := factory1347.GetProtocol(mbTrans1345)
    argvalue2 := hive_metastore.NewHiveObjectRef()
    err1349 := argvalue2.Read(context.Background(), jsProt1348)
    if err1349 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ListPrivileges(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "grant_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
      flag.Usage()
    }
    arg1350 := flag.Arg(1)
    mbTrans1351 := thrift.NewTMemoryBufferLen(len(arg1350))
    defer mbTrans1351.Close()
    _, err1352 := mbTrans1351.WriteString(arg1350)
    if err1352 != nil {
      Usage()
      return
    }
    factory1353 := thrift.NewTJSONProtocolFactory()
    jsProt1354 := factory1353.GetProtocol(mbTrans1351)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err1355 := argvalue0.Read(context.Background(), jsProt1354)
    if err1355 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantPrivileges(context.Background(), value0))
    fmt.Print("\n")
    break
  case "revoke_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
      flag.Usage()
    }
    arg1356 := flag.Arg(1)
    mbTrans1357 := thrift.NewTMemoryBufferLen(len(arg1356))
    defer mbTrans1357.Close()
    _, err1358 := mbTrans1357.WriteString(arg1356)
    if err1358 != nil {
      Usage()
      return
    }
    factory1359 := thrift.NewTJSONProtocolFactory()
    jsProt1360 := factory1359.GetProtocol(mbTrans1357)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err1361 := argvalue0.Read(context.Background(), jsProt1360)
    if err1361 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RevokePrivileges(context.Background(), value0))
    fmt.Print("\n")
    break
  case "grant_revoke_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantRevokePrivileges requires 1 args")
      flag.Usage()
    }
    arg1362 := flag.Arg(1)
    mbTrans1363 := thrift.NewTMemoryBufferLen(len(arg1362))
    defer mbTrans1363.Close()
    _, err1364 := mbTrans1363.WriteString(arg1362)
    if err1364 != nil {
      Usage()
      return
    }
    factory1365 := thrift.NewTJSONProtocolFactory()
    jsProt1366 := factory1365.GetProtocol(mbTrans1363)
    argvalue0 := hive_metastore.NewGrantRevokePrivilegeRequest()
    err1367 := argvalue0.Read(context.Background(), jsProt1366)
    if err1367 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantRevokePrivileges(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_ugi":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetUgi requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1369 := flag.Arg(2)
    mbTrans1370 := thrift.NewTMemoryBufferLen(len(arg1369))
    defer mbTrans1370.Close()
    _, err1371 := mbTrans1370.WriteString(arg1369)
    if err1371 != nil { 
      Usage()
      return
    }
    factory1372 := thrift.NewTJSONProtocolFactory()
    jsProt1373 := factory1372.GetProtocol(mbTrans1370)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreSetUgiArgs()
    err1374 := containerStruct1.ReadField2(context.Background(), jsProt1373)
    if err1374 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.GroupNames
    value1 := argvalue1
    fmt.Print(client.SetUgi(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_delegation_token":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetDelegationToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetDelegationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "renew_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RenewDelegationToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cancel_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CancelDelegationToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_token":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AddToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "remove_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RemoveToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_all_token_identifiers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllTokenIdentifiers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllTokenIdentifiers(context.Background()))
    fmt.Print("\n")
    break
  case "add_master_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddMasterKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.AddMasterKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_master_key":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateMasterKey requires 2 args")
      flag.Usage()
    }
    tmp0, err1384 := (strconv.Atoi(flag.Arg(1)))
    if err1384 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateMasterKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "remove_master_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveMasterKey requires 1 args")
      flag.Usage()
    }
    tmp0, err1386 := (strconv.Atoi(flag.Arg(1)))
    if err1386 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveMasterKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_master_keys":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetMasterKeys requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetMasterKeys(context.Background()))
    fmt.Print("\n")
    break
  case "get_open_txns":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOpenTxns requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOpenTxns(context.Background()))
    fmt.Print("\n")
    break
  case "get_open_txns_info":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOpenTxnsInfo requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOpenTxnsInfo(context.Background()))
    fmt.Print("\n")
    break
  case "open_txns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenTxns requires 1 args")
      flag.Usage()
    }
    arg1387 := flag.Arg(1)
    mbTrans1388 := thrift.NewTMemoryBufferLen(len(arg1387))
    defer mbTrans1388.Close()
    _, err1389 := mbTrans1388.WriteString(arg1387)
    if err1389 != nil {
      Usage()
      return
    }
    factory1390 := thrift.NewTJSONProtocolFactory()
    jsProt1391 := factory1390.GetProtocol(mbTrans1388)
    argvalue0 := hive_metastore.NewOpenTxnRequest()
    err1392 := argvalue0.Read(context.Background(), jsProt1391)
    if err1392 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenTxns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "abort_txn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AbortTxn requires 1 args")
      flag.Usage()
    }
    arg1393 := flag.Arg(1)
    mbTrans1394 := thrift.NewTMemoryBufferLen(len(arg1393))
    defer mbTrans1394.Close()
    _, err1395 := mbTrans1394.WriteString(arg1393)
    if err1395 != nil {
      Usage()
      return
    }
    factory1396 := thrift.NewTJSONProtocolFactory()
    jsProt1397 := factory1396.GetProtocol(mbTrans1394)
    argvalue0 := hive_metastore.NewAbortTxnRequest()
    err1398 := argvalue0.Read(context.Background(), jsProt1397)
    if err1398 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AbortTxn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "abort_txns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AbortTxns requires 1 args")
      flag.Usage()
    }
    arg1399 := flag.Arg(1)
    mbTrans1400 := thrift.NewTMemoryBufferLen(len(arg1399))
    defer mbTrans1400.Close()
    _, err1401 := mbTrans1400.WriteString(arg1399)
    if err1401 != nil {
      Usage()
      return
    }
    factory1402 := thrift.NewTJSONProtocolFactory()
    jsProt1403 := factory1402.GetProtocol(mbTrans1400)
    argvalue0 := hive_metastore.NewAbortTxnsRequest()
    err1404 := argvalue0.Read(context.Background(), jsProt1403)
    if err1404 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AbortTxns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "commit_txn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CommitTxn requires 1 args")
      flag.Usage()
    }
    arg1405 := flag.Arg(1)
    mbTrans1406 := thrift.NewTMemoryBufferLen(len(arg1405))
    defer mbTrans1406.Close()
    _, err1407 := mbTrans1406.WriteString(arg1405)
    if err1407 != nil {
      Usage()
      return
    }
    factory1408 := thrift.NewTJSONProtocolFactory()
    jsProt1409 := factory1408.GetProtocol(mbTrans1406)
    argvalue0 := hive_metastore.NewCommitTxnRequest()
    err1410 := argvalue0.Read(context.Background(), jsProt1409)
    if err1410 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CommitTxn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "lock":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Lock requires 1 args")
      flag.Usage()
    }
    arg1411 := flag.Arg(1)
    mbTrans1412 := thrift.NewTMemoryBufferLen(len(arg1411))
    defer mbTrans1412.Close()
    _, err1413 := mbTrans1412.WriteString(arg1411)
    if err1413 != nil {
      Usage()
      return
    }
    factory1414 := thrift.NewTJSONProtocolFactory()
    jsProt1415 := factory1414.GetProtocol(mbTrans1412)
    argvalue0 := hive_metastore.NewLockRequest()
    err1416 := argvalue0.Read(context.Background(), jsProt1415)
    if err1416 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Lock(context.Background(), value0))
    fmt.Print("\n")
    break
  case "check_lock":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CheckLock requires 1 args")
      flag.Usage()
    }
    arg1417 := flag.Arg(1)
    mbTrans1418 := thrift.NewTMemoryBufferLen(len(arg1417))
    defer mbTrans1418.Close()
    _, err1419 := mbTrans1418.WriteString(arg1417)
    if err1419 != nil {
      Usage()
      return
    }
    factory1420 := thrift.NewTJSONProtocolFactory()
    jsProt1421 := factory1420.GetProtocol(mbTrans1418)
    argvalue0 := hive_metastore.NewCheckLockRequest()
    err1422 := argvalue0.Read(context.Background(), jsProt1421)
    if err1422 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CheckLock(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unlock":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Unlock requires 1 args")
      flag.Usage()
    }
    arg1423 := flag.Arg(1)
    mbTrans1424 := thrift.NewTMemoryBufferLen(len(arg1423))
    defer mbTrans1424.Close()
    _, err1425 := mbTrans1424.WriteString(arg1423)
    if err1425 != nil {
      Usage()
      return
    }
    factory1426 := thrift.NewTJSONProtocolFactory()
    jsProt1427 := factory1426.GetProtocol(mbTrans1424)
    argvalue0 := hive_metastore.NewUnlockRequest()
    err1428 := argvalue0.Read(context.Background(), jsProt1427)
    if err1428 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Unlock(context.Background(), value0))
    fmt.Print("\n")
    break
  case "show_locks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ShowLocks requires 1 args")
      flag.Usage()
    }
    arg1429 := flag.Arg(1)
    mbTrans1430 := thrift.NewTMemoryBufferLen(len(arg1429))
    defer mbTrans1430.Close()
    _, err1431 := mbTrans1430.WriteString(arg1429)
    if err1431 != nil {
      Usage()
      return
    }
    factory1432 := thrift.NewTJSONProtocolFactory()
    jsProt1433 := factory1432.GetProtocol(mbTrans1430)
    argvalue0 := hive_metastore.NewShowLocksRequest()
    err1434 := argvalue0.Read(context.Background(), jsProt1433)
    if err1434 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ShowLocks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "heartbeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Heartbeat requires 1 args")
      flag.Usage()
    }
    arg1435 := flag.Arg(1)
    mbTrans1436 := thrift.NewTMemoryBufferLen(len(arg1435))
    defer mbTrans1436.Close()
    _, err1437 := mbTrans1436.WriteString(arg1435)
    if err1437 != nil {
      Usage()
      return
    }
    factory1438 := thrift.NewTJSONProtocolFactory()
    jsProt1439 := factory1438.GetProtocol(mbTrans1436)
    argvalue0 := hive_metastore.NewHeartbeatRequest()
    err1440 := argvalue0.Read(context.Background(), jsProt1439)
    if err1440 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Heartbeat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "heartbeat_txn_range":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HeartbeatTxnRange requires 1 args")
      flag.Usage()
    }
    arg1441 := flag.Arg(1)
    mbTrans1442 := thrift.NewTMemoryBufferLen(len(arg1441))
    defer mbTrans1442.Close()
    _, err1443 := mbTrans1442.WriteString(arg1441)
    if err1443 != nil {
      Usage()
      return
    }
    factory1444 := thrift.NewTJSONProtocolFactory()
    jsProt1445 := factory1444.GetProtocol(mbTrans1442)
    argvalue0 := hive_metastore.NewHeartbeatTxnRangeRequest()
    err1446 := argvalue0.Read(context.Background(), jsProt1445)
    if err1446 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HeartbeatTxnRange(context.Background(), value0))
    fmt.Print("\n")
    break
  case "compact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Compact requires 1 args")
      flag.Usage()
    }
    arg1447 := flag.Arg(1)
    mbTrans1448 := thrift.NewTMemoryBufferLen(len(arg1447))
    defer mbTrans1448.Close()
    _, err1449 := mbTrans1448.WriteString(arg1447)
    if err1449 != nil {
      Usage()
      return
    }
    factory1450 := thrift.NewTJSONProtocolFactory()
    jsProt1451 := factory1450.GetProtocol(mbTrans1448)
    argvalue0 := hive_metastore.NewCompactionRequest()
    err1452 := argvalue0.Read(context.Background(), jsProt1451)
    if err1452 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Compact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "compact2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Compact2 requires 1 args")
      flag.Usage()
    }
    arg1453 := flag.Arg(1)
    mbTrans1454 := thrift.NewTMemoryBufferLen(len(arg1453))
    defer mbTrans1454.Close()
    _, err1455 := mbTrans1454.WriteString(arg1453)
    if err1455 != nil {
      Usage()
      return
    }
    factory1456 := thrift.NewTJSONProtocolFactory()
    jsProt1457 := factory1456.GetProtocol(mbTrans1454)
    argvalue0 := hive_metastore.NewCompactionRequest()
    err1458 := argvalue0.Read(context.Background(), jsProt1457)
    if err1458 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Compact2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "show_compact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ShowCompact requires 1 args")
      flag.Usage()
    }
    arg1459 := flag.Arg(1)
    mbTrans1460 := thrift.NewTMemoryBufferLen(len(arg1459))
    defer mbTrans1460.Close()
    _, err1461 := mbTrans1460.WriteString(arg1459)
    if err1461 != nil {
      Usage()
      return
    }
    factory1462 := thrift.NewTJSONProtocolFactory()
    jsProt1463 := factory1462.GetProtocol(mbTrans1460)
    argvalue0 := hive_metastore.NewShowCompactRequest()
    err1464 := argvalue0.Read(context.Background(), jsProt1463)
    if err1464 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ShowCompact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_dynamic_partitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddDynamicPartitions requires 1 args")
      flag.Usage()
    }
    arg1465 := flag.Arg(1)
    mbTrans1466 := thrift.NewTMemoryBufferLen(len(arg1465))
    defer mbTrans1466.Close()
    _, err1467 := mbTrans1466.WriteString(arg1465)
    if err1467 != nil {
      Usage()
      return
    }
    factory1468 := thrift.NewTJSONProtocolFactory()
    jsProt1469 := factory1468.GetProtocol(mbTrans1466)
    argvalue0 := hive_metastore.NewAddDynamicPartitions()
    err1470 := argvalue0.Read(context.Background(), jsProt1469)
    if err1470 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddDynamicPartitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_next_notification":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNextNotification requires 1 args")
      flag.Usage()
    }
    arg1471 := flag.Arg(1)
    mbTrans1472 := thrift.NewTMemoryBufferLen(len(arg1471))
    defer mbTrans1472.Close()
    _, err1473 := mbTrans1472.WriteString(arg1471)
    if err1473 != nil {
      Usage()
      return
    }
    factory1474 := thrift.NewTJSONProtocolFactory()
    jsProt1475 := factory1474.GetProtocol(mbTrans1472)
    argvalue0 := hive_metastore.NewNotificationEventRequest()
    err1476 := argvalue0.Read(context.Background(), jsProt1475)
    if err1476 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNextNotification(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_current_notificationEventId":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCurrentNotificationEventId requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCurrentNotificationEventId(context.Background()))
    fmt.Print("\n")
    break
  case "get_notification_events_count":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNotificationEventsCount requires 1 args")
      flag.Usage()
    }
    arg1477 := flag.Arg(1)
    mbTrans1478 := thrift.NewTMemoryBufferLen(len(arg1477))
    defer mbTrans1478.Close()
    _, err1479 := mbTrans1478.WriteString(arg1477)
    if err1479 != nil {
      Usage()
      return
    }
    factory1480 := thrift.NewTJSONProtocolFactory()
    jsProt1481 := factory1480.GetProtocol(mbTrans1478)
    argvalue0 := hive_metastore.NewNotificationEventsCountRequest()
    err1482 := argvalue0.Read(context.Background(), jsProt1481)
    if err1482 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNotificationEventsCount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fire_listener_event":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FireListenerEvent requires 1 args")
      flag.Usage()
    }
    arg1483 := flag.Arg(1)
    mbTrans1484 := thrift.NewTMemoryBufferLen(len(arg1483))
    defer mbTrans1484.Close()
    _, err1485 := mbTrans1484.WriteString(arg1483)
    if err1485 != nil {
      Usage()
      return
    }
    factory1486 := thrift.NewTJSONProtocolFactory()
    jsProt1487 := factory1486.GetProtocol(mbTrans1484)
    argvalue0 := hive_metastore.NewFireEventRequest()
    err1488 := argvalue0.Read(context.Background(), jsProt1487)
    if err1488 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FireListenerEvent(context.Background(), value0))
    fmt.Print("\n")
    break
  case "flushCache":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "FlushCache requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.FlushCache(context.Background()))
    fmt.Print("\n")
    break
  case "cm_recycle":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CmRecycle requires 1 args")
      flag.Usage()
    }
    arg1489 := flag.Arg(1)
    mbTrans1490 := thrift.NewTMemoryBufferLen(len(arg1489))
    defer mbTrans1490.Close()
    _, err1491 := mbTrans1490.WriteString(arg1489)
    if err1491 != nil {
      Usage()
      return
    }
    factory1492 := thrift.NewTJSONProtocolFactory()
    jsProt1493 := factory1492.GetProtocol(mbTrans1490)
    argvalue0 := hive_metastore.NewCmRecycleRequest()
    err1494 := argvalue0.Read(context.Background(), jsProt1493)
    if err1494 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CmRecycle(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_file_metadata_by_expr":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFileMetadataByExpr requires 1 args")
      flag.Usage()
    }
    arg1495 := flag.Arg(1)
    mbTrans1496 := thrift.NewTMemoryBufferLen(len(arg1495))
    defer mbTrans1496.Close()
    _, err1497 := mbTrans1496.WriteString(arg1495)
    if err1497 != nil {
      Usage()
      return
    }
    factory1498 := thrift.NewTJSONProtocolFactory()
    jsProt1499 := factory1498.GetProtocol(mbTrans1496)
    argvalue0 := hive_metastore.NewGetFileMetadataByExprRequest()
    err1500 := argvalue0.Read(context.Background(), jsProt1499)
    if err1500 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFileMetadataByExpr(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFileMetadata requires 1 args")
      flag.Usage()
    }
    arg1501 := flag.Arg(1)
    mbTrans1502 := thrift.NewTMemoryBufferLen(len(arg1501))
    defer mbTrans1502.Close()
    _, err1503 := mbTrans1502.WriteString(arg1501)
    if err1503 != nil {
      Usage()
      return
    }
    factory1504 := thrift.NewTJSONProtocolFactory()
    jsProt1505 := factory1504.GetProtocol(mbTrans1502)
    argvalue0 := hive_metastore.NewGetFileMetadataRequest()
    err1506 := argvalue0.Read(context.Background(), jsProt1505)
    if err1506 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFileMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "put_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PutFileMetadata requires 1 args")
      flag.Usage()
    }
    arg1507 := flag.Arg(1)
    mbTrans1508 := thrift.NewTMemoryBufferLen(len(arg1507))
    defer mbTrans1508.Close()
    _, err1509 := mbTrans1508.WriteString(arg1507)
    if err1509 != nil {
      Usage()
      return
    }
    factory1510 := thrift.NewTJSONProtocolFactory()
    jsProt1511 := factory1510.GetProtocol(mbTrans1508)
    argvalue0 := hive_metastore.NewPutFileMetadataRequest()
    err1512 := argvalue0.Read(context.Background(), jsProt1511)
    if err1512 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PutFileMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "clear_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ClearFileMetadata requires 1 args")
      flag.Usage()
    }
    arg1513 := flag.Arg(1)
    mbTrans1514 := thrift.NewTMemoryBufferLen(len(arg1513))
    defer mbTrans1514.Close()
    _, err1515 := mbTrans1514.WriteString(arg1513)
    if err1515 != nil {
      Usage()
      return
    }
    factory1516 := thrift.NewTJSONProtocolFactory()
    jsProt1517 := factory1516.GetProtocol(mbTrans1514)
    argvalue0 := hive_metastore.NewClearFileMetadataRequest()
    err1518 := argvalue0.Read(context.Background(), jsProt1517)
    if err1518 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearFileMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cache_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CacheFileMetadata requires 1 args")
      flag.Usage()
    }
    arg1519 := flag.Arg(1)
    mbTrans1520 := thrift.NewTMemoryBufferLen(len(arg1519))
    defer mbTrans1520.Close()
    _, err1521 := mbTrans1520.WriteString(arg1519)
    if err1521 != nil {
      Usage()
      return
    }
    factory1522 := thrift.NewTJSONProtocolFactory()
    jsProt1523 := factory1522.GetProtocol(mbTrans1520)
    argvalue0 := hive_metastore.NewCacheFileMetadataRequest()
    err1524 := argvalue0.Read(context.Background(), jsProt1523)
    if err1524 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CacheFileMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_metastore_db_uuid":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetMetastoreDbUUID requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetMetastoreDbUUID(context.Background()))
    fmt.Print("\n")
    break
  case "create_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateResourcePlan requires 1 args")
      flag.Usage()
    }
    arg1525 := flag.Arg(1)
    mbTrans1526 := thrift.NewTMemoryBufferLen(len(arg1525))
    defer mbTrans1526.Close()
    _, err1527 := mbTrans1526.WriteString(arg1525)
    if err1527 != nil {
      Usage()
      return
    }
    factory1528 := thrift.NewTJSONProtocolFactory()
    jsProt1529 := factory1528.GetProtocol(mbTrans1526)
    argvalue0 := hive_metastore.NewWMCreateResourcePlanRequest()
    err1530 := argvalue0.Read(context.Background(), jsProt1529)
    if err1530 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetResourcePlan requires 1 args")
      flag.Usage()
    }
    arg1531 := flag.Arg(1)
    mbTrans1532 := thrift.NewTMemoryBufferLen(len(arg1531))
    defer mbTrans1532.Close()
    _, err1533 := mbTrans1532.WriteString(arg1531)
    if err1533 != nil {
      Usage()
      return
    }
    factory1534 := thrift.NewTJSONProtocolFactory()
    jsProt1535 := factory1534.GetProtocol(mbTrans1532)
    argvalue0 := hive_metastore.NewWMGetResourcePlanRequest()
    err1536 := argvalue0.Read(context.Background(), jsProt1535)
    if err1536 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_active_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetActiveResourcePlan requires 1 args")
      flag.Usage()
    }
    arg1537 := flag.Arg(1)
    mbTrans1538 := thrift.NewTMemoryBufferLen(len(arg1537))
    defer mbTrans1538.Close()
    _, err1539 := mbTrans1538.WriteString(arg1537)
    if err1539 != nil {
      Usage()
      return
    }
    factory1540 := thrift.NewTJSONProtocolFactory()
    jsProt1541 := factory1540.GetProtocol(mbTrans1538)
    argvalue0 := hive_metastore.NewWMGetActiveResourcePlanRequest()
    err1542 := argvalue0.Read(context.Background(), jsProt1541)
    if err1542 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetActiveResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_all_resource_plans":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllResourcePlans requires 1 args")
      flag.Usage()
    }
    arg1543 := flag.Arg(1)
    mbTrans1544 := thrift.NewTMemoryBufferLen(len(arg1543))
    defer mbTrans1544.Close()
    _, err1545 := mbTrans1544.WriteString(arg1543)
    if err1545 != nil {
      Usage()
      return
    }
    factory1546 := thrift.NewTJSONProtocolFactory()
    jsProt1547 := factory1546.GetProtocol(mbTrans1544)
    argvalue0 := hive_metastore.NewWMGetAllResourcePlanRequest()
    err1548 := argvalue0.Read(context.Background(), jsProt1547)
    if err1548 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAllResourcePlans(context.Background(), value0))
    fmt.Print("\n")
    break
  case "alter_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterResourcePlan requires 1 args")
      flag.Usage()
    }
    arg1549 := flag.Arg(1)
    mbTrans1550 := thrift.NewTMemoryBufferLen(len(arg1549))
    defer mbTrans1550.Close()
    _, err1551 := mbTrans1550.WriteString(arg1549)
    if err1551 != nil {
      Usage()
      return
    }
    factory1552 := thrift.NewTJSONProtocolFactory()
    jsProt1553 := factory1552.GetProtocol(mbTrans1550)
    argvalue0 := hive_metastore.NewWMAlterResourcePlanRequest()
    err1554 := argvalue0.Read(context.Background(), jsProt1553)
    if err1554 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "validate_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ValidateResourcePlan requires 1 args")
      flag.Usage()
    }
    arg1555 := flag.Arg(1)
    mbTrans1556 := thrift.NewTMemoryBufferLen(len(arg1555))
    defer mbTrans1556.Close()
    _, err1557 := mbTrans1556.WriteString(arg1555)
    if err1557 != nil {
      Usage()
      return
    }
    factory1558 := thrift.NewTJSONProtocolFactory()
    jsProt1559 := factory1558.GetProtocol(mbTrans1556)
    argvalue0 := hive_metastore.NewWMValidateResourcePlanRequest()
    err1560 := argvalue0.Read(context.Background(), jsProt1559)
    if err1560 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ValidateResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropResourcePlan requires 1 args")
      flag.Usage()
    }
    arg1561 := flag.Arg(1)
    mbTrans1562 := thrift.NewTMemoryBufferLen(len(arg1561))
    defer mbTrans1562.Close()
    _, err1563 := mbTrans1562.WriteString(arg1561)
    if err1563 != nil {
      Usage()
      return
    }
    factory1564 := thrift.NewTJSONProtocolFactory()
    jsProt1565 := factory1564.GetProtocol(mbTrans1562)
    argvalue0 := hive_metastore.NewWMDropResourcePlanRequest()
    err1566 := argvalue0.Read(context.Background(), jsProt1565)
    if err1566 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_wm_trigger":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateWmTrigger requires 1 args")
      flag.Usage()
    }
    arg1567 := flag.Arg(1)
    mbTrans1568 := thrift.NewTMemoryBufferLen(len(arg1567))
    defer mbTrans1568.Close()
    _, err1569 := mbTrans1568.WriteString(arg1567)
    if err1569 != nil {
      Usage()
      return
    }
    factory1570 := thrift.NewTJSONProtocolFactory()
    jsProt1571 := factory1570.GetProtocol(mbTrans1568)
    argvalue0 := hive_metastore.NewWMCreateTriggerRequest()
    err1572 := argvalue0.Read(context.Background(), jsProt1571)
    if err1572 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateWmTrigger(context.Background(), value0))
    fmt.Print("\n")
    break
  case "alter_wm_trigger":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterWmTrigger requires 1 args")
      flag.Usage()
    }
    arg1573 := flag.Arg(1)
    mbTrans1574 := thrift.NewTMemoryBufferLen(len(arg1573))
    defer mbTrans1574.Close()
    _, err1575 := mbTrans1574.WriteString(arg1573)
    if err1575 != nil {
      Usage()
      return
    }
    factory1576 := thrift.NewTJSONProtocolFactory()
    jsProt1577 := factory1576.GetProtocol(mbTrans1574)
    argvalue0 := hive_metastore.NewWMAlterTriggerRequest()
    err1578 := argvalue0.Read(context.Background(), jsProt1577)
    if err1578 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterWmTrigger(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_wm_trigger":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropWmTrigger requires 1 args")
      flag.Usage()
    }
    arg1579 := flag.Arg(1)
    mbTrans1580 := thrift.NewTMemoryBufferLen(len(arg1579))
    defer mbTrans1580.Close()
    _, err1581 := mbTrans1580.WriteString(arg1579)
    if err1581 != nil {
      Usage()
      return
    }
    factory1582 := thrift.NewTJSONProtocolFactory()
    jsProt1583 := factory1582.GetProtocol(mbTrans1580)
    argvalue0 := hive_metastore.NewWMDropTriggerRequest()
    err1584 := argvalue0.Read(context.Background(), jsProt1583)
    if err1584 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropWmTrigger(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_triggers_for_resourceplan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTriggersForResourceplan requires 1 args")
      flag.Usage()
    }
    arg1585 := flag.Arg(1)
    mbTrans1586 := thrift.NewTMemoryBufferLen(len(arg1585))
    defer mbTrans1586.Close()
    _, err1587 := mbTrans1586.WriteString(arg1585)
    if err1587 != nil {
      Usage()
      return
    }
    factory1588 := thrift.NewTJSONProtocolFactory()
    jsProt1589 := factory1588.GetProtocol(mbTrans1586)
    argvalue0 := hive_metastore.NewWMGetTriggersForResourePlanRequest()
    err1590 := argvalue0.Read(context.Background(), jsProt1589)
    if err1590 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTriggersForResourceplan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
