// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package hive_metastore

import(
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type HiveObjectType int64
const (
  HiveObjectType_GLOBAL HiveObjectType = 1
  HiveObjectType_DATABASE HiveObjectType = 2
  HiveObjectType_TABLE HiveObjectType = 3
  HiveObjectType_PARTITION HiveObjectType = 4
  HiveObjectType_COLUMN HiveObjectType = 5
)

func (p HiveObjectType) String() string {
  switch p {
  case HiveObjectType_GLOBAL: return "GLOBAL"
  case HiveObjectType_DATABASE: return "DATABASE"
  case HiveObjectType_TABLE: return "TABLE"
  case HiveObjectType_PARTITION: return "PARTITION"
  case HiveObjectType_COLUMN: return "COLUMN"
  }
  return "<UNSET>"
}

func HiveObjectTypeFromString(s string) (HiveObjectType, error) {
  switch s {
  case "GLOBAL": return HiveObjectType_GLOBAL, nil 
  case "DATABASE": return HiveObjectType_DATABASE, nil 
  case "TABLE": return HiveObjectType_TABLE, nil 
  case "PARTITION": return HiveObjectType_PARTITION, nil 
  case "COLUMN": return HiveObjectType_COLUMN, nil 
  }
  return HiveObjectType(0), fmt.Errorf("not a valid HiveObjectType string")
}


func HiveObjectTypePtr(v HiveObjectType) *HiveObjectType { return &v }

func (p HiveObjectType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *HiveObjectType) UnmarshalText(text []byte) error {
q, err := HiveObjectTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *HiveObjectType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = HiveObjectType(v)
return nil
}

func (p * HiveObjectType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PrincipalType int64
const (
  PrincipalType_USER PrincipalType = 1
  PrincipalType_ROLE PrincipalType = 2
  PrincipalType_GROUP PrincipalType = 3
)

func (p PrincipalType) String() string {
  switch p {
  case PrincipalType_USER: return "USER"
  case PrincipalType_ROLE: return "ROLE"
  case PrincipalType_GROUP: return "GROUP"
  }
  return "<UNSET>"
}

func PrincipalTypeFromString(s string) (PrincipalType, error) {
  switch s {
  case "USER": return PrincipalType_USER, nil 
  case "ROLE": return PrincipalType_ROLE, nil 
  case "GROUP": return PrincipalType_GROUP, nil 
  }
  return PrincipalType(0), fmt.Errorf("not a valid PrincipalType string")
}


func PrincipalTypePtr(v PrincipalType) *PrincipalType { return &v }

func (p PrincipalType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrincipalType) UnmarshalText(text []byte) error {
q, err := PrincipalTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrincipalType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrincipalType(v)
return nil
}

func (p * PrincipalType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PartitionEventType int64
const (
  PartitionEventType_LOAD_DONE PartitionEventType = 1
)

func (p PartitionEventType) String() string {
  switch p {
  case PartitionEventType_LOAD_DONE: return "LOAD_DONE"
  }
  return "<UNSET>"
}

func PartitionEventTypeFromString(s string) (PartitionEventType, error) {
  switch s {
  case "LOAD_DONE": return PartitionEventType_LOAD_DONE, nil 
  }
  return PartitionEventType(0), fmt.Errorf("not a valid PartitionEventType string")
}


func PartitionEventTypePtr(v PartitionEventType) *PartitionEventType { return &v }

func (p PartitionEventType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PartitionEventType) UnmarshalText(text []byte) error {
q, err := PartitionEventTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PartitionEventType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PartitionEventType(v)
return nil
}

func (p * PartitionEventType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TxnState int64
const (
  TxnState_COMMITTED TxnState = 1
  TxnState_ABORTED TxnState = 2
  TxnState_OPEN TxnState = 3
)

func (p TxnState) String() string {
  switch p {
  case TxnState_COMMITTED: return "COMMITTED"
  case TxnState_ABORTED: return "ABORTED"
  case TxnState_OPEN: return "OPEN"
  }
  return "<UNSET>"
}

func TxnStateFromString(s string) (TxnState, error) {
  switch s {
  case "COMMITTED": return TxnState_COMMITTED, nil 
  case "ABORTED": return TxnState_ABORTED, nil 
  case "OPEN": return TxnState_OPEN, nil 
  }
  return TxnState(0), fmt.Errorf("not a valid TxnState string")
}


func TxnStatePtr(v TxnState) *TxnState { return &v }

func (p TxnState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TxnState) UnmarshalText(text []byte) error {
q, err := TxnStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TxnState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TxnState(v)
return nil
}

func (p * TxnState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type LockLevel int64
const (
  LockLevel_DB LockLevel = 1
  LockLevel_TABLE LockLevel = 2
  LockLevel_PARTITION LockLevel = 3
)

func (p LockLevel) String() string {
  switch p {
  case LockLevel_DB: return "DB"
  case LockLevel_TABLE: return "TABLE"
  case LockLevel_PARTITION: return "PARTITION"
  }
  return "<UNSET>"
}

func LockLevelFromString(s string) (LockLevel, error) {
  switch s {
  case "DB": return LockLevel_DB, nil 
  case "TABLE": return LockLevel_TABLE, nil 
  case "PARTITION": return LockLevel_PARTITION, nil 
  }
  return LockLevel(0), fmt.Errorf("not a valid LockLevel string")
}


func LockLevelPtr(v LockLevel) *LockLevel { return &v }

func (p LockLevel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *LockLevel) UnmarshalText(text []byte) error {
q, err := LockLevelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *LockLevel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = LockLevel(v)
return nil
}

func (p * LockLevel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type LockState int64
const (
  LockState_ACQUIRED LockState = 1
  LockState_WAITING LockState = 2
  LockState_ABORT LockState = 3
  LockState_NOT_ACQUIRED LockState = 4
)

func (p LockState) String() string {
  switch p {
  case LockState_ACQUIRED: return "ACQUIRED"
  case LockState_WAITING: return "WAITING"
  case LockState_ABORT: return "ABORT"
  case LockState_NOT_ACQUIRED: return "NOT_ACQUIRED"
  }
  return "<UNSET>"
}

func LockStateFromString(s string) (LockState, error) {
  switch s {
  case "ACQUIRED": return LockState_ACQUIRED, nil 
  case "WAITING": return LockState_WAITING, nil 
  case "ABORT": return LockState_ABORT, nil 
  case "NOT_ACQUIRED": return LockState_NOT_ACQUIRED, nil 
  }
  return LockState(0), fmt.Errorf("not a valid LockState string")
}


func LockStatePtr(v LockState) *LockState { return &v }

func (p LockState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *LockState) UnmarshalText(text []byte) error {
q, err := LockStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *LockState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = LockState(v)
return nil
}

func (p * LockState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type LockType int64
const (
  LockType_SHARED_READ LockType = 1
  LockType_SHARED_WRITE LockType = 2
  LockType_EXCLUSIVE LockType = 3
)

func (p LockType) String() string {
  switch p {
  case LockType_SHARED_READ: return "SHARED_READ"
  case LockType_SHARED_WRITE: return "SHARED_WRITE"
  case LockType_EXCLUSIVE: return "EXCLUSIVE"
  }
  return "<UNSET>"
}

func LockTypeFromString(s string) (LockType, error) {
  switch s {
  case "SHARED_READ": return LockType_SHARED_READ, nil 
  case "SHARED_WRITE": return LockType_SHARED_WRITE, nil 
  case "EXCLUSIVE": return LockType_EXCLUSIVE, nil 
  }
  return LockType(0), fmt.Errorf("not a valid LockType string")
}


func LockTypePtr(v LockType) *LockType { return &v }

func (p LockType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *LockType) UnmarshalText(text []byte) error {
q, err := LockTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *LockType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = LockType(v)
return nil
}

func (p * LockType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type CompactionType int64
const (
  CompactionType_MINOR CompactionType = 1
  CompactionType_MAJOR CompactionType = 2
)

func (p CompactionType) String() string {
  switch p {
  case CompactionType_MINOR: return "MINOR"
  case CompactionType_MAJOR: return "MAJOR"
  }
  return "<UNSET>"
}

func CompactionTypeFromString(s string) (CompactionType, error) {
  switch s {
  case "MINOR": return CompactionType_MINOR, nil 
  case "MAJOR": return CompactionType_MAJOR, nil 
  }
  return CompactionType(0), fmt.Errorf("not a valid CompactionType string")
}


func CompactionTypePtr(v CompactionType) *CompactionType { return &v }

func (p CompactionType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CompactionType) UnmarshalText(text []byte) error {
q, err := CompactionTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CompactionType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CompactionType(v)
return nil
}

func (p * CompactionType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type GrantRevokeType int64
const (
  GrantRevokeType_GRANT GrantRevokeType = 1
  GrantRevokeType_REVOKE GrantRevokeType = 2
)

func (p GrantRevokeType) String() string {
  switch p {
  case GrantRevokeType_GRANT: return "GRANT"
  case GrantRevokeType_REVOKE: return "REVOKE"
  }
  return "<UNSET>"
}

func GrantRevokeTypeFromString(s string) (GrantRevokeType, error) {
  switch s {
  case "GRANT": return GrantRevokeType_GRANT, nil 
  case "REVOKE": return GrantRevokeType_REVOKE, nil 
  }
  return GrantRevokeType(0), fmt.Errorf("not a valid GrantRevokeType string")
}


func GrantRevokeTypePtr(v GrantRevokeType) *GrantRevokeType { return &v }

func (p GrantRevokeType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *GrantRevokeType) UnmarshalText(text []byte) error {
q, err := GrantRevokeTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *GrantRevokeType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = GrantRevokeType(v)
return nil
}

func (p * GrantRevokeType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type DataOperationType int64
const (
  DataOperationType_SELECT DataOperationType = 1
  DataOperationType_INSERT DataOperationType = 2
  DataOperationType_UPDATE DataOperationType = 3
  DataOperationType_DELETE DataOperationType = 4
  DataOperationType_UNSET DataOperationType = 5
  DataOperationType_NO_TXN DataOperationType = 6
)

func (p DataOperationType) String() string {
  switch p {
  case DataOperationType_SELECT: return "SELECT"
  case DataOperationType_INSERT: return "INSERT"
  case DataOperationType_UPDATE: return "UPDATE"
  case DataOperationType_DELETE: return "DELETE"
  case DataOperationType_UNSET: return "UNSET"
  case DataOperationType_NO_TXN: return "NO_TXN"
  }
  return "<UNSET>"
}

func DataOperationTypeFromString(s string) (DataOperationType, error) {
  switch s {
  case "SELECT": return DataOperationType_SELECT, nil 
  case "INSERT": return DataOperationType_INSERT, nil 
  case "UPDATE": return DataOperationType_UPDATE, nil 
  case "DELETE": return DataOperationType_DELETE, nil 
  case "UNSET": return DataOperationType_UNSET, nil 
  case "NO_TXN": return DataOperationType_NO_TXN, nil 
  }
  return DataOperationType(0), fmt.Errorf("not a valid DataOperationType string")
}


func DataOperationTypePtr(v DataOperationType) *DataOperationType { return &v }

func (p DataOperationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DataOperationType) UnmarshalText(text []byte) error {
q, err := DataOperationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DataOperationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DataOperationType(v)
return nil
}

func (p * DataOperationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EventRequestType int64
const (
  EventRequestType_INSERT EventRequestType = 1
  EventRequestType_UPDATE EventRequestType = 2
  EventRequestType_DELETE EventRequestType = 3
)

func (p EventRequestType) String() string {
  switch p {
  case EventRequestType_INSERT: return "INSERT"
  case EventRequestType_UPDATE: return "UPDATE"
  case EventRequestType_DELETE: return "DELETE"
  }
  return "<UNSET>"
}

func EventRequestTypeFromString(s string) (EventRequestType, error) {
  switch s {
  case "INSERT": return EventRequestType_INSERT, nil 
  case "UPDATE": return EventRequestType_UPDATE, nil 
  case "DELETE": return EventRequestType_DELETE, nil 
  }
  return EventRequestType(0), fmt.Errorf("not a valid EventRequestType string")
}


func EventRequestTypePtr(v EventRequestType) *EventRequestType { return &v }

func (p EventRequestType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EventRequestType) UnmarshalText(text []byte) error {
q, err := EventRequestTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EventRequestType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EventRequestType(v)
return nil
}

func (p * EventRequestType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FunctionType int64
const (
  FunctionType_JAVA FunctionType = 1
)

func (p FunctionType) String() string {
  switch p {
  case FunctionType_JAVA: return "JAVA"
  }
  return "<UNSET>"
}

func FunctionTypeFromString(s string) (FunctionType, error) {
  switch s {
  case "JAVA": return FunctionType_JAVA, nil 
  }
  return FunctionType(0), fmt.Errorf("not a valid FunctionType string")
}


func FunctionTypePtr(v FunctionType) *FunctionType { return &v }

func (p FunctionType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FunctionType) UnmarshalText(text []byte) error {
q, err := FunctionTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FunctionType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FunctionType(v)
return nil
}

func (p * FunctionType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ResourceType int64
const (
  ResourceType_JAR ResourceType = 1
  ResourceType_FILE ResourceType = 2
  ResourceType_ARCHIVE ResourceType = 3
)

func (p ResourceType) String() string {
  switch p {
  case ResourceType_JAR: return "JAR"
  case ResourceType_FILE: return "FILE"
  case ResourceType_ARCHIVE: return "ARCHIVE"
  }
  return "<UNSET>"
}

func ResourceTypeFromString(s string) (ResourceType, error) {
  switch s {
  case "JAR": return ResourceType_JAR, nil 
  case "FILE": return ResourceType_FILE, nil 
  case "ARCHIVE": return ResourceType_ARCHIVE, nil 
  }
  return ResourceType(0), fmt.Errorf("not a valid ResourceType string")
}


func ResourceTypePtr(v ResourceType) *ResourceType { return &v }

func (p ResourceType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ResourceType) UnmarshalText(text []byte) error {
q, err := ResourceTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ResourceType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ResourceType(v)
return nil
}

func (p * ResourceType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FileMetadataExprType int64
const (
  FileMetadataExprType_ORC_SARG FileMetadataExprType = 1
)

func (p FileMetadataExprType) String() string {
  switch p {
  case FileMetadataExprType_ORC_SARG: return "ORC_SARG"
  }
  return "<UNSET>"
}

func FileMetadataExprTypeFromString(s string) (FileMetadataExprType, error) {
  switch s {
  case "ORC_SARG": return FileMetadataExprType_ORC_SARG, nil 
  }
  return FileMetadataExprType(0), fmt.Errorf("not a valid FileMetadataExprType string")
}


func FileMetadataExprTypePtr(v FileMetadataExprType) *FileMetadataExprType { return &v }

func (p FileMetadataExprType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FileMetadataExprType) UnmarshalText(text []byte) error {
q, err := FileMetadataExprTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FileMetadataExprType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FileMetadataExprType(v)
return nil
}

func (p * FileMetadataExprType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ClientCapability int64
const (
  ClientCapability_TEST_CAPABILITY ClientCapability = 1
  ClientCapability_INSERT_ONLY_TABLES ClientCapability = 2
)

func (p ClientCapability) String() string {
  switch p {
  case ClientCapability_TEST_CAPABILITY: return "TEST_CAPABILITY"
  case ClientCapability_INSERT_ONLY_TABLES: return "INSERT_ONLY_TABLES"
  }
  return "<UNSET>"
}

func ClientCapabilityFromString(s string) (ClientCapability, error) {
  switch s {
  case "TEST_CAPABILITY": return ClientCapability_TEST_CAPABILITY, nil 
  case "INSERT_ONLY_TABLES": return ClientCapability_INSERT_ONLY_TABLES, nil 
  }
  return ClientCapability(0), fmt.Errorf("not a valid ClientCapability string")
}


func ClientCapabilityPtr(v ClientCapability) *ClientCapability { return &v }

func (p ClientCapability) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ClientCapability) UnmarshalText(text []byte) error {
q, err := ClientCapabilityFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ClientCapability) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ClientCapability(v)
return nil
}

func (p * ClientCapability) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type WMResourcePlanStatus int64
const (
  WMResourcePlanStatus_ACTIVE WMResourcePlanStatus = 1
  WMResourcePlanStatus_ENABLED WMResourcePlanStatus = 2
  WMResourcePlanStatus_DISABLED WMResourcePlanStatus = 3
)

func (p WMResourcePlanStatus) String() string {
  switch p {
  case WMResourcePlanStatus_ACTIVE: return "ACTIVE"
  case WMResourcePlanStatus_ENABLED: return "ENABLED"
  case WMResourcePlanStatus_DISABLED: return "DISABLED"
  }
  return "<UNSET>"
}

func WMResourcePlanStatusFromString(s string) (WMResourcePlanStatus, error) {
  switch s {
  case "ACTIVE": return WMResourcePlanStatus_ACTIVE, nil 
  case "ENABLED": return WMResourcePlanStatus_ENABLED, nil 
  case "DISABLED": return WMResourcePlanStatus_DISABLED, nil 
  }
  return WMResourcePlanStatus(0), fmt.Errorf("not a valid WMResourcePlanStatus string")
}


func WMResourcePlanStatusPtr(v WMResourcePlanStatus) *WMResourcePlanStatus { return &v }

func (p WMResourcePlanStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *WMResourcePlanStatus) UnmarshalText(text []byte) error {
q, err := WMResourcePlanStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *WMResourcePlanStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = WMResourcePlanStatus(v)
return nil
}

func (p * WMResourcePlanStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Version
//  - Comments
type Version struct {
  Version string `thrift:"version,1" db:"version" json:"version"`
  Comments string `thrift:"comments,2" db:"comments" json:"comments"`
}

func NewVersion() *Version {
  return &Version{}
}


func (p *Version) GetVersion() string {
  return p.Version
}

func (p *Version) GetComments() string {
  return p.Comments
}
func (p *Version) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Version)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *Version)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Comments = v
}
  return nil
}

func (p *Version) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Version"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Version) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *Version) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "comments", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:comments: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Comments)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.comments (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:comments: ", p), err) }
  return err
}

func (p *Version) Equals(other *Version) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Version != other.Version { return false }
  if p.Comments != other.Comments { return false }
  return true
}

func (p *Version) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Version(%+v)", *p)
}

// Attributes:
//  - Name
//  - Type
//  - Comment
type FieldSchema struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Type string `thrift:"type,2" db:"type" json:"type"`
  Comment string `thrift:"comment,3" db:"comment" json:"comment"`
}

func NewFieldSchema() *FieldSchema {
  return &FieldSchema{}
}


func (p *FieldSchema) GetName() string {
  return p.Name
}

func (p *FieldSchema) GetType() string {
  return p.Type
}

func (p *FieldSchema) GetComment() string {
  return p.Comment
}
func (p *FieldSchema) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FieldSchema)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *FieldSchema)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *FieldSchema)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Comment = v
}
  return nil
}

func (p *FieldSchema) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FieldSchema"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FieldSchema) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *FieldSchema) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *FieldSchema) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "comment", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:comment: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Comment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.comment (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:comment: ", p), err) }
  return err
}

func (p *FieldSchema) Equals(other *FieldSchema) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.Type != other.Type { return false }
  if p.Comment != other.Comment { return false }
  return true
}

func (p *FieldSchema) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FieldSchema(%+v)", *p)
}

// Attributes:
//  - TableDb
//  - TableName
//  - ColumnName
//  - KeySeq
//  - PkName
//  - EnableCstr
//  - ValidateCstr
//  - RelyCstr
type SQLPrimaryKey struct {
  TableDb string `thrift:"table_db,1" db:"table_db" json:"table_db"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  ColumnName string `thrift:"column_name,3" db:"column_name" json:"column_name"`
  KeySeq int32 `thrift:"key_seq,4" db:"key_seq" json:"key_seq"`
  PkName string `thrift:"pk_name,5" db:"pk_name" json:"pk_name"`
  EnableCstr bool `thrift:"enable_cstr,6" db:"enable_cstr" json:"enable_cstr"`
  ValidateCstr bool `thrift:"validate_cstr,7" db:"validate_cstr" json:"validate_cstr"`
  RelyCstr bool `thrift:"rely_cstr,8" db:"rely_cstr" json:"rely_cstr"`
}

func NewSQLPrimaryKey() *SQLPrimaryKey {
  return &SQLPrimaryKey{}
}


func (p *SQLPrimaryKey) GetTableDb() string {
  return p.TableDb
}

func (p *SQLPrimaryKey) GetTableName() string {
  return p.TableName
}

func (p *SQLPrimaryKey) GetColumnName() string {
  return p.ColumnName
}

func (p *SQLPrimaryKey) GetKeySeq() int32 {
  return p.KeySeq
}

func (p *SQLPrimaryKey) GetPkName() string {
  return p.PkName
}

func (p *SQLPrimaryKey) GetEnableCstr() bool {
  return p.EnableCstr
}

func (p *SQLPrimaryKey) GetValidateCstr() bool {
  return p.ValidateCstr
}

func (p *SQLPrimaryKey) GetRelyCstr() bool {
  return p.RelyCstr
}
func (p *SQLPrimaryKey) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SQLPrimaryKey)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TableDb = v
}
  return nil
}

func (p *SQLPrimaryKey)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *SQLPrimaryKey)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ColumnName = v
}
  return nil
}

func (p *SQLPrimaryKey)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KeySeq = v
}
  return nil
}

func (p *SQLPrimaryKey)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PkName = v
}
  return nil
}

func (p *SQLPrimaryKey)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EnableCstr = v
}
  return nil
}

func (p *SQLPrimaryKey)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ValidateCstr = v
}
  return nil
}

func (p *SQLPrimaryKey)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RelyCstr = v
}
  return nil
}

func (p *SQLPrimaryKey) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SQLPrimaryKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SQLPrimaryKey) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "table_db", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table_db: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableDb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_db (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table_db: ", p), err) }
  return err
}

func (p *SQLPrimaryKey) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *SQLPrimaryKey) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "column_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ColumnName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column_name: ", p), err) }
  return err
}

func (p *SQLPrimaryKey) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key_seq", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:key_seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeySeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key_seq (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:key_seq: ", p), err) }
  return err
}

func (p *SQLPrimaryKey) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pk_name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pk_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PkName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pk_name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pk_name: ", p), err) }
  return err
}

func (p *SQLPrimaryKey) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enable_cstr", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:enable_cstr: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.EnableCstr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enable_cstr (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:enable_cstr: ", p), err) }
  return err
}

func (p *SQLPrimaryKey) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "validate_cstr", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:validate_cstr: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ValidateCstr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.validate_cstr (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:validate_cstr: ", p), err) }
  return err
}

func (p *SQLPrimaryKey) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rely_cstr", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:rely_cstr: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.RelyCstr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rely_cstr (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:rely_cstr: ", p), err) }
  return err
}

func (p *SQLPrimaryKey) Equals(other *SQLPrimaryKey) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TableDb != other.TableDb { return false }
  if p.TableName != other.TableName { return false }
  if p.ColumnName != other.ColumnName { return false }
  if p.KeySeq != other.KeySeq { return false }
  if p.PkName != other.PkName { return false }
  if p.EnableCstr != other.EnableCstr { return false }
  if p.ValidateCstr != other.ValidateCstr { return false }
  if p.RelyCstr != other.RelyCstr { return false }
  return true
}

func (p *SQLPrimaryKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SQLPrimaryKey(%+v)", *p)
}

// Attributes:
//  - PktableDb
//  - PktableName
//  - PkcolumnName
//  - FktableDb
//  - FktableName
//  - FkcolumnName
//  - KeySeq
//  - UpdateRule
//  - DeleteRule
//  - FkName
//  - PkName
//  - EnableCstr
//  - ValidateCstr
//  - RelyCstr
type SQLForeignKey struct {
  PktableDb string `thrift:"pktable_db,1" db:"pktable_db" json:"pktable_db"`
  PktableName string `thrift:"pktable_name,2" db:"pktable_name" json:"pktable_name"`
  PkcolumnName string `thrift:"pkcolumn_name,3" db:"pkcolumn_name" json:"pkcolumn_name"`
  FktableDb string `thrift:"fktable_db,4" db:"fktable_db" json:"fktable_db"`
  FktableName string `thrift:"fktable_name,5" db:"fktable_name" json:"fktable_name"`
  FkcolumnName string `thrift:"fkcolumn_name,6" db:"fkcolumn_name" json:"fkcolumn_name"`
  KeySeq int32 `thrift:"key_seq,7" db:"key_seq" json:"key_seq"`
  UpdateRule int32 `thrift:"update_rule,8" db:"update_rule" json:"update_rule"`
  DeleteRule int32 `thrift:"delete_rule,9" db:"delete_rule" json:"delete_rule"`
  FkName string `thrift:"fk_name,10" db:"fk_name" json:"fk_name"`
  PkName string `thrift:"pk_name,11" db:"pk_name" json:"pk_name"`
  EnableCstr bool `thrift:"enable_cstr,12" db:"enable_cstr" json:"enable_cstr"`
  ValidateCstr bool `thrift:"validate_cstr,13" db:"validate_cstr" json:"validate_cstr"`
  RelyCstr bool `thrift:"rely_cstr,14" db:"rely_cstr" json:"rely_cstr"`
}

func NewSQLForeignKey() *SQLForeignKey {
  return &SQLForeignKey{}
}


func (p *SQLForeignKey) GetPktableDb() string {
  return p.PktableDb
}

func (p *SQLForeignKey) GetPktableName() string {
  return p.PktableName
}

func (p *SQLForeignKey) GetPkcolumnName() string {
  return p.PkcolumnName
}

func (p *SQLForeignKey) GetFktableDb() string {
  return p.FktableDb
}

func (p *SQLForeignKey) GetFktableName() string {
  return p.FktableName
}

func (p *SQLForeignKey) GetFkcolumnName() string {
  return p.FkcolumnName
}

func (p *SQLForeignKey) GetKeySeq() int32 {
  return p.KeySeq
}

func (p *SQLForeignKey) GetUpdateRule() int32 {
  return p.UpdateRule
}

func (p *SQLForeignKey) GetDeleteRule() int32 {
  return p.DeleteRule
}

func (p *SQLForeignKey) GetFkName() string {
  return p.FkName
}

func (p *SQLForeignKey) GetPkName() string {
  return p.PkName
}

func (p *SQLForeignKey) GetEnableCstr() bool {
  return p.EnableCstr
}

func (p *SQLForeignKey) GetValidateCstr() bool {
  return p.ValidateCstr
}

func (p *SQLForeignKey) GetRelyCstr() bool {
  return p.RelyCstr
}
func (p *SQLForeignKey) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SQLForeignKey)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PktableDb = v
}
  return nil
}

func (p *SQLForeignKey)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PktableName = v
}
  return nil
}

func (p *SQLForeignKey)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PkcolumnName = v
}
  return nil
}

func (p *SQLForeignKey)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FktableDb = v
}
  return nil
}

func (p *SQLForeignKey)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FktableName = v
}
  return nil
}

func (p *SQLForeignKey)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.FkcolumnName = v
}
  return nil
}

func (p *SQLForeignKey)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.KeySeq = v
}
  return nil
}

func (p *SQLForeignKey)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.UpdateRule = v
}
  return nil
}

func (p *SQLForeignKey)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.DeleteRule = v
}
  return nil
}

func (p *SQLForeignKey)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.FkName = v
}
  return nil
}

func (p *SQLForeignKey)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.PkName = v
}
  return nil
}

func (p *SQLForeignKey)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.EnableCstr = v
}
  return nil
}

func (p *SQLForeignKey)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.ValidateCstr = v
}
  return nil
}

func (p *SQLForeignKey)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.RelyCstr = v
}
  return nil
}

func (p *SQLForeignKey) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SQLForeignKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SQLForeignKey) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pktable_db", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pktable_db: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PktableDb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pktable_db (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pktable_db: ", p), err) }
  return err
}

func (p *SQLForeignKey) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pktable_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pktable_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PktableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pktable_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pktable_name: ", p), err) }
  return err
}

func (p *SQLForeignKey) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pkcolumn_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pkcolumn_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PkcolumnName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pkcolumn_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pkcolumn_name: ", p), err) }
  return err
}

func (p *SQLForeignKey) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fktable_db", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fktable_db: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FktableDb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fktable_db (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fktable_db: ", p), err) }
  return err
}

func (p *SQLForeignKey) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fktable_name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fktable_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FktableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fktable_name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fktable_name: ", p), err) }
  return err
}

func (p *SQLForeignKey) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fkcolumn_name", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fkcolumn_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FkcolumnName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fkcolumn_name (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fkcolumn_name: ", p), err) }
  return err
}

func (p *SQLForeignKey) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key_seq", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:key_seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeySeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key_seq (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:key_seq: ", p), err) }
  return err
}

func (p *SQLForeignKey) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update_rule", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:update_rule: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.UpdateRule)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.update_rule (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:update_rule: ", p), err) }
  return err
}

func (p *SQLForeignKey) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "delete_rule", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:delete_rule: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.DeleteRule)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delete_rule (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:delete_rule: ", p), err) }
  return err
}

func (p *SQLForeignKey) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fk_name", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:fk_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FkName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fk_name (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:fk_name: ", p), err) }
  return err
}

func (p *SQLForeignKey) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pk_name", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:pk_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PkName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pk_name (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:pk_name: ", p), err) }
  return err
}

func (p *SQLForeignKey) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enable_cstr", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:enable_cstr: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.EnableCstr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enable_cstr (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:enable_cstr: ", p), err) }
  return err
}

func (p *SQLForeignKey) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "validate_cstr", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:validate_cstr: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ValidateCstr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.validate_cstr (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:validate_cstr: ", p), err) }
  return err
}

func (p *SQLForeignKey) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rely_cstr", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:rely_cstr: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.RelyCstr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rely_cstr (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:rely_cstr: ", p), err) }
  return err
}

func (p *SQLForeignKey) Equals(other *SQLForeignKey) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PktableDb != other.PktableDb { return false }
  if p.PktableName != other.PktableName { return false }
  if p.PkcolumnName != other.PkcolumnName { return false }
  if p.FktableDb != other.FktableDb { return false }
  if p.FktableName != other.FktableName { return false }
  if p.FkcolumnName != other.FkcolumnName { return false }
  if p.KeySeq != other.KeySeq { return false }
  if p.UpdateRule != other.UpdateRule { return false }
  if p.DeleteRule != other.DeleteRule { return false }
  if p.FkName != other.FkName { return false }
  if p.PkName != other.PkName { return false }
  if p.EnableCstr != other.EnableCstr { return false }
  if p.ValidateCstr != other.ValidateCstr { return false }
  if p.RelyCstr != other.RelyCstr { return false }
  return true
}

func (p *SQLForeignKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SQLForeignKey(%+v)", *p)
}

// Attributes:
//  - TableDb
//  - TableName
//  - ColumnName
//  - KeySeq
//  - UkName
//  - EnableCstr
//  - ValidateCstr
//  - RelyCstr
type SQLUniqueConstraint struct {
  TableDb string `thrift:"table_db,1" db:"table_db" json:"table_db"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  ColumnName string `thrift:"column_name,3" db:"column_name" json:"column_name"`
  KeySeq int32 `thrift:"key_seq,4" db:"key_seq" json:"key_seq"`
  UkName string `thrift:"uk_name,5" db:"uk_name" json:"uk_name"`
  EnableCstr bool `thrift:"enable_cstr,6" db:"enable_cstr" json:"enable_cstr"`
  ValidateCstr bool `thrift:"validate_cstr,7" db:"validate_cstr" json:"validate_cstr"`
  RelyCstr bool `thrift:"rely_cstr,8" db:"rely_cstr" json:"rely_cstr"`
}

func NewSQLUniqueConstraint() *SQLUniqueConstraint {
  return &SQLUniqueConstraint{}
}


func (p *SQLUniqueConstraint) GetTableDb() string {
  return p.TableDb
}

func (p *SQLUniqueConstraint) GetTableName() string {
  return p.TableName
}

func (p *SQLUniqueConstraint) GetColumnName() string {
  return p.ColumnName
}

func (p *SQLUniqueConstraint) GetKeySeq() int32 {
  return p.KeySeq
}

func (p *SQLUniqueConstraint) GetUkName() string {
  return p.UkName
}

func (p *SQLUniqueConstraint) GetEnableCstr() bool {
  return p.EnableCstr
}

func (p *SQLUniqueConstraint) GetValidateCstr() bool {
  return p.ValidateCstr
}

func (p *SQLUniqueConstraint) GetRelyCstr() bool {
  return p.RelyCstr
}
func (p *SQLUniqueConstraint) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SQLUniqueConstraint)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TableDb = v
}
  return nil
}

func (p *SQLUniqueConstraint)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *SQLUniqueConstraint)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ColumnName = v
}
  return nil
}

func (p *SQLUniqueConstraint)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KeySeq = v
}
  return nil
}

func (p *SQLUniqueConstraint)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UkName = v
}
  return nil
}

func (p *SQLUniqueConstraint)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EnableCstr = v
}
  return nil
}

func (p *SQLUniqueConstraint)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ValidateCstr = v
}
  return nil
}

func (p *SQLUniqueConstraint)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RelyCstr = v
}
  return nil
}

func (p *SQLUniqueConstraint) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SQLUniqueConstraint"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SQLUniqueConstraint) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "table_db", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table_db: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableDb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_db (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table_db: ", p), err) }
  return err
}

func (p *SQLUniqueConstraint) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *SQLUniqueConstraint) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "column_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ColumnName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column_name: ", p), err) }
  return err
}

func (p *SQLUniqueConstraint) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key_seq", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:key_seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeySeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key_seq (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:key_seq: ", p), err) }
  return err
}

func (p *SQLUniqueConstraint) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uk_name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:uk_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UkName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uk_name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:uk_name: ", p), err) }
  return err
}

func (p *SQLUniqueConstraint) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enable_cstr", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:enable_cstr: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.EnableCstr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enable_cstr (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:enable_cstr: ", p), err) }
  return err
}

func (p *SQLUniqueConstraint) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "validate_cstr", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:validate_cstr: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ValidateCstr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.validate_cstr (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:validate_cstr: ", p), err) }
  return err
}

func (p *SQLUniqueConstraint) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rely_cstr", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:rely_cstr: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.RelyCstr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rely_cstr (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:rely_cstr: ", p), err) }
  return err
}

func (p *SQLUniqueConstraint) Equals(other *SQLUniqueConstraint) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TableDb != other.TableDb { return false }
  if p.TableName != other.TableName { return false }
  if p.ColumnName != other.ColumnName { return false }
  if p.KeySeq != other.KeySeq { return false }
  if p.UkName != other.UkName { return false }
  if p.EnableCstr != other.EnableCstr { return false }
  if p.ValidateCstr != other.ValidateCstr { return false }
  if p.RelyCstr != other.RelyCstr { return false }
  return true
}

func (p *SQLUniqueConstraint) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SQLUniqueConstraint(%+v)", *p)
}

// Attributes:
//  - TableDb
//  - TableName
//  - ColumnName
//  - NnName
//  - EnableCstr
//  - ValidateCstr
//  - RelyCstr
type SQLNotNullConstraint struct {
  TableDb string `thrift:"table_db,1" db:"table_db" json:"table_db"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  ColumnName string `thrift:"column_name,3" db:"column_name" json:"column_name"`
  NnName string `thrift:"nn_name,4" db:"nn_name" json:"nn_name"`
  EnableCstr bool `thrift:"enable_cstr,5" db:"enable_cstr" json:"enable_cstr"`
  ValidateCstr bool `thrift:"validate_cstr,6" db:"validate_cstr" json:"validate_cstr"`
  RelyCstr bool `thrift:"rely_cstr,7" db:"rely_cstr" json:"rely_cstr"`
}

func NewSQLNotNullConstraint() *SQLNotNullConstraint {
  return &SQLNotNullConstraint{}
}


func (p *SQLNotNullConstraint) GetTableDb() string {
  return p.TableDb
}

func (p *SQLNotNullConstraint) GetTableName() string {
  return p.TableName
}

func (p *SQLNotNullConstraint) GetColumnName() string {
  return p.ColumnName
}

func (p *SQLNotNullConstraint) GetNnName() string {
  return p.NnName
}

func (p *SQLNotNullConstraint) GetEnableCstr() bool {
  return p.EnableCstr
}

func (p *SQLNotNullConstraint) GetValidateCstr() bool {
  return p.ValidateCstr
}

func (p *SQLNotNullConstraint) GetRelyCstr() bool {
  return p.RelyCstr
}
func (p *SQLNotNullConstraint) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SQLNotNullConstraint)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TableDb = v
}
  return nil
}

func (p *SQLNotNullConstraint)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *SQLNotNullConstraint)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ColumnName = v
}
  return nil
}

func (p *SQLNotNullConstraint)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NnName = v
}
  return nil
}

func (p *SQLNotNullConstraint)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.EnableCstr = v
}
  return nil
}

func (p *SQLNotNullConstraint)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ValidateCstr = v
}
  return nil
}

func (p *SQLNotNullConstraint)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.RelyCstr = v
}
  return nil
}

func (p *SQLNotNullConstraint) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SQLNotNullConstraint"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SQLNotNullConstraint) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "table_db", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table_db: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableDb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_db (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table_db: ", p), err) }
  return err
}

func (p *SQLNotNullConstraint) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *SQLNotNullConstraint) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "column_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ColumnName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column_name: ", p), err) }
  return err
}

func (p *SQLNotNullConstraint) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nn_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nn_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NnName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nn_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nn_name: ", p), err) }
  return err
}

func (p *SQLNotNullConstraint) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enable_cstr", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:enable_cstr: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.EnableCstr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enable_cstr (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:enable_cstr: ", p), err) }
  return err
}

func (p *SQLNotNullConstraint) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "validate_cstr", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:validate_cstr: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ValidateCstr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.validate_cstr (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:validate_cstr: ", p), err) }
  return err
}

func (p *SQLNotNullConstraint) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rely_cstr", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:rely_cstr: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.RelyCstr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rely_cstr (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:rely_cstr: ", p), err) }
  return err
}

func (p *SQLNotNullConstraint) Equals(other *SQLNotNullConstraint) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TableDb != other.TableDb { return false }
  if p.TableName != other.TableName { return false }
  if p.ColumnName != other.ColumnName { return false }
  if p.NnName != other.NnName { return false }
  if p.EnableCstr != other.EnableCstr { return false }
  if p.ValidateCstr != other.ValidateCstr { return false }
  if p.RelyCstr != other.RelyCstr { return false }
  return true
}

func (p *SQLNotNullConstraint) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SQLNotNullConstraint(%+v)", *p)
}

// Attributes:
//  - Name
//  - Type1
//  - Type2
//  - Fields
type Type struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Type1 *string `thrift:"type1,2" db:"type1" json:"type1,omitempty"`
  Type2 *string `thrift:"type2,3" db:"type2" json:"type2,omitempty"`
  Fields []*FieldSchema `thrift:"fields,4" db:"fields" json:"fields,omitempty"`
}

func NewType() *Type {
  return &Type{}
}


func (p *Type) GetName() string {
  return p.Name
}
var Type_Type1_DEFAULT string
func (p *Type) GetType1() string {
  if !p.IsSetType1() {
    return Type_Type1_DEFAULT
  }
return *p.Type1
}
var Type_Type2_DEFAULT string
func (p *Type) GetType2() string {
  if !p.IsSetType2() {
    return Type_Type2_DEFAULT
  }
return *p.Type2
}
var Type_Fields_DEFAULT []*FieldSchema

func (p *Type) GetFields() []*FieldSchema {
  return p.Fields
}
func (p *Type) IsSetType1() bool {
  return p.Type1 != nil
}

func (p *Type) IsSetType2() bool {
  return p.Type2 != nil
}

func (p *Type) IsSetFields() bool {
  return p.Fields != nil
}

func (p *Type) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Type)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Type)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type1 = &v
}
  return nil
}

func (p *Type)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type2 = &v
}
  return nil
}

func (p *Type)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &FieldSchema{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Fields = append(p.Fields, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Type) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Type"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Type) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Type) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetType1() {
    if err := oprot.WriteFieldBegin(ctx, "type1", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type1: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Type1)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type1 (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type1: ", p), err) }
  }
  return err
}

func (p *Type) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetType2() {
    if err := oprot.WriteFieldBegin(ctx, "type2", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type2: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Type2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type2 (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type2: ", p), err) }
  }
  return err
}

func (p *Type) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFields() {
    if err := oprot.WriteFieldBegin(ctx, "fields", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fields: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Fields)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Fields {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fields: ", p), err) }
  }
  return err
}

func (p *Type) Equals(other *Type) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.Type1 != other.Type1 {
    if p.Type1 == nil || other.Type1 == nil {
      return false
    }
    if (*p.Type1) != (*other.Type1) { return false }
  }
  if p.Type2 != other.Type2 {
    if p.Type2 == nil || other.Type2 == nil {
      return false
    }
    if (*p.Type2) != (*other.Type2) { return false }
  }
  if len(p.Fields) != len(other.Fields) { return false }
  for i, _tgt := range p.Fields {
    _src1 := other.Fields[i]
    if !_tgt.Equals(_src1) { return false }
  }
  return true
}

func (p *Type) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Type(%+v)", *p)
}

// Attributes:
//  - ObjectType
//  - DbName
//  - ObjectName
//  - PartValues
//  - ColumnName
type HiveObjectRef struct {
  ObjectType HiveObjectType `thrift:"objectType,1" db:"objectType" json:"objectType"`
  DbName string `thrift:"dbName,2" db:"dbName" json:"dbName"`
  ObjectName string `thrift:"objectName,3" db:"objectName" json:"objectName"`
  PartValues []string `thrift:"partValues,4" db:"partValues" json:"partValues"`
  ColumnName string `thrift:"columnName,5" db:"columnName" json:"columnName"`
}

func NewHiveObjectRef() *HiveObjectRef {
  return &HiveObjectRef{}
}


func (p *HiveObjectRef) GetObjectType() HiveObjectType {
  return p.ObjectType
}

func (p *HiveObjectRef) GetDbName() string {
  return p.DbName
}

func (p *HiveObjectRef) GetObjectName() string {
  return p.ObjectName
}

func (p *HiveObjectRef) GetPartValues() []string {
  return p.PartValues
}

func (p *HiveObjectRef) GetColumnName() string {
  return p.ColumnName
}
func (p *HiveObjectRef) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HiveObjectRef)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := HiveObjectType(v)
  p.ObjectType = temp
}
  return nil
}

func (p *HiveObjectRef)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *HiveObjectRef)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ObjectName = v
}
  return nil
}

func (p *HiveObjectRef)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartValues =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.PartValues = append(p.PartValues, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HiveObjectRef)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ColumnName = v
}
  return nil
}

func (p *HiveObjectRef) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HiveObjectRef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HiveObjectRef) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "objectType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:objectType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ObjectType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.objectType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:objectType: ", p), err) }
  return err
}

func (p *HiveObjectRef) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbName: ", p), err) }
  return err
}

func (p *HiveObjectRef) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "objectName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:objectName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ObjectName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.objectName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:objectName: ", p), err) }
  return err
}

func (p *HiveObjectRef) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partValues", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partValues: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartValues)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartValues {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partValues: ", p), err) }
  return err
}

func (p *HiveObjectRef) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "columnName", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:columnName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ColumnName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.columnName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:columnName: ", p), err) }
  return err
}

func (p *HiveObjectRef) Equals(other *HiveObjectRef) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ObjectType != other.ObjectType { return false }
  if p.DbName != other.DbName { return false }
  if p.ObjectName != other.ObjectName { return false }
  if len(p.PartValues) != len(other.PartValues) { return false }
  for i, _tgt := range p.PartValues {
    _src3 := other.PartValues[i]
    if _tgt != _src3 { return false }
  }
  if p.ColumnName != other.ColumnName { return false }
  return true
}

func (p *HiveObjectRef) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HiveObjectRef(%+v)", *p)
}

// Attributes:
//  - Privilege
//  - CreateTime
//  - Grantor
//  - GrantorType
//  - GrantOption
type PrivilegeGrantInfo struct {
  Privilege string `thrift:"privilege,1" db:"privilege" json:"privilege"`
  CreateTime int32 `thrift:"createTime,2" db:"createTime" json:"createTime"`
  Grantor string `thrift:"grantor,3" db:"grantor" json:"grantor"`
  GrantorType PrincipalType `thrift:"grantorType,4" db:"grantorType" json:"grantorType"`
  GrantOption bool `thrift:"grantOption,5" db:"grantOption" json:"grantOption"`
}

func NewPrivilegeGrantInfo() *PrivilegeGrantInfo {
  return &PrivilegeGrantInfo{}
}


func (p *PrivilegeGrantInfo) GetPrivilege() string {
  return p.Privilege
}

func (p *PrivilegeGrantInfo) GetCreateTime() int32 {
  return p.CreateTime
}

func (p *PrivilegeGrantInfo) GetGrantor() string {
  return p.Grantor
}

func (p *PrivilegeGrantInfo) GetGrantorType() PrincipalType {
  return p.GrantorType
}

func (p *PrivilegeGrantInfo) GetGrantOption() bool {
  return p.GrantOption
}
func (p *PrivilegeGrantInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrivilegeGrantInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Privilege = v
}
  return nil
}

func (p *PrivilegeGrantInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *PrivilegeGrantInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Grantor = v
}
  return nil
}

func (p *PrivilegeGrantInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := PrincipalType(v)
  p.GrantorType = temp
}
  return nil
}

func (p *PrivilegeGrantInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.GrantOption = v
}
  return nil
}

func (p *PrivilegeGrantInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PrivilegeGrantInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrivilegeGrantInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privilege", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privilege: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Privilege)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privilege (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privilege: ", p), err) }
  return err
}

func (p *PrivilegeGrantInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createTime", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createTime: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createTime: ", p), err) }
  return err
}

func (p *PrivilegeGrantInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "grantor", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:grantor: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Grantor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantor (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:grantor: ", p), err) }
  return err
}

func (p *PrivilegeGrantInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "grantorType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:grantorType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.GrantorType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantorType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:grantorType: ", p), err) }
  return err
}

func (p *PrivilegeGrantInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "grantOption", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:grantOption: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.GrantOption)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantOption (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:grantOption: ", p), err) }
  return err
}

func (p *PrivilegeGrantInfo) Equals(other *PrivilegeGrantInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Privilege != other.Privilege { return false }
  if p.CreateTime != other.CreateTime { return false }
  if p.Grantor != other.Grantor { return false }
  if p.GrantorType != other.GrantorType { return false }
  if p.GrantOption != other.GrantOption { return false }
  return true
}

func (p *PrivilegeGrantInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrivilegeGrantInfo(%+v)", *p)
}

// Attributes:
//  - HiveObject
//  - PrincipalName
//  - PrincipalType
//  - GrantInfo
type HiveObjectPrivilege struct {
  HiveObject *HiveObjectRef `thrift:"hiveObject,1" db:"hiveObject" json:"hiveObject"`
  PrincipalName string `thrift:"principalName,2" db:"principalName" json:"principalName"`
  PrincipalType PrincipalType `thrift:"principalType,3" db:"principalType" json:"principalType"`
  GrantInfo *PrivilegeGrantInfo `thrift:"grantInfo,4" db:"grantInfo" json:"grantInfo"`
}

func NewHiveObjectPrivilege() *HiveObjectPrivilege {
  return &HiveObjectPrivilege{}
}

var HiveObjectPrivilege_HiveObject_DEFAULT *HiveObjectRef
func (p *HiveObjectPrivilege) GetHiveObject() *HiveObjectRef {
  if !p.IsSetHiveObject() {
    return HiveObjectPrivilege_HiveObject_DEFAULT
  }
return p.HiveObject
}

func (p *HiveObjectPrivilege) GetPrincipalName() string {
  return p.PrincipalName
}

func (p *HiveObjectPrivilege) GetPrincipalType() PrincipalType {
  return p.PrincipalType
}
var HiveObjectPrivilege_GrantInfo_DEFAULT *PrivilegeGrantInfo
func (p *HiveObjectPrivilege) GetGrantInfo() *PrivilegeGrantInfo {
  if !p.IsSetGrantInfo() {
    return HiveObjectPrivilege_GrantInfo_DEFAULT
  }
return p.GrantInfo
}
func (p *HiveObjectPrivilege) IsSetHiveObject() bool {
  return p.HiveObject != nil
}

func (p *HiveObjectPrivilege) IsSetGrantInfo() bool {
  return p.GrantInfo != nil
}

func (p *HiveObjectPrivilege) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HiveObjectPrivilege)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.HiveObject = &HiveObjectRef{}
  if err := p.HiveObject.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HiveObject), err)
  }
  return nil
}

func (p *HiveObjectPrivilege)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PrincipalName = v
}
  return nil
}

func (p *HiveObjectPrivilege)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := PrincipalType(v)
  p.PrincipalType = temp
}
  return nil
}

func (p *HiveObjectPrivilege)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.GrantInfo = &PrivilegeGrantInfo{}
  if err := p.GrantInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GrantInfo), err)
  }
  return nil
}

func (p *HiveObjectPrivilege) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HiveObjectPrivilege"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HiveObjectPrivilege) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hiveObject", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hiveObject: ", p), err) }
  if err := p.HiveObject.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HiveObject), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hiveObject: ", p), err) }
  return err
}

func (p *HiveObjectPrivilege) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principalName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principalName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principalName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principalName: ", p), err) }
  return err
}

func (p *HiveObjectPrivilege) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principalType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:principalType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrincipalType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principalType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:principalType: ", p), err) }
  return err
}

func (p *HiveObjectPrivilege) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "grantInfo", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:grantInfo: ", p), err) }
  if err := p.GrantInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GrantInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:grantInfo: ", p), err) }
  return err
}

func (p *HiveObjectPrivilege) Equals(other *HiveObjectPrivilege) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.HiveObject.Equals(other.HiveObject) { return false }
  if p.PrincipalName != other.PrincipalName { return false }
  if p.PrincipalType != other.PrincipalType { return false }
  if !p.GrantInfo.Equals(other.GrantInfo) { return false }
  return true
}

func (p *HiveObjectPrivilege) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HiveObjectPrivilege(%+v)", *p)
}

// Attributes:
//  - Privileges
type PrivilegeBag struct {
  Privileges []*HiveObjectPrivilege `thrift:"privileges,1" db:"privileges" json:"privileges"`
}

func NewPrivilegeBag() *PrivilegeBag {
  return &PrivilegeBag{}
}


func (p *PrivilegeBag) GetPrivileges() []*HiveObjectPrivilege {
  return p.Privileges
}
func (p *PrivilegeBag) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrivilegeBag)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HiveObjectPrivilege, 0, size)
  p.Privileges =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &HiveObjectPrivilege{}
    if err := _elem4.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Privileges = append(p.Privileges, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrivilegeBag) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PrivilegeBag"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrivilegeBag) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privileges", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privileges: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Privileges)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Privileges {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privileges: ", p), err) }
  return err
}

func (p *PrivilegeBag) Equals(other *PrivilegeBag) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Privileges) != len(other.Privileges) { return false }
  for i, _tgt := range p.Privileges {
    _src5 := other.Privileges[i]
    if !_tgt.Equals(_src5) { return false }
  }
  return true
}

func (p *PrivilegeBag) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrivilegeBag(%+v)", *p)
}

// Attributes:
//  - UserPrivileges
//  - GroupPrivileges
//  - RolePrivileges
type PrincipalPrivilegeSet struct {
  UserPrivileges map[string][]*PrivilegeGrantInfo `thrift:"userPrivileges,1" db:"userPrivileges" json:"userPrivileges"`
  GroupPrivileges map[string][]*PrivilegeGrantInfo `thrift:"groupPrivileges,2" db:"groupPrivileges" json:"groupPrivileges"`
  RolePrivileges map[string][]*PrivilegeGrantInfo `thrift:"rolePrivileges,3" db:"rolePrivileges" json:"rolePrivileges"`
}

func NewPrincipalPrivilegeSet() *PrincipalPrivilegeSet {
  return &PrincipalPrivilegeSet{}
}


func (p *PrincipalPrivilegeSet) GetUserPrivileges() map[string][]*PrivilegeGrantInfo {
  return p.UserPrivileges
}

func (p *PrincipalPrivilegeSet) GetGroupPrivileges() map[string][]*PrivilegeGrantInfo {
  return p.GroupPrivileges
}

func (p *PrincipalPrivilegeSet) GetRolePrivileges() map[string][]*PrivilegeGrantInfo {
  return p.RolePrivileges
}
func (p *PrincipalPrivilegeSet) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrincipalPrivilegeSet)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*PrivilegeGrantInfo, size)
  p.UserPrivileges =  tMap
  for i := 0; i < size; i ++ {
var _key6 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key6 = v
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*PrivilegeGrantInfo, 0, size)
    _val7 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem8 := &PrivilegeGrantInfo{}
      if err := _elem8.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
      }
      _val7 = append(_val7, _elem8)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.UserPrivileges[_key6] = _val7
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PrincipalPrivilegeSet)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*PrivilegeGrantInfo, size)
  p.GroupPrivileges =  tMap
  for i := 0; i < size; i ++ {
var _key9 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key9 = v
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*PrivilegeGrantInfo, 0, size)
    _val10 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem11 := &PrivilegeGrantInfo{}
      if err := _elem11.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
      }
      _val10 = append(_val10, _elem11)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.GroupPrivileges[_key9] = _val10
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PrincipalPrivilegeSet)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*PrivilegeGrantInfo, size)
  p.RolePrivileges =  tMap
  for i := 0; i < size; i ++ {
var _key12 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key12 = v
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*PrivilegeGrantInfo, 0, size)
    _val13 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem14 := &PrivilegeGrantInfo{}
      if err := _elem14.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
      }
      _val13 = append(_val13, _elem14)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.RolePrivileges[_key12] = _val13
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PrincipalPrivilegeSet) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PrincipalPrivilegeSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrincipalPrivilegeSet) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userPrivileges", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userPrivileges: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.LIST, len(p.UserPrivileges)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.UserPrivileges {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userPrivileges: ", p), err) }
  return err
}

func (p *PrincipalPrivilegeSet) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupPrivileges", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupPrivileges: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.LIST, len(p.GroupPrivileges)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.GroupPrivileges {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupPrivileges: ", p), err) }
  return err
}

func (p *PrincipalPrivilegeSet) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rolePrivileges", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rolePrivileges: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.LIST, len(p.RolePrivileges)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.RolePrivileges {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rolePrivileges: ", p), err) }
  return err
}

func (p *PrincipalPrivilegeSet) Equals(other *PrincipalPrivilegeSet) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.UserPrivileges) != len(other.UserPrivileges) { return false }
  for k, _tgt := range p.UserPrivileges {
    _src15 := other.UserPrivileges[k]
    if len(_tgt) != len(_src15) { return false }
    for i, _tgt := range _tgt {
      _src16 := _src15[i]
      if !_tgt.Equals(_src16) { return false }
    }
  }
  if len(p.GroupPrivileges) != len(other.GroupPrivileges) { return false }
  for k, _tgt := range p.GroupPrivileges {
    _src17 := other.GroupPrivileges[k]
    if len(_tgt) != len(_src17) { return false }
    for i, _tgt := range _tgt {
      _src18 := _src17[i]
      if !_tgt.Equals(_src18) { return false }
    }
  }
  if len(p.RolePrivileges) != len(other.RolePrivileges) { return false }
  for k, _tgt := range p.RolePrivileges {
    _src19 := other.RolePrivileges[k]
    if len(_tgt) != len(_src19) { return false }
    for i, _tgt := range _tgt {
      _src20 := _src19[i]
      if !_tgt.Equals(_src20) { return false }
    }
  }
  return true
}

func (p *PrincipalPrivilegeSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrincipalPrivilegeSet(%+v)", *p)
}

// Attributes:
//  - RequestType
//  - Privileges
//  - RevokeGrantOption
type GrantRevokePrivilegeRequest struct {
  RequestType GrantRevokeType `thrift:"requestType,1" db:"requestType" json:"requestType"`
  Privileges *PrivilegeBag `thrift:"privileges,2" db:"privileges" json:"privileges"`
  RevokeGrantOption *bool `thrift:"revokeGrantOption,3" db:"revokeGrantOption" json:"revokeGrantOption,omitempty"`
}

func NewGrantRevokePrivilegeRequest() *GrantRevokePrivilegeRequest {
  return &GrantRevokePrivilegeRequest{}
}


func (p *GrantRevokePrivilegeRequest) GetRequestType() GrantRevokeType {
  return p.RequestType
}
var GrantRevokePrivilegeRequest_Privileges_DEFAULT *PrivilegeBag
func (p *GrantRevokePrivilegeRequest) GetPrivileges() *PrivilegeBag {
  if !p.IsSetPrivileges() {
    return GrantRevokePrivilegeRequest_Privileges_DEFAULT
  }
return p.Privileges
}
var GrantRevokePrivilegeRequest_RevokeGrantOption_DEFAULT bool
func (p *GrantRevokePrivilegeRequest) GetRevokeGrantOption() bool {
  if !p.IsSetRevokeGrantOption() {
    return GrantRevokePrivilegeRequest_RevokeGrantOption_DEFAULT
  }
return *p.RevokeGrantOption
}
func (p *GrantRevokePrivilegeRequest) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *GrantRevokePrivilegeRequest) IsSetRevokeGrantOption() bool {
  return p.RevokeGrantOption != nil
}

func (p *GrantRevokePrivilegeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GrantRevokePrivilegeRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GrantRevokeType(v)
  p.RequestType = temp
}
  return nil
}

func (p *GrantRevokePrivilegeRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Privileges = &PrivilegeBag{}
  if err := p.Privileges.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privileges), err)
  }
  return nil
}

func (p *GrantRevokePrivilegeRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RevokeGrantOption = &v
}
  return nil
}

func (p *GrantRevokePrivilegeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GrantRevokePrivilegeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GrantRevokePrivilegeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "requestType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestType: ", p), err) }
  return err
}

func (p *GrantRevokePrivilegeRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privileges", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privileges: ", p), err) }
  if err := p.Privileges.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privileges), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privileges: ", p), err) }
  return err
}

func (p *GrantRevokePrivilegeRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRevokeGrantOption() {
    if err := oprot.WriteFieldBegin(ctx, "revokeGrantOption", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:revokeGrantOption: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.RevokeGrantOption)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.revokeGrantOption (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:revokeGrantOption: ", p), err) }
  }
  return err
}

func (p *GrantRevokePrivilegeRequest) Equals(other *GrantRevokePrivilegeRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestType != other.RequestType { return false }
  if !p.Privileges.Equals(other.Privileges) { return false }
  if p.RevokeGrantOption != other.RevokeGrantOption {
    if p.RevokeGrantOption == nil || other.RevokeGrantOption == nil {
      return false
    }
    if (*p.RevokeGrantOption) != (*other.RevokeGrantOption) { return false }
  }
  return true
}

func (p *GrantRevokePrivilegeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GrantRevokePrivilegeRequest(%+v)", *p)
}

// Attributes:
//  - Success
type GrantRevokePrivilegeResponse struct {
  Success *bool `thrift:"success,1" db:"success" json:"success,omitempty"`
}

func NewGrantRevokePrivilegeResponse() *GrantRevokePrivilegeResponse {
  return &GrantRevokePrivilegeResponse{}
}

var GrantRevokePrivilegeResponse_Success_DEFAULT bool
func (p *GrantRevokePrivilegeResponse) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return GrantRevokePrivilegeResponse_Success_DEFAULT
  }
return *p.Success
}
func (p *GrantRevokePrivilegeResponse) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GrantRevokePrivilegeResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GrantRevokePrivilegeResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *GrantRevokePrivilegeResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GrantRevokePrivilegeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GrantRevokePrivilegeResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err) }
  }
  return err
}

func (p *GrantRevokePrivilegeResponse) Equals(other *GrantRevokePrivilegeResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Success != other.Success {
    if p.Success == nil || other.Success == nil {
      return false
    }
    if (*p.Success) != (*other.Success) { return false }
  }
  return true
}

func (p *GrantRevokePrivilegeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GrantRevokePrivilegeResponse(%+v)", *p)
}

// Attributes:
//  - RoleName
//  - CreateTime
//  - OwnerName
type Role struct {
  RoleName string `thrift:"roleName,1" db:"roleName" json:"roleName"`
  CreateTime int32 `thrift:"createTime,2" db:"createTime" json:"createTime"`
  OwnerName string `thrift:"ownerName,3" db:"ownerName" json:"ownerName"`
}

func NewRole() *Role {
  return &Role{}
}


func (p *Role) GetRoleName() string {
  return p.RoleName
}

func (p *Role) GetCreateTime() int32 {
  return p.CreateTime
}

func (p *Role) GetOwnerName() string {
  return p.OwnerName
}
func (p *Role) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Role)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *Role)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *Role)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OwnerName = v
}
  return nil
}

func (p *Role) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Role"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Role) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roleName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:roleName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:roleName: ", p), err) }
  return err
}

func (p *Role) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createTime", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createTime: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createTime: ", p), err) }
  return err
}

func (p *Role) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ownerName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ownerName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OwnerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ownerName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ownerName: ", p), err) }
  return err
}

func (p *Role) Equals(other *Role) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RoleName != other.RoleName { return false }
  if p.CreateTime != other.CreateTime { return false }
  if p.OwnerName != other.OwnerName { return false }
  return true
}

func (p *Role) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Role(%+v)", *p)
}

// Attributes:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
//  - GrantOption
//  - GrantTime
//  - GrantorName
//  - GrantorPrincipalType
type RolePrincipalGrant struct {
  RoleName string `thrift:"roleName,1" db:"roleName" json:"roleName"`
  PrincipalName string `thrift:"principalName,2" db:"principalName" json:"principalName"`
  PrincipalType PrincipalType `thrift:"principalType,3" db:"principalType" json:"principalType"`
  GrantOption bool `thrift:"grantOption,4" db:"grantOption" json:"grantOption"`
  GrantTime int32 `thrift:"grantTime,5" db:"grantTime" json:"grantTime"`
  GrantorName string `thrift:"grantorName,6" db:"grantorName" json:"grantorName"`
  GrantorPrincipalType PrincipalType `thrift:"grantorPrincipalType,7" db:"grantorPrincipalType" json:"grantorPrincipalType"`
}

func NewRolePrincipalGrant() *RolePrincipalGrant {
  return &RolePrincipalGrant{}
}


func (p *RolePrincipalGrant) GetRoleName() string {
  return p.RoleName
}

func (p *RolePrincipalGrant) GetPrincipalName() string {
  return p.PrincipalName
}

func (p *RolePrincipalGrant) GetPrincipalType() PrincipalType {
  return p.PrincipalType
}

func (p *RolePrincipalGrant) GetGrantOption() bool {
  return p.GrantOption
}

func (p *RolePrincipalGrant) GetGrantTime() int32 {
  return p.GrantTime
}

func (p *RolePrincipalGrant) GetGrantorName() string {
  return p.GrantorName
}

func (p *RolePrincipalGrant) GetGrantorPrincipalType() PrincipalType {
  return p.GrantorPrincipalType
}
func (p *RolePrincipalGrant) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RolePrincipalGrant)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *RolePrincipalGrant)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PrincipalName = v
}
  return nil
}

func (p *RolePrincipalGrant)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := PrincipalType(v)
  p.PrincipalType = temp
}
  return nil
}

func (p *RolePrincipalGrant)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GrantOption = v
}
  return nil
}

func (p *RolePrincipalGrant)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.GrantTime = v
}
  return nil
}

func (p *RolePrincipalGrant)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.GrantorName = v
}
  return nil
}

func (p *RolePrincipalGrant)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := PrincipalType(v)
  p.GrantorPrincipalType = temp
}
  return nil
}

func (p *RolePrincipalGrant) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RolePrincipalGrant"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RolePrincipalGrant) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roleName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:roleName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:roleName: ", p), err) }
  return err
}

func (p *RolePrincipalGrant) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principalName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principalName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principalName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principalName: ", p), err) }
  return err
}

func (p *RolePrincipalGrant) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principalType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:principalType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrincipalType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principalType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:principalType: ", p), err) }
  return err
}

func (p *RolePrincipalGrant) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "grantOption", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:grantOption: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.GrantOption)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantOption (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:grantOption: ", p), err) }
  return err
}

func (p *RolePrincipalGrant) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "grantTime", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:grantTime: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.GrantTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:grantTime: ", p), err) }
  return err
}

func (p *RolePrincipalGrant) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "grantorName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:grantorName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GrantorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantorName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:grantorName: ", p), err) }
  return err
}

func (p *RolePrincipalGrant) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "grantorPrincipalType", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:grantorPrincipalType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.GrantorPrincipalType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantorPrincipalType (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:grantorPrincipalType: ", p), err) }
  return err
}

func (p *RolePrincipalGrant) Equals(other *RolePrincipalGrant) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RoleName != other.RoleName { return false }
  if p.PrincipalName != other.PrincipalName { return false }
  if p.PrincipalType != other.PrincipalType { return false }
  if p.GrantOption != other.GrantOption { return false }
  if p.GrantTime != other.GrantTime { return false }
  if p.GrantorName != other.GrantorName { return false }
  if p.GrantorPrincipalType != other.GrantorPrincipalType { return false }
  return true
}

func (p *RolePrincipalGrant) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RolePrincipalGrant(%+v)", *p)
}

// Attributes:
//  - PrincipalName
//  - PrincipalType
type GetRoleGrantsForPrincipalRequest struct {
  PrincipalName string `thrift:"principal_name,1,required" db:"principal_name" json:"principal_name"`
  PrincipalType PrincipalType `thrift:"principal_type,2,required" db:"principal_type" json:"principal_type"`
}

func NewGetRoleGrantsForPrincipalRequest() *GetRoleGrantsForPrincipalRequest {
  return &GetRoleGrantsForPrincipalRequest{}
}


func (p *GetRoleGrantsForPrincipalRequest) GetPrincipalName() string {
  return p.PrincipalName
}

func (p *GetRoleGrantsForPrincipalRequest) GetPrincipalType() PrincipalType {
  return p.PrincipalType
}
func (p *GetRoleGrantsForPrincipalRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPrincipalName bool = false;
  var issetPrincipalType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPrincipalName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetPrincipalType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPrincipalName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrincipalName is not set"));
  }
  if !issetPrincipalType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrincipalType is not set"));
  }
  return nil
}

func (p *GetRoleGrantsForPrincipalRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PrincipalName = v
}
  return nil
}

func (p *GetRoleGrantsForPrincipalRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PrincipalType(v)
  p.PrincipalType = temp
}
  return nil
}

func (p *GetRoleGrantsForPrincipalRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetRoleGrantsForPrincipalRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetRoleGrantsForPrincipalRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principal_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:principal_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:principal_name: ", p), err) }
  return err
}

func (p *GetRoleGrantsForPrincipalRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principal_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principal_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrincipalType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principal_type: ", p), err) }
  return err
}

func (p *GetRoleGrantsForPrincipalRequest) Equals(other *GetRoleGrantsForPrincipalRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PrincipalName != other.PrincipalName { return false }
  if p.PrincipalType != other.PrincipalType { return false }
  return true
}

func (p *GetRoleGrantsForPrincipalRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRoleGrantsForPrincipalRequest(%+v)", *p)
}

// Attributes:
//  - PrincipalGrants
type GetRoleGrantsForPrincipalResponse struct {
  PrincipalGrants []*RolePrincipalGrant `thrift:"principalGrants,1,required" db:"principalGrants" json:"principalGrants"`
}

func NewGetRoleGrantsForPrincipalResponse() *GetRoleGrantsForPrincipalResponse {
  return &GetRoleGrantsForPrincipalResponse{}
}


func (p *GetRoleGrantsForPrincipalResponse) GetPrincipalGrants() []*RolePrincipalGrant {
  return p.PrincipalGrants
}
func (p *GetRoleGrantsForPrincipalResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPrincipalGrants bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPrincipalGrants = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPrincipalGrants{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrincipalGrants is not set"));
  }
  return nil
}

func (p *GetRoleGrantsForPrincipalResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RolePrincipalGrant, 0, size)
  p.PrincipalGrants =  tSlice
  for i := 0; i < size; i ++ {
    _elem21 := &RolePrincipalGrant{}
    if err := _elem21.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
    }
    p.PrincipalGrants = append(p.PrincipalGrants, _elem21)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetRoleGrantsForPrincipalResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetRoleGrantsForPrincipalResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetRoleGrantsForPrincipalResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principalGrants", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:principalGrants: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.PrincipalGrants)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PrincipalGrants {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:principalGrants: ", p), err) }
  return err
}

func (p *GetRoleGrantsForPrincipalResponse) Equals(other *GetRoleGrantsForPrincipalResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.PrincipalGrants) != len(other.PrincipalGrants) { return false }
  for i, _tgt := range p.PrincipalGrants {
    _src22 := other.PrincipalGrants[i]
    if !_tgt.Equals(_src22) { return false }
  }
  return true
}

func (p *GetRoleGrantsForPrincipalResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRoleGrantsForPrincipalResponse(%+v)", *p)
}

// Attributes:
//  - RoleName
type GetPrincipalsInRoleRequest struct {
  RoleName string `thrift:"roleName,1,required" db:"roleName" json:"roleName"`
}

func NewGetPrincipalsInRoleRequest() *GetPrincipalsInRoleRequest {
  return &GetPrincipalsInRoleRequest{}
}


func (p *GetPrincipalsInRoleRequest) GetRoleName() string {
  return p.RoleName
}
func (p *GetPrincipalsInRoleRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRoleName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRoleName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRoleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoleName is not set"));
  }
  return nil
}

func (p *GetPrincipalsInRoleRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *GetPrincipalsInRoleRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetPrincipalsInRoleRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPrincipalsInRoleRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roleName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:roleName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:roleName: ", p), err) }
  return err
}

func (p *GetPrincipalsInRoleRequest) Equals(other *GetPrincipalsInRoleRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RoleName != other.RoleName { return false }
  return true
}

func (p *GetPrincipalsInRoleRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPrincipalsInRoleRequest(%+v)", *p)
}

// Attributes:
//  - PrincipalGrants
type GetPrincipalsInRoleResponse struct {
  PrincipalGrants []*RolePrincipalGrant `thrift:"principalGrants,1,required" db:"principalGrants" json:"principalGrants"`
}

func NewGetPrincipalsInRoleResponse() *GetPrincipalsInRoleResponse {
  return &GetPrincipalsInRoleResponse{}
}


func (p *GetPrincipalsInRoleResponse) GetPrincipalGrants() []*RolePrincipalGrant {
  return p.PrincipalGrants
}
func (p *GetPrincipalsInRoleResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPrincipalGrants bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPrincipalGrants = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPrincipalGrants{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrincipalGrants is not set"));
  }
  return nil
}

func (p *GetPrincipalsInRoleResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RolePrincipalGrant, 0, size)
  p.PrincipalGrants =  tSlice
  for i := 0; i < size; i ++ {
    _elem23 := &RolePrincipalGrant{}
    if err := _elem23.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
    }
    p.PrincipalGrants = append(p.PrincipalGrants, _elem23)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetPrincipalsInRoleResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetPrincipalsInRoleResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPrincipalsInRoleResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principalGrants", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:principalGrants: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.PrincipalGrants)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PrincipalGrants {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:principalGrants: ", p), err) }
  return err
}

func (p *GetPrincipalsInRoleResponse) Equals(other *GetPrincipalsInRoleResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.PrincipalGrants) != len(other.PrincipalGrants) { return false }
  for i, _tgt := range p.PrincipalGrants {
    _src24 := other.PrincipalGrants[i]
    if !_tgt.Equals(_src24) { return false }
  }
  return true
}

func (p *GetPrincipalsInRoleResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPrincipalsInRoleResponse(%+v)", *p)
}

// Attributes:
//  - RequestType
//  - RoleName
//  - PrincipalName
//  - PrincipalType
//  - Grantor
//  - GrantorType
//  - GrantOption
type GrantRevokeRoleRequest struct {
  RequestType GrantRevokeType `thrift:"requestType,1" db:"requestType" json:"requestType"`
  RoleName string `thrift:"roleName,2" db:"roleName" json:"roleName"`
  PrincipalName string `thrift:"principalName,3" db:"principalName" json:"principalName"`
  PrincipalType PrincipalType `thrift:"principalType,4" db:"principalType" json:"principalType"`
  Grantor *string `thrift:"grantor,5" db:"grantor" json:"grantor,omitempty"`
  GrantorType *PrincipalType `thrift:"grantorType,6" db:"grantorType" json:"grantorType,omitempty"`
  GrantOption *bool `thrift:"grantOption,7" db:"grantOption" json:"grantOption,omitempty"`
}

func NewGrantRevokeRoleRequest() *GrantRevokeRoleRequest {
  return &GrantRevokeRoleRequest{}
}


func (p *GrantRevokeRoleRequest) GetRequestType() GrantRevokeType {
  return p.RequestType
}

func (p *GrantRevokeRoleRequest) GetRoleName() string {
  return p.RoleName
}

func (p *GrantRevokeRoleRequest) GetPrincipalName() string {
  return p.PrincipalName
}

func (p *GrantRevokeRoleRequest) GetPrincipalType() PrincipalType {
  return p.PrincipalType
}
var GrantRevokeRoleRequest_Grantor_DEFAULT string
func (p *GrantRevokeRoleRequest) GetGrantor() string {
  if !p.IsSetGrantor() {
    return GrantRevokeRoleRequest_Grantor_DEFAULT
  }
return *p.Grantor
}
var GrantRevokeRoleRequest_GrantorType_DEFAULT PrincipalType
func (p *GrantRevokeRoleRequest) GetGrantorType() PrincipalType {
  if !p.IsSetGrantorType() {
    return GrantRevokeRoleRequest_GrantorType_DEFAULT
  }
return *p.GrantorType
}
var GrantRevokeRoleRequest_GrantOption_DEFAULT bool
func (p *GrantRevokeRoleRequest) GetGrantOption() bool {
  if !p.IsSetGrantOption() {
    return GrantRevokeRoleRequest_GrantOption_DEFAULT
  }
return *p.GrantOption
}
func (p *GrantRevokeRoleRequest) IsSetGrantor() bool {
  return p.Grantor != nil
}

func (p *GrantRevokeRoleRequest) IsSetGrantorType() bool {
  return p.GrantorType != nil
}

func (p *GrantRevokeRoleRequest) IsSetGrantOption() bool {
  return p.GrantOption != nil
}

func (p *GrantRevokeRoleRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GrantRevokeRoleRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GrantRevokeType(v)
  p.RequestType = temp
}
  return nil
}

func (p *GrantRevokeRoleRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *GrantRevokeRoleRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PrincipalName = v
}
  return nil
}

func (p *GrantRevokeRoleRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := PrincipalType(v)
  p.PrincipalType = temp
}
  return nil
}

func (p *GrantRevokeRoleRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Grantor = &v
}
  return nil
}

func (p *GrantRevokeRoleRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := PrincipalType(v)
  p.GrantorType = &temp
}
  return nil
}

func (p *GrantRevokeRoleRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.GrantOption = &v
}
  return nil
}

func (p *GrantRevokeRoleRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GrantRevokeRoleRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GrantRevokeRoleRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "requestType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestType: ", p), err) }
  return err
}

func (p *GrantRevokeRoleRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roleName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roleName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roleName: ", p), err) }
  return err
}

func (p *GrantRevokeRoleRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principalName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:principalName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principalName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:principalName: ", p), err) }
  return err
}

func (p *GrantRevokeRoleRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principalType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:principalType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrincipalType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principalType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:principalType: ", p), err) }
  return err
}

func (p *GrantRevokeRoleRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGrantor() {
    if err := oprot.WriteFieldBegin(ctx, "grantor", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:grantor: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Grantor)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.grantor (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:grantor: ", p), err) }
  }
  return err
}

func (p *GrantRevokeRoleRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGrantorType() {
    if err := oprot.WriteFieldBegin(ctx, "grantorType", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:grantorType: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.GrantorType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.grantorType (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:grantorType: ", p), err) }
  }
  return err
}

func (p *GrantRevokeRoleRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGrantOption() {
    if err := oprot.WriteFieldBegin(ctx, "grantOption", thrift.BOOL, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:grantOption: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.GrantOption)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.grantOption (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:grantOption: ", p), err) }
  }
  return err
}

func (p *GrantRevokeRoleRequest) Equals(other *GrantRevokeRoleRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestType != other.RequestType { return false }
  if p.RoleName != other.RoleName { return false }
  if p.PrincipalName != other.PrincipalName { return false }
  if p.PrincipalType != other.PrincipalType { return false }
  if p.Grantor != other.Grantor {
    if p.Grantor == nil || other.Grantor == nil {
      return false
    }
    if (*p.Grantor) != (*other.Grantor) { return false }
  }
  if p.GrantorType != other.GrantorType {
    if p.GrantorType == nil || other.GrantorType == nil {
      return false
    }
    if (*p.GrantorType) != (*other.GrantorType) { return false }
  }
  if p.GrantOption != other.GrantOption {
    if p.GrantOption == nil || other.GrantOption == nil {
      return false
    }
    if (*p.GrantOption) != (*other.GrantOption) { return false }
  }
  return true
}

func (p *GrantRevokeRoleRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GrantRevokeRoleRequest(%+v)", *p)
}

// Attributes:
//  - Success
type GrantRevokeRoleResponse struct {
  Success *bool `thrift:"success,1" db:"success" json:"success,omitempty"`
}

func NewGrantRevokeRoleResponse() *GrantRevokeRoleResponse {
  return &GrantRevokeRoleResponse{}
}

var GrantRevokeRoleResponse_Success_DEFAULT bool
func (p *GrantRevokeRoleResponse) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return GrantRevokeRoleResponse_Success_DEFAULT
  }
return *p.Success
}
func (p *GrantRevokeRoleResponse) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GrantRevokeRoleResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GrantRevokeRoleResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *GrantRevokeRoleResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GrantRevokeRoleResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GrantRevokeRoleResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err) }
  }
  return err
}

func (p *GrantRevokeRoleResponse) Equals(other *GrantRevokeRoleResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Success != other.Success {
    if p.Success == nil || other.Success == nil {
      return false
    }
    if (*p.Success) != (*other.Success) { return false }
  }
  return true
}

func (p *GrantRevokeRoleResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GrantRevokeRoleResponse(%+v)", *p)
}

// Attributes:
//  - Name
//  - Description
//  - LocationUri
//  - Parameters
//  - Privileges
//  - OwnerName
//  - OwnerType
type Database struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Description string `thrift:"description,2" db:"description" json:"description"`
  LocationUri string `thrift:"locationUri,3" db:"locationUri" json:"locationUri"`
  Parameters map[string]string `thrift:"parameters,4" db:"parameters" json:"parameters"`
  Privileges *PrincipalPrivilegeSet `thrift:"privileges,5" db:"privileges" json:"privileges,omitempty"`
  OwnerName *string `thrift:"ownerName,6" db:"ownerName" json:"ownerName,omitempty"`
  OwnerType *PrincipalType `thrift:"ownerType,7" db:"ownerType" json:"ownerType,omitempty"`
}

func NewDatabase() *Database {
  return &Database{}
}


func (p *Database) GetName() string {
  return p.Name
}

func (p *Database) GetDescription() string {
  return p.Description
}

func (p *Database) GetLocationUri() string {
  return p.LocationUri
}

func (p *Database) GetParameters() map[string]string {
  return p.Parameters
}
var Database_Privileges_DEFAULT *PrincipalPrivilegeSet
func (p *Database) GetPrivileges() *PrincipalPrivilegeSet {
  if !p.IsSetPrivileges() {
    return Database_Privileges_DEFAULT
  }
return p.Privileges
}
var Database_OwnerName_DEFAULT string
func (p *Database) GetOwnerName() string {
  if !p.IsSetOwnerName() {
    return Database_OwnerName_DEFAULT
  }
return *p.OwnerName
}
var Database_OwnerType_DEFAULT PrincipalType
func (p *Database) GetOwnerType() PrincipalType {
  if !p.IsSetOwnerType() {
    return Database_OwnerType_DEFAULT
  }
return *p.OwnerType
}
func (p *Database) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *Database) IsSetOwnerName() bool {
  return p.OwnerName != nil
}

func (p *Database) IsSetOwnerType() bool {
  return p.OwnerType != nil
}

func (p *Database) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Database)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Database)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *Database)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LocationUri = v
}
  return nil
}

func (p *Database)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Parameters =  tMap
  for i := 0; i < size; i ++ {
var _key25 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key25 = v
}
var _val26 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val26 = v
}
    p.Parameters[_key25] = _val26
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Database)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Privileges = &PrincipalPrivilegeSet{}
  if err := p.Privileges.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privileges), err)
  }
  return nil
}

func (p *Database)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.OwnerName = &v
}
  return nil
}

func (p *Database)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := PrincipalType(v)
  p.OwnerType = &temp
}
  return nil
}

func (p *Database) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Database"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Database) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Database) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "description", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:description: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:description: ", p), err) }
  return err
}

func (p *Database) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locationUri", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:locationUri: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LocationUri)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locationUri (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:locationUri: ", p), err) }
  return err
}

func (p *Database) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameters", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:parameters: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parameters {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:parameters: ", p), err) }
  return err
}

func (p *Database) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivileges() {
    if err := oprot.WriteFieldBegin(ctx, "privileges", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:privileges: ", p), err) }
    if err := p.Privileges.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privileges), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:privileges: ", p), err) }
  }
  return err
}

func (p *Database) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOwnerName() {
    if err := oprot.WriteFieldBegin(ctx, "ownerName", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ownerName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.OwnerName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ownerName (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ownerName: ", p), err) }
  }
  return err
}

func (p *Database) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOwnerType() {
    if err := oprot.WriteFieldBegin(ctx, "ownerType", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ownerType: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.OwnerType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ownerType (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ownerType: ", p), err) }
  }
  return err
}

func (p *Database) Equals(other *Database) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.Description != other.Description { return false }
  if p.LocationUri != other.LocationUri { return false }
  if len(p.Parameters) != len(other.Parameters) { return false }
  for k, _tgt := range p.Parameters {
    _src27 := other.Parameters[k]
    if _tgt != _src27 { return false }
  }
  if !p.Privileges.Equals(other.Privileges) { return false }
  if p.OwnerName != other.OwnerName {
    if p.OwnerName == nil || other.OwnerName == nil {
      return false
    }
    if (*p.OwnerName) != (*other.OwnerName) { return false }
  }
  if p.OwnerType != other.OwnerType {
    if p.OwnerType == nil || other.OwnerType == nil {
      return false
    }
    if (*p.OwnerType) != (*other.OwnerType) { return false }
  }
  return true
}

func (p *Database) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Database(%+v)", *p)
}

// Attributes:
//  - Name
//  - SerializationLib
//  - Parameters
type SerDeInfo struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  SerializationLib string `thrift:"serializationLib,2" db:"serializationLib" json:"serializationLib"`
  Parameters map[string]string `thrift:"parameters,3" db:"parameters" json:"parameters"`
}

func NewSerDeInfo() *SerDeInfo {
  return &SerDeInfo{}
}


func (p *SerDeInfo) GetName() string {
  return p.Name
}

func (p *SerDeInfo) GetSerializationLib() string {
  return p.SerializationLib
}

func (p *SerDeInfo) GetParameters() map[string]string {
  return p.Parameters
}
func (p *SerDeInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SerDeInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SerDeInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SerializationLib = v
}
  return nil
}

func (p *SerDeInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Parameters =  tMap
  for i := 0; i < size; i ++ {
var _key28 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key28 = v
}
var _val29 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val29 = v
}
    p.Parameters[_key28] = _val29
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SerDeInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SerDeInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SerDeInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *SerDeInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serializationLib", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serializationLib: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SerializationLib)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serializationLib (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serializationLib: ", p), err) }
  return err
}

func (p *SerDeInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameters", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameters: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parameters {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameters: ", p), err) }
  return err
}

func (p *SerDeInfo) Equals(other *SerDeInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.SerializationLib != other.SerializationLib { return false }
  if len(p.Parameters) != len(other.Parameters) { return false }
  for k, _tgt := range p.Parameters {
    _src30 := other.Parameters[k]
    if _tgt != _src30 { return false }
  }
  return true
}

func (p *SerDeInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SerDeInfo(%+v)", *p)
}

// Attributes:
//  - Col
//  - Order
type Order struct {
  Col string `thrift:"col,1" db:"col" json:"col"`
  Order int32 `thrift:"order,2" db:"order" json:"order"`
}

func NewOrder() *Order {
  return &Order{}
}


func (p *Order) GetCol() string {
  return p.Col
}

func (p *Order) GetOrder() int32 {
  return p.Order
}
func (p *Order) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Order)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Col = v
}
  return nil
}

func (p *Order)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Order = v
}
  return nil
}

func (p *Order) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Order"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Order) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "col", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:col: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Col)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:col: ", p), err) }
  return err
}

func (p *Order) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "order", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:order: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Order)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:order: ", p), err) }
  return err
}

func (p *Order) Equals(other *Order) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Col != other.Col { return false }
  if p.Order != other.Order { return false }
  return true
}

func (p *Order) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Order(%+v)", *p)
}

// Attributes:
//  - SkewedColNames
//  - SkewedColValues
//  - SkewedColValueLocationMaps
type SkewedInfo struct {
  SkewedColNames []string `thrift:"skewedColNames,1" db:"skewedColNames" json:"skewedColNames"`
  SkewedColValues [][]string `thrift:"skewedColValues,2" db:"skewedColValues" json:"skewedColValues"`
  SkewedColValueLocationMaps map[string]string `thrift:"skewedColValueLocationMaps,3" db:"skewedColValueLocationMaps" json:"skewedColValueLocationMaps"`
}

func NewSkewedInfo() *SkewedInfo {
  return &SkewedInfo{}
}


func (p *SkewedInfo) GetSkewedColNames() []string {
  return p.SkewedColNames
}

func (p *SkewedInfo) GetSkewedColValues() [][]string {
  return p.SkewedColValues
}

func (p *SkewedInfo) GetSkewedColValueLocationMaps() map[string]string {
  return p.SkewedColValueLocationMaps
}
func (p *SkewedInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SkewedInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.SkewedColNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem31 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem31 = v
}
    p.SkewedColNames = append(p.SkewedColNames, _elem31)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SkewedInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]string, 0, size)
  p.SkewedColValues =  tSlice
  for i := 0; i < size; i ++ {
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]string, 0, size)
    _elem32 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem33 string
      if v, err := iprot.ReadString(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem33 = v
}
      _elem32 = append(_elem32, _elem33)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.SkewedColValues = append(p.SkewedColValues, _elem32)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SkewedInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.SkewedColValueLocationMaps =  tMap
  for i := 0; i < size; i ++ {
var _key34 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key34 = v
}
var _val35 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val35 = v
}
    p.SkewedColValueLocationMaps[_key34] = _val35
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SkewedInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SkewedInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SkewedInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "skewedColNames", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:skewedColNames: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.SkewedColNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SkewedColNames {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:skewedColNames: ", p), err) }
  return err
}

func (p *SkewedInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "skewedColValues", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:skewedColValues: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.LIST, len(p.SkewedColValues)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SkewedColValues {
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:skewedColValues: ", p), err) }
  return err
}

func (p *SkewedInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "skewedColValueLocationMaps", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:skewedColValueLocationMaps: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.SkewedColValueLocationMaps)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.SkewedColValueLocationMaps {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:skewedColValueLocationMaps: ", p), err) }
  return err
}

func (p *SkewedInfo) Equals(other *SkewedInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.SkewedColNames) != len(other.SkewedColNames) { return false }
  for i, _tgt := range p.SkewedColNames {
    _src36 := other.SkewedColNames[i]
    if _tgt != _src36 { return false }
  }
  if len(p.SkewedColValues) != len(other.SkewedColValues) { return false }
  for i, _tgt := range p.SkewedColValues {
    _src37 := other.SkewedColValues[i]
    if len(_tgt) != len(_src37) { return false }
    for i, _tgt := range _tgt {
      _src38 := _src37[i]
      if _tgt != _src38 { return false }
    }
  }
  if len(p.SkewedColValueLocationMaps) != len(other.SkewedColValueLocationMaps) { return false }
  for k, _tgt := range p.SkewedColValueLocationMaps {
    _src39 := other.SkewedColValueLocationMaps[k]
    if _tgt != _src39 { return false }
  }
  return true
}

func (p *SkewedInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SkewedInfo(%+v)", *p)
}

// Attributes:
//  - Cols
//  - Location
//  - InputFormat
//  - OutputFormat
//  - Compressed
//  - NumBuckets
//  - SerdeInfo
//  - BucketCols
//  - SortCols
//  - Parameters
//  - SkewedInfo
//  - StoredAsSubDirectories
type StorageDescriptor struct {
  Cols []*FieldSchema `thrift:"cols,1" db:"cols" json:"cols"`
  Location string `thrift:"location,2" db:"location" json:"location"`
  InputFormat string `thrift:"inputFormat,3" db:"inputFormat" json:"inputFormat"`
  OutputFormat string `thrift:"outputFormat,4" db:"outputFormat" json:"outputFormat"`
  Compressed bool `thrift:"compressed,5" db:"compressed" json:"compressed"`
  NumBuckets int32 `thrift:"numBuckets,6" db:"numBuckets" json:"numBuckets"`
  SerdeInfo *SerDeInfo `thrift:"serdeInfo,7" db:"serdeInfo" json:"serdeInfo"`
  BucketCols []string `thrift:"bucketCols,8" db:"bucketCols" json:"bucketCols"`
  SortCols []*Order `thrift:"sortCols,9" db:"sortCols" json:"sortCols"`
  Parameters map[string]string `thrift:"parameters,10" db:"parameters" json:"parameters"`
  SkewedInfo *SkewedInfo `thrift:"skewedInfo,11" db:"skewedInfo" json:"skewedInfo,omitempty"`
  StoredAsSubDirectories *bool `thrift:"storedAsSubDirectories,12" db:"storedAsSubDirectories" json:"storedAsSubDirectories,omitempty"`
}

func NewStorageDescriptor() *StorageDescriptor {
  return &StorageDescriptor{}
}


func (p *StorageDescriptor) GetCols() []*FieldSchema {
  return p.Cols
}

func (p *StorageDescriptor) GetLocation() string {
  return p.Location
}

func (p *StorageDescriptor) GetInputFormat() string {
  return p.InputFormat
}

func (p *StorageDescriptor) GetOutputFormat() string {
  return p.OutputFormat
}

func (p *StorageDescriptor) GetCompressed() bool {
  return p.Compressed
}

func (p *StorageDescriptor) GetNumBuckets() int32 {
  return p.NumBuckets
}
var StorageDescriptor_SerdeInfo_DEFAULT *SerDeInfo
func (p *StorageDescriptor) GetSerdeInfo() *SerDeInfo {
  if !p.IsSetSerdeInfo() {
    return StorageDescriptor_SerdeInfo_DEFAULT
  }
return p.SerdeInfo
}

func (p *StorageDescriptor) GetBucketCols() []string {
  return p.BucketCols
}

func (p *StorageDescriptor) GetSortCols() []*Order {
  return p.SortCols
}

func (p *StorageDescriptor) GetParameters() map[string]string {
  return p.Parameters
}
var StorageDescriptor_SkewedInfo_DEFAULT *SkewedInfo
func (p *StorageDescriptor) GetSkewedInfo() *SkewedInfo {
  if !p.IsSetSkewedInfo() {
    return StorageDescriptor_SkewedInfo_DEFAULT
  }
return p.SkewedInfo
}
var StorageDescriptor_StoredAsSubDirectories_DEFAULT bool
func (p *StorageDescriptor) GetStoredAsSubDirectories() bool {
  if !p.IsSetStoredAsSubDirectories() {
    return StorageDescriptor_StoredAsSubDirectories_DEFAULT
  }
return *p.StoredAsSubDirectories
}
func (p *StorageDescriptor) IsSetSerdeInfo() bool {
  return p.SerdeInfo != nil
}

func (p *StorageDescriptor) IsSetSkewedInfo() bool {
  return p.SkewedInfo != nil
}

func (p *StorageDescriptor) IsSetStoredAsSubDirectories() bool {
  return p.StoredAsSubDirectories != nil
}

func (p *StorageDescriptor) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageDescriptor)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.Cols =  tSlice
  for i := 0; i < size; i ++ {
    _elem40 := &FieldSchema{}
    if err := _elem40.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
    }
    p.Cols = append(p.Cols, _elem40)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StorageDescriptor)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Location = v
}
  return nil
}

func (p *StorageDescriptor)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.InputFormat = v
}
  return nil
}

func (p *StorageDescriptor)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OutputFormat = v
}
  return nil
}

func (p *StorageDescriptor)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Compressed = v
}
  return nil
}

func (p *StorageDescriptor)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NumBuckets = v
}
  return nil
}

func (p *StorageDescriptor)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.SerdeInfo = &SerDeInfo{}
  if err := p.SerdeInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SerdeInfo), err)
  }
  return nil
}

func (p *StorageDescriptor)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.BucketCols =  tSlice
  for i := 0; i < size; i ++ {
var _elem41 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem41 = v
}
    p.BucketCols = append(p.BucketCols, _elem41)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StorageDescriptor)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Order, 0, size)
  p.SortCols =  tSlice
  for i := 0; i < size; i ++ {
    _elem42 := &Order{}
    if err := _elem42.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
    }
    p.SortCols = append(p.SortCols, _elem42)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StorageDescriptor)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Parameters =  tMap
  for i := 0; i < size; i ++ {
var _key43 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key43 = v
}
var _val44 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val44 = v
}
    p.Parameters[_key43] = _val44
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StorageDescriptor)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  p.SkewedInfo = &SkewedInfo{}
  if err := p.SkewedInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SkewedInfo), err)
  }
  return nil
}

func (p *StorageDescriptor)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.StoredAsSubDirectories = &v
}
  return nil
}

func (p *StorageDescriptor) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StorageDescriptor"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageDescriptor) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cols", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cols: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Cols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Cols {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cols: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "location", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:location: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Location)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.location (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:location: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inputFormat", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:inputFormat: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.InputFormat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inputFormat (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:inputFormat: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "outputFormat", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outputFormat: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OutputFormat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outputFormat (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outputFormat: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "compressed", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:compressed: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Compressed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.compressed (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:compressed: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numBuckets", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:numBuckets: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NumBuckets)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numBuckets (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:numBuckets: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serdeInfo", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:serdeInfo: ", p), err) }
  if err := p.SerdeInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SerdeInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:serdeInfo: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bucketCols", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:bucketCols: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.BucketCols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.BucketCols {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:bucketCols: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sortCols", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:sortCols: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.SortCols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SortCols {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:sortCols: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameters", thrift.MAP, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:parameters: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parameters {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:parameters: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSkewedInfo() {
    if err := oprot.WriteFieldBegin(ctx, "skewedInfo", thrift.STRUCT, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:skewedInfo: ", p), err) }
    if err := p.SkewedInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SkewedInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:skewedInfo: ", p), err) }
  }
  return err
}

func (p *StorageDescriptor) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStoredAsSubDirectories() {
    if err := oprot.WriteFieldBegin(ctx, "storedAsSubDirectories", thrift.BOOL, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:storedAsSubDirectories: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.StoredAsSubDirectories)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.storedAsSubDirectories (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:storedAsSubDirectories: ", p), err) }
  }
  return err
}

func (p *StorageDescriptor) Equals(other *StorageDescriptor) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Cols) != len(other.Cols) { return false }
  for i, _tgt := range p.Cols {
    _src45 := other.Cols[i]
    if !_tgt.Equals(_src45) { return false }
  }
  if p.Location != other.Location { return false }
  if p.InputFormat != other.InputFormat { return false }
  if p.OutputFormat != other.OutputFormat { return false }
  if p.Compressed != other.Compressed { return false }
  if p.NumBuckets != other.NumBuckets { return false }
  if !p.SerdeInfo.Equals(other.SerdeInfo) { return false }
  if len(p.BucketCols) != len(other.BucketCols) { return false }
  for i, _tgt := range p.BucketCols {
    _src46 := other.BucketCols[i]
    if _tgt != _src46 { return false }
  }
  if len(p.SortCols) != len(other.SortCols) { return false }
  for i, _tgt := range p.SortCols {
    _src47 := other.SortCols[i]
    if !_tgt.Equals(_src47) { return false }
  }
  if len(p.Parameters) != len(other.Parameters) { return false }
  for k, _tgt := range p.Parameters {
    _src48 := other.Parameters[k]
    if _tgt != _src48 { return false }
  }
  if !p.SkewedInfo.Equals(other.SkewedInfo) { return false }
  if p.StoredAsSubDirectories != other.StoredAsSubDirectories {
    if p.StoredAsSubDirectories == nil || other.StoredAsSubDirectories == nil {
      return false
    }
    if (*p.StoredAsSubDirectories) != (*other.StoredAsSubDirectories) { return false }
  }
  return true
}

func (p *StorageDescriptor) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageDescriptor(%+v)", *p)
}

// Attributes:
//  - TableName
//  - DbName
//  - Owner
//  - CreateTime
//  - LastAccessTime
//  - Retention
//  - Sd
//  - PartitionKeys
//  - Parameters
//  - ViewOriginalText
//  - ViewExpandedText
//  - TableType
//  - Privileges
//  - Temporary
//  - RewriteEnabled
type Table struct {
  TableName string `thrift:"tableName,1" db:"tableName" json:"tableName"`
  DbName string `thrift:"dbName,2" db:"dbName" json:"dbName"`
  Owner string `thrift:"owner,3" db:"owner" json:"owner"`
  CreateTime int32 `thrift:"createTime,4" db:"createTime" json:"createTime"`
  LastAccessTime int32 `thrift:"lastAccessTime,5" db:"lastAccessTime" json:"lastAccessTime"`
  Retention int32 `thrift:"retention,6" db:"retention" json:"retention"`
  Sd *StorageDescriptor `thrift:"sd,7" db:"sd" json:"sd"`
  PartitionKeys []*FieldSchema `thrift:"partitionKeys,8" db:"partitionKeys" json:"partitionKeys"`
  Parameters map[string]string `thrift:"parameters,9" db:"parameters" json:"parameters"`
  ViewOriginalText string `thrift:"viewOriginalText,10" db:"viewOriginalText" json:"viewOriginalText"`
  ViewExpandedText string `thrift:"viewExpandedText,11" db:"viewExpandedText" json:"viewExpandedText"`
  TableType string `thrift:"tableType,12" db:"tableType" json:"tableType"`
  Privileges *PrincipalPrivilegeSet `thrift:"privileges,13" db:"privileges" json:"privileges,omitempty"`
  Temporary bool `thrift:"temporary,14" db:"temporary" json:"temporary"`
  RewriteEnabled *bool `thrift:"rewriteEnabled,15" db:"rewriteEnabled" json:"rewriteEnabled,omitempty"`
}

func NewTable() *Table {
  return &Table{}
}


func (p *Table) GetTableName() string {
  return p.TableName
}

func (p *Table) GetDbName() string {
  return p.DbName
}

func (p *Table) GetOwner() string {
  return p.Owner
}

func (p *Table) GetCreateTime() int32 {
  return p.CreateTime
}

func (p *Table) GetLastAccessTime() int32 {
  return p.LastAccessTime
}

func (p *Table) GetRetention() int32 {
  return p.Retention
}
var Table_Sd_DEFAULT *StorageDescriptor
func (p *Table) GetSd() *StorageDescriptor {
  if !p.IsSetSd() {
    return Table_Sd_DEFAULT
  }
return p.Sd
}

func (p *Table) GetPartitionKeys() []*FieldSchema {
  return p.PartitionKeys
}

func (p *Table) GetParameters() map[string]string {
  return p.Parameters
}

func (p *Table) GetViewOriginalText() string {
  return p.ViewOriginalText
}

func (p *Table) GetViewExpandedText() string {
  return p.ViewExpandedText
}

func (p *Table) GetTableType() string {
  return p.TableType
}
var Table_Privileges_DEFAULT *PrincipalPrivilegeSet
func (p *Table) GetPrivileges() *PrincipalPrivilegeSet {
  if !p.IsSetPrivileges() {
    return Table_Privileges_DEFAULT
  }
return p.Privileges
}
var Table_Temporary_DEFAULT bool = false

func (p *Table) GetTemporary() bool {
  return p.Temporary
}
var Table_RewriteEnabled_DEFAULT bool
func (p *Table) GetRewriteEnabled() bool {
  if !p.IsSetRewriteEnabled() {
    return Table_RewriteEnabled_DEFAULT
  }
return *p.RewriteEnabled
}
func (p *Table) IsSetSd() bool {
  return p.Sd != nil
}

func (p *Table) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *Table) IsSetTemporary() bool {
  return p.Temporary != Table_Temporary_DEFAULT
}

func (p *Table) IsSetRewriteEnabled() bool {
  return p.RewriteEnabled != nil
}

func (p *Table) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Table)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *Table)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *Table)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Owner = v
}
  return nil
}

func (p *Table)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *Table)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LastAccessTime = v
}
  return nil
}

func (p *Table)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Retention = v
}
  return nil
}

func (p *Table)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.Sd = &StorageDescriptor{}
  if err := p.Sd.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sd), err)
  }
  return nil
}

func (p *Table)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.PartitionKeys =  tSlice
  for i := 0; i < size; i ++ {
    _elem49 := &FieldSchema{}
    if err := _elem49.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem49), err)
    }
    p.PartitionKeys = append(p.PartitionKeys, _elem49)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Table)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Parameters =  tMap
  for i := 0; i < size; i ++ {
var _key50 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key50 = v
}
var _val51 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val51 = v
}
    p.Parameters[_key50] = _val51
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Table)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ViewOriginalText = v
}
  return nil
}

func (p *Table)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ViewExpandedText = v
}
  return nil
}

func (p *Table)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.TableType = v
}
  return nil
}

func (p *Table)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  p.Privileges = &PrincipalPrivilegeSet{}
  if err := p.Privileges.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privileges), err)
  }
  return nil
}

func (p *Table)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Temporary = v
}
  return nil
}

func (p *Table)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.RewriteEnabled = &v
}
  return nil
}

func (p *Table) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Table"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Table) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tableName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err) }
  return err
}

func (p *Table) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbName: ", p), err) }
  return err
}

func (p *Table) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "owner", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:owner: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Owner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.owner (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:owner: ", p), err) }
  return err
}

func (p *Table) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createTime", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:createTime: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:createTime: ", p), err) }
  return err
}

func (p *Table) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastAccessTime", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastAccessTime: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.LastAccessTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastAccessTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastAccessTime: ", p), err) }
  return err
}

func (p *Table) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "retention", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:retention: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Retention)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.retention (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:retention: ", p), err) }
  return err
}

func (p *Table) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sd", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:sd: ", p), err) }
  if err := p.Sd.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sd), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:sd: ", p), err) }
  return err
}

func (p *Table) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitionKeys", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:partitionKeys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.PartitionKeys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartitionKeys {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:partitionKeys: ", p), err) }
  return err
}

func (p *Table) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameters", thrift.MAP, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:parameters: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parameters {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:parameters: ", p), err) }
  return err
}

func (p *Table) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "viewOriginalText", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:viewOriginalText: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ViewOriginalText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.viewOriginalText (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:viewOriginalText: ", p), err) }
  return err
}

func (p *Table) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "viewExpandedText", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:viewExpandedText: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ViewExpandedText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.viewExpandedText (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:viewExpandedText: ", p), err) }
  return err
}

func (p *Table) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tableType", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:tableType: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableType (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:tableType: ", p), err) }
  return err
}

func (p *Table) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivileges() {
    if err := oprot.WriteFieldBegin(ctx, "privileges", thrift.STRUCT, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:privileges: ", p), err) }
    if err := p.Privileges.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privileges), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:privileges: ", p), err) }
  }
  return err
}

func (p *Table) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTemporary() {
    if err := oprot.WriteFieldBegin(ctx, "temporary", thrift.BOOL, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:temporary: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.Temporary)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.temporary (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:temporary: ", p), err) }
  }
  return err
}

func (p *Table) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRewriteEnabled() {
    if err := oprot.WriteFieldBegin(ctx, "rewriteEnabled", thrift.BOOL, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:rewriteEnabled: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.RewriteEnabled)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.rewriteEnabled (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:rewriteEnabled: ", p), err) }
  }
  return err
}

func (p *Table) Equals(other *Table) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TableName != other.TableName { return false }
  if p.DbName != other.DbName { return false }
  if p.Owner != other.Owner { return false }
  if p.CreateTime != other.CreateTime { return false }
  if p.LastAccessTime != other.LastAccessTime { return false }
  if p.Retention != other.Retention { return false }
  if !p.Sd.Equals(other.Sd) { return false }
  if len(p.PartitionKeys) != len(other.PartitionKeys) { return false }
  for i, _tgt := range p.PartitionKeys {
    _src52 := other.PartitionKeys[i]
    if !_tgt.Equals(_src52) { return false }
  }
  if len(p.Parameters) != len(other.Parameters) { return false }
  for k, _tgt := range p.Parameters {
    _src53 := other.Parameters[k]
    if _tgt != _src53 { return false }
  }
  if p.ViewOriginalText != other.ViewOriginalText { return false }
  if p.ViewExpandedText != other.ViewExpandedText { return false }
  if p.TableType != other.TableType { return false }
  if !p.Privileges.Equals(other.Privileges) { return false }
  if p.Temporary != other.Temporary { return false }
  if p.RewriteEnabled != other.RewriteEnabled {
    if p.RewriteEnabled == nil || other.RewriteEnabled == nil {
      return false
    }
    if (*p.RewriteEnabled) != (*other.RewriteEnabled) { return false }
  }
  return true
}

func (p *Table) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Table(%+v)", *p)
}

// Attributes:
//  - Values
//  - DbName
//  - TableName
//  - CreateTime
//  - LastAccessTime
//  - Sd
//  - Parameters
//  - Privileges
type Partition struct {
  Values []string `thrift:"values,1" db:"values" json:"values"`
  DbName string `thrift:"dbName,2" db:"dbName" json:"dbName"`
  TableName string `thrift:"tableName,3" db:"tableName" json:"tableName"`
  CreateTime int32 `thrift:"createTime,4" db:"createTime" json:"createTime"`
  LastAccessTime int32 `thrift:"lastAccessTime,5" db:"lastAccessTime" json:"lastAccessTime"`
  Sd *StorageDescriptor `thrift:"sd,6" db:"sd" json:"sd"`
  Parameters map[string]string `thrift:"parameters,7" db:"parameters" json:"parameters"`
  Privileges *PrincipalPrivilegeSet `thrift:"privileges,8" db:"privileges" json:"privileges,omitempty"`
}

func NewPartition() *Partition {
  return &Partition{}
}


func (p *Partition) GetValues() []string {
  return p.Values
}

func (p *Partition) GetDbName() string {
  return p.DbName
}

func (p *Partition) GetTableName() string {
  return p.TableName
}

func (p *Partition) GetCreateTime() int32 {
  return p.CreateTime
}

func (p *Partition) GetLastAccessTime() int32 {
  return p.LastAccessTime
}
var Partition_Sd_DEFAULT *StorageDescriptor
func (p *Partition) GetSd() *StorageDescriptor {
  if !p.IsSetSd() {
    return Partition_Sd_DEFAULT
  }
return p.Sd
}

func (p *Partition) GetParameters() map[string]string {
  return p.Parameters
}
var Partition_Privileges_DEFAULT *PrincipalPrivilegeSet
func (p *Partition) GetPrivileges() *PrincipalPrivilegeSet {
  if !p.IsSetPrivileges() {
    return Partition_Privileges_DEFAULT
  }
return p.Privileges
}
func (p *Partition) IsSetSd() bool {
  return p.Sd != nil
}

func (p *Partition) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *Partition) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Partition)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem54 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem54 = v
}
    p.Values = append(p.Values, _elem54)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Partition)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *Partition)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *Partition)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *Partition)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LastAccessTime = v
}
  return nil
}

func (p *Partition)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.Sd = &StorageDescriptor{}
  if err := p.Sd.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sd), err)
  }
  return nil
}

func (p *Partition)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Parameters =  tMap
  for i := 0; i < size; i ++ {
var _key55 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key55 = v
}
var _val56 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val56 = v
}
    p.Parameters[_key55] = _val56
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Partition)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.Privileges = &PrincipalPrivilegeSet{}
  if err := p.Privileges.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privileges), err)
  }
  return nil
}

func (p *Partition) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Partition"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Partition) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:values: ", p), err) }
  return err
}

func (p *Partition) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbName: ", p), err) }
  return err
}

func (p *Partition) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tableName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tableName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tableName: ", p), err) }
  return err
}

func (p *Partition) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createTime", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:createTime: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:createTime: ", p), err) }
  return err
}

func (p *Partition) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastAccessTime", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastAccessTime: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.LastAccessTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastAccessTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastAccessTime: ", p), err) }
  return err
}

func (p *Partition) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sd", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sd: ", p), err) }
  if err := p.Sd.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sd), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sd: ", p), err) }
  return err
}

func (p *Partition) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameters", thrift.MAP, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:parameters: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parameters {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:parameters: ", p), err) }
  return err
}

func (p *Partition) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivileges() {
    if err := oprot.WriteFieldBegin(ctx, "privileges", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:privileges: ", p), err) }
    if err := p.Privileges.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privileges), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:privileges: ", p), err) }
  }
  return err
}

func (p *Partition) Equals(other *Partition) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src57 := other.Values[i]
    if _tgt != _src57 { return false }
  }
  if p.DbName != other.DbName { return false }
  if p.TableName != other.TableName { return false }
  if p.CreateTime != other.CreateTime { return false }
  if p.LastAccessTime != other.LastAccessTime { return false }
  if !p.Sd.Equals(other.Sd) { return false }
  if len(p.Parameters) != len(other.Parameters) { return false }
  for k, _tgt := range p.Parameters {
    _src58 := other.Parameters[k]
    if _tgt != _src58 { return false }
  }
  if !p.Privileges.Equals(other.Privileges) { return false }
  return true
}

func (p *Partition) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Partition(%+v)", *p)
}

// Attributes:
//  - Values
//  - CreateTime
//  - LastAccessTime
//  - RelativePath
//  - Parameters
//  - Privileges
type PartitionWithoutSD struct {
  Values []string `thrift:"values,1" db:"values" json:"values"`
  CreateTime int32 `thrift:"createTime,2" db:"createTime" json:"createTime"`
  LastAccessTime int32 `thrift:"lastAccessTime,3" db:"lastAccessTime" json:"lastAccessTime"`
  RelativePath string `thrift:"relativePath,4" db:"relativePath" json:"relativePath"`
  Parameters map[string]string `thrift:"parameters,5" db:"parameters" json:"parameters"`
  Privileges *PrincipalPrivilegeSet `thrift:"privileges,6" db:"privileges" json:"privileges,omitempty"`
}

func NewPartitionWithoutSD() *PartitionWithoutSD {
  return &PartitionWithoutSD{}
}


func (p *PartitionWithoutSD) GetValues() []string {
  return p.Values
}

func (p *PartitionWithoutSD) GetCreateTime() int32 {
  return p.CreateTime
}

func (p *PartitionWithoutSD) GetLastAccessTime() int32 {
  return p.LastAccessTime
}

func (p *PartitionWithoutSD) GetRelativePath() string {
  return p.RelativePath
}

func (p *PartitionWithoutSD) GetParameters() map[string]string {
  return p.Parameters
}
var PartitionWithoutSD_Privileges_DEFAULT *PrincipalPrivilegeSet
func (p *PartitionWithoutSD) GetPrivileges() *PrincipalPrivilegeSet {
  if !p.IsSetPrivileges() {
    return PartitionWithoutSD_Privileges_DEFAULT
  }
return p.Privileges
}
func (p *PartitionWithoutSD) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *PartitionWithoutSD) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartitionWithoutSD)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem59 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem59 = v
}
    p.Values = append(p.Values, _elem59)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartitionWithoutSD)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *PartitionWithoutSD)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastAccessTime = v
}
  return nil
}

func (p *PartitionWithoutSD)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RelativePath = v
}
  return nil
}

func (p *PartitionWithoutSD)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Parameters =  tMap
  for i := 0; i < size; i ++ {
var _key60 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key60 = v
}
var _val61 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val61 = v
}
    p.Parameters[_key60] = _val61
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PartitionWithoutSD)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.Privileges = &PrincipalPrivilegeSet{}
  if err := p.Privileges.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privileges), err)
  }
  return nil
}

func (p *PartitionWithoutSD) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartitionWithoutSD"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionWithoutSD) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:values: ", p), err) }
  return err
}

func (p *PartitionWithoutSD) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createTime", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createTime: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createTime: ", p), err) }
  return err
}

func (p *PartitionWithoutSD) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastAccessTime", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastAccessTime: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.LastAccessTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastAccessTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastAccessTime: ", p), err) }
  return err
}

func (p *PartitionWithoutSD) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "relativePath", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:relativePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RelativePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relativePath (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:relativePath: ", p), err) }
  return err
}

func (p *PartitionWithoutSD) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameters", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:parameters: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parameters {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:parameters: ", p), err) }
  return err
}

func (p *PartitionWithoutSD) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivileges() {
    if err := oprot.WriteFieldBegin(ctx, "privileges", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:privileges: ", p), err) }
    if err := p.Privileges.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privileges), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:privileges: ", p), err) }
  }
  return err
}

func (p *PartitionWithoutSD) Equals(other *PartitionWithoutSD) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src62 := other.Values[i]
    if _tgt != _src62 { return false }
  }
  if p.CreateTime != other.CreateTime { return false }
  if p.LastAccessTime != other.LastAccessTime { return false }
  if p.RelativePath != other.RelativePath { return false }
  if len(p.Parameters) != len(other.Parameters) { return false }
  for k, _tgt := range p.Parameters {
    _src63 := other.Parameters[k]
    if _tgt != _src63 { return false }
  }
  if !p.Privileges.Equals(other.Privileges) { return false }
  return true
}

func (p *PartitionWithoutSD) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionWithoutSD(%+v)", *p)
}

// Attributes:
//  - Partitions
//  - Sd
type PartitionSpecWithSharedSD struct {
  Partitions []*PartitionWithoutSD `thrift:"partitions,1" db:"partitions" json:"partitions"`
  Sd *StorageDescriptor `thrift:"sd,2" db:"sd" json:"sd"`
}

func NewPartitionSpecWithSharedSD() *PartitionSpecWithSharedSD {
  return &PartitionSpecWithSharedSD{}
}


func (p *PartitionSpecWithSharedSD) GetPartitions() []*PartitionWithoutSD {
  return p.Partitions
}
var PartitionSpecWithSharedSD_Sd_DEFAULT *StorageDescriptor
func (p *PartitionSpecWithSharedSD) GetSd() *StorageDescriptor {
  if !p.IsSetSd() {
    return PartitionSpecWithSharedSD_Sd_DEFAULT
  }
return p.Sd
}
func (p *PartitionSpecWithSharedSD) IsSetSd() bool {
  return p.Sd != nil
}

func (p *PartitionSpecWithSharedSD) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartitionSpecWithSharedSD)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PartitionWithoutSD, 0, size)
  p.Partitions =  tSlice
  for i := 0; i < size; i ++ {
    _elem64 := &PartitionWithoutSD{}
    if err := _elem64.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem64), err)
    }
    p.Partitions = append(p.Partitions, _elem64)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartitionSpecWithSharedSD)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Sd = &StorageDescriptor{}
  if err := p.Sd.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sd), err)
  }
  return nil
}

func (p *PartitionSpecWithSharedSD) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartitionSpecWithSharedSD"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionSpecWithSharedSD) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitions", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partitions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Partitions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Partitions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partitions: ", p), err) }
  return err
}

func (p *PartitionSpecWithSharedSD) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sd", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sd: ", p), err) }
  if err := p.Sd.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sd), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sd: ", p), err) }
  return err
}

func (p *PartitionSpecWithSharedSD) Equals(other *PartitionSpecWithSharedSD) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Partitions) != len(other.Partitions) { return false }
  for i, _tgt := range p.Partitions {
    _src65 := other.Partitions[i]
    if !_tgt.Equals(_src65) { return false }
  }
  if !p.Sd.Equals(other.Sd) { return false }
  return true
}

func (p *PartitionSpecWithSharedSD) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionSpecWithSharedSD(%+v)", *p)
}

// Attributes:
//  - Partitions
type PartitionListComposingSpec struct {
  Partitions []*Partition `thrift:"partitions,1" db:"partitions" json:"partitions"`
}

func NewPartitionListComposingSpec() *PartitionListComposingSpec {
  return &PartitionListComposingSpec{}
}


func (p *PartitionListComposingSpec) GetPartitions() []*Partition {
  return p.Partitions
}
func (p *PartitionListComposingSpec) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartitionListComposingSpec)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Partitions =  tSlice
  for i := 0; i < size; i ++ {
    _elem66 := &Partition{}
    if err := _elem66.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem66), err)
    }
    p.Partitions = append(p.Partitions, _elem66)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartitionListComposingSpec) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartitionListComposingSpec"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionListComposingSpec) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitions", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partitions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Partitions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Partitions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partitions: ", p), err) }
  return err
}

func (p *PartitionListComposingSpec) Equals(other *PartitionListComposingSpec) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Partitions) != len(other.Partitions) { return false }
  for i, _tgt := range p.Partitions {
    _src67 := other.Partitions[i]
    if !_tgt.Equals(_src67) { return false }
  }
  return true
}

func (p *PartitionListComposingSpec) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionListComposingSpec(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TableName
//  - RootPath
//  - SharedSDPartitionSpec
//  - PartitionList
type PartitionSpec struct {
  DbName string `thrift:"dbName,1" db:"dbName" json:"dbName"`
  TableName string `thrift:"tableName,2" db:"tableName" json:"tableName"`
  RootPath string `thrift:"rootPath,3" db:"rootPath" json:"rootPath"`
  SharedSDPartitionSpec *PartitionSpecWithSharedSD `thrift:"sharedSDPartitionSpec,4" db:"sharedSDPartitionSpec" json:"sharedSDPartitionSpec,omitempty"`
  PartitionList *PartitionListComposingSpec `thrift:"partitionList,5" db:"partitionList" json:"partitionList,omitempty"`
}

func NewPartitionSpec() *PartitionSpec {
  return &PartitionSpec{}
}


func (p *PartitionSpec) GetDbName() string {
  return p.DbName
}

func (p *PartitionSpec) GetTableName() string {
  return p.TableName
}

func (p *PartitionSpec) GetRootPath() string {
  return p.RootPath
}
var PartitionSpec_SharedSDPartitionSpec_DEFAULT *PartitionSpecWithSharedSD
func (p *PartitionSpec) GetSharedSDPartitionSpec() *PartitionSpecWithSharedSD {
  if !p.IsSetSharedSDPartitionSpec() {
    return PartitionSpec_SharedSDPartitionSpec_DEFAULT
  }
return p.SharedSDPartitionSpec
}
var PartitionSpec_PartitionList_DEFAULT *PartitionListComposingSpec
func (p *PartitionSpec) GetPartitionList() *PartitionListComposingSpec {
  if !p.IsSetPartitionList() {
    return PartitionSpec_PartitionList_DEFAULT
  }
return p.PartitionList
}
func (p *PartitionSpec) IsSetSharedSDPartitionSpec() bool {
  return p.SharedSDPartitionSpec != nil
}

func (p *PartitionSpec) IsSetPartitionList() bool {
  return p.PartitionList != nil
}

func (p *PartitionSpec) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartitionSpec)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *PartitionSpec)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *PartitionSpec)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RootPath = v
}
  return nil
}

func (p *PartitionSpec)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.SharedSDPartitionSpec = &PartitionSpecWithSharedSD{}
  if err := p.SharedSDPartitionSpec.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SharedSDPartitionSpec), err)
  }
  return nil
}

func (p *PartitionSpec)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.PartitionList = &PartitionListComposingSpec{}
  if err := p.PartitionList.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PartitionList), err)
  }
  return nil
}

func (p *PartitionSpec) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartitionSpec"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionSpec) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *PartitionSpec) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tableName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err) }
  return err
}

func (p *PartitionSpec) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootPath", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rootPath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RootPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootPath (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rootPath: ", p), err) }
  return err
}

func (p *PartitionSpec) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSharedSDPartitionSpec() {
    if err := oprot.WriteFieldBegin(ctx, "sharedSDPartitionSpec", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sharedSDPartitionSpec: ", p), err) }
    if err := p.SharedSDPartitionSpec.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SharedSDPartitionSpec), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sharedSDPartitionSpec: ", p), err) }
  }
  return err
}

func (p *PartitionSpec) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPartitionList() {
    if err := oprot.WriteFieldBegin(ctx, "partitionList", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:partitionList: ", p), err) }
    if err := p.PartitionList.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PartitionList), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:partitionList: ", p), err) }
  }
  return err
}

func (p *PartitionSpec) Equals(other *PartitionSpec) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DbName != other.DbName { return false }
  if p.TableName != other.TableName { return false }
  if p.RootPath != other.RootPath { return false }
  if !p.SharedSDPartitionSpec.Equals(other.SharedSDPartitionSpec) { return false }
  if !p.PartitionList.Equals(other.PartitionList) { return false }
  return true
}

func (p *PartitionSpec) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionSpec(%+v)", *p)
}

// Attributes:
//  - IndexName
//  - IndexHandlerClass
//  - DbName
//  - OrigTableName
//  - CreateTime
//  - LastAccessTime
//  - IndexTableName
//  - Sd
//  - Parameters
//  - DeferredRebuild
type Index struct {
  IndexName string `thrift:"indexName,1" db:"indexName" json:"indexName"`
  IndexHandlerClass string `thrift:"indexHandlerClass,2" db:"indexHandlerClass" json:"indexHandlerClass"`
  DbName string `thrift:"dbName,3" db:"dbName" json:"dbName"`
  OrigTableName string `thrift:"origTableName,4" db:"origTableName" json:"origTableName"`
  CreateTime int32 `thrift:"createTime,5" db:"createTime" json:"createTime"`
  LastAccessTime int32 `thrift:"lastAccessTime,6" db:"lastAccessTime" json:"lastAccessTime"`
  IndexTableName string `thrift:"indexTableName,7" db:"indexTableName" json:"indexTableName"`
  Sd *StorageDescriptor `thrift:"sd,8" db:"sd" json:"sd"`
  Parameters map[string]string `thrift:"parameters,9" db:"parameters" json:"parameters"`
  DeferredRebuild bool `thrift:"deferredRebuild,10" db:"deferredRebuild" json:"deferredRebuild"`
}

func NewIndex() *Index {
  return &Index{}
}


func (p *Index) GetIndexName() string {
  return p.IndexName
}

func (p *Index) GetIndexHandlerClass() string {
  return p.IndexHandlerClass
}

func (p *Index) GetDbName() string {
  return p.DbName
}

func (p *Index) GetOrigTableName() string {
  return p.OrigTableName
}

func (p *Index) GetCreateTime() int32 {
  return p.CreateTime
}

func (p *Index) GetLastAccessTime() int32 {
  return p.LastAccessTime
}

func (p *Index) GetIndexTableName() string {
  return p.IndexTableName
}
var Index_Sd_DEFAULT *StorageDescriptor
func (p *Index) GetSd() *StorageDescriptor {
  if !p.IsSetSd() {
    return Index_Sd_DEFAULT
  }
return p.Sd
}

func (p *Index) GetParameters() map[string]string {
  return p.Parameters
}

func (p *Index) GetDeferredRebuild() bool {
  return p.DeferredRebuild
}
func (p *Index) IsSetSd() bool {
  return p.Sd != nil
}

func (p *Index) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Index)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *Index)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexHandlerClass = v
}
  return nil
}

func (p *Index)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *Index)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OrigTableName = v
}
  return nil
}

func (p *Index)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *Index)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LastAccessTime = v
}
  return nil
}

func (p *Index)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.IndexTableName = v
}
  return nil
}

func (p *Index)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.Sd = &StorageDescriptor{}
  if err := p.Sd.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sd), err)
  }
  return nil
}

func (p *Index)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Parameters =  tMap
  for i := 0; i < size; i ++ {
var _key68 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key68 = v
}
var _val69 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val69 = v
}
    p.Parameters[_key68] = _val69
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Index)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DeferredRebuild = v
}
  return nil
}

func (p *Index) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Index"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Index) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "indexName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:indexName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IndexName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.indexName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:indexName: ", p), err) }
  return err
}

func (p *Index) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "indexHandlerClass", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:indexHandlerClass: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IndexHandlerClass)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.indexHandlerClass (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:indexHandlerClass: ", p), err) }
  return err
}

func (p *Index) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dbName: ", p), err) }
  return err
}

func (p *Index) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "origTableName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:origTableName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OrigTableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.origTableName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:origTableName: ", p), err) }
  return err
}

func (p *Index) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createTime", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createTime: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createTime: ", p), err) }
  return err
}

func (p *Index) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastAccessTime", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastAccessTime: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.LastAccessTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastAccessTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastAccessTime: ", p), err) }
  return err
}

func (p *Index) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "indexTableName", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:indexTableName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IndexTableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.indexTableName (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:indexTableName: ", p), err) }
  return err
}

func (p *Index) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sd", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sd: ", p), err) }
  if err := p.Sd.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sd), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sd: ", p), err) }
  return err
}

func (p *Index) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameters", thrift.MAP, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:parameters: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parameters {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:parameters: ", p), err) }
  return err
}

func (p *Index) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deferredRebuild", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:deferredRebuild: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.DeferredRebuild)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deferredRebuild (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:deferredRebuild: ", p), err) }
  return err
}

func (p *Index) Equals(other *Index) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IndexName != other.IndexName { return false }
  if p.IndexHandlerClass != other.IndexHandlerClass { return false }
  if p.DbName != other.DbName { return false }
  if p.OrigTableName != other.OrigTableName { return false }
  if p.CreateTime != other.CreateTime { return false }
  if p.LastAccessTime != other.LastAccessTime { return false }
  if p.IndexTableName != other.IndexTableName { return false }
  if !p.Sd.Equals(other.Sd) { return false }
  if len(p.Parameters) != len(other.Parameters) { return false }
  for k, _tgt := range p.Parameters {
    _src70 := other.Parameters[k]
    if _tgt != _src70 { return false }
  }
  if p.DeferredRebuild != other.DeferredRebuild { return false }
  return true
}

func (p *Index) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Index(%+v)", *p)
}

// Attributes:
//  - NumTrues
//  - NumFalses
//  - NumNulls
//  - BitVectors
type BooleanColumnStatsData struct {
  NumTrues int64 `thrift:"numTrues,1,required" db:"numTrues" json:"numTrues"`
  NumFalses int64 `thrift:"numFalses,2,required" db:"numFalses" json:"numFalses"`
  NumNulls int64 `thrift:"numNulls,3,required" db:"numNulls" json:"numNulls"`
  BitVectors []byte `thrift:"bitVectors,4" db:"bitVectors" json:"bitVectors,omitempty"`
}

func NewBooleanColumnStatsData() *BooleanColumnStatsData {
  return &BooleanColumnStatsData{}
}


func (p *BooleanColumnStatsData) GetNumTrues() int64 {
  return p.NumTrues
}

func (p *BooleanColumnStatsData) GetNumFalses() int64 {
  return p.NumFalses
}

func (p *BooleanColumnStatsData) GetNumNulls() int64 {
  return p.NumNulls
}
var BooleanColumnStatsData_BitVectors_DEFAULT []byte

func (p *BooleanColumnStatsData) GetBitVectors() []byte {
  return p.BitVectors
}
func (p *BooleanColumnStatsData) IsSetBitVectors() bool {
  return p.BitVectors != nil
}

func (p *BooleanColumnStatsData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNumTrues bool = false;
  var issetNumFalses bool = false;
  var issetNumNulls bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetNumTrues = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetNumFalses = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetNumNulls = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNumTrues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumTrues is not set"));
  }
  if !issetNumFalses{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumFalses is not set"));
  }
  if !issetNumNulls{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumNulls is not set"));
  }
  return nil
}

func (p *BooleanColumnStatsData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumTrues = v
}
  return nil
}

func (p *BooleanColumnStatsData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumFalses = v
}
  return nil
}

func (p *BooleanColumnStatsData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumNulls = v
}
  return nil
}

func (p *BooleanColumnStatsData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.BitVectors = v
}
  return nil
}

func (p *BooleanColumnStatsData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BooleanColumnStatsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BooleanColumnStatsData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numTrues", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:numTrues: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumTrues)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numTrues (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:numTrues: ", p), err) }
  return err
}

func (p *BooleanColumnStatsData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numFalses", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numFalses: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumFalses)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numFalses (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numFalses: ", p), err) }
  return err
}

func (p *BooleanColumnStatsData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numNulls", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numNulls: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumNulls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numNulls (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numNulls: ", p), err) }
  return err
}

func (p *BooleanColumnStatsData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBitVectors() {
    if err := oprot.WriteFieldBegin(ctx, "bitVectors", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:bitVectors: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.BitVectors); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bitVectors (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:bitVectors: ", p), err) }
  }
  return err
}

func (p *BooleanColumnStatsData) Equals(other *BooleanColumnStatsData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.NumTrues != other.NumTrues { return false }
  if p.NumFalses != other.NumFalses { return false }
  if p.NumNulls != other.NumNulls { return false }
  if bytes.Compare(p.BitVectors, other.BitVectors) != 0 { return false }
  return true
}

func (p *BooleanColumnStatsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BooleanColumnStatsData(%+v)", *p)
}

// Attributes:
//  - LowValue
//  - HighValue
//  - NumNulls
//  - NumDVs
//  - BitVectors
type DoubleColumnStatsData struct {
  LowValue *float64 `thrift:"lowValue,1" db:"lowValue" json:"lowValue,omitempty"`
  HighValue *float64 `thrift:"highValue,2" db:"highValue" json:"highValue,omitempty"`
  NumNulls int64 `thrift:"numNulls,3,required" db:"numNulls" json:"numNulls"`
  NumDVs int64 `thrift:"numDVs,4,required" db:"numDVs" json:"numDVs"`
  BitVectors []byte `thrift:"bitVectors,5" db:"bitVectors" json:"bitVectors,omitempty"`
}

func NewDoubleColumnStatsData() *DoubleColumnStatsData {
  return &DoubleColumnStatsData{}
}

var DoubleColumnStatsData_LowValue_DEFAULT float64
func (p *DoubleColumnStatsData) GetLowValue() float64 {
  if !p.IsSetLowValue() {
    return DoubleColumnStatsData_LowValue_DEFAULT
  }
return *p.LowValue
}
var DoubleColumnStatsData_HighValue_DEFAULT float64
func (p *DoubleColumnStatsData) GetHighValue() float64 {
  if !p.IsSetHighValue() {
    return DoubleColumnStatsData_HighValue_DEFAULT
  }
return *p.HighValue
}

func (p *DoubleColumnStatsData) GetNumNulls() int64 {
  return p.NumNulls
}

func (p *DoubleColumnStatsData) GetNumDVs() int64 {
  return p.NumDVs
}
var DoubleColumnStatsData_BitVectors_DEFAULT []byte

func (p *DoubleColumnStatsData) GetBitVectors() []byte {
  return p.BitVectors
}
func (p *DoubleColumnStatsData) IsSetLowValue() bool {
  return p.LowValue != nil
}

func (p *DoubleColumnStatsData) IsSetHighValue() bool {
  return p.HighValue != nil
}

func (p *DoubleColumnStatsData) IsSetBitVectors() bool {
  return p.BitVectors != nil
}

func (p *DoubleColumnStatsData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNumNulls bool = false;
  var issetNumDVs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetNumNulls = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetNumDVs = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNumNulls{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumNulls is not set"));
  }
  if !issetNumDVs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumDVs is not set"));
  }
  return nil
}

func (p *DoubleColumnStatsData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LowValue = &v
}
  return nil
}

func (p *DoubleColumnStatsData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HighValue = &v
}
  return nil
}

func (p *DoubleColumnStatsData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumNulls = v
}
  return nil
}

func (p *DoubleColumnStatsData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumDVs = v
}
  return nil
}

func (p *DoubleColumnStatsData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BitVectors = v
}
  return nil
}

func (p *DoubleColumnStatsData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoubleColumnStatsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DoubleColumnStatsData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLowValue() {
    if err := oprot.WriteFieldBegin(ctx, "lowValue", thrift.DOUBLE, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lowValue: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.LowValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lowValue (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lowValue: ", p), err) }
  }
  return err
}

func (p *DoubleColumnStatsData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHighValue() {
    if err := oprot.WriteFieldBegin(ctx, "highValue", thrift.DOUBLE, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:highValue: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.HighValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.highValue (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:highValue: ", p), err) }
  }
  return err
}

func (p *DoubleColumnStatsData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numNulls", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numNulls: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumNulls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numNulls (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numNulls: ", p), err) }
  return err
}

func (p *DoubleColumnStatsData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numDVs", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numDVs: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumDVs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numDVs (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numDVs: ", p), err) }
  return err
}

func (p *DoubleColumnStatsData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBitVectors() {
    if err := oprot.WriteFieldBegin(ctx, "bitVectors", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bitVectors: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.BitVectors); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bitVectors (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bitVectors: ", p), err) }
  }
  return err
}

func (p *DoubleColumnStatsData) Equals(other *DoubleColumnStatsData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.LowValue != other.LowValue {
    if p.LowValue == nil || other.LowValue == nil {
      return false
    }
    if (*p.LowValue) != (*other.LowValue) { return false }
  }
  if p.HighValue != other.HighValue {
    if p.HighValue == nil || other.HighValue == nil {
      return false
    }
    if (*p.HighValue) != (*other.HighValue) { return false }
  }
  if p.NumNulls != other.NumNulls { return false }
  if p.NumDVs != other.NumDVs { return false }
  if bytes.Compare(p.BitVectors, other.BitVectors) != 0 { return false }
  return true
}

func (p *DoubleColumnStatsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DoubleColumnStatsData(%+v)", *p)
}

// Attributes:
//  - LowValue
//  - HighValue
//  - NumNulls
//  - NumDVs
//  - BitVectors
type LongColumnStatsData struct {
  LowValue *int64 `thrift:"lowValue,1" db:"lowValue" json:"lowValue,omitempty"`
  HighValue *int64 `thrift:"highValue,2" db:"highValue" json:"highValue,omitempty"`
  NumNulls int64 `thrift:"numNulls,3,required" db:"numNulls" json:"numNulls"`
  NumDVs int64 `thrift:"numDVs,4,required" db:"numDVs" json:"numDVs"`
  BitVectors []byte `thrift:"bitVectors,5" db:"bitVectors" json:"bitVectors,omitempty"`
}

func NewLongColumnStatsData() *LongColumnStatsData {
  return &LongColumnStatsData{}
}

var LongColumnStatsData_LowValue_DEFAULT int64
func (p *LongColumnStatsData) GetLowValue() int64 {
  if !p.IsSetLowValue() {
    return LongColumnStatsData_LowValue_DEFAULT
  }
return *p.LowValue
}
var LongColumnStatsData_HighValue_DEFAULT int64
func (p *LongColumnStatsData) GetHighValue() int64 {
  if !p.IsSetHighValue() {
    return LongColumnStatsData_HighValue_DEFAULT
  }
return *p.HighValue
}

func (p *LongColumnStatsData) GetNumNulls() int64 {
  return p.NumNulls
}

func (p *LongColumnStatsData) GetNumDVs() int64 {
  return p.NumDVs
}
var LongColumnStatsData_BitVectors_DEFAULT []byte

func (p *LongColumnStatsData) GetBitVectors() []byte {
  return p.BitVectors
}
func (p *LongColumnStatsData) IsSetLowValue() bool {
  return p.LowValue != nil
}

func (p *LongColumnStatsData) IsSetHighValue() bool {
  return p.HighValue != nil
}

func (p *LongColumnStatsData) IsSetBitVectors() bool {
  return p.BitVectors != nil
}

func (p *LongColumnStatsData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNumNulls bool = false;
  var issetNumDVs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetNumNulls = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetNumDVs = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNumNulls{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumNulls is not set"));
  }
  if !issetNumDVs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumDVs is not set"));
  }
  return nil
}

func (p *LongColumnStatsData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LowValue = &v
}
  return nil
}

func (p *LongColumnStatsData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HighValue = &v
}
  return nil
}

func (p *LongColumnStatsData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumNulls = v
}
  return nil
}

func (p *LongColumnStatsData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumDVs = v
}
  return nil
}

func (p *LongColumnStatsData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BitVectors = v
}
  return nil
}

func (p *LongColumnStatsData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LongColumnStatsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LongColumnStatsData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLowValue() {
    if err := oprot.WriteFieldBegin(ctx, "lowValue", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lowValue: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.LowValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lowValue (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lowValue: ", p), err) }
  }
  return err
}

func (p *LongColumnStatsData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHighValue() {
    if err := oprot.WriteFieldBegin(ctx, "highValue", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:highValue: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.HighValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.highValue (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:highValue: ", p), err) }
  }
  return err
}

func (p *LongColumnStatsData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numNulls", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numNulls: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumNulls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numNulls (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numNulls: ", p), err) }
  return err
}

func (p *LongColumnStatsData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numDVs", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numDVs: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumDVs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numDVs (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numDVs: ", p), err) }
  return err
}

func (p *LongColumnStatsData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBitVectors() {
    if err := oprot.WriteFieldBegin(ctx, "bitVectors", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bitVectors: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.BitVectors); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bitVectors (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bitVectors: ", p), err) }
  }
  return err
}

func (p *LongColumnStatsData) Equals(other *LongColumnStatsData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.LowValue != other.LowValue {
    if p.LowValue == nil || other.LowValue == nil {
      return false
    }
    if (*p.LowValue) != (*other.LowValue) { return false }
  }
  if p.HighValue != other.HighValue {
    if p.HighValue == nil || other.HighValue == nil {
      return false
    }
    if (*p.HighValue) != (*other.HighValue) { return false }
  }
  if p.NumNulls != other.NumNulls { return false }
  if p.NumDVs != other.NumDVs { return false }
  if bytes.Compare(p.BitVectors, other.BitVectors) != 0 { return false }
  return true
}

func (p *LongColumnStatsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LongColumnStatsData(%+v)", *p)
}

// Attributes:
//  - MaxColLen
//  - AvgColLen
//  - NumNulls
//  - NumDVs
//  - BitVectors
type StringColumnStatsData struct {
  MaxColLen int64 `thrift:"maxColLen,1,required" db:"maxColLen" json:"maxColLen"`
  AvgColLen float64 `thrift:"avgColLen,2,required" db:"avgColLen" json:"avgColLen"`
  NumNulls int64 `thrift:"numNulls,3,required" db:"numNulls" json:"numNulls"`
  NumDVs int64 `thrift:"numDVs,4,required" db:"numDVs" json:"numDVs"`
  BitVectors []byte `thrift:"bitVectors,5" db:"bitVectors" json:"bitVectors,omitempty"`
}

func NewStringColumnStatsData() *StringColumnStatsData {
  return &StringColumnStatsData{}
}


func (p *StringColumnStatsData) GetMaxColLen() int64 {
  return p.MaxColLen
}

func (p *StringColumnStatsData) GetAvgColLen() float64 {
  return p.AvgColLen
}

func (p *StringColumnStatsData) GetNumNulls() int64 {
  return p.NumNulls
}

func (p *StringColumnStatsData) GetNumDVs() int64 {
  return p.NumDVs
}
var StringColumnStatsData_BitVectors_DEFAULT []byte

func (p *StringColumnStatsData) GetBitVectors() []byte {
  return p.BitVectors
}
func (p *StringColumnStatsData) IsSetBitVectors() bool {
  return p.BitVectors != nil
}

func (p *StringColumnStatsData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMaxColLen bool = false;
  var issetAvgColLen bool = false;
  var issetNumNulls bool = false;
  var issetNumDVs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMaxColLen = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetAvgColLen = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetNumNulls = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetNumDVs = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMaxColLen{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxColLen is not set"));
  }
  if !issetAvgColLen{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AvgColLen is not set"));
  }
  if !issetNumNulls{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumNulls is not set"));
  }
  if !issetNumDVs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumDVs is not set"));
  }
  return nil
}

func (p *StringColumnStatsData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MaxColLen = v
}
  return nil
}

func (p *StringColumnStatsData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AvgColLen = v
}
  return nil
}

func (p *StringColumnStatsData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumNulls = v
}
  return nil
}

func (p *StringColumnStatsData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumDVs = v
}
  return nil
}

func (p *StringColumnStatsData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BitVectors = v
}
  return nil
}

func (p *StringColumnStatsData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StringColumnStatsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StringColumnStatsData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxColLen", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maxColLen: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MaxColLen)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxColLen (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maxColLen: ", p), err) }
  return err
}

func (p *StringColumnStatsData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "avgColLen", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:avgColLen: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.AvgColLen)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avgColLen (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:avgColLen: ", p), err) }
  return err
}

func (p *StringColumnStatsData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numNulls", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numNulls: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumNulls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numNulls (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numNulls: ", p), err) }
  return err
}

func (p *StringColumnStatsData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numDVs", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numDVs: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumDVs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numDVs (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numDVs: ", p), err) }
  return err
}

func (p *StringColumnStatsData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBitVectors() {
    if err := oprot.WriteFieldBegin(ctx, "bitVectors", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bitVectors: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.BitVectors); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bitVectors (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bitVectors: ", p), err) }
  }
  return err
}

func (p *StringColumnStatsData) Equals(other *StringColumnStatsData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.MaxColLen != other.MaxColLen { return false }
  if p.AvgColLen != other.AvgColLen { return false }
  if p.NumNulls != other.NumNulls { return false }
  if p.NumDVs != other.NumDVs { return false }
  if bytes.Compare(p.BitVectors, other.BitVectors) != 0 { return false }
  return true
}

func (p *StringColumnStatsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StringColumnStatsData(%+v)", *p)
}

// Attributes:
//  - MaxColLen
//  - AvgColLen
//  - NumNulls
//  - BitVectors
type BinaryColumnStatsData struct {
  MaxColLen int64 `thrift:"maxColLen,1,required" db:"maxColLen" json:"maxColLen"`
  AvgColLen float64 `thrift:"avgColLen,2,required" db:"avgColLen" json:"avgColLen"`
  NumNulls int64 `thrift:"numNulls,3,required" db:"numNulls" json:"numNulls"`
  BitVectors []byte `thrift:"bitVectors,4" db:"bitVectors" json:"bitVectors,omitempty"`
}

func NewBinaryColumnStatsData() *BinaryColumnStatsData {
  return &BinaryColumnStatsData{}
}


func (p *BinaryColumnStatsData) GetMaxColLen() int64 {
  return p.MaxColLen
}

func (p *BinaryColumnStatsData) GetAvgColLen() float64 {
  return p.AvgColLen
}

func (p *BinaryColumnStatsData) GetNumNulls() int64 {
  return p.NumNulls
}
var BinaryColumnStatsData_BitVectors_DEFAULT []byte

func (p *BinaryColumnStatsData) GetBitVectors() []byte {
  return p.BitVectors
}
func (p *BinaryColumnStatsData) IsSetBitVectors() bool {
  return p.BitVectors != nil
}

func (p *BinaryColumnStatsData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMaxColLen bool = false;
  var issetAvgColLen bool = false;
  var issetNumNulls bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMaxColLen = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetAvgColLen = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetNumNulls = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMaxColLen{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxColLen is not set"));
  }
  if !issetAvgColLen{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AvgColLen is not set"));
  }
  if !issetNumNulls{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumNulls is not set"));
  }
  return nil
}

func (p *BinaryColumnStatsData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MaxColLen = v
}
  return nil
}

func (p *BinaryColumnStatsData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AvgColLen = v
}
  return nil
}

func (p *BinaryColumnStatsData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumNulls = v
}
  return nil
}

func (p *BinaryColumnStatsData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.BitVectors = v
}
  return nil
}

func (p *BinaryColumnStatsData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BinaryColumnStatsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BinaryColumnStatsData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxColLen", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maxColLen: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MaxColLen)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxColLen (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maxColLen: ", p), err) }
  return err
}

func (p *BinaryColumnStatsData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "avgColLen", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:avgColLen: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.AvgColLen)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avgColLen (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:avgColLen: ", p), err) }
  return err
}

func (p *BinaryColumnStatsData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numNulls", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numNulls: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumNulls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numNulls (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numNulls: ", p), err) }
  return err
}

func (p *BinaryColumnStatsData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBitVectors() {
    if err := oprot.WriteFieldBegin(ctx, "bitVectors", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:bitVectors: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.BitVectors); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bitVectors (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:bitVectors: ", p), err) }
  }
  return err
}

func (p *BinaryColumnStatsData) Equals(other *BinaryColumnStatsData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.MaxColLen != other.MaxColLen { return false }
  if p.AvgColLen != other.AvgColLen { return false }
  if p.NumNulls != other.NumNulls { return false }
  if bytes.Compare(p.BitVectors, other.BitVectors) != 0 { return false }
  return true
}

func (p *BinaryColumnStatsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BinaryColumnStatsData(%+v)", *p)
}

// Attributes:
//  - Unscaled
//  - Scale
type Decimal struct {
  Unscaled []byte `thrift:"unscaled,1,required" db:"unscaled" json:"unscaled"`
  // unused field # 2
  Scale int16 `thrift:"scale,3,required" db:"scale" json:"scale"`
}

func NewDecimal() *Decimal {
  return &Decimal{}
}


func (p *Decimal) GetUnscaled() []byte {
  return p.Unscaled
}

func (p *Decimal) GetScale() int16 {
  return p.Scale
}
func (p *Decimal) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUnscaled bool = false;
  var issetScale bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetUnscaled = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetScale = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUnscaled{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unscaled is not set"));
  }
  if !issetScale{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Scale is not set"));
  }
  return nil
}

func (p *Decimal)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Unscaled = v
}
  return nil
}

func (p *Decimal)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Scale = v
}
  return nil
}

func (p *Decimal) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Decimal"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Decimal) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "unscaled", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unscaled: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Unscaled); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unscaled (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unscaled: ", p), err) }
  return err
}

func (p *Decimal) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "scale", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:scale: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Scale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scale (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:scale: ", p), err) }
  return err
}

func (p *Decimal) Equals(other *Decimal) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Unscaled, other.Unscaled) != 0 { return false }
  if p.Scale != other.Scale { return false }
  return true
}

func (p *Decimal) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Decimal(%+v)", *p)
}

// Attributes:
//  - LowValue
//  - HighValue
//  - NumNulls
//  - NumDVs
//  - BitVectors
type DecimalColumnStatsData struct {
  LowValue *Decimal `thrift:"lowValue,1" db:"lowValue" json:"lowValue,omitempty"`
  HighValue *Decimal `thrift:"highValue,2" db:"highValue" json:"highValue,omitempty"`
  NumNulls int64 `thrift:"numNulls,3,required" db:"numNulls" json:"numNulls"`
  NumDVs int64 `thrift:"numDVs,4,required" db:"numDVs" json:"numDVs"`
  BitVectors []byte `thrift:"bitVectors,5" db:"bitVectors" json:"bitVectors,omitempty"`
}

func NewDecimalColumnStatsData() *DecimalColumnStatsData {
  return &DecimalColumnStatsData{}
}

var DecimalColumnStatsData_LowValue_DEFAULT *Decimal
func (p *DecimalColumnStatsData) GetLowValue() *Decimal {
  if !p.IsSetLowValue() {
    return DecimalColumnStatsData_LowValue_DEFAULT
  }
return p.LowValue
}
var DecimalColumnStatsData_HighValue_DEFAULT *Decimal
func (p *DecimalColumnStatsData) GetHighValue() *Decimal {
  if !p.IsSetHighValue() {
    return DecimalColumnStatsData_HighValue_DEFAULT
  }
return p.HighValue
}

func (p *DecimalColumnStatsData) GetNumNulls() int64 {
  return p.NumNulls
}

func (p *DecimalColumnStatsData) GetNumDVs() int64 {
  return p.NumDVs
}
var DecimalColumnStatsData_BitVectors_DEFAULT []byte

func (p *DecimalColumnStatsData) GetBitVectors() []byte {
  return p.BitVectors
}
func (p *DecimalColumnStatsData) IsSetLowValue() bool {
  return p.LowValue != nil
}

func (p *DecimalColumnStatsData) IsSetHighValue() bool {
  return p.HighValue != nil
}

func (p *DecimalColumnStatsData) IsSetBitVectors() bool {
  return p.BitVectors != nil
}

func (p *DecimalColumnStatsData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNumNulls bool = false;
  var issetNumDVs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetNumNulls = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetNumDVs = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNumNulls{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumNulls is not set"));
  }
  if !issetNumDVs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumDVs is not set"));
  }
  return nil
}

func (p *DecimalColumnStatsData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.LowValue = &Decimal{}
  if err := p.LowValue.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LowValue), err)
  }
  return nil
}

func (p *DecimalColumnStatsData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.HighValue = &Decimal{}
  if err := p.HighValue.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HighValue), err)
  }
  return nil
}

func (p *DecimalColumnStatsData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumNulls = v
}
  return nil
}

func (p *DecimalColumnStatsData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumDVs = v
}
  return nil
}

func (p *DecimalColumnStatsData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BitVectors = v
}
  return nil
}

func (p *DecimalColumnStatsData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DecimalColumnStatsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DecimalColumnStatsData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLowValue() {
    if err := oprot.WriteFieldBegin(ctx, "lowValue", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lowValue: ", p), err) }
    if err := p.LowValue.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LowValue), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lowValue: ", p), err) }
  }
  return err
}

func (p *DecimalColumnStatsData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHighValue() {
    if err := oprot.WriteFieldBegin(ctx, "highValue", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:highValue: ", p), err) }
    if err := p.HighValue.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HighValue), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:highValue: ", p), err) }
  }
  return err
}

func (p *DecimalColumnStatsData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numNulls", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numNulls: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumNulls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numNulls (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numNulls: ", p), err) }
  return err
}

func (p *DecimalColumnStatsData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numDVs", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numDVs: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumDVs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numDVs (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numDVs: ", p), err) }
  return err
}

func (p *DecimalColumnStatsData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBitVectors() {
    if err := oprot.WriteFieldBegin(ctx, "bitVectors", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bitVectors: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.BitVectors); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bitVectors (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bitVectors: ", p), err) }
  }
  return err
}

func (p *DecimalColumnStatsData) Equals(other *DecimalColumnStatsData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.LowValue.Equals(other.LowValue) { return false }
  if !p.HighValue.Equals(other.HighValue) { return false }
  if p.NumNulls != other.NumNulls { return false }
  if p.NumDVs != other.NumDVs { return false }
  if bytes.Compare(p.BitVectors, other.BitVectors) != 0 { return false }
  return true
}

func (p *DecimalColumnStatsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DecimalColumnStatsData(%+v)", *p)
}

// Attributes:
//  - DaysSinceEpoch
type Date struct {
  DaysSinceEpoch int64 `thrift:"daysSinceEpoch,1,required" db:"daysSinceEpoch" json:"daysSinceEpoch"`
}

func NewDate() *Date {
  return &Date{}
}


func (p *Date) GetDaysSinceEpoch() int64 {
  return p.DaysSinceEpoch
}
func (p *Date) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDaysSinceEpoch bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDaysSinceEpoch = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDaysSinceEpoch{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DaysSinceEpoch is not set"));
  }
  return nil
}

func (p *Date)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DaysSinceEpoch = v
}
  return nil
}

func (p *Date) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Date"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Date) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "daysSinceEpoch", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:daysSinceEpoch: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.DaysSinceEpoch)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.daysSinceEpoch (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:daysSinceEpoch: ", p), err) }
  return err
}

func (p *Date) Equals(other *Date) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DaysSinceEpoch != other.DaysSinceEpoch { return false }
  return true
}

func (p *Date) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Date(%+v)", *p)
}

// Attributes:
//  - LowValue
//  - HighValue
//  - NumNulls
//  - NumDVs
//  - BitVectors
type DateColumnStatsData struct {
  LowValue *Date `thrift:"lowValue,1" db:"lowValue" json:"lowValue,omitempty"`
  HighValue *Date `thrift:"highValue,2" db:"highValue" json:"highValue,omitempty"`
  NumNulls int64 `thrift:"numNulls,3,required" db:"numNulls" json:"numNulls"`
  NumDVs int64 `thrift:"numDVs,4,required" db:"numDVs" json:"numDVs"`
  BitVectors []byte `thrift:"bitVectors,5" db:"bitVectors" json:"bitVectors,omitempty"`
}

func NewDateColumnStatsData() *DateColumnStatsData {
  return &DateColumnStatsData{}
}

var DateColumnStatsData_LowValue_DEFAULT *Date
func (p *DateColumnStatsData) GetLowValue() *Date {
  if !p.IsSetLowValue() {
    return DateColumnStatsData_LowValue_DEFAULT
  }
return p.LowValue
}
var DateColumnStatsData_HighValue_DEFAULT *Date
func (p *DateColumnStatsData) GetHighValue() *Date {
  if !p.IsSetHighValue() {
    return DateColumnStatsData_HighValue_DEFAULT
  }
return p.HighValue
}

func (p *DateColumnStatsData) GetNumNulls() int64 {
  return p.NumNulls
}

func (p *DateColumnStatsData) GetNumDVs() int64 {
  return p.NumDVs
}
var DateColumnStatsData_BitVectors_DEFAULT []byte

func (p *DateColumnStatsData) GetBitVectors() []byte {
  return p.BitVectors
}
func (p *DateColumnStatsData) IsSetLowValue() bool {
  return p.LowValue != nil
}

func (p *DateColumnStatsData) IsSetHighValue() bool {
  return p.HighValue != nil
}

func (p *DateColumnStatsData) IsSetBitVectors() bool {
  return p.BitVectors != nil
}

func (p *DateColumnStatsData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNumNulls bool = false;
  var issetNumDVs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetNumNulls = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetNumDVs = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNumNulls{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumNulls is not set"));
  }
  if !issetNumDVs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumDVs is not set"));
  }
  return nil
}

func (p *DateColumnStatsData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.LowValue = &Date{}
  if err := p.LowValue.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LowValue), err)
  }
  return nil
}

func (p *DateColumnStatsData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.HighValue = &Date{}
  if err := p.HighValue.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HighValue), err)
  }
  return nil
}

func (p *DateColumnStatsData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumNulls = v
}
  return nil
}

func (p *DateColumnStatsData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumDVs = v
}
  return nil
}

func (p *DateColumnStatsData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BitVectors = v
}
  return nil
}

func (p *DateColumnStatsData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DateColumnStatsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DateColumnStatsData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLowValue() {
    if err := oprot.WriteFieldBegin(ctx, "lowValue", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lowValue: ", p), err) }
    if err := p.LowValue.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LowValue), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lowValue: ", p), err) }
  }
  return err
}

func (p *DateColumnStatsData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHighValue() {
    if err := oprot.WriteFieldBegin(ctx, "highValue", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:highValue: ", p), err) }
    if err := p.HighValue.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HighValue), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:highValue: ", p), err) }
  }
  return err
}

func (p *DateColumnStatsData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numNulls", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numNulls: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumNulls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numNulls (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numNulls: ", p), err) }
  return err
}

func (p *DateColumnStatsData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numDVs", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numDVs: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NumDVs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numDVs (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numDVs: ", p), err) }
  return err
}

func (p *DateColumnStatsData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBitVectors() {
    if err := oprot.WriteFieldBegin(ctx, "bitVectors", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bitVectors: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.BitVectors); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bitVectors (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bitVectors: ", p), err) }
  }
  return err
}

func (p *DateColumnStatsData) Equals(other *DateColumnStatsData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.LowValue.Equals(other.LowValue) { return false }
  if !p.HighValue.Equals(other.HighValue) { return false }
  if p.NumNulls != other.NumNulls { return false }
  if p.NumDVs != other.NumDVs { return false }
  if bytes.Compare(p.BitVectors, other.BitVectors) != 0 { return false }
  return true
}

func (p *DateColumnStatsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DateColumnStatsData(%+v)", *p)
}

// Attributes:
//  - BooleanStats
//  - LongStats
//  - DoubleStats
//  - StringStats
//  - BinaryStats
//  - DecimalStats
//  - DateStats
type ColumnStatisticsData struct {
  BooleanStats *BooleanColumnStatsData `thrift:"booleanStats,1" db:"booleanStats" json:"booleanStats,omitempty"`
  LongStats *LongColumnStatsData `thrift:"longStats,2" db:"longStats" json:"longStats,omitempty"`
  DoubleStats *DoubleColumnStatsData `thrift:"doubleStats,3" db:"doubleStats" json:"doubleStats,omitempty"`
  StringStats *StringColumnStatsData `thrift:"stringStats,4" db:"stringStats" json:"stringStats,omitempty"`
  BinaryStats *BinaryColumnStatsData `thrift:"binaryStats,5" db:"binaryStats" json:"binaryStats,omitempty"`
  DecimalStats *DecimalColumnStatsData `thrift:"decimalStats,6" db:"decimalStats" json:"decimalStats,omitempty"`
  DateStats *DateColumnStatsData `thrift:"dateStats,7" db:"dateStats" json:"dateStats,omitempty"`
}

func NewColumnStatisticsData() *ColumnStatisticsData {
  return &ColumnStatisticsData{}
}

var ColumnStatisticsData_BooleanStats_DEFAULT *BooleanColumnStatsData
func (p *ColumnStatisticsData) GetBooleanStats() *BooleanColumnStatsData {
  if !p.IsSetBooleanStats() {
    return ColumnStatisticsData_BooleanStats_DEFAULT
  }
return p.BooleanStats
}
var ColumnStatisticsData_LongStats_DEFAULT *LongColumnStatsData
func (p *ColumnStatisticsData) GetLongStats() *LongColumnStatsData {
  if !p.IsSetLongStats() {
    return ColumnStatisticsData_LongStats_DEFAULT
  }
return p.LongStats
}
var ColumnStatisticsData_DoubleStats_DEFAULT *DoubleColumnStatsData
func (p *ColumnStatisticsData) GetDoubleStats() *DoubleColumnStatsData {
  if !p.IsSetDoubleStats() {
    return ColumnStatisticsData_DoubleStats_DEFAULT
  }
return p.DoubleStats
}
var ColumnStatisticsData_StringStats_DEFAULT *StringColumnStatsData
func (p *ColumnStatisticsData) GetStringStats() *StringColumnStatsData {
  if !p.IsSetStringStats() {
    return ColumnStatisticsData_StringStats_DEFAULT
  }
return p.StringStats
}
var ColumnStatisticsData_BinaryStats_DEFAULT *BinaryColumnStatsData
func (p *ColumnStatisticsData) GetBinaryStats() *BinaryColumnStatsData {
  if !p.IsSetBinaryStats() {
    return ColumnStatisticsData_BinaryStats_DEFAULT
  }
return p.BinaryStats
}
var ColumnStatisticsData_DecimalStats_DEFAULT *DecimalColumnStatsData
func (p *ColumnStatisticsData) GetDecimalStats() *DecimalColumnStatsData {
  if !p.IsSetDecimalStats() {
    return ColumnStatisticsData_DecimalStats_DEFAULT
  }
return p.DecimalStats
}
var ColumnStatisticsData_DateStats_DEFAULT *DateColumnStatsData
func (p *ColumnStatisticsData) GetDateStats() *DateColumnStatsData {
  if !p.IsSetDateStats() {
    return ColumnStatisticsData_DateStats_DEFAULT
  }
return p.DateStats
}
func (p *ColumnStatisticsData) CountSetFieldsColumnStatisticsData() int {
  count := 0
  if (p.IsSetBooleanStats()) {
    count++
  }
  if (p.IsSetLongStats()) {
    count++
  }
  if (p.IsSetDoubleStats()) {
    count++
  }
  if (p.IsSetStringStats()) {
    count++
  }
  if (p.IsSetBinaryStats()) {
    count++
  }
  if (p.IsSetDecimalStats()) {
    count++
  }
  if (p.IsSetDateStats()) {
    count++
  }
  return count

}

func (p *ColumnStatisticsData) IsSetBooleanStats() bool {
  return p.BooleanStats != nil
}

func (p *ColumnStatisticsData) IsSetLongStats() bool {
  return p.LongStats != nil
}

func (p *ColumnStatisticsData) IsSetDoubleStats() bool {
  return p.DoubleStats != nil
}

func (p *ColumnStatisticsData) IsSetStringStats() bool {
  return p.StringStats != nil
}

func (p *ColumnStatisticsData) IsSetBinaryStats() bool {
  return p.BinaryStats != nil
}

func (p *ColumnStatisticsData) IsSetDecimalStats() bool {
  return p.DecimalStats != nil
}

func (p *ColumnStatisticsData) IsSetDateStats() bool {
  return p.DateStats != nil
}

func (p *ColumnStatisticsData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ColumnStatisticsData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.BooleanStats = &BooleanColumnStatsData{}
  if err := p.BooleanStats.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BooleanStats), err)
  }
  return nil
}

func (p *ColumnStatisticsData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.LongStats = &LongColumnStatsData{}
  if err := p.LongStats.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LongStats), err)
  }
  return nil
}

func (p *ColumnStatisticsData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.DoubleStats = &DoubleColumnStatsData{}
  if err := p.DoubleStats.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DoubleStats), err)
  }
  return nil
}

func (p *ColumnStatisticsData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.StringStats = &StringColumnStatsData{}
  if err := p.StringStats.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StringStats), err)
  }
  return nil
}

func (p *ColumnStatisticsData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.BinaryStats = &BinaryColumnStatsData{}
  if err := p.BinaryStats.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BinaryStats), err)
  }
  return nil
}

func (p *ColumnStatisticsData)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.DecimalStats = &DecimalColumnStatsData{}
  if err := p.DecimalStats.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DecimalStats), err)
  }
  return nil
}

func (p *ColumnStatisticsData)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.DateStats = &DateColumnStatsData{}
  if err := p.DateStats.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DateStats), err)
  }
  return nil
}

func (p *ColumnStatisticsData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsColumnStatisticsData(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin(ctx, "ColumnStatisticsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnStatisticsData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBooleanStats() {
    if err := oprot.WriteFieldBegin(ctx, "booleanStats", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:booleanStats: ", p), err) }
    if err := p.BooleanStats.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BooleanStats), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:booleanStats: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLongStats() {
    if err := oprot.WriteFieldBegin(ctx, "longStats", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:longStats: ", p), err) }
    if err := p.LongStats.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LongStats), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:longStats: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDoubleStats() {
    if err := oprot.WriteFieldBegin(ctx, "doubleStats", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:doubleStats: ", p), err) }
    if err := p.DoubleStats.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DoubleStats), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:doubleStats: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStringStats() {
    if err := oprot.WriteFieldBegin(ctx, "stringStats", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stringStats: ", p), err) }
    if err := p.StringStats.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StringStats), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stringStats: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBinaryStats() {
    if err := oprot.WriteFieldBegin(ctx, "binaryStats", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:binaryStats: ", p), err) }
    if err := p.BinaryStats.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BinaryStats), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:binaryStats: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsData) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDecimalStats() {
    if err := oprot.WriteFieldBegin(ctx, "decimalStats", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:decimalStats: ", p), err) }
    if err := p.DecimalStats.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DecimalStats), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:decimalStats: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsData) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDateStats() {
    if err := oprot.WriteFieldBegin(ctx, "dateStats", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dateStats: ", p), err) }
    if err := p.DateStats.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DateStats), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dateStats: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsData) Equals(other *ColumnStatisticsData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.BooleanStats.Equals(other.BooleanStats) { return false }
  if !p.LongStats.Equals(other.LongStats) { return false }
  if !p.DoubleStats.Equals(other.DoubleStats) { return false }
  if !p.StringStats.Equals(other.StringStats) { return false }
  if !p.BinaryStats.Equals(other.BinaryStats) { return false }
  if !p.DecimalStats.Equals(other.DecimalStats) { return false }
  if !p.DateStats.Equals(other.DateStats) { return false }
  return true
}

func (p *ColumnStatisticsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnStatisticsData(%+v)", *p)
}

// Attributes:
//  - ColName
//  - ColType
//  - StatsData
type ColumnStatisticsObj struct {
  ColName string `thrift:"colName,1,required" db:"colName" json:"colName"`
  ColType string `thrift:"colType,2,required" db:"colType" json:"colType"`
  StatsData *ColumnStatisticsData `thrift:"statsData,3,required" db:"statsData" json:"statsData"`
}

func NewColumnStatisticsObj() *ColumnStatisticsObj {
  return &ColumnStatisticsObj{}
}


func (p *ColumnStatisticsObj) GetColName() string {
  return p.ColName
}

func (p *ColumnStatisticsObj) GetColType() string {
  return p.ColType
}
var ColumnStatisticsObj_StatsData_DEFAULT *ColumnStatisticsData
func (p *ColumnStatisticsObj) GetStatsData() *ColumnStatisticsData {
  if !p.IsSetStatsData() {
    return ColumnStatisticsObj_StatsData_DEFAULT
  }
return p.StatsData
}
func (p *ColumnStatisticsObj) IsSetStatsData() bool {
  return p.StatsData != nil
}

func (p *ColumnStatisticsObj) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetColName bool = false;
  var issetColType bool = false;
  var issetStatsData bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetColName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetColType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetStatsData = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetColName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ColName is not set"));
  }
  if !issetColType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ColType is not set"));
  }
  if !issetStatsData{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StatsData is not set"));
  }
  return nil
}

func (p *ColumnStatisticsObj)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ColName = v
}
  return nil
}

func (p *ColumnStatisticsObj)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ColType = v
}
  return nil
}

func (p *ColumnStatisticsObj)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.StatsData = &ColumnStatisticsData{}
  if err := p.StatsData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StatsData), err)
  }
  return nil
}

func (p *ColumnStatisticsObj) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ColumnStatisticsObj"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnStatisticsObj) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "colName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:colName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ColName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.colName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:colName: ", p), err) }
  return err
}

func (p *ColumnStatisticsObj) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "colType", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:colType: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ColType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.colType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:colType: ", p), err) }
  return err
}

func (p *ColumnStatisticsObj) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statsData", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:statsData: ", p), err) }
  if err := p.StatsData.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StatsData), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:statsData: ", p), err) }
  return err
}

func (p *ColumnStatisticsObj) Equals(other *ColumnStatisticsObj) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ColName != other.ColName { return false }
  if p.ColType != other.ColType { return false }
  if !p.StatsData.Equals(other.StatsData) { return false }
  return true
}

func (p *ColumnStatisticsObj) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnStatisticsObj(%+v)", *p)
}

// Attributes:
//  - IsTblLevel
//  - DbName
//  - TableName
//  - PartName
//  - LastAnalyzed
type ColumnStatisticsDesc struct {
  IsTblLevel bool `thrift:"isTblLevel,1,required" db:"isTblLevel" json:"isTblLevel"`
  DbName string `thrift:"dbName,2,required" db:"dbName" json:"dbName"`
  TableName string `thrift:"tableName,3,required" db:"tableName" json:"tableName"`
  PartName *string `thrift:"partName,4" db:"partName" json:"partName,omitempty"`
  LastAnalyzed *int64 `thrift:"lastAnalyzed,5" db:"lastAnalyzed" json:"lastAnalyzed,omitempty"`
}

func NewColumnStatisticsDesc() *ColumnStatisticsDesc {
  return &ColumnStatisticsDesc{}
}


func (p *ColumnStatisticsDesc) GetIsTblLevel() bool {
  return p.IsTblLevel
}

func (p *ColumnStatisticsDesc) GetDbName() string {
  return p.DbName
}

func (p *ColumnStatisticsDesc) GetTableName() string {
  return p.TableName
}
var ColumnStatisticsDesc_PartName_DEFAULT string
func (p *ColumnStatisticsDesc) GetPartName() string {
  if !p.IsSetPartName() {
    return ColumnStatisticsDesc_PartName_DEFAULT
  }
return *p.PartName
}
var ColumnStatisticsDesc_LastAnalyzed_DEFAULT int64
func (p *ColumnStatisticsDesc) GetLastAnalyzed() int64 {
  if !p.IsSetLastAnalyzed() {
    return ColumnStatisticsDesc_LastAnalyzed_DEFAULT
  }
return *p.LastAnalyzed
}
func (p *ColumnStatisticsDesc) IsSetPartName() bool {
  return p.PartName != nil
}

func (p *ColumnStatisticsDesc) IsSetLastAnalyzed() bool {
  return p.LastAnalyzed != nil
}

func (p *ColumnStatisticsDesc) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIsTblLevel bool = false;
  var issetDbName bool = false;
  var issetTableName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetIsTblLevel = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetTableName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIsTblLevel{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsTblLevel is not set"));
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTableName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TableName is not set"));
  }
  return nil
}

func (p *ColumnStatisticsDesc)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IsTblLevel = v
}
  return nil
}

func (p *ColumnStatisticsDesc)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ColumnStatisticsDesc)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *ColumnStatisticsDesc)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PartName = &v
}
  return nil
}

func (p *ColumnStatisticsDesc)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LastAnalyzed = &v
}
  return nil
}

func (p *ColumnStatisticsDesc) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ColumnStatisticsDesc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnStatisticsDesc) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isTblLevel", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:isTblLevel: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsTblLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isTblLevel (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:isTblLevel: ", p), err) }
  return err
}

func (p *ColumnStatisticsDesc) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbName: ", p), err) }
  return err
}

func (p *ColumnStatisticsDesc) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tableName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tableName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tableName: ", p), err) }
  return err
}

func (p *ColumnStatisticsDesc) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPartName() {
    if err := oprot.WriteFieldBegin(ctx, "partName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.PartName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.partName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partName: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsDesc) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLastAnalyzed() {
    if err := oprot.WriteFieldBegin(ctx, "lastAnalyzed", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastAnalyzed: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.LastAnalyzed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastAnalyzed (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastAnalyzed: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsDesc) Equals(other *ColumnStatisticsDesc) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IsTblLevel != other.IsTblLevel { return false }
  if p.DbName != other.DbName { return false }
  if p.TableName != other.TableName { return false }
  if p.PartName != other.PartName {
    if p.PartName == nil || other.PartName == nil {
      return false
    }
    if (*p.PartName) != (*other.PartName) { return false }
  }
  if p.LastAnalyzed != other.LastAnalyzed {
    if p.LastAnalyzed == nil || other.LastAnalyzed == nil {
      return false
    }
    if (*p.LastAnalyzed) != (*other.LastAnalyzed) { return false }
  }
  return true
}

func (p *ColumnStatisticsDesc) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnStatisticsDesc(%+v)", *p)
}

// Attributes:
//  - StatsDesc
//  - StatsObj
type ColumnStatistics struct {
  StatsDesc *ColumnStatisticsDesc `thrift:"statsDesc,1,required" db:"statsDesc" json:"statsDesc"`
  StatsObj []*ColumnStatisticsObj `thrift:"statsObj,2,required" db:"statsObj" json:"statsObj"`
}

func NewColumnStatistics() *ColumnStatistics {
  return &ColumnStatistics{}
}

var ColumnStatistics_StatsDesc_DEFAULT *ColumnStatisticsDesc
func (p *ColumnStatistics) GetStatsDesc() *ColumnStatisticsDesc {
  if !p.IsSetStatsDesc() {
    return ColumnStatistics_StatsDesc_DEFAULT
  }
return p.StatsDesc
}

func (p *ColumnStatistics) GetStatsObj() []*ColumnStatisticsObj {
  return p.StatsObj
}
func (p *ColumnStatistics) IsSetStatsDesc() bool {
  return p.StatsDesc != nil
}

func (p *ColumnStatistics) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatsDesc bool = false;
  var issetStatsObj bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetStatsDesc = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetStatsObj = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatsDesc{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StatsDesc is not set"));
  }
  if !issetStatsObj{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StatsObj is not set"));
  }
  return nil
}

func (p *ColumnStatistics)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.StatsDesc = &ColumnStatisticsDesc{}
  if err := p.StatsDesc.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StatsDesc), err)
  }
  return nil
}

func (p *ColumnStatistics)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ColumnStatisticsObj, 0, size)
  p.StatsObj =  tSlice
  for i := 0; i < size; i ++ {
    _elem71 := &ColumnStatisticsObj{}
    if err := _elem71.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem71), err)
    }
    p.StatsObj = append(p.StatsObj, _elem71)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ColumnStatistics) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ColumnStatistics"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnStatistics) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statsDesc", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:statsDesc: ", p), err) }
  if err := p.StatsDesc.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StatsDesc), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:statsDesc: ", p), err) }
  return err
}

func (p *ColumnStatistics) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statsObj", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:statsObj: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.StatsObj)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.StatsObj {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:statsObj: ", p), err) }
  return err
}

func (p *ColumnStatistics) Equals(other *ColumnStatistics) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.StatsDesc.Equals(other.StatsDesc) { return false }
  if len(p.StatsObj) != len(other.StatsObj) { return false }
  for i, _tgt := range p.StatsObj {
    _src72 := other.StatsObj[i]
    if !_tgt.Equals(_src72) { return false }
  }
  return true
}

func (p *ColumnStatistics) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnStatistics(%+v)", *p)
}

// Attributes:
//  - ColStats
//  - PartsFound
type AggrStats struct {
  ColStats []*ColumnStatisticsObj `thrift:"colStats,1,required" db:"colStats" json:"colStats"`
  PartsFound int64 `thrift:"partsFound,2,required" db:"partsFound" json:"partsFound"`
}

func NewAggrStats() *AggrStats {
  return &AggrStats{}
}


func (p *AggrStats) GetColStats() []*ColumnStatisticsObj {
  return p.ColStats
}

func (p *AggrStats) GetPartsFound() int64 {
  return p.PartsFound
}
func (p *AggrStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetColStats bool = false;
  var issetPartsFound bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetColStats = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetPartsFound = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetColStats{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ColStats is not set"));
  }
  if !issetPartsFound{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartsFound is not set"));
  }
  return nil
}

func (p *AggrStats)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ColumnStatisticsObj, 0, size)
  p.ColStats =  tSlice
  for i := 0; i < size; i ++ {
    _elem73 := &ColumnStatisticsObj{}
    if err := _elem73.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem73), err)
    }
    p.ColStats = append(p.ColStats, _elem73)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AggrStats)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PartsFound = v
}
  return nil
}

func (p *AggrStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AggrStats"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AggrStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "colStats", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:colStats: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ColStats)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColStats {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:colStats: ", p), err) }
  return err
}

func (p *AggrStats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partsFound", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partsFound: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PartsFound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partsFound (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partsFound: ", p), err) }
  return err
}

func (p *AggrStats) Equals(other *AggrStats) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ColStats) != len(other.ColStats) { return false }
  for i, _tgt := range p.ColStats {
    _src74 := other.ColStats[i]
    if !_tgt.Equals(_src74) { return false }
  }
  if p.PartsFound != other.PartsFound { return false }
  return true
}

func (p *AggrStats) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AggrStats(%+v)", *p)
}

// Attributes:
//  - ColStats
//  - NeedMerge
type SetPartitionsStatsRequest struct {
  ColStats []*ColumnStatistics `thrift:"colStats,1,required" db:"colStats" json:"colStats"`
  NeedMerge *bool `thrift:"needMerge,2" db:"needMerge" json:"needMerge,omitempty"`
}

func NewSetPartitionsStatsRequest() *SetPartitionsStatsRequest {
  return &SetPartitionsStatsRequest{}
}


func (p *SetPartitionsStatsRequest) GetColStats() []*ColumnStatistics {
  return p.ColStats
}
var SetPartitionsStatsRequest_NeedMerge_DEFAULT bool
func (p *SetPartitionsStatsRequest) GetNeedMerge() bool {
  if !p.IsSetNeedMerge() {
    return SetPartitionsStatsRequest_NeedMerge_DEFAULT
  }
return *p.NeedMerge
}
func (p *SetPartitionsStatsRequest) IsSetNeedMerge() bool {
  return p.NeedMerge != nil
}

func (p *SetPartitionsStatsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetColStats bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetColStats = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetColStats{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ColStats is not set"));
  }
  return nil
}

func (p *SetPartitionsStatsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ColumnStatistics, 0, size)
  p.ColStats =  tSlice
  for i := 0; i < size; i ++ {
    _elem75 := &ColumnStatistics{}
    if err := _elem75.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem75), err)
    }
    p.ColStats = append(p.ColStats, _elem75)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SetPartitionsStatsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NeedMerge = &v
}
  return nil
}

func (p *SetPartitionsStatsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SetPartitionsStatsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetPartitionsStatsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "colStats", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:colStats: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ColStats)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColStats {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:colStats: ", p), err) }
  return err
}

func (p *SetPartitionsStatsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedMerge() {
    if err := oprot.WriteFieldBegin(ctx, "needMerge", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:needMerge: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.NeedMerge)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.needMerge (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:needMerge: ", p), err) }
  }
  return err
}

func (p *SetPartitionsStatsRequest) Equals(other *SetPartitionsStatsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ColStats) != len(other.ColStats) { return false }
  for i, _tgt := range p.ColStats {
    _src76 := other.ColStats[i]
    if !_tgt.Equals(_src76) { return false }
  }
  if p.NeedMerge != other.NeedMerge {
    if p.NeedMerge == nil || other.NeedMerge == nil {
      return false
    }
    if (*p.NeedMerge) != (*other.NeedMerge) { return false }
  }
  return true
}

func (p *SetPartitionsStatsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetPartitionsStatsRequest(%+v)", *p)
}

// Attributes:
//  - FieldSchemas
//  - Properties
type Schema struct {
  FieldSchemas []*FieldSchema `thrift:"fieldSchemas,1" db:"fieldSchemas" json:"fieldSchemas"`
  Properties map[string]string `thrift:"properties,2" db:"properties" json:"properties"`
}

func NewSchema() *Schema {
  return &Schema{}
}


func (p *Schema) GetFieldSchemas() []*FieldSchema {
  return p.FieldSchemas
}

func (p *Schema) GetProperties() map[string]string {
  return p.Properties
}
func (p *Schema) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Schema)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.FieldSchemas =  tSlice
  for i := 0; i < size; i ++ {
    _elem77 := &FieldSchema{}
    if err := _elem77.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem77), err)
    }
    p.FieldSchemas = append(p.FieldSchemas, _elem77)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Schema)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Properties =  tMap
  for i := 0; i < size; i ++ {
var _key78 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key78 = v
}
var _val79 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val79 = v
}
    p.Properties[_key78] = _val79
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Schema) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Schema"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Schema) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fieldSchemas", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fieldSchemas: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.FieldSchemas)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FieldSchemas {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fieldSchemas: ", p), err) }
  return err
}

func (p *Schema) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "properties", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:properties: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Properties {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:properties: ", p), err) }
  return err
}

func (p *Schema) Equals(other *Schema) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.FieldSchemas) != len(other.FieldSchemas) { return false }
  for i, _tgt := range p.FieldSchemas {
    _src80 := other.FieldSchemas[i]
    if !_tgt.Equals(_src80) { return false }
  }
  if len(p.Properties) != len(other.Properties) { return false }
  for k, _tgt := range p.Properties {
    _src81 := other.Properties[k]
    if _tgt != _src81 { return false }
  }
  return true
}

func (p *Schema) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Schema(%+v)", *p)
}

// Attributes:
//  - Properties
type EnvironmentContext struct {
  Properties map[string]string `thrift:"properties,1" db:"properties" json:"properties"`
}

func NewEnvironmentContext() *EnvironmentContext {
  return &EnvironmentContext{}
}


func (p *EnvironmentContext) GetProperties() map[string]string {
  return p.Properties
}
func (p *EnvironmentContext) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EnvironmentContext)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Properties =  tMap
  for i := 0; i < size; i ++ {
var _key82 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key82 = v
}
var _val83 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val83 = v
}
    p.Properties[_key82] = _val83
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *EnvironmentContext) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "EnvironmentContext"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EnvironmentContext) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "properties", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:properties: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Properties {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:properties: ", p), err) }
  return err
}

func (p *EnvironmentContext) Equals(other *EnvironmentContext) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Properties) != len(other.Properties) { return false }
  for k, _tgt := range p.Properties {
    _src84 := other.Properties[k]
    if _tgt != _src84 { return false }
  }
  return true
}

func (p *EnvironmentContext) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnvironmentContext(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
type PrimaryKeysRequest struct {
  DbName string `thrift:"db_name,1,required" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2,required" db:"tbl_name" json:"tbl_name"`
}

func NewPrimaryKeysRequest() *PrimaryKeysRequest {
  return &PrimaryKeysRequest{}
}


func (p *PrimaryKeysRequest) GetDbName() string {
  return p.DbName
}

func (p *PrimaryKeysRequest) GetTblName() string {
  return p.TblName
}
func (p *PrimaryKeysRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbName bool = false;
  var issetTblName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTblName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTblName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TblName is not set"));
  }
  return nil
}

func (p *PrimaryKeysRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *PrimaryKeysRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *PrimaryKeysRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PrimaryKeysRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryKeysRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *PrimaryKeysRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *PrimaryKeysRequest) Equals(other *PrimaryKeysRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DbName != other.DbName { return false }
  if p.TblName != other.TblName { return false }
  return true
}

func (p *PrimaryKeysRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryKeysRequest(%+v)", *p)
}

// Attributes:
//  - PrimaryKeys
type PrimaryKeysResponse struct {
  PrimaryKeys []*SQLPrimaryKey `thrift:"primaryKeys,1,required" db:"primaryKeys" json:"primaryKeys"`
}

func NewPrimaryKeysResponse() *PrimaryKeysResponse {
  return &PrimaryKeysResponse{}
}


func (p *PrimaryKeysResponse) GetPrimaryKeys() []*SQLPrimaryKey {
  return p.PrimaryKeys
}
func (p *PrimaryKeysResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPrimaryKeys bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPrimaryKeys = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPrimaryKeys{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrimaryKeys is not set"));
  }
  return nil
}

func (p *PrimaryKeysResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SQLPrimaryKey, 0, size)
  p.PrimaryKeys =  tSlice
  for i := 0; i < size; i ++ {
    _elem85 := &SQLPrimaryKey{}
    if err := _elem85.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem85), err)
    }
    p.PrimaryKeys = append(p.PrimaryKeys, _elem85)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrimaryKeysResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PrimaryKeysResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryKeysResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "primaryKeys", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:primaryKeys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.PrimaryKeys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PrimaryKeys {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:primaryKeys: ", p), err) }
  return err
}

func (p *PrimaryKeysResponse) Equals(other *PrimaryKeysResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.PrimaryKeys) != len(other.PrimaryKeys) { return false }
  for i, _tgt := range p.PrimaryKeys {
    _src86 := other.PrimaryKeys[i]
    if !_tgt.Equals(_src86) { return false }
  }
  return true
}

func (p *PrimaryKeysResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryKeysResponse(%+v)", *p)
}

// Attributes:
//  - ParentDbName
//  - ParentTblName
//  - ForeignDbName
//  - ForeignTblName
type ForeignKeysRequest struct {
  ParentDbName string `thrift:"parent_db_name,1" db:"parent_db_name" json:"parent_db_name"`
  ParentTblName string `thrift:"parent_tbl_name,2" db:"parent_tbl_name" json:"parent_tbl_name"`
  ForeignDbName string `thrift:"foreign_db_name,3" db:"foreign_db_name" json:"foreign_db_name"`
  ForeignTblName string `thrift:"foreign_tbl_name,4" db:"foreign_tbl_name" json:"foreign_tbl_name"`
}

func NewForeignKeysRequest() *ForeignKeysRequest {
  return &ForeignKeysRequest{}
}


func (p *ForeignKeysRequest) GetParentDbName() string {
  return p.ParentDbName
}

func (p *ForeignKeysRequest) GetParentTblName() string {
  return p.ParentTblName
}

func (p *ForeignKeysRequest) GetForeignDbName() string {
  return p.ForeignDbName
}

func (p *ForeignKeysRequest) GetForeignTblName() string {
  return p.ForeignTblName
}
func (p *ForeignKeysRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ForeignKeysRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ParentDbName = v
}
  return nil
}

func (p *ForeignKeysRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ParentTblName = v
}
  return nil
}

func (p *ForeignKeysRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ForeignDbName = v
}
  return nil
}

func (p *ForeignKeysRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ForeignTblName = v
}
  return nil
}

func (p *ForeignKeysRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ForeignKeysRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ForeignKeysRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent_db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ParentDbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent_db_name: ", p), err) }
  return err
}

func (p *ForeignKeysRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parent_tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ParentTblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parent_tbl_name: ", p), err) }
  return err
}

func (p *ForeignKeysRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "foreign_db_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:foreign_db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ForeignDbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.foreign_db_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:foreign_db_name: ", p), err) }
  return err
}

func (p *ForeignKeysRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "foreign_tbl_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:foreign_tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ForeignTblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.foreign_tbl_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:foreign_tbl_name: ", p), err) }
  return err
}

func (p *ForeignKeysRequest) Equals(other *ForeignKeysRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ParentDbName != other.ParentDbName { return false }
  if p.ParentTblName != other.ParentTblName { return false }
  if p.ForeignDbName != other.ForeignDbName { return false }
  if p.ForeignTblName != other.ForeignTblName { return false }
  return true
}

func (p *ForeignKeysRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ForeignKeysRequest(%+v)", *p)
}

// Attributes:
//  - ForeignKeys
type ForeignKeysResponse struct {
  ForeignKeys []*SQLForeignKey `thrift:"foreignKeys,1,required" db:"foreignKeys" json:"foreignKeys"`
}

func NewForeignKeysResponse() *ForeignKeysResponse {
  return &ForeignKeysResponse{}
}


func (p *ForeignKeysResponse) GetForeignKeys() []*SQLForeignKey {
  return p.ForeignKeys
}
func (p *ForeignKeysResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetForeignKeys bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetForeignKeys = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetForeignKeys{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ForeignKeys is not set"));
  }
  return nil
}

func (p *ForeignKeysResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SQLForeignKey, 0, size)
  p.ForeignKeys =  tSlice
  for i := 0; i < size; i ++ {
    _elem87 := &SQLForeignKey{}
    if err := _elem87.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem87), err)
    }
    p.ForeignKeys = append(p.ForeignKeys, _elem87)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ForeignKeysResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ForeignKeysResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ForeignKeysResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "foreignKeys", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:foreignKeys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ForeignKeys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ForeignKeys {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:foreignKeys: ", p), err) }
  return err
}

func (p *ForeignKeysResponse) Equals(other *ForeignKeysResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ForeignKeys) != len(other.ForeignKeys) { return false }
  for i, _tgt := range p.ForeignKeys {
    _src88 := other.ForeignKeys[i]
    if !_tgt.Equals(_src88) { return false }
  }
  return true
}

func (p *ForeignKeysResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ForeignKeysResponse(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
type UniqueConstraintsRequest struct {
  DbName string `thrift:"db_name,1,required" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2,required" db:"tbl_name" json:"tbl_name"`
}

func NewUniqueConstraintsRequest() *UniqueConstraintsRequest {
  return &UniqueConstraintsRequest{}
}


func (p *UniqueConstraintsRequest) GetDbName() string {
  return p.DbName
}

func (p *UniqueConstraintsRequest) GetTblName() string {
  return p.TblName
}
func (p *UniqueConstraintsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbName bool = false;
  var issetTblName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTblName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTblName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TblName is not set"));
  }
  return nil
}

func (p *UniqueConstraintsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *UniqueConstraintsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *UniqueConstraintsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UniqueConstraintsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UniqueConstraintsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *UniqueConstraintsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *UniqueConstraintsRequest) Equals(other *UniqueConstraintsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DbName != other.DbName { return false }
  if p.TblName != other.TblName { return false }
  return true
}

func (p *UniqueConstraintsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UniqueConstraintsRequest(%+v)", *p)
}

// Attributes:
//  - UniqueConstraints
type UniqueConstraintsResponse struct {
  UniqueConstraints []*SQLUniqueConstraint `thrift:"uniqueConstraints,1,required" db:"uniqueConstraints" json:"uniqueConstraints"`
}

func NewUniqueConstraintsResponse() *UniqueConstraintsResponse {
  return &UniqueConstraintsResponse{}
}


func (p *UniqueConstraintsResponse) GetUniqueConstraints() []*SQLUniqueConstraint {
  return p.UniqueConstraints
}
func (p *UniqueConstraintsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUniqueConstraints bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetUniqueConstraints = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUniqueConstraints{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UniqueConstraints is not set"));
  }
  return nil
}

func (p *UniqueConstraintsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SQLUniqueConstraint, 0, size)
  p.UniqueConstraints =  tSlice
  for i := 0; i < size; i ++ {
    _elem89 := &SQLUniqueConstraint{}
    if err := _elem89.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem89), err)
    }
    p.UniqueConstraints = append(p.UniqueConstraints, _elem89)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UniqueConstraintsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UniqueConstraintsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UniqueConstraintsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uniqueConstraints", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uniqueConstraints: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.UniqueConstraints)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UniqueConstraints {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uniqueConstraints: ", p), err) }
  return err
}

func (p *UniqueConstraintsResponse) Equals(other *UniqueConstraintsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.UniqueConstraints) != len(other.UniqueConstraints) { return false }
  for i, _tgt := range p.UniqueConstraints {
    _src90 := other.UniqueConstraints[i]
    if !_tgt.Equals(_src90) { return false }
  }
  return true
}

func (p *UniqueConstraintsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UniqueConstraintsResponse(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
type NotNullConstraintsRequest struct {
  DbName string `thrift:"db_name,1,required" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2,required" db:"tbl_name" json:"tbl_name"`
}

func NewNotNullConstraintsRequest() *NotNullConstraintsRequest {
  return &NotNullConstraintsRequest{}
}


func (p *NotNullConstraintsRequest) GetDbName() string {
  return p.DbName
}

func (p *NotNullConstraintsRequest) GetTblName() string {
  return p.TblName
}
func (p *NotNullConstraintsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbName bool = false;
  var issetTblName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTblName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTblName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TblName is not set"));
  }
  return nil
}

func (p *NotNullConstraintsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *NotNullConstraintsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *NotNullConstraintsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NotNullConstraintsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotNullConstraintsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *NotNullConstraintsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *NotNullConstraintsRequest) Equals(other *NotNullConstraintsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DbName != other.DbName { return false }
  if p.TblName != other.TblName { return false }
  return true
}

func (p *NotNullConstraintsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotNullConstraintsRequest(%+v)", *p)
}

// Attributes:
//  - NotNullConstraints
type NotNullConstraintsResponse struct {
  NotNullConstraints []*SQLNotNullConstraint `thrift:"notNullConstraints,1,required" db:"notNullConstraints" json:"notNullConstraints"`
}

func NewNotNullConstraintsResponse() *NotNullConstraintsResponse {
  return &NotNullConstraintsResponse{}
}


func (p *NotNullConstraintsResponse) GetNotNullConstraints() []*SQLNotNullConstraint {
  return p.NotNullConstraints
}
func (p *NotNullConstraintsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNotNullConstraints bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetNotNullConstraints = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNotNullConstraints{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NotNullConstraints is not set"));
  }
  return nil
}

func (p *NotNullConstraintsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SQLNotNullConstraint, 0, size)
  p.NotNullConstraints =  tSlice
  for i := 0; i < size; i ++ {
    _elem91 := &SQLNotNullConstraint{}
    if err := _elem91.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem91), err)
    }
    p.NotNullConstraints = append(p.NotNullConstraints, _elem91)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NotNullConstraintsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NotNullConstraintsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotNullConstraintsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notNullConstraints", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notNullConstraints: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.NotNullConstraints)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NotNullConstraints {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notNullConstraints: ", p), err) }
  return err
}

func (p *NotNullConstraintsResponse) Equals(other *NotNullConstraintsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.NotNullConstraints) != len(other.NotNullConstraints) { return false }
  for i, _tgt := range p.NotNullConstraints {
    _src92 := other.NotNullConstraints[i]
    if !_tgt.Equals(_src92) { return false }
  }
  return true
}

func (p *NotNullConstraintsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotNullConstraintsResponse(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - Tablename
//  - Constraintname
type DropConstraintRequest struct {
  Dbname string `thrift:"dbname,1,required" db:"dbname" json:"dbname"`
  Tablename string `thrift:"tablename,2,required" db:"tablename" json:"tablename"`
  Constraintname string `thrift:"constraintname,3,required" db:"constraintname" json:"constraintname"`
}

func NewDropConstraintRequest() *DropConstraintRequest {
  return &DropConstraintRequest{}
}


func (p *DropConstraintRequest) GetDbname() string {
  return p.Dbname
}

func (p *DropConstraintRequest) GetTablename() string {
  return p.Tablename
}

func (p *DropConstraintRequest) GetConstraintname() string {
  return p.Constraintname
}
func (p *DropConstraintRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbname bool = false;
  var issetTablename bool = false;
  var issetConstraintname bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbname = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTablename = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetConstraintname = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Dbname is not set"));
  }
  if !issetTablename{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tablename is not set"));
  }
  if !issetConstraintname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Constraintname is not set"));
  }
  return nil
}

func (p *DropConstraintRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *DropConstraintRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tablename = v
}
  return nil
}

func (p *DropConstraintRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Constraintname = v
}
  return nil
}

func (p *DropConstraintRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropConstraintRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropConstraintRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *DropConstraintRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tablename", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tablename: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tablename)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tablename (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tablename: ", p), err) }
  return err
}

func (p *DropConstraintRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "constraintname", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:constraintname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Constraintname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.constraintname (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:constraintname: ", p), err) }
  return err
}

func (p *DropConstraintRequest) Equals(other *DropConstraintRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Dbname != other.Dbname { return false }
  if p.Tablename != other.Tablename { return false }
  if p.Constraintname != other.Constraintname { return false }
  return true
}

func (p *DropConstraintRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropConstraintRequest(%+v)", *p)
}

// Attributes:
//  - PrimaryKeyCols
type AddPrimaryKeyRequest struct {
  PrimaryKeyCols []*SQLPrimaryKey `thrift:"primaryKeyCols,1,required" db:"primaryKeyCols" json:"primaryKeyCols"`
}

func NewAddPrimaryKeyRequest() *AddPrimaryKeyRequest {
  return &AddPrimaryKeyRequest{}
}


func (p *AddPrimaryKeyRequest) GetPrimaryKeyCols() []*SQLPrimaryKey {
  return p.PrimaryKeyCols
}
func (p *AddPrimaryKeyRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPrimaryKeyCols bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPrimaryKeyCols = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPrimaryKeyCols{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrimaryKeyCols is not set"));
  }
  return nil
}

func (p *AddPrimaryKeyRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SQLPrimaryKey, 0, size)
  p.PrimaryKeyCols =  tSlice
  for i := 0; i < size; i ++ {
    _elem93 := &SQLPrimaryKey{}
    if err := _elem93.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem93), err)
    }
    p.PrimaryKeyCols = append(p.PrimaryKeyCols, _elem93)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddPrimaryKeyRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddPrimaryKeyRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddPrimaryKeyRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "primaryKeyCols", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:primaryKeyCols: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.PrimaryKeyCols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PrimaryKeyCols {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:primaryKeyCols: ", p), err) }
  return err
}

func (p *AddPrimaryKeyRequest) Equals(other *AddPrimaryKeyRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.PrimaryKeyCols) != len(other.PrimaryKeyCols) { return false }
  for i, _tgt := range p.PrimaryKeyCols {
    _src94 := other.PrimaryKeyCols[i]
    if !_tgt.Equals(_src94) { return false }
  }
  return true
}

func (p *AddPrimaryKeyRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddPrimaryKeyRequest(%+v)", *p)
}

// Attributes:
//  - ForeignKeyCols
type AddForeignKeyRequest struct {
  ForeignKeyCols []*SQLForeignKey `thrift:"foreignKeyCols,1,required" db:"foreignKeyCols" json:"foreignKeyCols"`
}

func NewAddForeignKeyRequest() *AddForeignKeyRequest {
  return &AddForeignKeyRequest{}
}


func (p *AddForeignKeyRequest) GetForeignKeyCols() []*SQLForeignKey {
  return p.ForeignKeyCols
}
func (p *AddForeignKeyRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetForeignKeyCols bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetForeignKeyCols = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetForeignKeyCols{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ForeignKeyCols is not set"));
  }
  return nil
}

func (p *AddForeignKeyRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SQLForeignKey, 0, size)
  p.ForeignKeyCols =  tSlice
  for i := 0; i < size; i ++ {
    _elem95 := &SQLForeignKey{}
    if err := _elem95.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem95), err)
    }
    p.ForeignKeyCols = append(p.ForeignKeyCols, _elem95)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddForeignKeyRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddForeignKeyRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddForeignKeyRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "foreignKeyCols", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:foreignKeyCols: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ForeignKeyCols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ForeignKeyCols {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:foreignKeyCols: ", p), err) }
  return err
}

func (p *AddForeignKeyRequest) Equals(other *AddForeignKeyRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ForeignKeyCols) != len(other.ForeignKeyCols) { return false }
  for i, _tgt := range p.ForeignKeyCols {
    _src96 := other.ForeignKeyCols[i]
    if !_tgt.Equals(_src96) { return false }
  }
  return true
}

func (p *AddForeignKeyRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddForeignKeyRequest(%+v)", *p)
}

// Attributes:
//  - UniqueConstraintCols
type AddUniqueConstraintRequest struct {
  UniqueConstraintCols []*SQLUniqueConstraint `thrift:"uniqueConstraintCols,1,required" db:"uniqueConstraintCols" json:"uniqueConstraintCols"`
}

func NewAddUniqueConstraintRequest() *AddUniqueConstraintRequest {
  return &AddUniqueConstraintRequest{}
}


func (p *AddUniqueConstraintRequest) GetUniqueConstraintCols() []*SQLUniqueConstraint {
  return p.UniqueConstraintCols
}
func (p *AddUniqueConstraintRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUniqueConstraintCols bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetUniqueConstraintCols = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUniqueConstraintCols{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UniqueConstraintCols is not set"));
  }
  return nil
}

func (p *AddUniqueConstraintRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SQLUniqueConstraint, 0, size)
  p.UniqueConstraintCols =  tSlice
  for i := 0; i < size; i ++ {
    _elem97 := &SQLUniqueConstraint{}
    if err := _elem97.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem97), err)
    }
    p.UniqueConstraintCols = append(p.UniqueConstraintCols, _elem97)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddUniqueConstraintRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddUniqueConstraintRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddUniqueConstraintRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uniqueConstraintCols", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uniqueConstraintCols: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.UniqueConstraintCols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UniqueConstraintCols {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uniqueConstraintCols: ", p), err) }
  return err
}

func (p *AddUniqueConstraintRequest) Equals(other *AddUniqueConstraintRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.UniqueConstraintCols) != len(other.UniqueConstraintCols) { return false }
  for i, _tgt := range p.UniqueConstraintCols {
    _src98 := other.UniqueConstraintCols[i]
    if !_tgt.Equals(_src98) { return false }
  }
  return true
}

func (p *AddUniqueConstraintRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddUniqueConstraintRequest(%+v)", *p)
}

// Attributes:
//  - NotNullConstraintCols
type AddNotNullConstraintRequest struct {
  NotNullConstraintCols []*SQLNotNullConstraint `thrift:"notNullConstraintCols,1,required" db:"notNullConstraintCols" json:"notNullConstraintCols"`
}

func NewAddNotNullConstraintRequest() *AddNotNullConstraintRequest {
  return &AddNotNullConstraintRequest{}
}


func (p *AddNotNullConstraintRequest) GetNotNullConstraintCols() []*SQLNotNullConstraint {
  return p.NotNullConstraintCols
}
func (p *AddNotNullConstraintRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNotNullConstraintCols bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetNotNullConstraintCols = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNotNullConstraintCols{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NotNullConstraintCols is not set"));
  }
  return nil
}

func (p *AddNotNullConstraintRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SQLNotNullConstraint, 0, size)
  p.NotNullConstraintCols =  tSlice
  for i := 0; i < size; i ++ {
    _elem99 := &SQLNotNullConstraint{}
    if err := _elem99.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem99), err)
    }
    p.NotNullConstraintCols = append(p.NotNullConstraintCols, _elem99)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddNotNullConstraintRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddNotNullConstraintRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddNotNullConstraintRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notNullConstraintCols", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notNullConstraintCols: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.NotNullConstraintCols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NotNullConstraintCols {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notNullConstraintCols: ", p), err) }
  return err
}

func (p *AddNotNullConstraintRequest) Equals(other *AddNotNullConstraintRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.NotNullConstraintCols) != len(other.NotNullConstraintCols) { return false }
  for i, _tgt := range p.NotNullConstraintCols {
    _src100 := other.NotNullConstraintCols[i]
    if !_tgt.Equals(_src100) { return false }
  }
  return true
}

func (p *AddNotNullConstraintRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddNotNullConstraintRequest(%+v)", *p)
}

// Attributes:
//  - Partitions
//  - HasUnknownPartitions
type PartitionsByExprResult_ struct {
  Partitions []*Partition `thrift:"partitions,1,required" db:"partitions" json:"partitions"`
  HasUnknownPartitions bool `thrift:"hasUnknownPartitions,2,required" db:"hasUnknownPartitions" json:"hasUnknownPartitions"`
}

func NewPartitionsByExprResult_() *PartitionsByExprResult_ {
  return &PartitionsByExprResult_{}
}


func (p *PartitionsByExprResult_) GetPartitions() []*Partition {
  return p.Partitions
}

func (p *PartitionsByExprResult_) GetHasUnknownPartitions() bool {
  return p.HasUnknownPartitions
}
func (p *PartitionsByExprResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPartitions bool = false;
  var issetHasUnknownPartitions bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPartitions = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetHasUnknownPartitions = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPartitions{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Partitions is not set"));
  }
  if !issetHasUnknownPartitions{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HasUnknownPartitions is not set"));
  }
  return nil
}

func (p *PartitionsByExprResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Partitions =  tSlice
  for i := 0; i < size; i ++ {
    _elem101 := &Partition{}
    if err := _elem101.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem101), err)
    }
    p.Partitions = append(p.Partitions, _elem101)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartitionsByExprResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HasUnknownPartitions = v
}
  return nil
}

func (p *PartitionsByExprResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartitionsByExprResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionsByExprResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitions", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partitions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Partitions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Partitions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partitions: ", p), err) }
  return err
}

func (p *PartitionsByExprResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hasUnknownPartitions", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hasUnknownPartitions: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HasUnknownPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasUnknownPartitions (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hasUnknownPartitions: ", p), err) }
  return err
}

func (p *PartitionsByExprResult_) Equals(other *PartitionsByExprResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Partitions) != len(other.Partitions) { return false }
  for i, _tgt := range p.Partitions {
    _src102 := other.Partitions[i]
    if !_tgt.Equals(_src102) { return false }
  }
  if p.HasUnknownPartitions != other.HasUnknownPartitions { return false }
  return true
}

func (p *PartitionsByExprResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionsByExprResult_(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - Expr
//  - DefaultPartitionName
//  - MaxParts
type PartitionsByExprRequest struct {
  DbName string `thrift:"dbName,1,required" db:"dbName" json:"dbName"`
  TblName string `thrift:"tblName,2,required" db:"tblName" json:"tblName"`
  Expr []byte `thrift:"expr,3,required" db:"expr" json:"expr"`
  DefaultPartitionName *string `thrift:"defaultPartitionName,4" db:"defaultPartitionName" json:"defaultPartitionName,omitempty"`
  MaxParts int16 `thrift:"maxParts,5" db:"maxParts" json:"maxParts"`
}

func NewPartitionsByExprRequest() *PartitionsByExprRequest {
  return &PartitionsByExprRequest{
MaxParts: -1,
}
}


func (p *PartitionsByExprRequest) GetDbName() string {
  return p.DbName
}

func (p *PartitionsByExprRequest) GetTblName() string {
  return p.TblName
}

func (p *PartitionsByExprRequest) GetExpr() []byte {
  return p.Expr
}
var PartitionsByExprRequest_DefaultPartitionName_DEFAULT string
func (p *PartitionsByExprRequest) GetDefaultPartitionName() string {
  if !p.IsSetDefaultPartitionName() {
    return PartitionsByExprRequest_DefaultPartitionName_DEFAULT
  }
return *p.DefaultPartitionName
}
var PartitionsByExprRequest_MaxParts_DEFAULT int16 = -1

func (p *PartitionsByExprRequest) GetMaxParts() int16 {
  return p.MaxParts
}
func (p *PartitionsByExprRequest) IsSetDefaultPartitionName() bool {
  return p.DefaultPartitionName != nil
}

func (p *PartitionsByExprRequest) IsSetMaxParts() bool {
  return p.MaxParts != PartitionsByExprRequest_MaxParts_DEFAULT
}

func (p *PartitionsByExprRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbName bool = false;
  var issetTblName bool = false;
  var issetExpr bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTblName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetExpr = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTblName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TblName is not set"));
  }
  if !issetExpr{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Expr is not set"));
  }
  return nil
}

func (p *PartitionsByExprRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *PartitionsByExprRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *PartitionsByExprRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Expr = v
}
  return nil
}

func (p *PartitionsByExprRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DefaultPartitionName = &v
}
  return nil
}

func (p *PartitionsByExprRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *PartitionsByExprRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartitionsByExprRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionsByExprRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *PartitionsByExprRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tblName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tblName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tblName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tblName: ", p), err) }
  return err
}

func (p *PartitionsByExprRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expr", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expr: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Expr); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expr: ", p), err) }
  return err
}

func (p *PartitionsByExprRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultPartitionName() {
    if err := oprot.WriteFieldBegin(ctx, "defaultPartitionName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:defaultPartitionName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.DefaultPartitionName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultPartitionName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:defaultPartitionName: ", p), err) }
  }
  return err
}

func (p *PartitionsByExprRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxParts() {
    if err := oprot.WriteFieldBegin(ctx, "maxParts", thrift.I16, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxParts: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(p.MaxParts)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxParts (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxParts: ", p), err) }
  }
  return err
}

func (p *PartitionsByExprRequest) Equals(other *PartitionsByExprRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DbName != other.DbName { return false }
  if p.TblName != other.TblName { return false }
  if bytes.Compare(p.Expr, other.Expr) != 0 { return false }
  if p.DefaultPartitionName != other.DefaultPartitionName {
    if p.DefaultPartitionName == nil || other.DefaultPartitionName == nil {
      return false
    }
    if (*p.DefaultPartitionName) != (*other.DefaultPartitionName) { return false }
  }
  if p.MaxParts != other.MaxParts { return false }
  return true
}

func (p *PartitionsByExprRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionsByExprRequest(%+v)", *p)
}

// Attributes:
//  - TableStats
type TableStatsResult_ struct {
  TableStats []*ColumnStatisticsObj `thrift:"tableStats,1,required" db:"tableStats" json:"tableStats"`
}

func NewTableStatsResult_() *TableStatsResult_ {
  return &TableStatsResult_{}
}


func (p *TableStatsResult_) GetTableStats() []*ColumnStatisticsObj {
  return p.TableStats
}
func (p *TableStatsResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTableStats bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetTableStats = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTableStats{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TableStats is not set"));
  }
  return nil
}

func (p *TableStatsResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ColumnStatisticsObj, 0, size)
  p.TableStats =  tSlice
  for i := 0; i < size; i ++ {
    _elem103 := &ColumnStatisticsObj{}
    if err := _elem103.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem103), err)
    }
    p.TableStats = append(p.TableStats, _elem103)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TableStatsResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TableStatsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TableStatsResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tableStats", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableStats: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.TableStats)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TableStats {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableStats: ", p), err) }
  return err
}

func (p *TableStatsResult_) Equals(other *TableStatsResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.TableStats) != len(other.TableStats) { return false }
  for i, _tgt := range p.TableStats {
    _src104 := other.TableStats[i]
    if !_tgt.Equals(_src104) { return false }
  }
  return true
}

func (p *TableStatsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TableStatsResult_(%+v)", *p)
}

// Attributes:
//  - PartStats
type PartitionsStatsResult_ struct {
  PartStats map[string][]*ColumnStatisticsObj `thrift:"partStats,1,required" db:"partStats" json:"partStats"`
}

func NewPartitionsStatsResult_() *PartitionsStatsResult_ {
  return &PartitionsStatsResult_{}
}


func (p *PartitionsStatsResult_) GetPartStats() map[string][]*ColumnStatisticsObj {
  return p.PartStats
}
func (p *PartitionsStatsResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPartStats bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPartStats = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPartStats{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartStats is not set"));
  }
  return nil
}

func (p *PartitionsStatsResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*ColumnStatisticsObj, size)
  p.PartStats =  tMap
  for i := 0; i < size; i ++ {
var _key105 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key105 = v
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*ColumnStatisticsObj, 0, size)
    _val106 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem107 := &ColumnStatisticsObj{}
      if err := _elem107.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem107), err)
      }
      _val106 = append(_val106, _elem107)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.PartStats[_key105] = _val106
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PartitionsStatsResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartitionsStatsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionsStatsResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partStats", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partStats: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.LIST, len(p.PartStats)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PartStats {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partStats: ", p), err) }
  return err
}

func (p *PartitionsStatsResult_) Equals(other *PartitionsStatsResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.PartStats) != len(other.PartStats) { return false }
  for k, _tgt := range p.PartStats {
    _src108 := other.PartStats[k]
    if len(_tgt) != len(_src108) { return false }
    for i, _tgt := range _tgt {
      _src109 := _src108[i]
      if !_tgt.Equals(_src109) { return false }
    }
  }
  return true
}

func (p *PartitionsStatsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionsStatsResult_(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - ColNames
type TableStatsRequest struct {
  DbName string `thrift:"dbName,1,required" db:"dbName" json:"dbName"`
  TblName string `thrift:"tblName,2,required" db:"tblName" json:"tblName"`
  ColNames []string `thrift:"colNames,3,required" db:"colNames" json:"colNames"`
}

func NewTableStatsRequest() *TableStatsRequest {
  return &TableStatsRequest{}
}


func (p *TableStatsRequest) GetDbName() string {
  return p.DbName
}

func (p *TableStatsRequest) GetTblName() string {
  return p.TblName
}

func (p *TableStatsRequest) GetColNames() []string {
  return p.ColNames
}
func (p *TableStatsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbName bool = false;
  var issetTblName bool = false;
  var issetColNames bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTblName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetColNames = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTblName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TblName is not set"));
  }
  if !issetColNames{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ColNames is not set"));
  }
  return nil
}

func (p *TableStatsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *TableStatsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *TableStatsRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ColNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem110 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem110 = v
}
    p.ColNames = append(p.ColNames, _elem110)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TableStatsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TableStatsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TableStatsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *TableStatsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tblName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tblName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tblName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tblName: ", p), err) }
  return err
}

func (p *TableStatsRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "colNames", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:colNames: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ColNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColNames {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:colNames: ", p), err) }
  return err
}

func (p *TableStatsRequest) Equals(other *TableStatsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DbName != other.DbName { return false }
  if p.TblName != other.TblName { return false }
  if len(p.ColNames) != len(other.ColNames) { return false }
  for i, _tgt := range p.ColNames {
    _src111 := other.ColNames[i]
    if _tgt != _src111 { return false }
  }
  return true
}

func (p *TableStatsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TableStatsRequest(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - ColNames
//  - PartNames
type PartitionsStatsRequest struct {
  DbName string `thrift:"dbName,1,required" db:"dbName" json:"dbName"`
  TblName string `thrift:"tblName,2,required" db:"tblName" json:"tblName"`
  ColNames []string `thrift:"colNames,3,required" db:"colNames" json:"colNames"`
  PartNames []string `thrift:"partNames,4,required" db:"partNames" json:"partNames"`
}

func NewPartitionsStatsRequest() *PartitionsStatsRequest {
  return &PartitionsStatsRequest{}
}


func (p *PartitionsStatsRequest) GetDbName() string {
  return p.DbName
}

func (p *PartitionsStatsRequest) GetTblName() string {
  return p.TblName
}

func (p *PartitionsStatsRequest) GetColNames() []string {
  return p.ColNames
}

func (p *PartitionsStatsRequest) GetPartNames() []string {
  return p.PartNames
}
func (p *PartitionsStatsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbName bool = false;
  var issetTblName bool = false;
  var issetColNames bool = false;
  var issetPartNames bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTblName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetColNames = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetPartNames = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTblName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TblName is not set"));
  }
  if !issetColNames{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ColNames is not set"));
  }
  if !issetPartNames{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartNames is not set"));
  }
  return nil
}

func (p *PartitionsStatsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *PartitionsStatsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *PartitionsStatsRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ColNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem112 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem112 = v
}
    p.ColNames = append(p.ColNames, _elem112)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartitionsStatsRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem113 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem113 = v
}
    p.PartNames = append(p.PartNames, _elem113)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartitionsStatsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartitionsStatsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionsStatsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *PartitionsStatsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tblName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tblName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tblName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tblName: ", p), err) }
  return err
}

func (p *PartitionsStatsRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "colNames", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:colNames: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ColNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColNames {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:colNames: ", p), err) }
  return err
}

func (p *PartitionsStatsRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partNames", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partNames: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartNames {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partNames: ", p), err) }
  return err
}

func (p *PartitionsStatsRequest) Equals(other *PartitionsStatsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DbName != other.DbName { return false }
  if p.TblName != other.TblName { return false }
  if len(p.ColNames) != len(other.ColNames) { return false }
  for i, _tgt := range p.ColNames {
    _src114 := other.ColNames[i]
    if _tgt != _src114 { return false }
  }
  if len(p.PartNames) != len(other.PartNames) { return false }
  for i, _tgt := range p.PartNames {
    _src115 := other.PartNames[i]
    if _tgt != _src115 { return false }
  }
  return true
}

func (p *PartitionsStatsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionsStatsRequest(%+v)", *p)
}

// Attributes:
//  - Partitions
type AddPartitionsResult_ struct {
  Partitions []*Partition `thrift:"partitions,1" db:"partitions" json:"partitions,omitempty"`
}

func NewAddPartitionsResult_() *AddPartitionsResult_ {
  return &AddPartitionsResult_{}
}

var AddPartitionsResult__Partitions_DEFAULT []*Partition

func (p *AddPartitionsResult_) GetPartitions() []*Partition {
  return p.Partitions
}
func (p *AddPartitionsResult_) IsSetPartitions() bool {
  return p.Partitions != nil
}

func (p *AddPartitionsResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddPartitionsResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Partitions =  tSlice
  for i := 0; i < size; i ++ {
    _elem116 := &Partition{}
    if err := _elem116.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem116), err)
    }
    p.Partitions = append(p.Partitions, _elem116)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddPartitionsResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddPartitionsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddPartitionsResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPartitions() {
    if err := oprot.WriteFieldBegin(ctx, "partitions", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partitions: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Partitions)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Partitions {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partitions: ", p), err) }
  }
  return err
}

func (p *AddPartitionsResult_) Equals(other *AddPartitionsResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Partitions) != len(other.Partitions) { return false }
  for i, _tgt := range p.Partitions {
    _src117 := other.Partitions[i]
    if !_tgt.Equals(_src117) { return false }
  }
  return true
}

func (p *AddPartitionsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddPartitionsResult_(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - Parts
//  - IfNotExists
//  - NeedResult_
type AddPartitionsRequest struct {
  DbName string `thrift:"dbName,1,required" db:"dbName" json:"dbName"`
  TblName string `thrift:"tblName,2,required" db:"tblName" json:"tblName"`
  Parts []*Partition `thrift:"parts,3,required" db:"parts" json:"parts"`
  IfNotExists bool `thrift:"ifNotExists,4,required" db:"ifNotExists" json:"ifNotExists"`
  NeedResult_ bool `thrift:"needResult,5" db:"needResult" json:"needResult"`
}

func NewAddPartitionsRequest() *AddPartitionsRequest {
  return &AddPartitionsRequest{
NeedResult_: true,
}
}


func (p *AddPartitionsRequest) GetDbName() string {
  return p.DbName
}

func (p *AddPartitionsRequest) GetTblName() string {
  return p.TblName
}

func (p *AddPartitionsRequest) GetParts() []*Partition {
  return p.Parts
}

func (p *AddPartitionsRequest) GetIfNotExists() bool {
  return p.IfNotExists
}
var AddPartitionsRequest_NeedResult__DEFAULT bool = true

func (p *AddPartitionsRequest) GetNeedResult_() bool {
  return p.NeedResult_
}
func (p *AddPartitionsRequest) IsSetNeedResult_() bool {
  return p.NeedResult_ != AddPartitionsRequest_NeedResult__DEFAULT
}

func (p *AddPartitionsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbName bool = false;
  var issetTblName bool = false;
  var issetParts bool = false;
  var issetIfNotExists bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTblName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetParts = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetIfNotExists = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTblName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TblName is not set"));
  }
  if !issetParts{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Parts is not set"));
  }
  if !issetIfNotExists{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IfNotExists is not set"));
  }
  return nil
}

func (p *AddPartitionsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *AddPartitionsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *AddPartitionsRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
    _elem118 := &Partition{}
    if err := _elem118.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem118), err)
    }
    p.Parts = append(p.Parts, _elem118)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddPartitionsRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *AddPartitionsRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NeedResult_ = v
}
  return nil
}

func (p *AddPartitionsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddPartitionsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddPartitionsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *AddPartitionsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tblName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tblName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tblName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tblName: ", p), err) }
  return err
}

func (p *AddPartitionsRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parts: ", p), err) }
  return err
}

func (p *AddPartitionsRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ifNotExists", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ifNotExists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ifNotExists (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ifNotExists: ", p), err) }
  return err
}

func (p *AddPartitionsRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedResult_() {
    if err := oprot.WriteFieldBegin(ctx, "needResult", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:needResult: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedResult_)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.needResult (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:needResult: ", p), err) }
  }
  return err
}

func (p *AddPartitionsRequest) Equals(other *AddPartitionsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DbName != other.DbName { return false }
  if p.TblName != other.TblName { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for i, _tgt := range p.Parts {
    _src119 := other.Parts[i]
    if !_tgt.Equals(_src119) { return false }
  }
  if p.IfNotExists != other.IfNotExists { return false }
  if p.NeedResult_ != other.NeedResult_ { return false }
  return true
}

func (p *AddPartitionsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddPartitionsRequest(%+v)", *p)
}

// Attributes:
//  - Partitions
type DropPartitionsResult_ struct {
  Partitions []*Partition `thrift:"partitions,1" db:"partitions" json:"partitions,omitempty"`
}

func NewDropPartitionsResult_() *DropPartitionsResult_ {
  return &DropPartitionsResult_{}
}

var DropPartitionsResult__Partitions_DEFAULT []*Partition

func (p *DropPartitionsResult_) GetPartitions() []*Partition {
  return p.Partitions
}
func (p *DropPartitionsResult_) IsSetPartitions() bool {
  return p.Partitions != nil
}

func (p *DropPartitionsResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropPartitionsResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Partitions =  tSlice
  for i := 0; i < size; i ++ {
    _elem120 := &Partition{}
    if err := _elem120.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem120), err)
    }
    p.Partitions = append(p.Partitions, _elem120)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DropPartitionsResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropPartitionsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropPartitionsResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPartitions() {
    if err := oprot.WriteFieldBegin(ctx, "partitions", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partitions: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Partitions)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Partitions {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partitions: ", p), err) }
  }
  return err
}

func (p *DropPartitionsResult_) Equals(other *DropPartitionsResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Partitions) != len(other.Partitions) { return false }
  for i, _tgt := range p.Partitions {
    _src121 := other.Partitions[i]
    if !_tgt.Equals(_src121) { return false }
  }
  return true
}

func (p *DropPartitionsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropPartitionsResult_(%+v)", *p)
}

// Attributes:
//  - Expr
//  - PartArchiveLevel
type DropPartitionsExpr struct {
  Expr []byte `thrift:"expr,1,required" db:"expr" json:"expr"`
  PartArchiveLevel *int32 `thrift:"partArchiveLevel,2" db:"partArchiveLevel" json:"partArchiveLevel,omitempty"`
}

func NewDropPartitionsExpr() *DropPartitionsExpr {
  return &DropPartitionsExpr{}
}


func (p *DropPartitionsExpr) GetExpr() []byte {
  return p.Expr
}
var DropPartitionsExpr_PartArchiveLevel_DEFAULT int32
func (p *DropPartitionsExpr) GetPartArchiveLevel() int32 {
  if !p.IsSetPartArchiveLevel() {
    return DropPartitionsExpr_PartArchiveLevel_DEFAULT
  }
return *p.PartArchiveLevel
}
func (p *DropPartitionsExpr) IsSetPartArchiveLevel() bool {
  return p.PartArchiveLevel != nil
}

func (p *DropPartitionsExpr) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetExpr bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetExpr = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetExpr{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Expr is not set"));
  }
  return nil
}

func (p *DropPartitionsExpr)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Expr = v
}
  return nil
}

func (p *DropPartitionsExpr)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PartArchiveLevel = &v
}
  return nil
}

func (p *DropPartitionsExpr) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropPartitionsExpr"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropPartitionsExpr) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expr", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:expr: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Expr); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expr (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:expr: ", p), err) }
  return err
}

func (p *DropPartitionsExpr) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPartArchiveLevel() {
    if err := oprot.WriteFieldBegin(ctx, "partArchiveLevel", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partArchiveLevel: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PartArchiveLevel)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.partArchiveLevel (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partArchiveLevel: ", p), err) }
  }
  return err
}

func (p *DropPartitionsExpr) Equals(other *DropPartitionsExpr) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Expr, other.Expr) != 0 { return false }
  if p.PartArchiveLevel != other.PartArchiveLevel {
    if p.PartArchiveLevel == nil || other.PartArchiveLevel == nil {
      return false
    }
    if (*p.PartArchiveLevel) != (*other.PartArchiveLevel) { return false }
  }
  return true
}

func (p *DropPartitionsExpr) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropPartitionsExpr(%+v)", *p)
}

// Attributes:
//  - Names
//  - Exprs
type RequestPartsSpec struct {
  Names []string `thrift:"names,1" db:"names" json:"names,omitempty"`
  Exprs []*DropPartitionsExpr `thrift:"exprs,2" db:"exprs" json:"exprs,omitempty"`
}

func NewRequestPartsSpec() *RequestPartsSpec {
  return &RequestPartsSpec{}
}

var RequestPartsSpec_Names_DEFAULT []string

func (p *RequestPartsSpec) GetNames() []string {
  return p.Names
}
var RequestPartsSpec_Exprs_DEFAULT []*DropPartitionsExpr

func (p *RequestPartsSpec) GetExprs() []*DropPartitionsExpr {
  return p.Exprs
}
func (p *RequestPartsSpec) CountSetFieldsRequestPartsSpec() int {
  count := 0
  if (p.IsSetNames()) {
    count++
  }
  if (p.IsSetExprs()) {
    count++
  }
  return count

}

func (p *RequestPartsSpec) IsSetNames() bool {
  return p.Names != nil
}

func (p *RequestPartsSpec) IsSetExprs() bool {
  return p.Exprs != nil
}

func (p *RequestPartsSpec) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestPartsSpec)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Names =  tSlice
  for i := 0; i < size; i ++ {
var _elem122 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem122 = v
}
    p.Names = append(p.Names, _elem122)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RequestPartsSpec)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DropPartitionsExpr, 0, size)
  p.Exprs =  tSlice
  for i := 0; i < size; i ++ {
    _elem123 := &DropPartitionsExpr{}
    if err := _elem123.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem123), err)
    }
    p.Exprs = append(p.Exprs, _elem123)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RequestPartsSpec) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsRequestPartsSpec(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin(ctx, "RequestPartsSpec"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestPartsSpec) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNames() {
    if err := oprot.WriteFieldBegin(ctx, "names", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:names: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Names)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Names {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:names: ", p), err) }
  }
  return err
}

func (p *RequestPartsSpec) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExprs() {
    if err := oprot.WriteFieldBegin(ctx, "exprs", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:exprs: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Exprs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Exprs {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:exprs: ", p), err) }
  }
  return err
}

func (p *RequestPartsSpec) Equals(other *RequestPartsSpec) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Names) != len(other.Names) { return false }
  for i, _tgt := range p.Names {
    _src124 := other.Names[i]
    if _tgt != _src124 { return false }
  }
  if len(p.Exprs) != len(other.Exprs) { return false }
  for i, _tgt := range p.Exprs {
    _src125 := other.Exprs[i]
    if !_tgt.Equals(_src125) { return false }
  }
  return true
}

func (p *RequestPartsSpec) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestPartsSpec(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - Parts
//  - DeleteData
//  - IfExists
//  - IgnoreProtection
//  - EnvironmentContext
//  - NeedResult_
type DropPartitionsRequest struct {
  DbName string `thrift:"dbName,1,required" db:"dbName" json:"dbName"`
  TblName string `thrift:"tblName,2,required" db:"tblName" json:"tblName"`
  Parts *RequestPartsSpec `thrift:"parts,3,required" db:"parts" json:"parts"`
  DeleteData *bool `thrift:"deleteData,4" db:"deleteData" json:"deleteData,omitempty"`
  IfExists bool `thrift:"ifExists,5" db:"ifExists" json:"ifExists"`
  IgnoreProtection *bool `thrift:"ignoreProtection,6" db:"ignoreProtection" json:"ignoreProtection,omitempty"`
  EnvironmentContext *EnvironmentContext `thrift:"environmentContext,7" db:"environmentContext" json:"environmentContext,omitempty"`
  NeedResult_ bool `thrift:"needResult,8" db:"needResult" json:"needResult"`
}

func NewDropPartitionsRequest() *DropPartitionsRequest {
  return &DropPartitionsRequest{
IfExists: true,

NeedResult_: true,
}
}


func (p *DropPartitionsRequest) GetDbName() string {
  return p.DbName
}

func (p *DropPartitionsRequest) GetTblName() string {
  return p.TblName
}
var DropPartitionsRequest_Parts_DEFAULT *RequestPartsSpec
func (p *DropPartitionsRequest) GetParts() *RequestPartsSpec {
  if !p.IsSetParts() {
    return DropPartitionsRequest_Parts_DEFAULT
  }
return p.Parts
}
var DropPartitionsRequest_DeleteData_DEFAULT bool
func (p *DropPartitionsRequest) GetDeleteData() bool {
  if !p.IsSetDeleteData() {
    return DropPartitionsRequest_DeleteData_DEFAULT
  }
return *p.DeleteData
}
var DropPartitionsRequest_IfExists_DEFAULT bool = true

func (p *DropPartitionsRequest) GetIfExists() bool {
  return p.IfExists
}
var DropPartitionsRequest_IgnoreProtection_DEFAULT bool
func (p *DropPartitionsRequest) GetIgnoreProtection() bool {
  if !p.IsSetIgnoreProtection() {
    return DropPartitionsRequest_IgnoreProtection_DEFAULT
  }
return *p.IgnoreProtection
}
var DropPartitionsRequest_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *DropPartitionsRequest) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return DropPartitionsRequest_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
var DropPartitionsRequest_NeedResult__DEFAULT bool = true

func (p *DropPartitionsRequest) GetNeedResult_() bool {
  return p.NeedResult_
}
func (p *DropPartitionsRequest) IsSetParts() bool {
  return p.Parts != nil
}

func (p *DropPartitionsRequest) IsSetDeleteData() bool {
  return p.DeleteData != nil
}

func (p *DropPartitionsRequest) IsSetIfExists() bool {
  return p.IfExists != DropPartitionsRequest_IfExists_DEFAULT
}

func (p *DropPartitionsRequest) IsSetIgnoreProtection() bool {
  return p.IgnoreProtection != nil
}

func (p *DropPartitionsRequest) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *DropPartitionsRequest) IsSetNeedResult_() bool {
  return p.NeedResult_ != DropPartitionsRequest_NeedResult__DEFAULT
}

func (p *DropPartitionsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbName bool = false;
  var issetTblName bool = false;
  var issetParts bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTblName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetParts = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTblName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TblName is not set"));
  }
  if !issetParts{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Parts is not set"));
  }
  return nil
}

func (p *DropPartitionsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *DropPartitionsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *DropPartitionsRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Parts = &RequestPartsSpec{}
  if err := p.Parts.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Parts), err)
  }
  return nil
}

func (p *DropPartitionsRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DeleteData = &v
}
  return nil
}

func (p *DropPartitionsRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IfExists = v
}
  return nil
}

func (p *DropPartitionsRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IgnoreProtection = &v
}
  return nil
}

func (p *DropPartitionsRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *DropPartitionsRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.NeedResult_ = v
}
  return nil
}

func (p *DropPartitionsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropPartitionsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropPartitionsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *DropPartitionsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tblName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tblName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tblName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tblName: ", p), err) }
  return err
}

func (p *DropPartitionsRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parts: ", p), err) }
  if err := p.Parts.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Parts), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parts: ", p), err) }
  return err
}

func (p *DropPartitionsRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDeleteData() {
    if err := oprot.WriteFieldBegin(ctx, "deleteData", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deleteData: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.DeleteData)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.deleteData (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deleteData: ", p), err) }
  }
  return err
}

func (p *DropPartitionsRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIfExists() {
    if err := oprot.WriteFieldBegin(ctx, "ifExists", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ifExists: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.IfExists)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ifExists (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ifExists: ", p), err) }
  }
  return err
}

func (p *DropPartitionsRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIgnoreProtection() {
    if err := oprot.WriteFieldBegin(ctx, "ignoreProtection", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ignoreProtection: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.IgnoreProtection)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ignoreProtection (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ignoreProtection: ", p), err) }
  }
  return err
}

func (p *DropPartitionsRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEnvironmentContext() {
    if err := oprot.WriteFieldBegin(ctx, "environmentContext", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:environmentContext: ", p), err) }
    if err := p.EnvironmentContext.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:environmentContext: ", p), err) }
  }
  return err
}

func (p *DropPartitionsRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNeedResult_() {
    if err := oprot.WriteFieldBegin(ctx, "needResult", thrift.BOOL, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:needResult: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.NeedResult_)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.needResult (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:needResult: ", p), err) }
  }
  return err
}

func (p *DropPartitionsRequest) Equals(other *DropPartitionsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DbName != other.DbName { return false }
  if p.TblName != other.TblName { return false }
  if !p.Parts.Equals(other.Parts) { return false }
  if p.DeleteData != other.DeleteData {
    if p.DeleteData == nil || other.DeleteData == nil {
      return false
    }
    if (*p.DeleteData) != (*other.DeleteData) { return false }
  }
  if p.IfExists != other.IfExists { return false }
  if p.IgnoreProtection != other.IgnoreProtection {
    if p.IgnoreProtection == nil || other.IgnoreProtection == nil {
      return false
    }
    if (*p.IgnoreProtection) != (*other.IgnoreProtection) { return false }
  }
  if !p.EnvironmentContext.Equals(other.EnvironmentContext) { return false }
  if p.NeedResult_ != other.NeedResult_ { return false }
  return true
}

func (p *DropPartitionsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropPartitionsRequest(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartitionKeys
//  - ApplyDistinct
//  - Filter
//  - PartitionOrder
//  - Ascending
//  - MaxParts
type PartitionValuesRequest struct {
  DbName string `thrift:"dbName,1,required" db:"dbName" json:"dbName"`
  TblName string `thrift:"tblName,2,required" db:"tblName" json:"tblName"`
  PartitionKeys []*FieldSchema `thrift:"partitionKeys,3,required" db:"partitionKeys" json:"partitionKeys"`
  ApplyDistinct bool `thrift:"applyDistinct,4" db:"applyDistinct" json:"applyDistinct"`
  Filter *string `thrift:"filter,5" db:"filter" json:"filter,omitempty"`
  PartitionOrder []*FieldSchema `thrift:"partitionOrder,6" db:"partitionOrder" json:"partitionOrder,omitempty"`
  Ascending bool `thrift:"ascending,7" db:"ascending" json:"ascending"`
  MaxParts int64 `thrift:"maxParts,8" db:"maxParts" json:"maxParts"`
}

func NewPartitionValuesRequest() *PartitionValuesRequest {
  return &PartitionValuesRequest{
ApplyDistinct: true,

Ascending: true,

MaxParts: -1,
}
}


func (p *PartitionValuesRequest) GetDbName() string {
  return p.DbName
}

func (p *PartitionValuesRequest) GetTblName() string {
  return p.TblName
}

func (p *PartitionValuesRequest) GetPartitionKeys() []*FieldSchema {
  return p.PartitionKeys
}
var PartitionValuesRequest_ApplyDistinct_DEFAULT bool = true

func (p *PartitionValuesRequest) GetApplyDistinct() bool {
  return p.ApplyDistinct
}
var PartitionValuesRequest_Filter_DEFAULT string
func (p *PartitionValuesRequest) GetFilter() string {
  if !p.IsSetFilter() {
    return PartitionValuesRequest_Filter_DEFAULT
  }
return *p.Filter
}
var PartitionValuesRequest_PartitionOrder_DEFAULT []*FieldSchema

func (p *PartitionValuesRequest) GetPartitionOrder() []*FieldSchema {
  return p.PartitionOrder
}
var PartitionValuesRequest_Ascending_DEFAULT bool = true

func (p *PartitionValuesRequest) GetAscending() bool {
  return p.Ascending
}
var PartitionValuesRequest_MaxParts_DEFAULT int64 = -1

func (p *PartitionValuesRequest) GetMaxParts() int64 {
  return p.MaxParts
}
func (p *PartitionValuesRequest) IsSetApplyDistinct() bool {
  return p.ApplyDistinct != PartitionValuesRequest_ApplyDistinct_DEFAULT
}

func (p *PartitionValuesRequest) IsSetFilter() bool {
  return p.Filter != nil
}

func (p *PartitionValuesRequest) IsSetPartitionOrder() bool {
  return p.PartitionOrder != nil
}

func (p *PartitionValuesRequest) IsSetAscending() bool {
  return p.Ascending != PartitionValuesRequest_Ascending_DEFAULT
}

func (p *PartitionValuesRequest) IsSetMaxParts() bool {
  return p.MaxParts != PartitionValuesRequest_MaxParts_DEFAULT
}

func (p *PartitionValuesRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbName bool = false;
  var issetTblName bool = false;
  var issetPartitionKeys bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTblName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetPartitionKeys = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTblName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TblName is not set"));
  }
  if !issetPartitionKeys{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartitionKeys is not set"));
  }
  return nil
}

func (p *PartitionValuesRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *PartitionValuesRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *PartitionValuesRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.PartitionKeys =  tSlice
  for i := 0; i < size; i ++ {
    _elem126 := &FieldSchema{}
    if err := _elem126.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem126), err)
    }
    p.PartitionKeys = append(p.PartitionKeys, _elem126)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartitionValuesRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ApplyDistinct = v
}
  return nil
}

func (p *PartitionValuesRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Filter = &v
}
  return nil
}

func (p *PartitionValuesRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.PartitionOrder =  tSlice
  for i := 0; i < size; i ++ {
    _elem127 := &FieldSchema{}
    if err := _elem127.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem127), err)
    }
    p.PartitionOrder = append(p.PartitionOrder, _elem127)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartitionValuesRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Ascending = v
}
  return nil
}

func (p *PartitionValuesRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *PartitionValuesRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartitionValuesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionValuesRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *PartitionValuesRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tblName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tblName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tblName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tblName: ", p), err) }
  return err
}

func (p *PartitionValuesRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitionKeys", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partitionKeys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.PartitionKeys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartitionKeys {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partitionKeys: ", p), err) }
  return err
}

func (p *PartitionValuesRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetApplyDistinct() {
    if err := oprot.WriteFieldBegin(ctx, "applyDistinct", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:applyDistinct: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.ApplyDistinct)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.applyDistinct (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:applyDistinct: ", p), err) }
  }
  return err
}

func (p *PartitionValuesRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFilter() {
    if err := oprot.WriteFieldBegin(ctx, "filter", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:filter: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Filter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filter (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:filter: ", p), err) }
  }
  return err
}

func (p *PartitionValuesRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPartitionOrder() {
    if err := oprot.WriteFieldBegin(ctx, "partitionOrder", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:partitionOrder: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.PartitionOrder)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.PartitionOrder {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:partitionOrder: ", p), err) }
  }
  return err
}

func (p *PartitionValuesRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAscending() {
    if err := oprot.WriteFieldBegin(ctx, "ascending", thrift.BOOL, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ascending: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.Ascending)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ascending (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ascending: ", p), err) }
  }
  return err
}

func (p *PartitionValuesRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxParts() {
    if err := oprot.WriteFieldBegin(ctx, "maxParts", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:maxParts: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(p.MaxParts)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxParts (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:maxParts: ", p), err) }
  }
  return err
}

func (p *PartitionValuesRequest) Equals(other *PartitionValuesRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DbName != other.DbName { return false }
  if p.TblName != other.TblName { return false }
  if len(p.PartitionKeys) != len(other.PartitionKeys) { return false }
  for i, _tgt := range p.PartitionKeys {
    _src128 := other.PartitionKeys[i]
    if !_tgt.Equals(_src128) { return false }
  }
  if p.ApplyDistinct != other.ApplyDistinct { return false }
  if p.Filter != other.Filter {
    if p.Filter == nil || other.Filter == nil {
      return false
    }
    if (*p.Filter) != (*other.Filter) { return false }
  }
  if len(p.PartitionOrder) != len(other.PartitionOrder) { return false }
  for i, _tgt := range p.PartitionOrder {
    _src129 := other.PartitionOrder[i]
    if !_tgt.Equals(_src129) { return false }
  }
  if p.Ascending != other.Ascending { return false }
  if p.MaxParts != other.MaxParts { return false }
  return true
}

func (p *PartitionValuesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionValuesRequest(%+v)", *p)
}

// Attributes:
//  - Row
type PartitionValuesRow struct {
  Row []string `thrift:"row,1,required" db:"row" json:"row"`
}

func NewPartitionValuesRow() *PartitionValuesRow {
  return &PartitionValuesRow{}
}


func (p *PartitionValuesRow) GetRow() []string {
  return p.Row
}
func (p *PartitionValuesRow) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRow bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRow = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRow{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Row is not set"));
  }
  return nil
}

func (p *PartitionValuesRow)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Row =  tSlice
  for i := 0; i < size; i ++ {
var _elem130 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem130 = v
}
    p.Row = append(p.Row, _elem130)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartitionValuesRow) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartitionValuesRow"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionValuesRow) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "row", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Row)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Row {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row: ", p), err) }
  return err
}

func (p *PartitionValuesRow) Equals(other *PartitionValuesRow) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Row) != len(other.Row) { return false }
  for i, _tgt := range p.Row {
    _src131 := other.Row[i]
    if _tgt != _src131 { return false }
  }
  return true
}

func (p *PartitionValuesRow) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionValuesRow(%+v)", *p)
}

// Attributes:
//  - PartitionValues
type PartitionValuesResponse struct {
  PartitionValues []*PartitionValuesRow `thrift:"partitionValues,1,required" db:"partitionValues" json:"partitionValues"`
}

func NewPartitionValuesResponse() *PartitionValuesResponse {
  return &PartitionValuesResponse{}
}


func (p *PartitionValuesResponse) GetPartitionValues() []*PartitionValuesRow {
  return p.PartitionValues
}
func (p *PartitionValuesResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPartitionValues bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPartitionValues = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPartitionValues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartitionValues is not set"));
  }
  return nil
}

func (p *PartitionValuesResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PartitionValuesRow, 0, size)
  p.PartitionValues =  tSlice
  for i := 0; i < size; i ++ {
    _elem132 := &PartitionValuesRow{}
    if err := _elem132.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem132), err)
    }
    p.PartitionValues = append(p.PartitionValues, _elem132)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartitionValuesResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartitionValuesResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionValuesResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitionValues", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partitionValues: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.PartitionValues)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartitionValues {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partitionValues: ", p), err) }
  return err
}

func (p *PartitionValuesResponse) Equals(other *PartitionValuesResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.PartitionValues) != len(other.PartitionValues) { return false }
  for i, _tgt := range p.PartitionValues {
    _src133 := other.PartitionValues[i]
    if !_tgt.Equals(_src133) { return false }
  }
  return true
}

func (p *PartitionValuesResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionValuesResponse(%+v)", *p)
}

// Attributes:
//  - ResourceType
//  - URI
type ResourceUri struct {
  ResourceType ResourceType `thrift:"resourceType,1" db:"resourceType" json:"resourceType"`
  URI string `thrift:"uri,2" db:"uri" json:"uri"`
}

func NewResourceUri() *ResourceUri {
  return &ResourceUri{}
}


func (p *ResourceUri) GetResourceType() ResourceType {
  return p.ResourceType
}

func (p *ResourceUri) GetURI() string {
  return p.URI
}
func (p *ResourceUri) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResourceUri)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ResourceType(v)
  p.ResourceType = temp
}
  return nil
}

func (p *ResourceUri)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.URI = v
}
  return nil
}

func (p *ResourceUri) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ResourceUri"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResourceUri) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "resourceType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourceType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ResourceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourceType: ", p), err) }
  return err
}

func (p *ResourceUri) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uri", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uri: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.URI)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uri (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uri: ", p), err) }
  return err
}

func (p *ResourceUri) Equals(other *ResourceUri) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ResourceType != other.ResourceType { return false }
  if p.URI != other.URI { return false }
  return true
}

func (p *ResourceUri) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResourceUri(%+v)", *p)
}

// Attributes:
//  - FunctionName
//  - DbName
//  - ClassName
//  - OwnerName
//  - OwnerType
//  - CreateTime
//  - FunctionType
//  - ResourceUris
type Function struct {
  FunctionName string `thrift:"functionName,1" db:"functionName" json:"functionName"`
  DbName string `thrift:"dbName,2" db:"dbName" json:"dbName"`
  ClassName string `thrift:"className,3" db:"className" json:"className"`
  OwnerName string `thrift:"ownerName,4" db:"ownerName" json:"ownerName"`
  OwnerType PrincipalType `thrift:"ownerType,5" db:"ownerType" json:"ownerType"`
  CreateTime int32 `thrift:"createTime,6" db:"createTime" json:"createTime"`
  FunctionType FunctionType `thrift:"functionType,7" db:"functionType" json:"functionType"`
  ResourceUris []*ResourceUri `thrift:"resourceUris,8" db:"resourceUris" json:"resourceUris"`
}

func NewFunction() *Function {
  return &Function{}
}


func (p *Function) GetFunctionName() string {
  return p.FunctionName
}

func (p *Function) GetDbName() string {
  return p.DbName
}

func (p *Function) GetClassName() string {
  return p.ClassName
}

func (p *Function) GetOwnerName() string {
  return p.OwnerName
}

func (p *Function) GetOwnerType() PrincipalType {
  return p.OwnerType
}

func (p *Function) GetCreateTime() int32 {
  return p.CreateTime
}

func (p *Function) GetFunctionType() FunctionType {
  return p.FunctionType
}

func (p *Function) GetResourceUris() []*ResourceUri {
  return p.ResourceUris
}
func (p *Function) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Function)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FunctionName = v
}
  return nil
}

func (p *Function)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *Function)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ClassName = v
}
  return nil
}

func (p *Function)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OwnerName = v
}
  return nil
}

func (p *Function)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := PrincipalType(v)
  p.OwnerType = temp
}
  return nil
}

func (p *Function)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *Function)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := FunctionType(v)
  p.FunctionType = temp
}
  return nil
}

func (p *Function)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ResourceUri, 0, size)
  p.ResourceUris =  tSlice
  for i := 0; i < size; i ++ {
    _elem134 := &ResourceUri{}
    if err := _elem134.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem134), err)
    }
    p.ResourceUris = append(p.ResourceUris, _elem134)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Function) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Function"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Function) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "functionName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:functionName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FunctionName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.functionName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:functionName: ", p), err) }
  return err
}

func (p *Function) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbName: ", p), err) }
  return err
}

func (p *Function) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "className", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:className: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ClassName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.className (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:className: ", p), err) }
  return err
}

func (p *Function) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ownerName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ownerName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OwnerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ownerName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ownerName: ", p), err) }
  return err
}

func (p *Function) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ownerType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ownerType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OwnerType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ownerType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ownerType: ", p), err) }
  return err
}

func (p *Function) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createTime", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:createTime: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:createTime: ", p), err) }
  return err
}

func (p *Function) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "functionType", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:functionType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FunctionType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.functionType (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:functionType: ", p), err) }
  return err
}

func (p *Function) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "resourceUris", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:resourceUris: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ResourceUris)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ResourceUris {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:resourceUris: ", p), err) }
  return err
}

func (p *Function) Equals(other *Function) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.FunctionName != other.FunctionName { return false }
  if p.DbName != other.DbName { return false }
  if p.ClassName != other.ClassName { return false }
  if p.OwnerName != other.OwnerName { return false }
  if p.OwnerType != other.OwnerType { return false }
  if p.CreateTime != other.CreateTime { return false }
  if p.FunctionType != other.FunctionType { return false }
  if len(p.ResourceUris) != len(other.ResourceUris) { return false }
  for i, _tgt := range p.ResourceUris {
    _src135 := other.ResourceUris[i]
    if !_tgt.Equals(_src135) { return false }
  }
  return true
}

func (p *Function) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Function(%+v)", *p)
}

// Attributes:
//  - ID
//  - State
//  - User
//  - Hostname
//  - AgentInfo
//  - HeartbeatCount
//  - MetaInfo
//  - StartedTime
//  - LastHeartbeatTime
type TxnInfo struct {
  ID int64 `thrift:"id,1,required" db:"id" json:"id"`
  State TxnState `thrift:"state,2,required" db:"state" json:"state"`
  User string `thrift:"user,3,required" db:"user" json:"user"`
  Hostname string `thrift:"hostname,4,required" db:"hostname" json:"hostname"`
  AgentInfo string `thrift:"agentInfo,5" db:"agentInfo" json:"agentInfo"`
  HeartbeatCount int32 `thrift:"heartbeatCount,6" db:"heartbeatCount" json:"heartbeatCount"`
  MetaInfo *string `thrift:"metaInfo,7" db:"metaInfo" json:"metaInfo,omitempty"`
  StartedTime *int64 `thrift:"startedTime,8" db:"startedTime" json:"startedTime,omitempty"`
  LastHeartbeatTime *int64 `thrift:"lastHeartbeatTime,9" db:"lastHeartbeatTime" json:"lastHeartbeatTime,omitempty"`
}

func NewTxnInfo() *TxnInfo {
  return &TxnInfo{
AgentInfo: "Unknown",
}
}


func (p *TxnInfo) GetID() int64 {
  return p.ID
}

func (p *TxnInfo) GetState() TxnState {
  return p.State
}

func (p *TxnInfo) GetUser() string {
  return p.User
}

func (p *TxnInfo) GetHostname() string {
  return p.Hostname
}
var TxnInfo_AgentInfo_DEFAULT string = "Unknown"

func (p *TxnInfo) GetAgentInfo() string {
  return p.AgentInfo
}
var TxnInfo_HeartbeatCount_DEFAULT int32 = 0

func (p *TxnInfo) GetHeartbeatCount() int32 {
  return p.HeartbeatCount
}
var TxnInfo_MetaInfo_DEFAULT string
func (p *TxnInfo) GetMetaInfo() string {
  if !p.IsSetMetaInfo() {
    return TxnInfo_MetaInfo_DEFAULT
  }
return *p.MetaInfo
}
var TxnInfo_StartedTime_DEFAULT int64
func (p *TxnInfo) GetStartedTime() int64 {
  if !p.IsSetStartedTime() {
    return TxnInfo_StartedTime_DEFAULT
  }
return *p.StartedTime
}
var TxnInfo_LastHeartbeatTime_DEFAULT int64
func (p *TxnInfo) GetLastHeartbeatTime() int64 {
  if !p.IsSetLastHeartbeatTime() {
    return TxnInfo_LastHeartbeatTime_DEFAULT
  }
return *p.LastHeartbeatTime
}
func (p *TxnInfo) IsSetAgentInfo() bool {
  return p.AgentInfo != TxnInfo_AgentInfo_DEFAULT
}

func (p *TxnInfo) IsSetHeartbeatCount() bool {
  return p.HeartbeatCount != TxnInfo_HeartbeatCount_DEFAULT
}

func (p *TxnInfo) IsSetMetaInfo() bool {
  return p.MetaInfo != nil
}

func (p *TxnInfo) IsSetStartedTime() bool {
  return p.StartedTime != nil
}

func (p *TxnInfo) IsSetLastHeartbeatTime() bool {
  return p.LastHeartbeatTime != nil
}

func (p *TxnInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetState bool = false;
  var issetUser bool = false;
  var issetHostname bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetState = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetUser = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetHostname = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetUser{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field User is not set"));
  }
  if !issetHostname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Hostname is not set"));
  }
  return nil
}

func (p *TxnInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TxnInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TxnState(v)
  p.State = temp
}
  return nil
}

func (p *TxnInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *TxnInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Hostname = v
}
  return nil
}

func (p *TxnInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AgentInfo = v
}
  return nil
}

func (p *TxnInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.HeartbeatCount = v
}
  return nil
}

func (p *TxnInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.MetaInfo = &v
}
  return nil
}

func (p *TxnInfo)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.StartedTime = &v
}
  return nil
}

func (p *TxnInfo)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.LastHeartbeatTime = &v
}
  return nil
}

func (p *TxnInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TxnInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TxnInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TxnInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:state: ", p), err) }
  return err
}

func (p *TxnInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user: ", p), err) }
  return err
}

func (p *TxnInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostname", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hostname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Hostname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostname (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hostname: ", p), err) }
  return err
}

func (p *TxnInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAgentInfo() {
    if err := oprot.WriteFieldBegin(ctx, "agentInfo", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:agentInfo: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.AgentInfo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.agentInfo (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:agentInfo: ", p), err) }
  }
  return err
}

func (p *TxnInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHeartbeatCount() {
    if err := oprot.WriteFieldBegin(ctx, "heartbeatCount", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:heartbeatCount: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.HeartbeatCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.heartbeatCount (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:heartbeatCount: ", p), err) }
  }
  return err
}

func (p *TxnInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMetaInfo() {
    if err := oprot.WriteFieldBegin(ctx, "metaInfo", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:metaInfo: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.MetaInfo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.metaInfo (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:metaInfo: ", p), err) }
  }
  return err
}

func (p *TxnInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedTime() {
    if err := oprot.WriteFieldBegin(ctx, "startedTime", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:startedTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.StartedTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startedTime (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:startedTime: ", p), err) }
  }
  return err
}

func (p *TxnInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLastHeartbeatTime() {
    if err := oprot.WriteFieldBegin(ctx, "lastHeartbeatTime", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:lastHeartbeatTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.LastHeartbeatTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastHeartbeatTime (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:lastHeartbeatTime: ", p), err) }
  }
  return err
}

func (p *TxnInfo) Equals(other *TxnInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.State != other.State { return false }
  if p.User != other.User { return false }
  if p.Hostname != other.Hostname { return false }
  if p.AgentInfo != other.AgentInfo { return false }
  if p.HeartbeatCount != other.HeartbeatCount { return false }
  if p.MetaInfo != other.MetaInfo {
    if p.MetaInfo == nil || other.MetaInfo == nil {
      return false
    }
    if (*p.MetaInfo) != (*other.MetaInfo) { return false }
  }
  if p.StartedTime != other.StartedTime {
    if p.StartedTime == nil || other.StartedTime == nil {
      return false
    }
    if (*p.StartedTime) != (*other.StartedTime) { return false }
  }
  if p.LastHeartbeatTime != other.LastHeartbeatTime {
    if p.LastHeartbeatTime == nil || other.LastHeartbeatTime == nil {
      return false
    }
    if (*p.LastHeartbeatTime) != (*other.LastHeartbeatTime) { return false }
  }
  return true
}

func (p *TxnInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TxnInfo(%+v)", *p)
}

// Attributes:
//  - TxnHighWaterMark
//  - OpenTxns
type GetOpenTxnsInfoResponse struct {
  TxnHighWaterMark int64 `thrift:"txn_high_water_mark,1,required" db:"txn_high_water_mark" json:"txn_high_water_mark"`
  OpenTxns []*TxnInfo `thrift:"open_txns,2,required" db:"open_txns" json:"open_txns"`
}

func NewGetOpenTxnsInfoResponse() *GetOpenTxnsInfoResponse {
  return &GetOpenTxnsInfoResponse{}
}


func (p *GetOpenTxnsInfoResponse) GetTxnHighWaterMark() int64 {
  return p.TxnHighWaterMark
}

func (p *GetOpenTxnsInfoResponse) GetOpenTxns() []*TxnInfo {
  return p.OpenTxns
}
func (p *GetOpenTxnsInfoResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTxnHighWaterMark bool = false;
  var issetOpenTxns bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetTxnHighWaterMark = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetOpenTxns = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTxnHighWaterMark{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TxnHighWaterMark is not set"));
  }
  if !issetOpenTxns{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OpenTxns is not set"));
  }
  return nil
}

func (p *GetOpenTxnsInfoResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TxnHighWaterMark = v
}
  return nil
}

func (p *GetOpenTxnsInfoResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TxnInfo, 0, size)
  p.OpenTxns =  tSlice
  for i := 0; i < size; i ++ {
    _elem136 := &TxnInfo{
    AgentInfo: "Unknown",
}
    if err := _elem136.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem136), err)
    }
    p.OpenTxns = append(p.OpenTxns, _elem136)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetOpenTxnsInfoResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetOpenTxnsInfoResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetOpenTxnsInfoResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "txn_high_water_mark", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:txn_high_water_mark: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TxnHighWaterMark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txn_high_water_mark (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:txn_high_water_mark: ", p), err) }
  return err
}

func (p *GetOpenTxnsInfoResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "open_txns", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:open_txns: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.OpenTxns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.OpenTxns {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:open_txns: ", p), err) }
  return err
}

func (p *GetOpenTxnsInfoResponse) Equals(other *GetOpenTxnsInfoResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TxnHighWaterMark != other.TxnHighWaterMark { return false }
  if len(p.OpenTxns) != len(other.OpenTxns) { return false }
  for i, _tgt := range p.OpenTxns {
    _src137 := other.OpenTxns[i]
    if !_tgt.Equals(_src137) { return false }
  }
  return true
}

func (p *GetOpenTxnsInfoResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetOpenTxnsInfoResponse(%+v)", *p)
}

// Attributes:
//  - TxnHighWaterMark
//  - OpenTxns
//  - MinOpenTxn
//  - AbortedBits
type GetOpenTxnsResponse struct {
  TxnHighWaterMark int64 `thrift:"txn_high_water_mark,1,required" db:"txn_high_water_mark" json:"txn_high_water_mark"`
  OpenTxns []int64 `thrift:"open_txns,2,required" db:"open_txns" json:"open_txns"`
  MinOpenTxn *int64 `thrift:"min_open_txn,3" db:"min_open_txn" json:"min_open_txn,omitempty"`
  AbortedBits []byte `thrift:"abortedBits,4,required" db:"abortedBits" json:"abortedBits"`
}

func NewGetOpenTxnsResponse() *GetOpenTxnsResponse {
  return &GetOpenTxnsResponse{}
}


func (p *GetOpenTxnsResponse) GetTxnHighWaterMark() int64 {
  return p.TxnHighWaterMark
}

func (p *GetOpenTxnsResponse) GetOpenTxns() []int64 {
  return p.OpenTxns
}
var GetOpenTxnsResponse_MinOpenTxn_DEFAULT int64
func (p *GetOpenTxnsResponse) GetMinOpenTxn() int64 {
  if !p.IsSetMinOpenTxn() {
    return GetOpenTxnsResponse_MinOpenTxn_DEFAULT
  }
return *p.MinOpenTxn
}

func (p *GetOpenTxnsResponse) GetAbortedBits() []byte {
  return p.AbortedBits
}
func (p *GetOpenTxnsResponse) IsSetMinOpenTxn() bool {
  return p.MinOpenTxn != nil
}

func (p *GetOpenTxnsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTxnHighWaterMark bool = false;
  var issetOpenTxns bool = false;
  var issetAbortedBits bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetTxnHighWaterMark = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetOpenTxns = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetAbortedBits = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTxnHighWaterMark{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TxnHighWaterMark is not set"));
  }
  if !issetOpenTxns{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OpenTxns is not set"));
  }
  if !issetAbortedBits{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AbortedBits is not set"));
  }
  return nil
}

func (p *GetOpenTxnsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TxnHighWaterMark = v
}
  return nil
}

func (p *GetOpenTxnsResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.OpenTxns =  tSlice
  for i := 0; i < size; i ++ {
var _elem138 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem138 = v
}
    p.OpenTxns = append(p.OpenTxns, _elem138)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetOpenTxnsResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MinOpenTxn = &v
}
  return nil
}

func (p *GetOpenTxnsResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AbortedBits = v
}
  return nil
}

func (p *GetOpenTxnsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetOpenTxnsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetOpenTxnsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "txn_high_water_mark", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:txn_high_water_mark: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TxnHighWaterMark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txn_high_water_mark (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:txn_high_water_mark: ", p), err) }
  return err
}

func (p *GetOpenTxnsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "open_txns", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:open_txns: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.OpenTxns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.OpenTxns {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:open_txns: ", p), err) }
  return err
}

func (p *GetOpenTxnsResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMinOpenTxn() {
    if err := oprot.WriteFieldBegin(ctx, "min_open_txn", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:min_open_txn: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.MinOpenTxn)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.min_open_txn (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:min_open_txn: ", p), err) }
  }
  return err
}

func (p *GetOpenTxnsResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "abortedBits", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:abortedBits: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.AbortedBits); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.abortedBits (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:abortedBits: ", p), err) }
  return err
}

func (p *GetOpenTxnsResponse) Equals(other *GetOpenTxnsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TxnHighWaterMark != other.TxnHighWaterMark { return false }
  if len(p.OpenTxns) != len(other.OpenTxns) { return false }
  for i, _tgt := range p.OpenTxns {
    _src139 := other.OpenTxns[i]
    if _tgt != _src139 { return false }
  }
  if p.MinOpenTxn != other.MinOpenTxn {
    if p.MinOpenTxn == nil || other.MinOpenTxn == nil {
      return false
    }
    if (*p.MinOpenTxn) != (*other.MinOpenTxn) { return false }
  }
  if bytes.Compare(p.AbortedBits, other.AbortedBits) != 0 { return false }
  return true
}

func (p *GetOpenTxnsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetOpenTxnsResponse(%+v)", *p)
}

// Attributes:
//  - NumTxns
//  - User
//  - Hostname
//  - AgentInfo
type OpenTxnRequest struct {
  NumTxns int32 `thrift:"num_txns,1,required" db:"num_txns" json:"num_txns"`
  User string `thrift:"user,2,required" db:"user" json:"user"`
  Hostname string `thrift:"hostname,3,required" db:"hostname" json:"hostname"`
  AgentInfo string `thrift:"agentInfo,4" db:"agentInfo" json:"agentInfo"`
}

func NewOpenTxnRequest() *OpenTxnRequest {
  return &OpenTxnRequest{
AgentInfo: "Unknown",
}
}


func (p *OpenTxnRequest) GetNumTxns() int32 {
  return p.NumTxns
}

func (p *OpenTxnRequest) GetUser() string {
  return p.User
}

func (p *OpenTxnRequest) GetHostname() string {
  return p.Hostname
}
var OpenTxnRequest_AgentInfo_DEFAULT string = "Unknown"

func (p *OpenTxnRequest) GetAgentInfo() string {
  return p.AgentInfo
}
func (p *OpenTxnRequest) IsSetAgentInfo() bool {
  return p.AgentInfo != OpenTxnRequest_AgentInfo_DEFAULT
}

func (p *OpenTxnRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNumTxns bool = false;
  var issetUser bool = false;
  var issetHostname bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetNumTxns = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetUser = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetHostname = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNumTxns{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumTxns is not set"));
  }
  if !issetUser{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field User is not set"));
  }
  if !issetHostname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Hostname is not set"));
  }
  return nil
}

func (p *OpenTxnRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumTxns = v
}
  return nil
}

func (p *OpenTxnRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *OpenTxnRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Hostname = v
}
  return nil
}

func (p *OpenTxnRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AgentInfo = v
}
  return nil
}

func (p *OpenTxnRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OpenTxnRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OpenTxnRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num_txns", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_txns: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NumTxns)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_txns (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_txns: ", p), err) }
  return err
}

func (p *OpenTxnRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err) }
  return err
}

func (p *OpenTxnRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostname", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Hostname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostname (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostname: ", p), err) }
  return err
}

func (p *OpenTxnRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAgentInfo() {
    if err := oprot.WriteFieldBegin(ctx, "agentInfo", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:agentInfo: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.AgentInfo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.agentInfo (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:agentInfo: ", p), err) }
  }
  return err
}

func (p *OpenTxnRequest) Equals(other *OpenTxnRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.NumTxns != other.NumTxns { return false }
  if p.User != other.User { return false }
  if p.Hostname != other.Hostname { return false }
  if p.AgentInfo != other.AgentInfo { return false }
  return true
}

func (p *OpenTxnRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OpenTxnRequest(%+v)", *p)
}

// Attributes:
//  - TxnIds
type OpenTxnsResponse struct {
  TxnIds []int64 `thrift:"txn_ids,1,required" db:"txn_ids" json:"txn_ids"`
}

func NewOpenTxnsResponse() *OpenTxnsResponse {
  return &OpenTxnsResponse{}
}


func (p *OpenTxnsResponse) GetTxnIds() []int64 {
  return p.TxnIds
}
func (p *OpenTxnsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTxnIds bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetTxnIds = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTxnIds{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TxnIds is not set"));
  }
  return nil
}

func (p *OpenTxnsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.TxnIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem140 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem140 = v
}
    p.TxnIds = append(p.TxnIds, _elem140)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OpenTxnsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OpenTxnsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OpenTxnsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "txn_ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:txn_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.TxnIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TxnIds {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:txn_ids: ", p), err) }
  return err
}

func (p *OpenTxnsResponse) Equals(other *OpenTxnsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.TxnIds) != len(other.TxnIds) { return false }
  for i, _tgt := range p.TxnIds {
    _src141 := other.TxnIds[i]
    if _tgt != _src141 { return false }
  }
  return true
}

func (p *OpenTxnsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OpenTxnsResponse(%+v)", *p)
}

// Attributes:
//  - Txnid
type AbortTxnRequest struct {
  Txnid int64 `thrift:"txnid,1,required" db:"txnid" json:"txnid"`
}

func NewAbortTxnRequest() *AbortTxnRequest {
  return &AbortTxnRequest{}
}


func (p *AbortTxnRequest) GetTxnid() int64 {
  return p.Txnid
}
func (p *AbortTxnRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTxnid bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetTxnid = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTxnid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Txnid is not set"));
  }
  return nil
}

func (p *AbortTxnRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Txnid = v
}
  return nil
}

func (p *AbortTxnRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AbortTxnRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AbortTxnRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "txnid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:txnid: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Txnid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txnid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:txnid: ", p), err) }
  return err
}

func (p *AbortTxnRequest) Equals(other *AbortTxnRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Txnid != other.Txnid { return false }
  return true
}

func (p *AbortTxnRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AbortTxnRequest(%+v)", *p)
}

// Attributes:
//  - TxnIds
type AbortTxnsRequest struct {
  TxnIds []int64 `thrift:"txn_ids,1,required" db:"txn_ids" json:"txn_ids"`
}

func NewAbortTxnsRequest() *AbortTxnsRequest {
  return &AbortTxnsRequest{}
}


func (p *AbortTxnsRequest) GetTxnIds() []int64 {
  return p.TxnIds
}
func (p *AbortTxnsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTxnIds bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetTxnIds = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTxnIds{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TxnIds is not set"));
  }
  return nil
}

func (p *AbortTxnsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.TxnIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem142 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem142 = v
}
    p.TxnIds = append(p.TxnIds, _elem142)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AbortTxnsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AbortTxnsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AbortTxnsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "txn_ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:txn_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.TxnIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TxnIds {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:txn_ids: ", p), err) }
  return err
}

func (p *AbortTxnsRequest) Equals(other *AbortTxnsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.TxnIds) != len(other.TxnIds) { return false }
  for i, _tgt := range p.TxnIds {
    _src143 := other.TxnIds[i]
    if _tgt != _src143 { return false }
  }
  return true
}

func (p *AbortTxnsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AbortTxnsRequest(%+v)", *p)
}

// Attributes:
//  - Txnid
type CommitTxnRequest struct {
  Txnid int64 `thrift:"txnid,1,required" db:"txnid" json:"txnid"`
}

func NewCommitTxnRequest() *CommitTxnRequest {
  return &CommitTxnRequest{}
}


func (p *CommitTxnRequest) GetTxnid() int64 {
  return p.Txnid
}
func (p *CommitTxnRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTxnid bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetTxnid = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTxnid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Txnid is not set"));
  }
  return nil
}

func (p *CommitTxnRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Txnid = v
}
  return nil
}

func (p *CommitTxnRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CommitTxnRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CommitTxnRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "txnid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:txnid: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Txnid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txnid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:txnid: ", p), err) }
  return err
}

func (p *CommitTxnRequest) Equals(other *CommitTxnRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Txnid != other.Txnid { return false }
  return true
}

func (p *CommitTxnRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommitTxnRequest(%+v)", *p)
}

// Attributes:
//  - Type
//  - Level
//  - Dbname
//  - Tablename
//  - Partitionname
//  - OperationType
//  - IsAcid
//  - IsDynamicPartitionWrite
type LockComponent struct {
  Type LockType `thrift:"type,1,required" db:"type" json:"type"`
  Level LockLevel `thrift:"level,2,required" db:"level" json:"level"`
  Dbname string `thrift:"dbname,3,required" db:"dbname" json:"dbname"`
  Tablename *string `thrift:"tablename,4" db:"tablename" json:"tablename,omitempty"`
  Partitionname *string `thrift:"partitionname,5" db:"partitionname" json:"partitionname,omitempty"`
  OperationType DataOperationType `thrift:"operationType,6" db:"operationType" json:"operationType"`
  IsAcid bool `thrift:"isAcid,7" db:"isAcid" json:"isAcid"`
  IsDynamicPartitionWrite bool `thrift:"isDynamicPartitionWrite,8" db:"isDynamicPartitionWrite" json:"isDynamicPartitionWrite"`
}

func NewLockComponent() *LockComponent {
  return &LockComponent{
OperationType: 5,
}
}


func (p *LockComponent) GetType() LockType {
  return p.Type
}

func (p *LockComponent) GetLevel() LockLevel {
  return p.Level
}

func (p *LockComponent) GetDbname() string {
  return p.Dbname
}
var LockComponent_Tablename_DEFAULT string
func (p *LockComponent) GetTablename() string {
  if !p.IsSetTablename() {
    return LockComponent_Tablename_DEFAULT
  }
return *p.Tablename
}
var LockComponent_Partitionname_DEFAULT string
func (p *LockComponent) GetPartitionname() string {
  if !p.IsSetPartitionname() {
    return LockComponent_Partitionname_DEFAULT
  }
return *p.Partitionname
}
var LockComponent_OperationType_DEFAULT DataOperationType = 5

func (p *LockComponent) GetOperationType() DataOperationType {
  return p.OperationType
}
var LockComponent_IsAcid_DEFAULT bool = false

func (p *LockComponent) GetIsAcid() bool {
  return p.IsAcid
}
var LockComponent_IsDynamicPartitionWrite_DEFAULT bool = false

func (p *LockComponent) GetIsDynamicPartitionWrite() bool {
  return p.IsDynamicPartitionWrite
}
func (p *LockComponent) IsSetTablename() bool {
  return p.Tablename != nil
}

func (p *LockComponent) IsSetPartitionname() bool {
  return p.Partitionname != nil
}

func (p *LockComponent) IsSetOperationType() bool {
  return p.OperationType != LockComponent_OperationType_DEFAULT
}

func (p *LockComponent) IsSetIsAcid() bool {
  return p.IsAcid != LockComponent_IsAcid_DEFAULT
}

func (p *LockComponent) IsSetIsDynamicPartitionWrite() bool {
  return p.IsDynamicPartitionWrite != LockComponent_IsDynamicPartitionWrite_DEFAULT
}

func (p *LockComponent) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;
  var issetLevel bool = false;
  var issetDbname bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetLevel = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetDbname = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetLevel{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Level is not set"));
  }
  if !issetDbname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Dbname is not set"));
  }
  return nil
}

func (p *LockComponent)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := LockType(v)
  p.Type = temp
}
  return nil
}

func (p *LockComponent)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := LockLevel(v)
  p.Level = temp
}
  return nil
}

func (p *LockComponent)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *LockComponent)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Tablename = &v
}
  return nil
}

func (p *LockComponent)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Partitionname = &v
}
  return nil
}

func (p *LockComponent)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := DataOperationType(v)
  p.OperationType = temp
}
  return nil
}

func (p *LockComponent)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.IsAcid = v
}
  return nil
}

func (p *LockComponent)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IsDynamicPartitionWrite = v
}
  return nil
}

func (p *LockComponent) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LockComponent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LockComponent) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *LockComponent) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "level", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err) }
  return err
}

func (p *LockComponent) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dbname: ", p), err) }
  return err
}

func (p *LockComponent) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTablename() {
    if err := oprot.WriteFieldBegin(ctx, "tablename", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tablename: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Tablename)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tablename (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tablename: ", p), err) }
  }
  return err
}

func (p *LockComponent) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPartitionname() {
    if err := oprot.WriteFieldBegin(ctx, "partitionname", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:partitionname: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Partitionname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.partitionname (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:partitionname: ", p), err) }
  }
  return err
}

func (p *LockComponent) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOperationType() {
    if err := oprot.WriteFieldBegin(ctx, "operationType", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:operationType: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.OperationType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.operationType (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:operationType: ", p), err) }
  }
  return err
}

func (p *LockComponent) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIsAcid() {
    if err := oprot.WriteFieldBegin(ctx, "isAcid", thrift.BOOL, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:isAcid: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.IsAcid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isAcid (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:isAcid: ", p), err) }
  }
  return err
}

func (p *LockComponent) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIsDynamicPartitionWrite() {
    if err := oprot.WriteFieldBegin(ctx, "isDynamicPartitionWrite", thrift.BOOL, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:isDynamicPartitionWrite: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.IsDynamicPartitionWrite)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isDynamicPartitionWrite (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:isDynamicPartitionWrite: ", p), err) }
  }
  return err
}

func (p *LockComponent) Equals(other *LockComponent) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.Level != other.Level { return false }
  if p.Dbname != other.Dbname { return false }
  if p.Tablename != other.Tablename {
    if p.Tablename == nil || other.Tablename == nil {
      return false
    }
    if (*p.Tablename) != (*other.Tablename) { return false }
  }
  if p.Partitionname != other.Partitionname {
    if p.Partitionname == nil || other.Partitionname == nil {
      return false
    }
    if (*p.Partitionname) != (*other.Partitionname) { return false }
  }
  if p.OperationType != other.OperationType { return false }
  if p.IsAcid != other.IsAcid { return false }
  if p.IsDynamicPartitionWrite != other.IsDynamicPartitionWrite { return false }
  return true
}

func (p *LockComponent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LockComponent(%+v)", *p)
}

// Attributes:
//  - Component
//  - Txnid
//  - User
//  - Hostname
//  - AgentInfo
type LockRequest struct {
  Component []*LockComponent `thrift:"component,1,required" db:"component" json:"component"`
  Txnid *int64 `thrift:"txnid,2" db:"txnid" json:"txnid,omitempty"`
  User string `thrift:"user,3,required" db:"user" json:"user"`
  Hostname string `thrift:"hostname,4,required" db:"hostname" json:"hostname"`
  AgentInfo string `thrift:"agentInfo,5" db:"agentInfo" json:"agentInfo"`
}

func NewLockRequest() *LockRequest {
  return &LockRequest{
AgentInfo: "Unknown",
}
}


func (p *LockRequest) GetComponent() []*LockComponent {
  return p.Component
}
var LockRequest_Txnid_DEFAULT int64
func (p *LockRequest) GetTxnid() int64 {
  if !p.IsSetTxnid() {
    return LockRequest_Txnid_DEFAULT
  }
return *p.Txnid
}

func (p *LockRequest) GetUser() string {
  return p.User
}

func (p *LockRequest) GetHostname() string {
  return p.Hostname
}
var LockRequest_AgentInfo_DEFAULT string = "Unknown"

func (p *LockRequest) GetAgentInfo() string {
  return p.AgentInfo
}
func (p *LockRequest) IsSetTxnid() bool {
  return p.Txnid != nil
}

func (p *LockRequest) IsSetAgentInfo() bool {
  return p.AgentInfo != LockRequest_AgentInfo_DEFAULT
}

func (p *LockRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetComponent bool = false;
  var issetUser bool = false;
  var issetHostname bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetComponent = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetUser = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetHostname = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetComponent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Component is not set"));
  }
  if !issetUser{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field User is not set"));
  }
  if !issetHostname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Hostname is not set"));
  }
  return nil
}

func (p *LockRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*LockComponent, 0, size)
  p.Component =  tSlice
  for i := 0; i < size; i ++ {
    _elem144 := &LockComponent{
    OperationType:     5,
}
    if err := _elem144.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem144), err)
    }
    p.Component = append(p.Component, _elem144)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LockRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Txnid = &v
}
  return nil
}

func (p *LockRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *LockRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Hostname = v
}
  return nil
}

func (p *LockRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AgentInfo = v
}
  return nil
}

func (p *LockRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LockRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LockRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "component", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:component: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Component)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Component {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:component: ", p), err) }
  return err
}

func (p *LockRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTxnid() {
    if err := oprot.WriteFieldBegin(ctx, "txnid", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:txnid: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Txnid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.txnid (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:txnid: ", p), err) }
  }
  return err
}

func (p *LockRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user: ", p), err) }
  return err
}

func (p *LockRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostname", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hostname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Hostname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostname (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hostname: ", p), err) }
  return err
}

func (p *LockRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAgentInfo() {
    if err := oprot.WriteFieldBegin(ctx, "agentInfo", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:agentInfo: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.AgentInfo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.agentInfo (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:agentInfo: ", p), err) }
  }
  return err
}

func (p *LockRequest) Equals(other *LockRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Component) != len(other.Component) { return false }
  for i, _tgt := range p.Component {
    _src145 := other.Component[i]
    if !_tgt.Equals(_src145) { return false }
  }
  if p.Txnid != other.Txnid {
    if p.Txnid == nil || other.Txnid == nil {
      return false
    }
    if (*p.Txnid) != (*other.Txnid) { return false }
  }
  if p.User != other.User { return false }
  if p.Hostname != other.Hostname { return false }
  if p.AgentInfo != other.AgentInfo { return false }
  return true
}

func (p *LockRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LockRequest(%+v)", *p)
}

// Attributes:
//  - Lockid
//  - State
type LockResponse struct {
  Lockid int64 `thrift:"lockid,1,required" db:"lockid" json:"lockid"`
  State LockState `thrift:"state,2,required" db:"state" json:"state"`
}

func NewLockResponse() *LockResponse {
  return &LockResponse{}
}


func (p *LockResponse) GetLockid() int64 {
  return p.Lockid
}

func (p *LockResponse) GetState() LockState {
  return p.State
}
func (p *LockResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetLockid bool = false;
  var issetState bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetLockid = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetState = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetLockid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Lockid is not set"));
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  return nil
}

func (p *LockResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Lockid = v
}
  return nil
}

func (p *LockResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := LockState(v)
  p.State = temp
}
  return nil
}

func (p *LockResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LockResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LockResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lockid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lockid: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Lockid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lockid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lockid: ", p), err) }
  return err
}

func (p *LockResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:state: ", p), err) }
  return err
}

func (p *LockResponse) Equals(other *LockResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Lockid != other.Lockid { return false }
  if p.State != other.State { return false }
  return true
}

func (p *LockResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LockResponse(%+v)", *p)
}

// Attributes:
//  - Lockid
//  - Txnid
//  - ElapsedMs
type CheckLockRequest struct {
  Lockid int64 `thrift:"lockid,1,required" db:"lockid" json:"lockid"`
  Txnid *int64 `thrift:"txnid,2" db:"txnid" json:"txnid,omitempty"`
  ElapsedMs *int64 `thrift:"elapsed_ms,3" db:"elapsed_ms" json:"elapsed_ms,omitempty"`
}

func NewCheckLockRequest() *CheckLockRequest {
  return &CheckLockRequest{}
}


func (p *CheckLockRequest) GetLockid() int64 {
  return p.Lockid
}
var CheckLockRequest_Txnid_DEFAULT int64
func (p *CheckLockRequest) GetTxnid() int64 {
  if !p.IsSetTxnid() {
    return CheckLockRequest_Txnid_DEFAULT
  }
return *p.Txnid
}
var CheckLockRequest_ElapsedMs_DEFAULT int64
func (p *CheckLockRequest) GetElapsedMs() int64 {
  if !p.IsSetElapsedMs() {
    return CheckLockRequest_ElapsedMs_DEFAULT
  }
return *p.ElapsedMs
}
func (p *CheckLockRequest) IsSetTxnid() bool {
  return p.Txnid != nil
}

func (p *CheckLockRequest) IsSetElapsedMs() bool {
  return p.ElapsedMs != nil
}

func (p *CheckLockRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetLockid bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetLockid = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetLockid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Lockid is not set"));
  }
  return nil
}

func (p *CheckLockRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Lockid = v
}
  return nil
}

func (p *CheckLockRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Txnid = &v
}
  return nil
}

func (p *CheckLockRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ElapsedMs = &v
}
  return nil
}

func (p *CheckLockRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CheckLockRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckLockRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lockid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lockid: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Lockid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lockid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lockid: ", p), err) }
  return err
}

func (p *CheckLockRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTxnid() {
    if err := oprot.WriteFieldBegin(ctx, "txnid", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:txnid: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Txnid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.txnid (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:txnid: ", p), err) }
  }
  return err
}

func (p *CheckLockRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetElapsedMs() {
    if err := oprot.WriteFieldBegin(ctx, "elapsed_ms", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:elapsed_ms: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ElapsedMs)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.elapsed_ms (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:elapsed_ms: ", p), err) }
  }
  return err
}

func (p *CheckLockRequest) Equals(other *CheckLockRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Lockid != other.Lockid { return false }
  if p.Txnid != other.Txnid {
    if p.Txnid == nil || other.Txnid == nil {
      return false
    }
    if (*p.Txnid) != (*other.Txnid) { return false }
  }
  if p.ElapsedMs != other.ElapsedMs {
    if p.ElapsedMs == nil || other.ElapsedMs == nil {
      return false
    }
    if (*p.ElapsedMs) != (*other.ElapsedMs) { return false }
  }
  return true
}

func (p *CheckLockRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckLockRequest(%+v)", *p)
}

// Attributes:
//  - Lockid
type UnlockRequest struct {
  Lockid int64 `thrift:"lockid,1,required" db:"lockid" json:"lockid"`
}

func NewUnlockRequest() *UnlockRequest {
  return &UnlockRequest{}
}


func (p *UnlockRequest) GetLockid() int64 {
  return p.Lockid
}
func (p *UnlockRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetLockid bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetLockid = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetLockid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Lockid is not set"));
  }
  return nil
}

func (p *UnlockRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Lockid = v
}
  return nil
}

func (p *UnlockRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UnlockRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnlockRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lockid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lockid: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Lockid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lockid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lockid: ", p), err) }
  return err
}

func (p *UnlockRequest) Equals(other *UnlockRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Lockid != other.Lockid { return false }
  return true
}

func (p *UnlockRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnlockRequest(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - Tablename
//  - Partname
//  - IsExtended
type ShowLocksRequest struct {
  Dbname *string `thrift:"dbname,1" db:"dbname" json:"dbname,omitempty"`
  Tablename *string `thrift:"tablename,2" db:"tablename" json:"tablename,omitempty"`
  Partname *string `thrift:"partname,3" db:"partname" json:"partname,omitempty"`
  IsExtended bool `thrift:"isExtended,4" db:"isExtended" json:"isExtended"`
}

func NewShowLocksRequest() *ShowLocksRequest {
  return &ShowLocksRequest{}
}

var ShowLocksRequest_Dbname_DEFAULT string
func (p *ShowLocksRequest) GetDbname() string {
  if !p.IsSetDbname() {
    return ShowLocksRequest_Dbname_DEFAULT
  }
return *p.Dbname
}
var ShowLocksRequest_Tablename_DEFAULT string
func (p *ShowLocksRequest) GetTablename() string {
  if !p.IsSetTablename() {
    return ShowLocksRequest_Tablename_DEFAULT
  }
return *p.Tablename
}
var ShowLocksRequest_Partname_DEFAULT string
func (p *ShowLocksRequest) GetPartname() string {
  if !p.IsSetPartname() {
    return ShowLocksRequest_Partname_DEFAULT
  }
return *p.Partname
}
var ShowLocksRequest_IsExtended_DEFAULT bool = false

func (p *ShowLocksRequest) GetIsExtended() bool {
  return p.IsExtended
}
func (p *ShowLocksRequest) IsSetDbname() bool {
  return p.Dbname != nil
}

func (p *ShowLocksRequest) IsSetTablename() bool {
  return p.Tablename != nil
}

func (p *ShowLocksRequest) IsSetPartname() bool {
  return p.Partname != nil
}

func (p *ShowLocksRequest) IsSetIsExtended() bool {
  return p.IsExtended != ShowLocksRequest_IsExtended_DEFAULT
}

func (p *ShowLocksRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShowLocksRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = &v
}
  return nil
}

func (p *ShowLocksRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tablename = &v
}
  return nil
}

func (p *ShowLocksRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Partname = &v
}
  return nil
}

func (p *ShowLocksRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsExtended = v
}
  return nil
}

func (p *ShowLocksRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ShowLocksRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShowLocksRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDbname() {
    if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Dbname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  }
  return err
}

func (p *ShowLocksRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTablename() {
    if err := oprot.WriteFieldBegin(ctx, "tablename", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tablename: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Tablename)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tablename (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tablename: ", p), err) }
  }
  return err
}

func (p *ShowLocksRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPartname() {
    if err := oprot.WriteFieldBegin(ctx, "partname", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partname: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Partname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.partname (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partname: ", p), err) }
  }
  return err
}

func (p *ShowLocksRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIsExtended() {
    if err := oprot.WriteFieldBegin(ctx, "isExtended", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isExtended: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.IsExtended)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isExtended (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isExtended: ", p), err) }
  }
  return err
}

func (p *ShowLocksRequest) Equals(other *ShowLocksRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Dbname != other.Dbname {
    if p.Dbname == nil || other.Dbname == nil {
      return false
    }
    if (*p.Dbname) != (*other.Dbname) { return false }
  }
  if p.Tablename != other.Tablename {
    if p.Tablename == nil || other.Tablename == nil {
      return false
    }
    if (*p.Tablename) != (*other.Tablename) { return false }
  }
  if p.Partname != other.Partname {
    if p.Partname == nil || other.Partname == nil {
      return false
    }
    if (*p.Partname) != (*other.Partname) { return false }
  }
  if p.IsExtended != other.IsExtended { return false }
  return true
}

func (p *ShowLocksRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShowLocksRequest(%+v)", *p)
}

// Attributes:
//  - Lockid
//  - Dbname
//  - Tablename
//  - Partname
//  - State
//  - Type
//  - Txnid
//  - Lastheartbeat
//  - Acquiredat
//  - User
//  - Hostname
//  - HeartbeatCount
//  - AgentInfo
//  - BlockedByExtId
//  - BlockedByIntId
//  - LockIdInternal
type ShowLocksResponseElement struct {
  Lockid int64 `thrift:"lockid,1,required" db:"lockid" json:"lockid"`
  Dbname string `thrift:"dbname,2,required" db:"dbname" json:"dbname"`
  Tablename *string `thrift:"tablename,3" db:"tablename" json:"tablename,omitempty"`
  Partname *string `thrift:"partname,4" db:"partname" json:"partname,omitempty"`
  State LockState `thrift:"state,5,required" db:"state" json:"state"`
  Type LockType `thrift:"type,6,required" db:"type" json:"type"`
  Txnid *int64 `thrift:"txnid,7" db:"txnid" json:"txnid,omitempty"`
  Lastheartbeat int64 `thrift:"lastheartbeat,8,required" db:"lastheartbeat" json:"lastheartbeat"`
  Acquiredat *int64 `thrift:"acquiredat,9" db:"acquiredat" json:"acquiredat,omitempty"`
  User string `thrift:"user,10,required" db:"user" json:"user"`
  Hostname string `thrift:"hostname,11,required" db:"hostname" json:"hostname"`
  HeartbeatCount int32 `thrift:"heartbeatCount,12" db:"heartbeatCount" json:"heartbeatCount"`
  AgentInfo *string `thrift:"agentInfo,13" db:"agentInfo" json:"agentInfo,omitempty"`
  BlockedByExtId *int64 `thrift:"blockedByExtId,14" db:"blockedByExtId" json:"blockedByExtId,omitempty"`
  BlockedByIntId *int64 `thrift:"blockedByIntId,15" db:"blockedByIntId" json:"blockedByIntId,omitempty"`
  LockIdInternal *int64 `thrift:"lockIdInternal,16" db:"lockIdInternal" json:"lockIdInternal,omitempty"`
}

func NewShowLocksResponseElement() *ShowLocksResponseElement {
  return &ShowLocksResponseElement{}
}


func (p *ShowLocksResponseElement) GetLockid() int64 {
  return p.Lockid
}

func (p *ShowLocksResponseElement) GetDbname() string {
  return p.Dbname
}
var ShowLocksResponseElement_Tablename_DEFAULT string
func (p *ShowLocksResponseElement) GetTablename() string {
  if !p.IsSetTablename() {
    return ShowLocksResponseElement_Tablename_DEFAULT
  }
return *p.Tablename
}
var ShowLocksResponseElement_Partname_DEFAULT string
func (p *ShowLocksResponseElement) GetPartname() string {
  if !p.IsSetPartname() {
    return ShowLocksResponseElement_Partname_DEFAULT
  }
return *p.Partname
}

func (p *ShowLocksResponseElement) GetState() LockState {
  return p.State
}

func (p *ShowLocksResponseElement) GetType() LockType {
  return p.Type
}
var ShowLocksResponseElement_Txnid_DEFAULT int64
func (p *ShowLocksResponseElement) GetTxnid() int64 {
  if !p.IsSetTxnid() {
    return ShowLocksResponseElement_Txnid_DEFAULT
  }
return *p.Txnid
}

func (p *ShowLocksResponseElement) GetLastheartbeat() int64 {
  return p.Lastheartbeat
}
var ShowLocksResponseElement_Acquiredat_DEFAULT int64
func (p *ShowLocksResponseElement) GetAcquiredat() int64 {
  if !p.IsSetAcquiredat() {
    return ShowLocksResponseElement_Acquiredat_DEFAULT
  }
return *p.Acquiredat
}

func (p *ShowLocksResponseElement) GetUser() string {
  return p.User
}

func (p *ShowLocksResponseElement) GetHostname() string {
  return p.Hostname
}
var ShowLocksResponseElement_HeartbeatCount_DEFAULT int32 = 0

func (p *ShowLocksResponseElement) GetHeartbeatCount() int32 {
  return p.HeartbeatCount
}
var ShowLocksResponseElement_AgentInfo_DEFAULT string
func (p *ShowLocksResponseElement) GetAgentInfo() string {
  if !p.IsSetAgentInfo() {
    return ShowLocksResponseElement_AgentInfo_DEFAULT
  }
return *p.AgentInfo
}
var ShowLocksResponseElement_BlockedByExtId_DEFAULT int64
func (p *ShowLocksResponseElement) GetBlockedByExtId() int64 {
  if !p.IsSetBlockedByExtId() {
    return ShowLocksResponseElement_BlockedByExtId_DEFAULT
  }
return *p.BlockedByExtId
}
var ShowLocksResponseElement_BlockedByIntId_DEFAULT int64
func (p *ShowLocksResponseElement) GetBlockedByIntId() int64 {
  if !p.IsSetBlockedByIntId() {
    return ShowLocksResponseElement_BlockedByIntId_DEFAULT
  }
return *p.BlockedByIntId
}
var ShowLocksResponseElement_LockIdInternal_DEFAULT int64
func (p *ShowLocksResponseElement) GetLockIdInternal() int64 {
  if !p.IsSetLockIdInternal() {
    return ShowLocksResponseElement_LockIdInternal_DEFAULT
  }
return *p.LockIdInternal
}
func (p *ShowLocksResponseElement) IsSetTablename() bool {
  return p.Tablename != nil
}

func (p *ShowLocksResponseElement) IsSetPartname() bool {
  return p.Partname != nil
}

func (p *ShowLocksResponseElement) IsSetTxnid() bool {
  return p.Txnid != nil
}

func (p *ShowLocksResponseElement) IsSetAcquiredat() bool {
  return p.Acquiredat != nil
}

func (p *ShowLocksResponseElement) IsSetHeartbeatCount() bool {
  return p.HeartbeatCount != ShowLocksResponseElement_HeartbeatCount_DEFAULT
}

func (p *ShowLocksResponseElement) IsSetAgentInfo() bool {
  return p.AgentInfo != nil
}

func (p *ShowLocksResponseElement) IsSetBlockedByExtId() bool {
  return p.BlockedByExtId != nil
}

func (p *ShowLocksResponseElement) IsSetBlockedByIntId() bool {
  return p.BlockedByIntId != nil
}

func (p *ShowLocksResponseElement) IsSetLockIdInternal() bool {
  return p.LockIdInternal != nil
}

func (p *ShowLocksResponseElement) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetLockid bool = false;
  var issetDbname bool = false;
  var issetState bool = false;
  var issetType bool = false;
  var issetLastheartbeat bool = false;
  var issetUser bool = false;
  var issetHostname bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetLockid = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetDbname = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetState = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
        issetLastheartbeat = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
        issetUser = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
        issetHostname = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetLockid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Lockid is not set"));
  }
  if !issetDbname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Dbname is not set"));
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetLastheartbeat{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Lastheartbeat is not set"));
  }
  if !issetUser{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field User is not set"));
  }
  if !issetHostname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Hostname is not set"));
  }
  return nil
}

func (p *ShowLocksResponseElement)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Lockid = v
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Tablename = &v
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Partname = &v
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := LockState(v)
  p.State = temp
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := LockType(v)
  p.Type = temp
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Txnid = &v
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Lastheartbeat = v
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Acquiredat = &v
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Hostname = v
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.HeartbeatCount = v
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.AgentInfo = &v
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.BlockedByExtId = &v
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.BlockedByIntId = &v
}
  return nil
}

func (p *ShowLocksResponseElement)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.LockIdInternal = &v
}
  return nil
}

func (p *ShowLocksResponseElement) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ShowLocksResponseElement"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShowLocksResponseElement) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lockid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lockid: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Lockid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lockid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lockid: ", p), err) }
  return err
}

func (p *ShowLocksResponseElement) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbname: ", p), err) }
  return err
}

func (p *ShowLocksResponseElement) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTablename() {
    if err := oprot.WriteFieldBegin(ctx, "tablename", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tablename: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Tablename)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tablename (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tablename: ", p), err) }
  }
  return err
}

func (p *ShowLocksResponseElement) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPartname() {
    if err := oprot.WriteFieldBegin(ctx, "partname", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partname: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Partname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.partname (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partname: ", p), err) }
  }
  return err
}

func (p *ShowLocksResponseElement) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:state: ", p), err) }
  return err
}

func (p *ShowLocksResponseElement) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:type: ", p), err) }
  return err
}

func (p *ShowLocksResponseElement) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTxnid() {
    if err := oprot.WriteFieldBegin(ctx, "txnid", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:txnid: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Txnid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.txnid (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:txnid: ", p), err) }
  }
  return err
}

func (p *ShowLocksResponseElement) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastheartbeat", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:lastheartbeat: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Lastheartbeat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastheartbeat (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:lastheartbeat: ", p), err) }
  return err
}

func (p *ShowLocksResponseElement) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAcquiredat() {
    if err := oprot.WriteFieldBegin(ctx, "acquiredat", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:acquiredat: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Acquiredat)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.acquiredat (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:acquiredat: ", p), err) }
  }
  return err
}

func (p *ShowLocksResponseElement) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:user: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:user: ", p), err) }
  return err
}

func (p *ShowLocksResponseElement) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostname", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:hostname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Hostname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostname (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:hostname: ", p), err) }
  return err
}

func (p *ShowLocksResponseElement) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHeartbeatCount() {
    if err := oprot.WriteFieldBegin(ctx, "heartbeatCount", thrift.I32, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:heartbeatCount: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.HeartbeatCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.heartbeatCount (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:heartbeatCount: ", p), err) }
  }
  return err
}

func (p *ShowLocksResponseElement) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAgentInfo() {
    if err := oprot.WriteFieldBegin(ctx, "agentInfo", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:agentInfo: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.AgentInfo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.agentInfo (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:agentInfo: ", p), err) }
  }
  return err
}

func (p *ShowLocksResponseElement) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBlockedByExtId() {
    if err := oprot.WriteFieldBegin(ctx, "blockedByExtId", thrift.I64, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:blockedByExtId: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.BlockedByExtId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.blockedByExtId (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:blockedByExtId: ", p), err) }
  }
  return err
}

func (p *ShowLocksResponseElement) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBlockedByIntId() {
    if err := oprot.WriteFieldBegin(ctx, "blockedByIntId", thrift.I64, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:blockedByIntId: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.BlockedByIntId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.blockedByIntId (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:blockedByIntId: ", p), err) }
  }
  return err
}

func (p *ShowLocksResponseElement) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLockIdInternal() {
    if err := oprot.WriteFieldBegin(ctx, "lockIdInternal", thrift.I64, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:lockIdInternal: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.LockIdInternal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lockIdInternal (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:lockIdInternal: ", p), err) }
  }
  return err
}

func (p *ShowLocksResponseElement) Equals(other *ShowLocksResponseElement) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Lockid != other.Lockid { return false }
  if p.Dbname != other.Dbname { return false }
  if p.Tablename != other.Tablename {
    if p.Tablename == nil || other.Tablename == nil {
      return false
    }
    if (*p.Tablename) != (*other.Tablename) { return false }
  }
  if p.Partname != other.Partname {
    if p.Partname == nil || other.Partname == nil {
      return false
    }
    if (*p.Partname) != (*other.Partname) { return false }
  }
  if p.State != other.State { return false }
  if p.Type != other.Type { return false }
  if p.Txnid != other.Txnid {
    if p.Txnid == nil || other.Txnid == nil {
      return false
    }
    if (*p.Txnid) != (*other.Txnid) { return false }
  }
  if p.Lastheartbeat != other.Lastheartbeat { return false }
  if p.Acquiredat != other.Acquiredat {
    if p.Acquiredat == nil || other.Acquiredat == nil {
      return false
    }
    if (*p.Acquiredat) != (*other.Acquiredat) { return false }
  }
  if p.User != other.User { return false }
  if p.Hostname != other.Hostname { return false }
  if p.HeartbeatCount != other.HeartbeatCount { return false }
  if p.AgentInfo != other.AgentInfo {
    if p.AgentInfo == nil || other.AgentInfo == nil {
      return false
    }
    if (*p.AgentInfo) != (*other.AgentInfo) { return false }
  }
  if p.BlockedByExtId != other.BlockedByExtId {
    if p.BlockedByExtId == nil || other.BlockedByExtId == nil {
      return false
    }
    if (*p.BlockedByExtId) != (*other.BlockedByExtId) { return false }
  }
  if p.BlockedByIntId != other.BlockedByIntId {
    if p.BlockedByIntId == nil || other.BlockedByIntId == nil {
      return false
    }
    if (*p.BlockedByIntId) != (*other.BlockedByIntId) { return false }
  }
  if p.LockIdInternal != other.LockIdInternal {
    if p.LockIdInternal == nil || other.LockIdInternal == nil {
      return false
    }
    if (*p.LockIdInternal) != (*other.LockIdInternal) { return false }
  }
  return true
}

func (p *ShowLocksResponseElement) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShowLocksResponseElement(%+v)", *p)
}

// Attributes:
//  - Locks
type ShowLocksResponse struct {
  Locks []*ShowLocksResponseElement `thrift:"locks,1" db:"locks" json:"locks"`
}

func NewShowLocksResponse() *ShowLocksResponse {
  return &ShowLocksResponse{}
}


func (p *ShowLocksResponse) GetLocks() []*ShowLocksResponseElement {
  return p.Locks
}
func (p *ShowLocksResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShowLocksResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ShowLocksResponseElement, 0, size)
  p.Locks =  tSlice
  for i := 0; i < size; i ++ {
    _elem146 := &ShowLocksResponseElement{}
    if err := _elem146.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem146), err)
    }
    p.Locks = append(p.Locks, _elem146)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ShowLocksResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ShowLocksResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShowLocksResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locks", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:locks: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Locks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Locks {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:locks: ", p), err) }
  return err
}

func (p *ShowLocksResponse) Equals(other *ShowLocksResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Locks) != len(other.Locks) { return false }
  for i, _tgt := range p.Locks {
    _src147 := other.Locks[i]
    if !_tgt.Equals(_src147) { return false }
  }
  return true
}

func (p *ShowLocksResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShowLocksResponse(%+v)", *p)
}

// Attributes:
//  - Lockid
//  - Txnid
type HeartbeatRequest struct {
  Lockid *int64 `thrift:"lockid,1" db:"lockid" json:"lockid,omitempty"`
  Txnid *int64 `thrift:"txnid,2" db:"txnid" json:"txnid,omitempty"`
}

func NewHeartbeatRequest() *HeartbeatRequest {
  return &HeartbeatRequest{}
}

var HeartbeatRequest_Lockid_DEFAULT int64
func (p *HeartbeatRequest) GetLockid() int64 {
  if !p.IsSetLockid() {
    return HeartbeatRequest_Lockid_DEFAULT
  }
return *p.Lockid
}
var HeartbeatRequest_Txnid_DEFAULT int64
func (p *HeartbeatRequest) GetTxnid() int64 {
  if !p.IsSetTxnid() {
    return HeartbeatRequest_Txnid_DEFAULT
  }
return *p.Txnid
}
func (p *HeartbeatRequest) IsSetLockid() bool {
  return p.Lockid != nil
}

func (p *HeartbeatRequest) IsSetTxnid() bool {
  return p.Txnid != nil
}

func (p *HeartbeatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HeartbeatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Lockid = &v
}
  return nil
}

func (p *HeartbeatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Txnid = &v
}
  return nil
}

func (p *HeartbeatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HeartbeatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartbeatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLockid() {
    if err := oprot.WriteFieldBegin(ctx, "lockid", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lockid: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Lockid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lockid (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lockid: ", p), err) }
  }
  return err
}

func (p *HeartbeatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTxnid() {
    if err := oprot.WriteFieldBegin(ctx, "txnid", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:txnid: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Txnid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.txnid (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:txnid: ", p), err) }
  }
  return err
}

func (p *HeartbeatRequest) Equals(other *HeartbeatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Lockid != other.Lockid {
    if p.Lockid == nil || other.Lockid == nil {
      return false
    }
    if (*p.Lockid) != (*other.Lockid) { return false }
  }
  if p.Txnid != other.Txnid {
    if p.Txnid == nil || other.Txnid == nil {
      return false
    }
    if (*p.Txnid) != (*other.Txnid) { return false }
  }
  return true
}

func (p *HeartbeatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HeartbeatRequest(%+v)", *p)
}

// Attributes:
//  - Min
//  - Max
type HeartbeatTxnRangeRequest struct {
  Min int64 `thrift:"min,1,required" db:"min" json:"min"`
  Max int64 `thrift:"max,2,required" db:"max" json:"max"`
}

func NewHeartbeatTxnRangeRequest() *HeartbeatTxnRangeRequest {
  return &HeartbeatTxnRangeRequest{}
}


func (p *HeartbeatTxnRangeRequest) GetMin() int64 {
  return p.Min
}

func (p *HeartbeatTxnRangeRequest) GetMax() int64 {
  return p.Max
}
func (p *HeartbeatTxnRangeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMin bool = false;
  var issetMax bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMin = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetMax = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMin{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Min is not set"));
  }
  if !issetMax{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Max is not set"));
  }
  return nil
}

func (p *HeartbeatTxnRangeRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Min = v
}
  return nil
}

func (p *HeartbeatTxnRangeRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Max = v
}
  return nil
}

func (p *HeartbeatTxnRangeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HeartbeatTxnRangeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartbeatTxnRangeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "min", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:min: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Min)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.min (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:min: ", p), err) }
  return err
}

func (p *HeartbeatTxnRangeRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Max)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max: ", p), err) }
  return err
}

func (p *HeartbeatTxnRangeRequest) Equals(other *HeartbeatTxnRangeRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Min != other.Min { return false }
  if p.Max != other.Max { return false }
  return true
}

func (p *HeartbeatTxnRangeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HeartbeatTxnRangeRequest(%+v)", *p)
}

// Attributes:
//  - Aborted
//  - Nosuch
type HeartbeatTxnRangeResponse struct {
  Aborted []int64 `thrift:"aborted,1,required" db:"aborted" json:"aborted"`
  Nosuch []int64 `thrift:"nosuch,2,required" db:"nosuch" json:"nosuch"`
}

func NewHeartbeatTxnRangeResponse() *HeartbeatTxnRangeResponse {
  return &HeartbeatTxnRangeResponse{}
}


func (p *HeartbeatTxnRangeResponse) GetAborted() []int64 {
  return p.Aborted
}

func (p *HeartbeatTxnRangeResponse) GetNosuch() []int64 {
  return p.Nosuch
}
func (p *HeartbeatTxnRangeResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAborted bool = false;
  var issetNosuch bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetAborted = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetNosuch = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAborted{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Aborted is not set"));
  }
  if !issetNosuch{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Nosuch is not set"));
  }
  return nil
}

func (p *HeartbeatTxnRangeResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]int64, 0, size)
  p.Aborted =  tSet
  for i := 0; i < size; i ++ {
var _elem148 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem148 = v
}
    p.Aborted = append(p.Aborted, _elem148)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *HeartbeatTxnRangeResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]int64, 0, size)
  p.Nosuch =  tSet
  for i := 0; i < size; i ++ {
var _elem149 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem149 = v
}
    p.Nosuch = append(p.Nosuch, _elem149)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *HeartbeatTxnRangeResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HeartbeatTxnRangeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartbeatTxnRangeResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "aborted", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aborted: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I64, len(p.Aborted)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Aborted); i++ {
    for j := i+1; j<len(p.Aborted); j++ {
      if func(tgt, src int64) bool {
        if tgt != src { return false }
        return true
      }(p.Aborted[i], p.Aborted[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Aborted))
      }
    }
  }
  for _, v := range p.Aborted {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aborted: ", p), err) }
  return err
}

func (p *HeartbeatTxnRangeResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nosuch", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nosuch: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I64, len(p.Nosuch)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Nosuch); i++ {
    for j := i+1; j<len(p.Nosuch); j++ {
      if func(tgt, src int64) bool {
        if tgt != src { return false }
        return true
      }(p.Nosuch[i], p.Nosuch[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Nosuch))
      }
    }
  }
  for _, v := range p.Nosuch {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nosuch: ", p), err) }
  return err
}

func (p *HeartbeatTxnRangeResponse) Equals(other *HeartbeatTxnRangeResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Aborted) != len(other.Aborted) { return false }
  for i, _tgt := range p.Aborted {
    _src150 := other.Aborted[i]
    if _tgt != _src150 { return false }
  }
  if len(p.Nosuch) != len(other.Nosuch) { return false }
  for i, _tgt := range p.Nosuch {
    _src151 := other.Nosuch[i]
    if _tgt != _src151 { return false }
  }
  return true
}

func (p *HeartbeatTxnRangeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HeartbeatTxnRangeResponse(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - Tablename
//  - Partitionname
//  - Type
//  - Runas
//  - Properties
type CompactionRequest struct {
  Dbname string `thrift:"dbname,1,required" db:"dbname" json:"dbname"`
  Tablename string `thrift:"tablename,2,required" db:"tablename" json:"tablename"`
  Partitionname *string `thrift:"partitionname,3" db:"partitionname" json:"partitionname,omitempty"`
  Type CompactionType `thrift:"type,4,required" db:"type" json:"type"`
  Runas *string `thrift:"runas,5" db:"runas" json:"runas,omitempty"`
  Properties map[string]string `thrift:"properties,6" db:"properties" json:"properties,omitempty"`
}

func NewCompactionRequest() *CompactionRequest {
  return &CompactionRequest{}
}


func (p *CompactionRequest) GetDbname() string {
  return p.Dbname
}

func (p *CompactionRequest) GetTablename() string {
  return p.Tablename
}
var CompactionRequest_Partitionname_DEFAULT string
func (p *CompactionRequest) GetPartitionname() string {
  if !p.IsSetPartitionname() {
    return CompactionRequest_Partitionname_DEFAULT
  }
return *p.Partitionname
}

func (p *CompactionRequest) GetType() CompactionType {
  return p.Type
}
var CompactionRequest_Runas_DEFAULT string
func (p *CompactionRequest) GetRunas() string {
  if !p.IsSetRunas() {
    return CompactionRequest_Runas_DEFAULT
  }
return *p.Runas
}
var CompactionRequest_Properties_DEFAULT map[string]string

func (p *CompactionRequest) GetProperties() map[string]string {
  return p.Properties
}
func (p *CompactionRequest) IsSetPartitionname() bool {
  return p.Partitionname != nil
}

func (p *CompactionRequest) IsSetRunas() bool {
  return p.Runas != nil
}

func (p *CompactionRequest) IsSetProperties() bool {
  return p.Properties != nil
}

func (p *CompactionRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbname bool = false;
  var issetTablename bool = false;
  var issetType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbname = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTablename = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Dbname is not set"));
  }
  if !issetTablename{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tablename is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  return nil
}

func (p *CompactionRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *CompactionRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tablename = v
}
  return nil
}

func (p *CompactionRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Partitionname = &v
}
  return nil
}

func (p *CompactionRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := CompactionType(v)
  p.Type = temp
}
  return nil
}

func (p *CompactionRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Runas = &v
}
  return nil
}

func (p *CompactionRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Properties =  tMap
  for i := 0; i < size; i ++ {
var _key152 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key152 = v
}
var _val153 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val153 = v
}
    p.Properties[_key152] = _val153
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CompactionRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CompactionRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompactionRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *CompactionRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tablename", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tablename: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tablename)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tablename (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tablename: ", p), err) }
  return err
}

func (p *CompactionRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPartitionname() {
    if err := oprot.WriteFieldBegin(ctx, "partitionname", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partitionname: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Partitionname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.partitionname (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partitionname: ", p), err) }
  }
  return err
}

func (p *CompactionRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err) }
  return err
}

func (p *CompactionRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunas() {
    if err := oprot.WriteFieldBegin(ctx, "runas", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:runas: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Runas)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.runas (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:runas: ", p), err) }
  }
  return err
}

func (p *CompactionRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetProperties() {
    if err := oprot.WriteFieldBegin(ctx, "properties", thrift.MAP, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:properties: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Properties {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:properties: ", p), err) }
  }
  return err
}

func (p *CompactionRequest) Equals(other *CompactionRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Dbname != other.Dbname { return false }
  if p.Tablename != other.Tablename { return false }
  if p.Partitionname != other.Partitionname {
    if p.Partitionname == nil || other.Partitionname == nil {
      return false
    }
    if (*p.Partitionname) != (*other.Partitionname) { return false }
  }
  if p.Type != other.Type { return false }
  if p.Runas != other.Runas {
    if p.Runas == nil || other.Runas == nil {
      return false
    }
    if (*p.Runas) != (*other.Runas) { return false }
  }
  if len(p.Properties) != len(other.Properties) { return false }
  for k, _tgt := range p.Properties {
    _src154 := other.Properties[k]
    if _tgt != _src154 { return false }
  }
  return true
}

func (p *CompactionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompactionRequest(%+v)", *p)
}

// Attributes:
//  - ID
//  - State
//  - Accepted
type CompactionResponse struct {
  ID int64 `thrift:"id,1,required" db:"id" json:"id"`
  State string `thrift:"state,2,required" db:"state" json:"state"`
  Accepted bool `thrift:"accepted,3,required" db:"accepted" json:"accepted"`
}

func NewCompactionResponse() *CompactionResponse {
  return &CompactionResponse{}
}


func (p *CompactionResponse) GetID() int64 {
  return p.ID
}

func (p *CompactionResponse) GetState() string {
  return p.State
}

func (p *CompactionResponse) GetAccepted() bool {
  return p.Accepted
}
func (p *CompactionResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetState bool = false;
  var issetAccepted bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetState = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetAccepted = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetAccepted{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Accepted is not set"));
  }
  return nil
}

func (p *CompactionResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *CompactionResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.State = v
}
  return nil
}

func (p *CompactionResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Accepted = v
}
  return nil
}

func (p *CompactionResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CompactionResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompactionResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CompactionResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:state: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:state: ", p), err) }
  return err
}

func (p *CompactionResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accepted", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accepted: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Accepted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accepted (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accepted: ", p), err) }
  return err
}

func (p *CompactionResponse) Equals(other *CompactionResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.State != other.State { return false }
  if p.Accepted != other.Accepted { return false }
  return true
}

func (p *CompactionResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompactionResponse(%+v)", *p)
}

type ShowCompactRequest struct {
}

func NewShowCompactRequest() *ShowCompactRequest {
  return &ShowCompactRequest{}
}

func (p *ShowCompactRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShowCompactRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ShowCompactRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShowCompactRequest) Equals(other *ShowCompactRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *ShowCompactRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShowCompactRequest(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - Tablename
//  - Partitionname
//  - Type
//  - State
//  - Workerid
//  - Start
//  - RunAs
//  - HightestTxnId
//  - MetaInfo
//  - EndTime
//  - HadoopJobId
//  - ID
type ShowCompactResponseElement struct {
  Dbname string `thrift:"dbname,1,required" db:"dbname" json:"dbname"`
  Tablename string `thrift:"tablename,2,required" db:"tablename" json:"tablename"`
  Partitionname *string `thrift:"partitionname,3" db:"partitionname" json:"partitionname,omitempty"`
  Type CompactionType `thrift:"type,4,required" db:"type" json:"type"`
  State string `thrift:"state,5,required" db:"state" json:"state"`
  Workerid *string `thrift:"workerid,6" db:"workerid" json:"workerid,omitempty"`
  Start *int64 `thrift:"start,7" db:"start" json:"start,omitempty"`
  RunAs *string `thrift:"runAs,8" db:"runAs" json:"runAs,omitempty"`
  HightestTxnId *int64 `thrift:"hightestTxnId,9" db:"hightestTxnId" json:"hightestTxnId,omitempty"`
  MetaInfo *string `thrift:"metaInfo,10" db:"metaInfo" json:"metaInfo,omitempty"`
  EndTime *int64 `thrift:"endTime,11" db:"endTime" json:"endTime,omitempty"`
  HadoopJobId string `thrift:"hadoopJobId,12" db:"hadoopJobId" json:"hadoopJobId"`
  ID *int64 `thrift:"id,13" db:"id" json:"id,omitempty"`
}

func NewShowCompactResponseElement() *ShowCompactResponseElement {
  return &ShowCompactResponseElement{
HadoopJobId: "None",
}
}


func (p *ShowCompactResponseElement) GetDbname() string {
  return p.Dbname
}

func (p *ShowCompactResponseElement) GetTablename() string {
  return p.Tablename
}
var ShowCompactResponseElement_Partitionname_DEFAULT string
func (p *ShowCompactResponseElement) GetPartitionname() string {
  if !p.IsSetPartitionname() {
    return ShowCompactResponseElement_Partitionname_DEFAULT
  }
return *p.Partitionname
}

func (p *ShowCompactResponseElement) GetType() CompactionType {
  return p.Type
}

func (p *ShowCompactResponseElement) GetState() string {
  return p.State
}
var ShowCompactResponseElement_Workerid_DEFAULT string
func (p *ShowCompactResponseElement) GetWorkerid() string {
  if !p.IsSetWorkerid() {
    return ShowCompactResponseElement_Workerid_DEFAULT
  }
return *p.Workerid
}
var ShowCompactResponseElement_Start_DEFAULT int64
func (p *ShowCompactResponseElement) GetStart() int64 {
  if !p.IsSetStart() {
    return ShowCompactResponseElement_Start_DEFAULT
  }
return *p.Start
}
var ShowCompactResponseElement_RunAs_DEFAULT string
func (p *ShowCompactResponseElement) GetRunAs() string {
  if !p.IsSetRunAs() {
    return ShowCompactResponseElement_RunAs_DEFAULT
  }
return *p.RunAs
}
var ShowCompactResponseElement_HightestTxnId_DEFAULT int64
func (p *ShowCompactResponseElement) GetHightestTxnId() int64 {
  if !p.IsSetHightestTxnId() {
    return ShowCompactResponseElement_HightestTxnId_DEFAULT
  }
return *p.HightestTxnId
}
var ShowCompactResponseElement_MetaInfo_DEFAULT string
func (p *ShowCompactResponseElement) GetMetaInfo() string {
  if !p.IsSetMetaInfo() {
    return ShowCompactResponseElement_MetaInfo_DEFAULT
  }
return *p.MetaInfo
}
var ShowCompactResponseElement_EndTime_DEFAULT int64
func (p *ShowCompactResponseElement) GetEndTime() int64 {
  if !p.IsSetEndTime() {
    return ShowCompactResponseElement_EndTime_DEFAULT
  }
return *p.EndTime
}
var ShowCompactResponseElement_HadoopJobId_DEFAULT string = "None"

func (p *ShowCompactResponseElement) GetHadoopJobId() string {
  return p.HadoopJobId
}
var ShowCompactResponseElement_ID_DEFAULT int64
func (p *ShowCompactResponseElement) GetID() int64 {
  if !p.IsSetID() {
    return ShowCompactResponseElement_ID_DEFAULT
  }
return *p.ID
}
func (p *ShowCompactResponseElement) IsSetPartitionname() bool {
  return p.Partitionname != nil
}

func (p *ShowCompactResponseElement) IsSetWorkerid() bool {
  return p.Workerid != nil
}

func (p *ShowCompactResponseElement) IsSetStart() bool {
  return p.Start != nil
}

func (p *ShowCompactResponseElement) IsSetRunAs() bool {
  return p.RunAs != nil
}

func (p *ShowCompactResponseElement) IsSetHightestTxnId() bool {
  return p.HightestTxnId != nil
}

func (p *ShowCompactResponseElement) IsSetMetaInfo() bool {
  return p.MetaInfo != nil
}

func (p *ShowCompactResponseElement) IsSetEndTime() bool {
  return p.EndTime != nil
}

func (p *ShowCompactResponseElement) IsSetHadoopJobId() bool {
  return p.HadoopJobId != ShowCompactResponseElement_HadoopJobId_DEFAULT
}

func (p *ShowCompactResponseElement) IsSetID() bool {
  return p.ID != nil
}

func (p *ShowCompactResponseElement) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbname bool = false;
  var issetTablename bool = false;
  var issetType bool = false;
  var issetState bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbname = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTablename = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetState = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Dbname is not set"));
  }
  if !issetTablename{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tablename is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  return nil
}

func (p *ShowCompactResponseElement)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ShowCompactResponseElement)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tablename = v
}
  return nil
}

func (p *ShowCompactResponseElement)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Partitionname = &v
}
  return nil
}

func (p *ShowCompactResponseElement)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := CompactionType(v)
  p.Type = temp
}
  return nil
}

func (p *ShowCompactResponseElement)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.State = v
}
  return nil
}

func (p *ShowCompactResponseElement)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Workerid = &v
}
  return nil
}

func (p *ShowCompactResponseElement)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Start = &v
}
  return nil
}

func (p *ShowCompactResponseElement)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RunAs = &v
}
  return nil
}

func (p *ShowCompactResponseElement)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.HightestTxnId = &v
}
  return nil
}

func (p *ShowCompactResponseElement)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.MetaInfo = &v
}
  return nil
}

func (p *ShowCompactResponseElement)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.EndTime = &v
}
  return nil
}

func (p *ShowCompactResponseElement)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.HadoopJobId = v
}
  return nil
}

func (p *ShowCompactResponseElement)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *ShowCompactResponseElement) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ShowCompactResponseElement"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShowCompactResponseElement) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ShowCompactResponseElement) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tablename", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tablename: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tablename)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tablename (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tablename: ", p), err) }
  return err
}

func (p *ShowCompactResponseElement) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPartitionname() {
    if err := oprot.WriteFieldBegin(ctx, "partitionname", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partitionname: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Partitionname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.partitionname (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partitionname: ", p), err) }
  }
  return err
}

func (p *ShowCompactResponseElement) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err) }
  return err
}

func (p *ShowCompactResponseElement) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:state: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:state: ", p), err) }
  return err
}

func (p *ShowCompactResponseElement) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkerid() {
    if err := oprot.WriteFieldBegin(ctx, "workerid", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:workerid: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Workerid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.workerid (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:workerid: ", p), err) }
  }
  return err
}

func (p *ShowCompactResponseElement) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStart() {
    if err := oprot.WriteFieldBegin(ctx, "start", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:start: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Start)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.start (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:start: ", p), err) }
  }
  return err
}

func (p *ShowCompactResponseElement) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunAs() {
    if err := oprot.WriteFieldBegin(ctx, "runAs", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:runAs: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RunAs)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.runAs (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:runAs: ", p), err) }
  }
  return err
}

func (p *ShowCompactResponseElement) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHightestTxnId() {
    if err := oprot.WriteFieldBegin(ctx, "hightestTxnId", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:hightestTxnId: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.HightestTxnId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hightestTxnId (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:hightestTxnId: ", p), err) }
  }
  return err
}

func (p *ShowCompactResponseElement) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMetaInfo() {
    if err := oprot.WriteFieldBegin(ctx, "metaInfo", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:metaInfo: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.MetaInfo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.metaInfo (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:metaInfo: ", p), err) }
  }
  return err
}

func (p *ShowCompactResponseElement) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndTime() {
    if err := oprot.WriteFieldBegin(ctx, "endTime", thrift.I64, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:endTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.EndTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endTime (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:endTime: ", p), err) }
  }
  return err
}

func (p *ShowCompactResponseElement) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHadoopJobId() {
    if err := oprot.WriteFieldBegin(ctx, "hadoopJobId", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:hadoopJobId: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.HadoopJobId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hadoopJobId (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:hadoopJobId: ", p), err) }
  }
  return err
}

func (p *ShowCompactResponseElement) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:id: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:id: ", p), err) }
  }
  return err
}

func (p *ShowCompactResponseElement) Equals(other *ShowCompactResponseElement) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Dbname != other.Dbname { return false }
  if p.Tablename != other.Tablename { return false }
  if p.Partitionname != other.Partitionname {
    if p.Partitionname == nil || other.Partitionname == nil {
      return false
    }
    if (*p.Partitionname) != (*other.Partitionname) { return false }
  }
  if p.Type != other.Type { return false }
  if p.State != other.State { return false }
  if p.Workerid != other.Workerid {
    if p.Workerid == nil || other.Workerid == nil {
      return false
    }
    if (*p.Workerid) != (*other.Workerid) { return false }
  }
  if p.Start != other.Start {
    if p.Start == nil || other.Start == nil {
      return false
    }
    if (*p.Start) != (*other.Start) { return false }
  }
  if p.RunAs != other.RunAs {
    if p.RunAs == nil || other.RunAs == nil {
      return false
    }
    if (*p.RunAs) != (*other.RunAs) { return false }
  }
  if p.HightestTxnId != other.HightestTxnId {
    if p.HightestTxnId == nil || other.HightestTxnId == nil {
      return false
    }
    if (*p.HightestTxnId) != (*other.HightestTxnId) { return false }
  }
  if p.MetaInfo != other.MetaInfo {
    if p.MetaInfo == nil || other.MetaInfo == nil {
      return false
    }
    if (*p.MetaInfo) != (*other.MetaInfo) { return false }
  }
  if p.EndTime != other.EndTime {
    if p.EndTime == nil || other.EndTime == nil {
      return false
    }
    if (*p.EndTime) != (*other.EndTime) { return false }
  }
  if p.HadoopJobId != other.HadoopJobId { return false }
  if p.ID != other.ID {
    if p.ID == nil || other.ID == nil {
      return false
    }
    if (*p.ID) != (*other.ID) { return false }
  }
  return true
}

func (p *ShowCompactResponseElement) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShowCompactResponseElement(%+v)", *p)
}

// Attributes:
//  - Compacts
type ShowCompactResponse struct {
  Compacts []*ShowCompactResponseElement `thrift:"compacts,1,required" db:"compacts" json:"compacts"`
}

func NewShowCompactResponse() *ShowCompactResponse {
  return &ShowCompactResponse{}
}


func (p *ShowCompactResponse) GetCompacts() []*ShowCompactResponseElement {
  return p.Compacts
}
func (p *ShowCompactResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCompacts bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetCompacts = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCompacts{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Compacts is not set"));
  }
  return nil
}

func (p *ShowCompactResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ShowCompactResponseElement, 0, size)
  p.Compacts =  tSlice
  for i := 0; i < size; i ++ {
    _elem155 := &ShowCompactResponseElement{
    HadoopJobId: "None",
}
    if err := _elem155.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem155), err)
    }
    p.Compacts = append(p.Compacts, _elem155)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ShowCompactResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ShowCompactResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShowCompactResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "compacts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:compacts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Compacts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Compacts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:compacts: ", p), err) }
  return err
}

func (p *ShowCompactResponse) Equals(other *ShowCompactResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Compacts) != len(other.Compacts) { return false }
  for i, _tgt := range p.Compacts {
    _src156 := other.Compacts[i]
    if !_tgt.Equals(_src156) { return false }
  }
  return true
}

func (p *ShowCompactResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShowCompactResponse(%+v)", *p)
}

// Attributes:
//  - Txnid
//  - Dbname
//  - Tablename
//  - Partitionnames
//  - OperationType
type AddDynamicPartitions struct {
  Txnid int64 `thrift:"txnid,1,required" db:"txnid" json:"txnid"`
  Dbname string `thrift:"dbname,2,required" db:"dbname" json:"dbname"`
  Tablename string `thrift:"tablename,3,required" db:"tablename" json:"tablename"`
  Partitionnames []string `thrift:"partitionnames,4,required" db:"partitionnames" json:"partitionnames"`
  OperationType DataOperationType `thrift:"operationType,5" db:"operationType" json:"operationType"`
}

func NewAddDynamicPartitions() *AddDynamicPartitions {
  return &AddDynamicPartitions{
OperationType: 5,
}
}


func (p *AddDynamicPartitions) GetTxnid() int64 {
  return p.Txnid
}

func (p *AddDynamicPartitions) GetDbname() string {
  return p.Dbname
}

func (p *AddDynamicPartitions) GetTablename() string {
  return p.Tablename
}

func (p *AddDynamicPartitions) GetPartitionnames() []string {
  return p.Partitionnames
}
var AddDynamicPartitions_OperationType_DEFAULT DataOperationType = 5

func (p *AddDynamicPartitions) GetOperationType() DataOperationType {
  return p.OperationType
}
func (p *AddDynamicPartitions) IsSetOperationType() bool {
  return p.OperationType != AddDynamicPartitions_OperationType_DEFAULT
}

func (p *AddDynamicPartitions) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTxnid bool = false;
  var issetDbname bool = false;
  var issetTablename bool = false;
  var issetPartitionnames bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetTxnid = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetDbname = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetTablename = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetPartitionnames = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTxnid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Txnid is not set"));
  }
  if !issetDbname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Dbname is not set"));
  }
  if !issetTablename{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tablename is not set"));
  }
  if !issetPartitionnames{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Partitionnames is not set"));
  }
  return nil
}

func (p *AddDynamicPartitions)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Txnid = v
}
  return nil
}

func (p *AddDynamicPartitions)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *AddDynamicPartitions)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Tablename = v
}
  return nil
}

func (p *AddDynamicPartitions)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Partitionnames =  tSlice
  for i := 0; i < size; i ++ {
var _elem157 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem157 = v
}
    p.Partitionnames = append(p.Partitionnames, _elem157)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddDynamicPartitions)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := DataOperationType(v)
  p.OperationType = temp
}
  return nil
}

func (p *AddDynamicPartitions) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddDynamicPartitions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddDynamicPartitions) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "txnid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:txnid: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Txnid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txnid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:txnid: ", p), err) }
  return err
}

func (p *AddDynamicPartitions) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbname: ", p), err) }
  return err
}

func (p *AddDynamicPartitions) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tablename", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tablename: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tablename)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tablename (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tablename: ", p), err) }
  return err
}

func (p *AddDynamicPartitions) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitionnames", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partitionnames: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Partitionnames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Partitionnames {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partitionnames: ", p), err) }
  return err
}

func (p *AddDynamicPartitions) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOperationType() {
    if err := oprot.WriteFieldBegin(ctx, "operationType", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:operationType: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.OperationType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.operationType (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:operationType: ", p), err) }
  }
  return err
}

func (p *AddDynamicPartitions) Equals(other *AddDynamicPartitions) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Txnid != other.Txnid { return false }
  if p.Dbname != other.Dbname { return false }
  if p.Tablename != other.Tablename { return false }
  if len(p.Partitionnames) != len(other.Partitionnames) { return false }
  for i, _tgt := range p.Partitionnames {
    _src158 := other.Partitionnames[i]
    if _tgt != _src158 { return false }
  }
  if p.OperationType != other.OperationType { return false }
  return true
}

func (p *AddDynamicPartitions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddDynamicPartitions(%+v)", *p)
}

// Attributes:
//  - LastEvent
//  - MaxEvents
type NotificationEventRequest struct {
  LastEvent int64 `thrift:"lastEvent,1,required" db:"lastEvent" json:"lastEvent"`
  MaxEvents *int32 `thrift:"maxEvents,2" db:"maxEvents" json:"maxEvents,omitempty"`
}

func NewNotificationEventRequest() *NotificationEventRequest {
  return &NotificationEventRequest{}
}


func (p *NotificationEventRequest) GetLastEvent() int64 {
  return p.LastEvent
}
var NotificationEventRequest_MaxEvents_DEFAULT int32
func (p *NotificationEventRequest) GetMaxEvents() int32 {
  if !p.IsSetMaxEvents() {
    return NotificationEventRequest_MaxEvents_DEFAULT
  }
return *p.MaxEvents
}
func (p *NotificationEventRequest) IsSetMaxEvents() bool {
  return p.MaxEvents != nil
}

func (p *NotificationEventRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetLastEvent bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetLastEvent = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetLastEvent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LastEvent is not set"));
  }
  return nil
}

func (p *NotificationEventRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LastEvent = v
}
  return nil
}

func (p *NotificationEventRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MaxEvents = &v
}
  return nil
}

func (p *NotificationEventRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NotificationEventRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotificationEventRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastEvent", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lastEvent: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastEvent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastEvent (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lastEvent: ", p), err) }
  return err
}

func (p *NotificationEventRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxEvents() {
    if err := oprot.WriteFieldBegin(ctx, "maxEvents", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maxEvents: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.MaxEvents)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxEvents (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maxEvents: ", p), err) }
  }
  return err
}

func (p *NotificationEventRequest) Equals(other *NotificationEventRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.LastEvent != other.LastEvent { return false }
  if p.MaxEvents != other.MaxEvents {
    if p.MaxEvents == nil || other.MaxEvents == nil {
      return false
    }
    if (*p.MaxEvents) != (*other.MaxEvents) { return false }
  }
  return true
}

func (p *NotificationEventRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotificationEventRequest(%+v)", *p)
}

// Attributes:
//  - EventId
//  - EventTime
//  - EventType
//  - DbName
//  - TableName
//  - Message
//  - MessageFormat
type NotificationEvent struct {
  EventId int64 `thrift:"eventId,1,required" db:"eventId" json:"eventId"`
  EventTime int32 `thrift:"eventTime,2,required" db:"eventTime" json:"eventTime"`
  EventType string `thrift:"eventType,3,required" db:"eventType" json:"eventType"`
  DbName *string `thrift:"dbName,4" db:"dbName" json:"dbName,omitempty"`
  TableName *string `thrift:"tableName,5" db:"tableName" json:"tableName,omitempty"`
  Message string `thrift:"message,6,required" db:"message" json:"message"`
  MessageFormat *string `thrift:"messageFormat,7" db:"messageFormat" json:"messageFormat,omitempty"`
}

func NewNotificationEvent() *NotificationEvent {
  return &NotificationEvent{}
}


func (p *NotificationEvent) GetEventId() int64 {
  return p.EventId
}

func (p *NotificationEvent) GetEventTime() int32 {
  return p.EventTime
}

func (p *NotificationEvent) GetEventType() string {
  return p.EventType
}
var NotificationEvent_DbName_DEFAULT string
func (p *NotificationEvent) GetDbName() string {
  if !p.IsSetDbName() {
    return NotificationEvent_DbName_DEFAULT
  }
return *p.DbName
}
var NotificationEvent_TableName_DEFAULT string
func (p *NotificationEvent) GetTableName() string {
  if !p.IsSetTableName() {
    return NotificationEvent_TableName_DEFAULT
  }
return *p.TableName
}

func (p *NotificationEvent) GetMessage() string {
  return p.Message
}
var NotificationEvent_MessageFormat_DEFAULT string
func (p *NotificationEvent) GetMessageFormat() string {
  if !p.IsSetMessageFormat() {
    return NotificationEvent_MessageFormat_DEFAULT
  }
return *p.MessageFormat
}
func (p *NotificationEvent) IsSetDbName() bool {
  return p.DbName != nil
}

func (p *NotificationEvent) IsSetTableName() bool {
  return p.TableName != nil
}

func (p *NotificationEvent) IsSetMessageFormat() bool {
  return p.MessageFormat != nil
}

func (p *NotificationEvent) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetEventId bool = false;
  var issetEventTime bool = false;
  var issetEventType bool = false;
  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetEventId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetEventTime = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetEventType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetMessage = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetEventId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EventId is not set"));
  }
  if !issetEventTime{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EventTime is not set"));
  }
  if !issetEventType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EventType is not set"));
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *NotificationEvent)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EventId = v
}
  return nil
}

func (p *NotificationEvent)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EventTime = v
}
  return nil
}

func (p *NotificationEvent)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EventType = v
}
  return nil
}

func (p *NotificationEvent)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DbName = &v
}
  return nil
}

func (p *NotificationEvent)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TableName = &v
}
  return nil
}

func (p *NotificationEvent)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *NotificationEvent)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.MessageFormat = &v
}
  return nil
}

func (p *NotificationEvent) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NotificationEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotificationEvent) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eventId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:eventId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.EventId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:eventId: ", p), err) }
  return err
}

func (p *NotificationEvent) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eventTime", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eventTime: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.EventTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eventTime: ", p), err) }
  return err
}

func (p *NotificationEvent) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eventType", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:eventType: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EventType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:eventType: ", p), err) }
  return err
}

func (p *NotificationEvent) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDbName() {
    if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dbName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.DbName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dbName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dbName: ", p), err) }
  }
  return err
}

func (p *NotificationEvent) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTableName() {
    if err := oprot.WriteFieldBegin(ctx, "tableName", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tableName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.TableName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tableName (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tableName: ", p), err) }
  }
  return err
}

func (p *NotificationEvent) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:message: ", p), err) }
  return err
}

func (p *NotificationEvent) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMessageFormat() {
    if err := oprot.WriteFieldBegin(ctx, "messageFormat", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:messageFormat: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.MessageFormat)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.messageFormat (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:messageFormat: ", p), err) }
  }
  return err
}

func (p *NotificationEvent) Equals(other *NotificationEvent) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.EventId != other.EventId { return false }
  if p.EventTime != other.EventTime { return false }
  if p.EventType != other.EventType { return false }
  if p.DbName != other.DbName {
    if p.DbName == nil || other.DbName == nil {
      return false
    }
    if (*p.DbName) != (*other.DbName) { return false }
  }
  if p.TableName != other.TableName {
    if p.TableName == nil || other.TableName == nil {
      return false
    }
    if (*p.TableName) != (*other.TableName) { return false }
  }
  if p.Message != other.Message { return false }
  if p.MessageFormat != other.MessageFormat {
    if p.MessageFormat == nil || other.MessageFormat == nil {
      return false
    }
    if (*p.MessageFormat) != (*other.MessageFormat) { return false }
  }
  return true
}

func (p *NotificationEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotificationEvent(%+v)", *p)
}

// Attributes:
//  - Events
type NotificationEventResponse struct {
  Events []*NotificationEvent `thrift:"events,1,required" db:"events" json:"events"`
}

func NewNotificationEventResponse() *NotificationEventResponse {
  return &NotificationEventResponse{}
}


func (p *NotificationEventResponse) GetEvents() []*NotificationEvent {
  return p.Events
}
func (p *NotificationEventResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetEvents bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetEvents = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetEvents{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Events is not set"));
  }
  return nil
}

func (p *NotificationEventResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NotificationEvent, 0, size)
  p.Events =  tSlice
  for i := 0; i < size; i ++ {
    _elem159 := &NotificationEvent{}
    if err := _elem159.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem159), err)
    }
    p.Events = append(p.Events, _elem159)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NotificationEventResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NotificationEventResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotificationEventResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "events", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:events: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Events)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Events {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:events: ", p), err) }
  return err
}

func (p *NotificationEventResponse) Equals(other *NotificationEventResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Events) != len(other.Events) { return false }
  for i, _tgt := range p.Events {
    _src160 := other.Events[i]
    if !_tgt.Equals(_src160) { return false }
  }
  return true
}

func (p *NotificationEventResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotificationEventResponse(%+v)", *p)
}

// Attributes:
//  - EventId
type CurrentNotificationEventId struct {
  EventId int64 `thrift:"eventId,1,required" db:"eventId" json:"eventId"`
}

func NewCurrentNotificationEventId() *CurrentNotificationEventId {
  return &CurrentNotificationEventId{}
}


func (p *CurrentNotificationEventId) GetEventId() int64 {
  return p.EventId
}
func (p *CurrentNotificationEventId) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetEventId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetEventId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetEventId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EventId is not set"));
  }
  return nil
}

func (p *CurrentNotificationEventId)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EventId = v
}
  return nil
}

func (p *CurrentNotificationEventId) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CurrentNotificationEventId"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CurrentNotificationEventId) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eventId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:eventId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.EventId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:eventId: ", p), err) }
  return err
}

func (p *CurrentNotificationEventId) Equals(other *CurrentNotificationEventId) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.EventId != other.EventId { return false }
  return true
}

func (p *CurrentNotificationEventId) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CurrentNotificationEventId(%+v)", *p)
}

// Attributes:
//  - FromEventId
//  - DbName
type NotificationEventsCountRequest struct {
  FromEventId int64 `thrift:"fromEventId,1,required" db:"fromEventId" json:"fromEventId"`
  DbName string `thrift:"dbName,2,required" db:"dbName" json:"dbName"`
}

func NewNotificationEventsCountRequest() *NotificationEventsCountRequest {
  return &NotificationEventsCountRequest{}
}


func (p *NotificationEventsCountRequest) GetFromEventId() int64 {
  return p.FromEventId
}

func (p *NotificationEventsCountRequest) GetDbName() string {
  return p.DbName
}
func (p *NotificationEventsCountRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFromEventId bool = false;
  var issetDbName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetFromEventId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFromEventId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FromEventId is not set"));
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  return nil
}

func (p *NotificationEventsCountRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FromEventId = v
}
  return nil
}

func (p *NotificationEventsCountRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *NotificationEventsCountRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NotificationEventsCountRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotificationEventsCountRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromEventId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromEventId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FromEventId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromEventId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromEventId: ", p), err) }
  return err
}

func (p *NotificationEventsCountRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbName: ", p), err) }
  return err
}

func (p *NotificationEventsCountRequest) Equals(other *NotificationEventsCountRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.FromEventId != other.FromEventId { return false }
  if p.DbName != other.DbName { return false }
  return true
}

func (p *NotificationEventsCountRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotificationEventsCountRequest(%+v)", *p)
}

// Attributes:
//  - EventsCount
type NotificationEventsCountResponse struct {
  EventsCount int64 `thrift:"eventsCount,1,required" db:"eventsCount" json:"eventsCount"`
}

func NewNotificationEventsCountResponse() *NotificationEventsCountResponse {
  return &NotificationEventsCountResponse{}
}


func (p *NotificationEventsCountResponse) GetEventsCount() int64 {
  return p.EventsCount
}
func (p *NotificationEventsCountResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetEventsCount bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetEventsCount = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetEventsCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EventsCount is not set"));
  }
  return nil
}

func (p *NotificationEventsCountResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EventsCount = v
}
  return nil
}

func (p *NotificationEventsCountResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NotificationEventsCountResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotificationEventsCountResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eventsCount", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:eventsCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.EventsCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventsCount (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:eventsCount: ", p), err) }
  return err
}

func (p *NotificationEventsCountResponse) Equals(other *NotificationEventsCountResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.EventsCount != other.EventsCount { return false }
  return true
}

func (p *NotificationEventsCountResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotificationEventsCountResponse(%+v)", *p)
}

// Attributes:
//  - Replace
//  - FilesAdded
//  - FilesAddedChecksum
type InsertEventRequestData struct {
  Replace *bool `thrift:"replace,1" db:"replace" json:"replace,omitempty"`
  FilesAdded []string `thrift:"filesAdded,2,required" db:"filesAdded" json:"filesAdded"`
  FilesAddedChecksum []string `thrift:"filesAddedChecksum,3" db:"filesAddedChecksum" json:"filesAddedChecksum,omitempty"`
}

func NewInsertEventRequestData() *InsertEventRequestData {
  return &InsertEventRequestData{}
}

var InsertEventRequestData_Replace_DEFAULT bool
func (p *InsertEventRequestData) GetReplace() bool {
  if !p.IsSetReplace() {
    return InsertEventRequestData_Replace_DEFAULT
  }
return *p.Replace
}

func (p *InsertEventRequestData) GetFilesAdded() []string {
  return p.FilesAdded
}
var InsertEventRequestData_FilesAddedChecksum_DEFAULT []string

func (p *InsertEventRequestData) GetFilesAddedChecksum() []string {
  return p.FilesAddedChecksum
}
func (p *InsertEventRequestData) IsSetReplace() bool {
  return p.Replace != nil
}

func (p *InsertEventRequestData) IsSetFilesAddedChecksum() bool {
  return p.FilesAddedChecksum != nil
}

func (p *InsertEventRequestData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFilesAdded bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetFilesAdded = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFilesAdded{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FilesAdded is not set"));
  }
  return nil
}

func (p *InsertEventRequestData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Replace = &v
}
  return nil
}

func (p *InsertEventRequestData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.FilesAdded =  tSlice
  for i := 0; i < size; i ++ {
var _elem161 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem161 = v
}
    p.FilesAdded = append(p.FilesAdded, _elem161)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *InsertEventRequestData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.FilesAddedChecksum =  tSlice
  for i := 0; i < size; i ++ {
var _elem162 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem162 = v
}
    p.FilesAddedChecksum = append(p.FilesAddedChecksum, _elem162)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *InsertEventRequestData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InsertEventRequestData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InsertEventRequestData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReplace() {
    if err := oprot.WriteFieldBegin(ctx, "replace", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:replace: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Replace)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.replace (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:replace: ", p), err) }
  }
  return err
}

func (p *InsertEventRequestData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "filesAdded", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:filesAdded: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.FilesAdded)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FilesAdded {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:filesAdded: ", p), err) }
  return err
}

func (p *InsertEventRequestData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFilesAddedChecksum() {
    if err := oprot.WriteFieldBegin(ctx, "filesAddedChecksum", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:filesAddedChecksum: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.FilesAddedChecksum)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.FilesAddedChecksum {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:filesAddedChecksum: ", p), err) }
  }
  return err
}

func (p *InsertEventRequestData) Equals(other *InsertEventRequestData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Replace != other.Replace {
    if p.Replace == nil || other.Replace == nil {
      return false
    }
    if (*p.Replace) != (*other.Replace) { return false }
  }
  if len(p.FilesAdded) != len(other.FilesAdded) { return false }
  for i, _tgt := range p.FilesAdded {
    _src163 := other.FilesAdded[i]
    if _tgt != _src163 { return false }
  }
  if len(p.FilesAddedChecksum) != len(other.FilesAddedChecksum) { return false }
  for i, _tgt := range p.FilesAddedChecksum {
    _src164 := other.FilesAddedChecksum[i]
    if _tgt != _src164 { return false }
  }
  return true
}

func (p *InsertEventRequestData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InsertEventRequestData(%+v)", *p)
}

// Attributes:
//  - InsertData
type FireEventRequestData struct {
  InsertData *InsertEventRequestData `thrift:"insertData,1" db:"insertData" json:"insertData,omitempty"`
}

func NewFireEventRequestData() *FireEventRequestData {
  return &FireEventRequestData{}
}

var FireEventRequestData_InsertData_DEFAULT *InsertEventRequestData
func (p *FireEventRequestData) GetInsertData() *InsertEventRequestData {
  if !p.IsSetInsertData() {
    return FireEventRequestData_InsertData_DEFAULT
  }
return p.InsertData
}
func (p *FireEventRequestData) CountSetFieldsFireEventRequestData() int {
  count := 0
  if (p.IsSetInsertData()) {
    count++
  }
  return count

}

func (p *FireEventRequestData) IsSetInsertData() bool {
  return p.InsertData != nil
}

func (p *FireEventRequestData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FireEventRequestData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.InsertData = &InsertEventRequestData{}
  if err := p.InsertData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InsertData), err)
  }
  return nil
}

func (p *FireEventRequestData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsFireEventRequestData(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin(ctx, "FireEventRequestData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FireEventRequestData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetInsertData() {
    if err := oprot.WriteFieldBegin(ctx, "insertData", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:insertData: ", p), err) }
    if err := p.InsertData.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InsertData), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:insertData: ", p), err) }
  }
  return err
}

func (p *FireEventRequestData) Equals(other *FireEventRequestData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.InsertData.Equals(other.InsertData) { return false }
  return true
}

func (p *FireEventRequestData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FireEventRequestData(%+v)", *p)
}

// Attributes:
//  - Successful
//  - Data
//  - DbName
//  - TableName
//  - PartitionVals
type FireEventRequest struct {
  Successful bool `thrift:"successful,1,required" db:"successful" json:"successful"`
  Data *FireEventRequestData `thrift:"data,2,required" db:"data" json:"data"`
  DbName *string `thrift:"dbName,3" db:"dbName" json:"dbName,omitempty"`
  TableName *string `thrift:"tableName,4" db:"tableName" json:"tableName,omitempty"`
  PartitionVals []string `thrift:"partitionVals,5" db:"partitionVals" json:"partitionVals,omitempty"`
}

func NewFireEventRequest() *FireEventRequest {
  return &FireEventRequest{}
}


func (p *FireEventRequest) GetSuccessful() bool {
  return p.Successful
}
var FireEventRequest_Data_DEFAULT *FireEventRequestData
func (p *FireEventRequest) GetData() *FireEventRequestData {
  if !p.IsSetData() {
    return FireEventRequest_Data_DEFAULT
  }
return p.Data
}
var FireEventRequest_DbName_DEFAULT string
func (p *FireEventRequest) GetDbName() string {
  if !p.IsSetDbName() {
    return FireEventRequest_DbName_DEFAULT
  }
return *p.DbName
}
var FireEventRequest_TableName_DEFAULT string
func (p *FireEventRequest) GetTableName() string {
  if !p.IsSetTableName() {
    return FireEventRequest_TableName_DEFAULT
  }
return *p.TableName
}
var FireEventRequest_PartitionVals_DEFAULT []string

func (p *FireEventRequest) GetPartitionVals() []string {
  return p.PartitionVals
}
func (p *FireEventRequest) IsSetData() bool {
  return p.Data != nil
}

func (p *FireEventRequest) IsSetDbName() bool {
  return p.DbName != nil
}

func (p *FireEventRequest) IsSetTableName() bool {
  return p.TableName != nil
}

func (p *FireEventRequest) IsSetPartitionVals() bool {
  return p.PartitionVals != nil
}

func (p *FireEventRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSuccessful bool = false;
  var issetData bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetSuccessful = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetData = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSuccessful{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Successful is not set"));
  }
  if !issetData{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Data is not set"));
  }
  return nil
}

func (p *FireEventRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Successful = v
}
  return nil
}

func (p *FireEventRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Data = &FireEventRequestData{}
  if err := p.Data.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *FireEventRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DbName = &v
}
  return nil
}

func (p *FireEventRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TableName = &v
}
  return nil
}

func (p *FireEventRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartitionVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem165 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem165 = v
}
    p.PartitionVals = append(p.PartitionVals, _elem165)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FireEventRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FireEventRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FireEventRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "successful", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:successful: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Successful)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.successful (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:successful: ", p), err) }
  return err
}

func (p *FireEventRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := p.Data.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *FireEventRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDbName() {
    if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dbName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.DbName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dbName (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dbName: ", p), err) }
  }
  return err
}

func (p *FireEventRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTableName() {
    if err := oprot.WriteFieldBegin(ctx, "tableName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tableName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.TableName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tableName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tableName: ", p), err) }
  }
  return err
}

func (p *FireEventRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPartitionVals() {
    if err := oprot.WriteFieldBegin(ctx, "partitionVals", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:partitionVals: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartitionVals)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.PartitionVals {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:partitionVals: ", p), err) }
  }
  return err
}

func (p *FireEventRequest) Equals(other *FireEventRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Successful != other.Successful { return false }
  if !p.Data.Equals(other.Data) { return false }
  if p.DbName != other.DbName {
    if p.DbName == nil || other.DbName == nil {
      return false
    }
    if (*p.DbName) != (*other.DbName) { return false }
  }
  if p.TableName != other.TableName {
    if p.TableName == nil || other.TableName == nil {
      return false
    }
    if (*p.TableName) != (*other.TableName) { return false }
  }
  if len(p.PartitionVals) != len(other.PartitionVals) { return false }
  for i, _tgt := range p.PartitionVals {
    _src166 := other.PartitionVals[i]
    if _tgt != _src166 { return false }
  }
  return true
}

func (p *FireEventRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FireEventRequest(%+v)", *p)
}

type FireEventResponse struct {
}

func NewFireEventResponse() *FireEventResponse {
  return &FireEventResponse{}
}

func (p *FireEventResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FireEventResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FireEventResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FireEventResponse) Equals(other *FireEventResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *FireEventResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FireEventResponse(%+v)", *p)
}

// Attributes:
//  - Metadata
//  - IncludeBitset
type MetadataPpdResult_ struct {
  Metadata []byte `thrift:"metadata,1" db:"metadata" json:"metadata,omitempty"`
  IncludeBitset []byte `thrift:"includeBitset,2" db:"includeBitset" json:"includeBitset,omitempty"`
}

func NewMetadataPpdResult_() *MetadataPpdResult_ {
  return &MetadataPpdResult_{}
}

var MetadataPpdResult__Metadata_DEFAULT []byte

func (p *MetadataPpdResult_) GetMetadata() []byte {
  return p.Metadata
}
var MetadataPpdResult__IncludeBitset_DEFAULT []byte

func (p *MetadataPpdResult_) GetIncludeBitset() []byte {
  return p.IncludeBitset
}
func (p *MetadataPpdResult_) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *MetadataPpdResult_) IsSetIncludeBitset() bool {
  return p.IncludeBitset != nil
}

func (p *MetadataPpdResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataPpdResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Metadata = v
}
  return nil
}

func (p *MetadataPpdResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IncludeBitset = v
}
  return nil
}

func (p *MetadataPpdResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MetadataPpdResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataPpdResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMetadata() {
    if err := oprot.WriteFieldBegin(ctx, "metadata", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metadata: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Metadata); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.metadata (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metadata: ", p), err) }
  }
  return err
}

func (p *MetadataPpdResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIncludeBitset() {
    if err := oprot.WriteFieldBegin(ctx, "includeBitset", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:includeBitset: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.IncludeBitset); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.includeBitset (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:includeBitset: ", p), err) }
  }
  return err
}

func (p *MetadataPpdResult_) Equals(other *MetadataPpdResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Metadata, other.Metadata) != 0 { return false }
  if bytes.Compare(p.IncludeBitset, other.IncludeBitset) != 0 { return false }
  return true
}

func (p *MetadataPpdResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataPpdResult_(%+v)", *p)
}

// Attributes:
//  - Metadata
//  - IsSupported
type GetFileMetadataByExprResult_ struct {
  Metadata map[int64]*MetadataPpdResult_ `thrift:"metadata,1,required" db:"metadata" json:"metadata"`
  IsSupported bool `thrift:"isSupported,2,required" db:"isSupported" json:"isSupported"`
}

func NewGetFileMetadataByExprResult_() *GetFileMetadataByExprResult_ {
  return &GetFileMetadataByExprResult_{}
}


func (p *GetFileMetadataByExprResult_) GetMetadata() map[int64]*MetadataPpdResult_ {
  return p.Metadata
}

func (p *GetFileMetadataByExprResult_) GetIsSupported() bool {
  return p.IsSupported
}
func (p *GetFileMetadataByExprResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMetadata bool = false;
  var issetIsSupported bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMetadata = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetIsSupported = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMetadata{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Metadata is not set"));
  }
  if !issetIsSupported{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsSupported is not set"));
  }
  return nil
}

func (p *GetFileMetadataByExprResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int64]*MetadataPpdResult_, size)
  p.Metadata =  tMap
  for i := 0; i < size; i ++ {
var _key167 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key167 = v
}
    _val168 := &MetadataPpdResult_{}
    if err := _val168.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val168), err)
    }
    p.Metadata[_key167] = _val168
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetFileMetadataByExprResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsSupported = v
}
  return nil
}

func (p *GetFileMetadataByExprResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFileMetadataByExprResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFileMetadataByExprResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metadata", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metadata: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.STRUCT, len(p.Metadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Metadata {
    if err := oprot.WriteI64(ctx, int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metadata: ", p), err) }
  return err
}

func (p *GetFileMetadataByExprResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isSupported", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:isSupported: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsSupported)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isSupported (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:isSupported: ", p), err) }
  return err
}

func (p *GetFileMetadataByExprResult_) Equals(other *GetFileMetadataByExprResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Metadata) != len(other.Metadata) { return false }
  for k, _tgt := range p.Metadata {
    _src169 := other.Metadata[k]
    if !_tgt.Equals(_src169) { return false }
  }
  if p.IsSupported != other.IsSupported { return false }
  return true
}

func (p *GetFileMetadataByExprResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFileMetadataByExprResult_(%+v)", *p)
}

// Attributes:
//  - FileIds
//  - Expr
//  - DoGetFooters
//  - Type
type GetFileMetadataByExprRequest struct {
  FileIds []int64 `thrift:"fileIds,1,required" db:"fileIds" json:"fileIds"`
  Expr []byte `thrift:"expr,2,required" db:"expr" json:"expr"`
  DoGetFooters *bool `thrift:"doGetFooters,3" db:"doGetFooters" json:"doGetFooters,omitempty"`
  Type *FileMetadataExprType `thrift:"type,4" db:"type" json:"type,omitempty"`
}

func NewGetFileMetadataByExprRequest() *GetFileMetadataByExprRequest {
  return &GetFileMetadataByExprRequest{}
}


func (p *GetFileMetadataByExprRequest) GetFileIds() []int64 {
  return p.FileIds
}

func (p *GetFileMetadataByExprRequest) GetExpr() []byte {
  return p.Expr
}
var GetFileMetadataByExprRequest_DoGetFooters_DEFAULT bool
func (p *GetFileMetadataByExprRequest) GetDoGetFooters() bool {
  if !p.IsSetDoGetFooters() {
    return GetFileMetadataByExprRequest_DoGetFooters_DEFAULT
  }
return *p.DoGetFooters
}
var GetFileMetadataByExprRequest_Type_DEFAULT FileMetadataExprType
func (p *GetFileMetadataByExprRequest) GetType() FileMetadataExprType {
  if !p.IsSetType() {
    return GetFileMetadataByExprRequest_Type_DEFAULT
  }
return *p.Type
}
func (p *GetFileMetadataByExprRequest) IsSetDoGetFooters() bool {
  return p.DoGetFooters != nil
}

func (p *GetFileMetadataByExprRequest) IsSetType() bool {
  return p.Type != nil
}

func (p *GetFileMetadataByExprRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFileIds bool = false;
  var issetExpr bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetFileIds = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetExpr = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFileIds{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FileIds is not set"));
  }
  if !issetExpr{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Expr is not set"));
  }
  return nil
}

func (p *GetFileMetadataByExprRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.FileIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem170 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem170 = v
}
    p.FileIds = append(p.FileIds, _elem170)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetFileMetadataByExprRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Expr = v
}
  return nil
}

func (p *GetFileMetadataByExprRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DoGetFooters = &v
}
  return nil
}

func (p *GetFileMetadataByExprRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := FileMetadataExprType(v)
  p.Type = &temp
}
  return nil
}

func (p *GetFileMetadataByExprRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFileMetadataByExprRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFileMetadataByExprRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fileIds", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.FileIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FileIds {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileIds: ", p), err) }
  return err
}

func (p *GetFileMetadataByExprRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:expr: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Expr); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:expr: ", p), err) }
  return err
}

func (p *GetFileMetadataByExprRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDoGetFooters() {
    if err := oprot.WriteFieldBegin(ctx, "doGetFooters", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:doGetFooters: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.DoGetFooters)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.doGetFooters (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:doGetFooters: ", p), err) }
  }
  return err
}

func (p *GetFileMetadataByExprRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err) }
  }
  return err
}

func (p *GetFileMetadataByExprRequest) Equals(other *GetFileMetadataByExprRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.FileIds) != len(other.FileIds) { return false }
  for i, _tgt := range p.FileIds {
    _src171 := other.FileIds[i]
    if _tgt != _src171 { return false }
  }
  if bytes.Compare(p.Expr, other.Expr) != 0 { return false }
  if p.DoGetFooters != other.DoGetFooters {
    if p.DoGetFooters == nil || other.DoGetFooters == nil {
      return false
    }
    if (*p.DoGetFooters) != (*other.DoGetFooters) { return false }
  }
  if p.Type != other.Type {
    if p.Type == nil || other.Type == nil {
      return false
    }
    if (*p.Type) != (*other.Type) { return false }
  }
  return true
}

func (p *GetFileMetadataByExprRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFileMetadataByExprRequest(%+v)", *p)
}

// Attributes:
//  - Metadata
//  - IsSupported
type GetFileMetadataResult_ struct {
  Metadata map[int64][]byte `thrift:"metadata,1,required" db:"metadata" json:"metadata"`
  IsSupported bool `thrift:"isSupported,2,required" db:"isSupported" json:"isSupported"`
}

func NewGetFileMetadataResult_() *GetFileMetadataResult_ {
  return &GetFileMetadataResult_{}
}


func (p *GetFileMetadataResult_) GetMetadata() map[int64][]byte {
  return p.Metadata
}

func (p *GetFileMetadataResult_) GetIsSupported() bool {
  return p.IsSupported
}
func (p *GetFileMetadataResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMetadata bool = false;
  var issetIsSupported bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMetadata = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetIsSupported = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMetadata{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Metadata is not set"));
  }
  if !issetIsSupported{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsSupported is not set"));
  }
  return nil
}

func (p *GetFileMetadataResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int64][]byte, size)
  p.Metadata =  tMap
  for i := 0; i < size; i ++ {
var _key172 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key172 = v
}
var _val173 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val173 = v
}
    p.Metadata[_key172] = _val173
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetFileMetadataResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsSupported = v
}
  return nil
}

func (p *GetFileMetadataResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFileMetadataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFileMetadataResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metadata", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metadata: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.STRING, len(p.Metadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Metadata {
    if err := oprot.WriteI64(ctx, int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metadata: ", p), err) }
  return err
}

func (p *GetFileMetadataResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isSupported", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:isSupported: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsSupported)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isSupported (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:isSupported: ", p), err) }
  return err
}

func (p *GetFileMetadataResult_) Equals(other *GetFileMetadataResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Metadata) != len(other.Metadata) { return false }
  for k, _tgt := range p.Metadata {
    _src174 := other.Metadata[k]
    if bytes.Compare(_tgt, _src174) != 0 { return false }
  }
  if p.IsSupported != other.IsSupported { return false }
  return true
}

func (p *GetFileMetadataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFileMetadataResult_(%+v)", *p)
}

// Attributes:
//  - FileIds
type GetFileMetadataRequest struct {
  FileIds []int64 `thrift:"fileIds,1,required" db:"fileIds" json:"fileIds"`
}

func NewGetFileMetadataRequest() *GetFileMetadataRequest {
  return &GetFileMetadataRequest{}
}


func (p *GetFileMetadataRequest) GetFileIds() []int64 {
  return p.FileIds
}
func (p *GetFileMetadataRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFileIds bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetFileIds = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFileIds{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FileIds is not set"));
  }
  return nil
}

func (p *GetFileMetadataRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.FileIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem175 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem175 = v
}
    p.FileIds = append(p.FileIds, _elem175)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetFileMetadataRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFileMetadataRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFileMetadataRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fileIds", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.FileIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FileIds {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileIds: ", p), err) }
  return err
}

func (p *GetFileMetadataRequest) Equals(other *GetFileMetadataRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.FileIds) != len(other.FileIds) { return false }
  for i, _tgt := range p.FileIds {
    _src176 := other.FileIds[i]
    if _tgt != _src176 { return false }
  }
  return true
}

func (p *GetFileMetadataRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFileMetadataRequest(%+v)", *p)
}

type PutFileMetadataResult_ struct {
}

func NewPutFileMetadataResult_() *PutFileMetadataResult_ {
  return &PutFileMetadataResult_{}
}

func (p *PutFileMetadataResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PutFileMetadataResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PutFileMetadataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PutFileMetadataResult_) Equals(other *PutFileMetadataResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *PutFileMetadataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PutFileMetadataResult_(%+v)", *p)
}

// Attributes:
//  - FileIds
//  - Metadata
//  - Type
type PutFileMetadataRequest struct {
  FileIds []int64 `thrift:"fileIds,1,required" db:"fileIds" json:"fileIds"`
  Metadata [][]byte `thrift:"metadata,2,required" db:"metadata" json:"metadata"`
  Type *FileMetadataExprType `thrift:"type,3" db:"type" json:"type,omitempty"`
}

func NewPutFileMetadataRequest() *PutFileMetadataRequest {
  return &PutFileMetadataRequest{}
}


func (p *PutFileMetadataRequest) GetFileIds() []int64 {
  return p.FileIds
}

func (p *PutFileMetadataRequest) GetMetadata() [][]byte {
  return p.Metadata
}
var PutFileMetadataRequest_Type_DEFAULT FileMetadataExprType
func (p *PutFileMetadataRequest) GetType() FileMetadataExprType {
  if !p.IsSetType() {
    return PutFileMetadataRequest_Type_DEFAULT
  }
return *p.Type
}
func (p *PutFileMetadataRequest) IsSetType() bool {
  return p.Type != nil
}

func (p *PutFileMetadataRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFileIds bool = false;
  var issetMetadata bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetFileIds = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetMetadata = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFileIds{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FileIds is not set"));
  }
  if !issetMetadata{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Metadata is not set"));
  }
  return nil
}

func (p *PutFileMetadataRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.FileIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem177 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem177 = v
}
    p.FileIds = append(p.FileIds, _elem177)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PutFileMetadataRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Metadata =  tSlice
  for i := 0; i < size; i ++ {
var _elem178 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem178 = v
}
    p.Metadata = append(p.Metadata, _elem178)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PutFileMetadataRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := FileMetadataExprType(v)
  p.Type = &temp
}
  return nil
}

func (p *PutFileMetadataRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PutFileMetadataRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PutFileMetadataRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fileIds", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.FileIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FileIds {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileIds: ", p), err) }
  return err
}

func (p *PutFileMetadataRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metadata", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metadata: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Metadata)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Metadata {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metadata: ", p), err) }
  return err
}

func (p *PutFileMetadataRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  }
  return err
}

func (p *PutFileMetadataRequest) Equals(other *PutFileMetadataRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.FileIds) != len(other.FileIds) { return false }
  for i, _tgt := range p.FileIds {
    _src179 := other.FileIds[i]
    if _tgt != _src179 { return false }
  }
  if len(p.Metadata) != len(other.Metadata) { return false }
  for i, _tgt := range p.Metadata {
    _src180 := other.Metadata[i]
    if bytes.Compare(_tgt, _src180) != 0 { return false }
  }
  if p.Type != other.Type {
    if p.Type == nil || other.Type == nil {
      return false
    }
    if (*p.Type) != (*other.Type) { return false }
  }
  return true
}

func (p *PutFileMetadataRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PutFileMetadataRequest(%+v)", *p)
}

type ClearFileMetadataResult_ struct {
}

func NewClearFileMetadataResult_() *ClearFileMetadataResult_ {
  return &ClearFileMetadataResult_{}
}

func (p *ClearFileMetadataResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClearFileMetadataResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ClearFileMetadataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClearFileMetadataResult_) Equals(other *ClearFileMetadataResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *ClearFileMetadataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClearFileMetadataResult_(%+v)", *p)
}

// Attributes:
//  - FileIds
type ClearFileMetadataRequest struct {
  FileIds []int64 `thrift:"fileIds,1,required" db:"fileIds" json:"fileIds"`
}

func NewClearFileMetadataRequest() *ClearFileMetadataRequest {
  return &ClearFileMetadataRequest{}
}


func (p *ClearFileMetadataRequest) GetFileIds() []int64 {
  return p.FileIds
}
func (p *ClearFileMetadataRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFileIds bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetFileIds = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFileIds{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FileIds is not set"));
  }
  return nil
}

func (p *ClearFileMetadataRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.FileIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem181 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem181 = v
}
    p.FileIds = append(p.FileIds, _elem181)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ClearFileMetadataRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ClearFileMetadataRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClearFileMetadataRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fileIds", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.FileIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FileIds {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileIds: ", p), err) }
  return err
}

func (p *ClearFileMetadataRequest) Equals(other *ClearFileMetadataRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.FileIds) != len(other.FileIds) { return false }
  for i, _tgt := range p.FileIds {
    _src182 := other.FileIds[i]
    if _tgt != _src182 { return false }
  }
  return true
}

func (p *ClearFileMetadataRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClearFileMetadataRequest(%+v)", *p)
}

// Attributes:
//  - IsSupported
type CacheFileMetadataResult_ struct {
  IsSupported bool `thrift:"isSupported,1,required" db:"isSupported" json:"isSupported"`
}

func NewCacheFileMetadataResult_() *CacheFileMetadataResult_ {
  return &CacheFileMetadataResult_{}
}


func (p *CacheFileMetadataResult_) GetIsSupported() bool {
  return p.IsSupported
}
func (p *CacheFileMetadataResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIsSupported bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetIsSupported = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIsSupported{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsSupported is not set"));
  }
  return nil
}

func (p *CacheFileMetadataResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IsSupported = v
}
  return nil
}

func (p *CacheFileMetadataResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CacheFileMetadataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CacheFileMetadataResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isSupported", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:isSupported: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsSupported)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isSupported (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:isSupported: ", p), err) }
  return err
}

func (p *CacheFileMetadataResult_) Equals(other *CacheFileMetadataResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IsSupported != other.IsSupported { return false }
  return true
}

func (p *CacheFileMetadataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CacheFileMetadataResult_(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
//  - IsAllParts
type CacheFileMetadataRequest struct {
  DbName string `thrift:"dbName,1,required" db:"dbName" json:"dbName"`
  TblName string `thrift:"tblName,2,required" db:"tblName" json:"tblName"`
  PartName *string `thrift:"partName,3" db:"partName" json:"partName,omitempty"`
  IsAllParts *bool `thrift:"isAllParts,4" db:"isAllParts" json:"isAllParts,omitempty"`
}

func NewCacheFileMetadataRequest() *CacheFileMetadataRequest {
  return &CacheFileMetadataRequest{}
}


func (p *CacheFileMetadataRequest) GetDbName() string {
  return p.DbName
}

func (p *CacheFileMetadataRequest) GetTblName() string {
  return p.TblName
}
var CacheFileMetadataRequest_PartName_DEFAULT string
func (p *CacheFileMetadataRequest) GetPartName() string {
  if !p.IsSetPartName() {
    return CacheFileMetadataRequest_PartName_DEFAULT
  }
return *p.PartName
}
var CacheFileMetadataRequest_IsAllParts_DEFAULT bool
func (p *CacheFileMetadataRequest) GetIsAllParts() bool {
  if !p.IsSetIsAllParts() {
    return CacheFileMetadataRequest_IsAllParts_DEFAULT
  }
return *p.IsAllParts
}
func (p *CacheFileMetadataRequest) IsSetPartName() bool {
  return p.PartName != nil
}

func (p *CacheFileMetadataRequest) IsSetIsAllParts() bool {
  return p.IsAllParts != nil
}

func (p *CacheFileMetadataRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbName bool = false;
  var issetTblName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTblName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTblName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TblName is not set"));
  }
  return nil
}

func (p *CacheFileMetadataRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *CacheFileMetadataRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *CacheFileMetadataRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartName = &v
}
  return nil
}

func (p *CacheFileMetadataRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsAllParts = &v
}
  return nil
}

func (p *CacheFileMetadataRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CacheFileMetadataRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CacheFileMetadataRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *CacheFileMetadataRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tblName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tblName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tblName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tblName: ", p), err) }
  return err
}

func (p *CacheFileMetadataRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPartName() {
    if err := oprot.WriteFieldBegin(ctx, "partName", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.PartName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.partName (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partName: ", p), err) }
  }
  return err
}

func (p *CacheFileMetadataRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIsAllParts() {
    if err := oprot.WriteFieldBegin(ctx, "isAllParts", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isAllParts: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.IsAllParts)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isAllParts (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isAllParts: ", p), err) }
  }
  return err
}

func (p *CacheFileMetadataRequest) Equals(other *CacheFileMetadataRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DbName != other.DbName { return false }
  if p.TblName != other.TblName { return false }
  if p.PartName != other.PartName {
    if p.PartName == nil || other.PartName == nil {
      return false
    }
    if (*p.PartName) != (*other.PartName) { return false }
  }
  if p.IsAllParts != other.IsAllParts {
    if p.IsAllParts == nil || other.IsAllParts == nil {
      return false
    }
    if (*p.IsAllParts) != (*other.IsAllParts) { return false }
  }
  return true
}

func (p *CacheFileMetadataRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CacheFileMetadataRequest(%+v)", *p)
}

// Attributes:
//  - Functions
type GetAllFunctionsResponse struct {
  Functions []*Function `thrift:"functions,1" db:"functions" json:"functions,omitempty"`
}

func NewGetAllFunctionsResponse() *GetAllFunctionsResponse {
  return &GetAllFunctionsResponse{}
}

var GetAllFunctionsResponse_Functions_DEFAULT []*Function

func (p *GetAllFunctionsResponse) GetFunctions() []*Function {
  return p.Functions
}
func (p *GetAllFunctionsResponse) IsSetFunctions() bool {
  return p.Functions != nil
}

func (p *GetAllFunctionsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetAllFunctionsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Function, 0, size)
  p.Functions =  tSlice
  for i := 0; i < size; i ++ {
    _elem183 := &Function{}
    if err := _elem183.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem183), err)
    }
    p.Functions = append(p.Functions, _elem183)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetAllFunctionsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetAllFunctionsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAllFunctionsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFunctions() {
    if err := oprot.WriteFieldBegin(ctx, "functions", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:functions: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Functions)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Functions {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:functions: ", p), err) }
  }
  return err
}

func (p *GetAllFunctionsResponse) Equals(other *GetAllFunctionsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Functions) != len(other.Functions) { return false }
  for i, _tgt := range p.Functions {
    _src184 := other.Functions[i]
    if !_tgt.Equals(_src184) { return false }
  }
  return true
}

func (p *GetAllFunctionsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllFunctionsResponse(%+v)", *p)
}

// Attributes:
//  - Values
type ClientCapabilities struct {
  Values []ClientCapability `thrift:"values,1,required" db:"values" json:"values"`
}

func NewClientCapabilities() *ClientCapabilities {
  return &ClientCapabilities{}
}


func (p *ClientCapabilities) GetValues() []ClientCapability {
  return p.Values
}
func (p *ClientCapabilities) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetValues bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetValues = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetValues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Values is not set"));
  }
  return nil
}

func (p *ClientCapabilities)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]ClientCapability, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem185 ClientCapability
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := ClientCapability(v)
    _elem185 = temp
}
    p.Values = append(p.Values, _elem185)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ClientCapabilities) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ClientCapabilities"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClientCapabilities) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:values: ", p), err) }
  return err
}

func (p *ClientCapabilities) Equals(other *ClientCapabilities) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src186 := other.Values[i]
    if _tgt != _src186 { return false }
  }
  return true
}

func (p *ClientCapabilities) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClientCapabilities(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - Capabilities
type GetTableRequest struct {
  DbName string `thrift:"dbName,1,required" db:"dbName" json:"dbName"`
  TblName string `thrift:"tblName,2,required" db:"tblName" json:"tblName"`
  Capabilities *ClientCapabilities `thrift:"capabilities,3" db:"capabilities" json:"capabilities,omitempty"`
}

func NewGetTableRequest() *GetTableRequest {
  return &GetTableRequest{}
}


func (p *GetTableRequest) GetDbName() string {
  return p.DbName
}

func (p *GetTableRequest) GetTblName() string {
  return p.TblName
}
var GetTableRequest_Capabilities_DEFAULT *ClientCapabilities
func (p *GetTableRequest) GetCapabilities() *ClientCapabilities {
  if !p.IsSetCapabilities() {
    return GetTableRequest_Capabilities_DEFAULT
  }
return p.Capabilities
}
func (p *GetTableRequest) IsSetCapabilities() bool {
  return p.Capabilities != nil
}

func (p *GetTableRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbName bool = false;
  var issetTblName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTblName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTblName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TblName is not set"));
  }
  return nil
}

func (p *GetTableRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *GetTableRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *GetTableRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Capabilities = &ClientCapabilities{}
  if err := p.Capabilities.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Capabilities), err)
  }
  return nil
}

func (p *GetTableRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetTableRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTableRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *GetTableRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tblName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tblName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tblName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tblName: ", p), err) }
  return err
}

func (p *GetTableRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCapabilities() {
    if err := oprot.WriteFieldBegin(ctx, "capabilities", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:capabilities: ", p), err) }
    if err := p.Capabilities.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Capabilities), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:capabilities: ", p), err) }
  }
  return err
}

func (p *GetTableRequest) Equals(other *GetTableRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DbName != other.DbName { return false }
  if p.TblName != other.TblName { return false }
  if !p.Capabilities.Equals(other.Capabilities) { return false }
  return true
}

func (p *GetTableRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTableRequest(%+v)", *p)
}

// Attributes:
//  - Table
type GetTableResult_ struct {
  Table *Table `thrift:"table,1,required" db:"table" json:"table"`
}

func NewGetTableResult_() *GetTableResult_ {
  return &GetTableResult_{}
}

var GetTableResult__Table_DEFAULT *Table
func (p *GetTableResult_) GetTable() *Table {
  if !p.IsSetTable() {
    return GetTableResult__Table_DEFAULT
  }
return p.Table
}
func (p *GetTableResult_) IsSetTable() bool {
  return p.Table != nil
}

func (p *GetTableResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetTable = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  return nil
}

func (p *GetTableResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Table = &Table{}
  if err := p.Table.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Table), err)
  }
  return nil
}

func (p *GetTableResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetTableResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTableResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "table", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := p.Table.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Table), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *GetTableResult_) Equals(other *GetTableResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Table.Equals(other.Table) { return false }
  return true
}

func (p *GetTableResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTableResult_(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblNames
//  - Capabilities
type GetTablesRequest struct {
  DbName string `thrift:"dbName,1,required" db:"dbName" json:"dbName"`
  TblNames []string `thrift:"tblNames,2" db:"tblNames" json:"tblNames,omitempty"`
  Capabilities *ClientCapabilities `thrift:"capabilities,3" db:"capabilities" json:"capabilities,omitempty"`
}

func NewGetTablesRequest() *GetTablesRequest {
  return &GetTablesRequest{}
}


func (p *GetTablesRequest) GetDbName() string {
  return p.DbName
}
var GetTablesRequest_TblNames_DEFAULT []string

func (p *GetTablesRequest) GetTblNames() []string {
  return p.TblNames
}
var GetTablesRequest_Capabilities_DEFAULT *ClientCapabilities
func (p *GetTablesRequest) GetCapabilities() *ClientCapabilities {
  if !p.IsSetCapabilities() {
    return GetTablesRequest_Capabilities_DEFAULT
  }
return p.Capabilities
}
func (p *GetTablesRequest) IsSetTblNames() bool {
  return p.TblNames != nil
}

func (p *GetTablesRequest) IsSetCapabilities() bool {
  return p.Capabilities != nil
}

func (p *GetTablesRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  return nil
}

func (p *GetTablesRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *GetTablesRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.TblNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem187 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem187 = v
}
    p.TblNames = append(p.TblNames, _elem187)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetTablesRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Capabilities = &ClientCapabilities{}
  if err := p.Capabilities.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Capabilities), err)
  }
  return nil
}

func (p *GetTablesRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetTablesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTablesRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *GetTablesRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTblNames() {
    if err := oprot.WriteFieldBegin(ctx, "tblNames", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tblNames: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.TblNames)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TblNames {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tblNames: ", p), err) }
  }
  return err
}

func (p *GetTablesRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCapabilities() {
    if err := oprot.WriteFieldBegin(ctx, "capabilities", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:capabilities: ", p), err) }
    if err := p.Capabilities.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Capabilities), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:capabilities: ", p), err) }
  }
  return err
}

func (p *GetTablesRequest) Equals(other *GetTablesRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DbName != other.DbName { return false }
  if len(p.TblNames) != len(other.TblNames) { return false }
  for i, _tgt := range p.TblNames {
    _src188 := other.TblNames[i]
    if _tgt != _src188 { return false }
  }
  if !p.Capabilities.Equals(other.Capabilities) { return false }
  return true
}

func (p *GetTablesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTablesRequest(%+v)", *p)
}

// Attributes:
//  - Tables
type GetTablesResult_ struct {
  Tables []*Table `thrift:"tables,1,required" db:"tables" json:"tables"`
}

func NewGetTablesResult_() *GetTablesResult_ {
  return &GetTablesResult_{}
}


func (p *GetTablesResult_) GetTables() []*Table {
  return p.Tables
}
func (p *GetTablesResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTables bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetTables = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTables{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tables is not set"));
  }
  return nil
}

func (p *GetTablesResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Table, 0, size)
  p.Tables =  tSlice
  for i := 0; i < size; i ++ {
    _elem189 := &Table{}
    if err := _elem189.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem189), err)
    }
    p.Tables = append(p.Tables, _elem189)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetTablesResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetTablesResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTablesResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tables", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tables: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Tables)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tables {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tables: ", p), err) }
  return err
}

func (p *GetTablesResult_) Equals(other *GetTablesResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Tables) != len(other.Tables) { return false }
  for i, _tgt := range p.Tables {
    _src190 := other.Tables[i]
    if !_tgt.Equals(_src190) { return false }
  }
  return true
}

func (p *GetTablesResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTablesResult_(%+v)", *p)
}

// Attributes:
//  - DataPath
//  - Purge
type CmRecycleRequest struct {
  DataPath string `thrift:"dataPath,1,required" db:"dataPath" json:"dataPath"`
  Purge bool `thrift:"purge,2,required" db:"purge" json:"purge"`
}

func NewCmRecycleRequest() *CmRecycleRequest {
  return &CmRecycleRequest{}
}


func (p *CmRecycleRequest) GetDataPath() string {
  return p.DataPath
}

func (p *CmRecycleRequest) GetPurge() bool {
  return p.Purge
}
func (p *CmRecycleRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDataPath bool = false;
  var issetPurge bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDataPath = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetPurge = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDataPath{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataPath is not set"));
  }
  if !issetPurge{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Purge is not set"));
  }
  return nil
}

func (p *CmRecycleRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DataPath = v
}
  return nil
}

func (p *CmRecycleRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Purge = v
}
  return nil
}

func (p *CmRecycleRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CmRecycleRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CmRecycleRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dataPath", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dataPath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DataPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataPath (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dataPath: ", p), err) }
  return err
}

func (p *CmRecycleRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "purge", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:purge: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Purge)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.purge (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:purge: ", p), err) }
  return err
}

func (p *CmRecycleRequest) Equals(other *CmRecycleRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DataPath != other.DataPath { return false }
  if p.Purge != other.Purge { return false }
  return true
}

func (p *CmRecycleRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CmRecycleRequest(%+v)", *p)
}

type CmRecycleResponse struct {
}

func NewCmRecycleResponse() *CmRecycleResponse {
  return &CmRecycleResponse{}
}

func (p *CmRecycleResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CmRecycleResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CmRecycleResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CmRecycleResponse) Equals(other *CmRecycleResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *CmRecycleResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CmRecycleResponse(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TableName
//  - TableType
//  - Comments
type TableMeta struct {
  DbName string `thrift:"dbName,1,required" db:"dbName" json:"dbName"`
  TableName string `thrift:"tableName,2,required" db:"tableName" json:"tableName"`
  TableType string `thrift:"tableType,3,required" db:"tableType" json:"tableType"`
  Comments *string `thrift:"comments,4" db:"comments" json:"comments,omitempty"`
}

func NewTableMeta() *TableMeta {
  return &TableMeta{}
}


func (p *TableMeta) GetDbName() string {
  return p.DbName
}

func (p *TableMeta) GetTableName() string {
  return p.TableName
}

func (p *TableMeta) GetTableType() string {
  return p.TableType
}
var TableMeta_Comments_DEFAULT string
func (p *TableMeta) GetComments() string {
  if !p.IsSetComments() {
    return TableMeta_Comments_DEFAULT
  }
return *p.Comments
}
func (p *TableMeta) IsSetComments() bool {
  return p.Comments != nil
}

func (p *TableMeta) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbName bool = false;
  var issetTableName bool = false;
  var issetTableType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetDbName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTableName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetTableType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTableName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TableName is not set"));
  }
  if !issetTableType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TableType is not set"));
  }
  return nil
}

func (p *TableMeta)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *TableMeta)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *TableMeta)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TableType = v
}
  return nil
}

func (p *TableMeta)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Comments = &v
}
  return nil
}

func (p *TableMeta) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TableMeta"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TableMeta) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *TableMeta) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tableName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err) }
  return err
}

func (p *TableMeta) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tableType", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tableType: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tableType: ", p), err) }
  return err
}

func (p *TableMeta) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetComments() {
    if err := oprot.WriteFieldBegin(ctx, "comments", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:comments: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Comments)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comments (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:comments: ", p), err) }
  }
  return err
}

func (p *TableMeta) Equals(other *TableMeta) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DbName != other.DbName { return false }
  if p.TableName != other.TableName { return false }
  if p.TableType != other.TableType { return false }
  if p.Comments != other.Comments {
    if p.Comments == nil || other.Comments == nil {
      return false
    }
    if (*p.Comments) != (*other.Comments) { return false }
  }
  return true
}

func (p *TableMeta) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TableMeta(%+v)", *p)
}

// Attributes:
//  - Name
//  - Status
//  - QueryParallelism
//  - DefaultPoolPath
type WMResourcePlan struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
  Status *WMResourcePlanStatus `thrift:"status,2" db:"status" json:"status,omitempty"`
  QueryParallelism *int32 `thrift:"queryParallelism,3" db:"queryParallelism" json:"queryParallelism,omitempty"`
  DefaultPoolPath *string `thrift:"defaultPoolPath,4" db:"defaultPoolPath" json:"defaultPoolPath,omitempty"`
}

func NewWMResourcePlan() *WMResourcePlan {
  return &WMResourcePlan{}
}


func (p *WMResourcePlan) GetName() string {
  return p.Name
}
var WMResourcePlan_Status_DEFAULT WMResourcePlanStatus
func (p *WMResourcePlan) GetStatus() WMResourcePlanStatus {
  if !p.IsSetStatus() {
    return WMResourcePlan_Status_DEFAULT
  }
return *p.Status
}
var WMResourcePlan_QueryParallelism_DEFAULT int32
func (p *WMResourcePlan) GetQueryParallelism() int32 {
  if !p.IsSetQueryParallelism() {
    return WMResourcePlan_QueryParallelism_DEFAULT
  }
return *p.QueryParallelism
}
var WMResourcePlan_DefaultPoolPath_DEFAULT string
func (p *WMResourcePlan) GetDefaultPoolPath() string {
  if !p.IsSetDefaultPoolPath() {
    return WMResourcePlan_DefaultPoolPath_DEFAULT
  }
return *p.DefaultPoolPath
}
func (p *WMResourcePlan) IsSetStatus() bool {
  return p.Status != nil
}

func (p *WMResourcePlan) IsSetQueryParallelism() bool {
  return p.QueryParallelism != nil
}

func (p *WMResourcePlan) IsSetDefaultPoolPath() bool {
  return p.DefaultPoolPath != nil
}

func (p *WMResourcePlan) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *WMResourcePlan)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *WMResourcePlan)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := WMResourcePlanStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *WMResourcePlan)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.QueryParallelism = &v
}
  return nil
}

func (p *WMResourcePlan)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DefaultPoolPath = &v
}
  return nil
}

func (p *WMResourcePlan) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMResourcePlan"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMResourcePlan) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *WMResourcePlan) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  }
  return err
}

func (p *WMResourcePlan) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetQueryParallelism() {
    if err := oprot.WriteFieldBegin(ctx, "queryParallelism", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:queryParallelism: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.QueryParallelism)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.queryParallelism (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:queryParallelism: ", p), err) }
  }
  return err
}

func (p *WMResourcePlan) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultPoolPath() {
    if err := oprot.WriteFieldBegin(ctx, "defaultPoolPath", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:defaultPoolPath: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.DefaultPoolPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultPoolPath (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:defaultPoolPath: ", p), err) }
  }
  return err
}

func (p *WMResourcePlan) Equals(other *WMResourcePlan) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.Status != other.Status {
    if p.Status == nil || other.Status == nil {
      return false
    }
    if (*p.Status) != (*other.Status) { return false }
  }
  if p.QueryParallelism != other.QueryParallelism {
    if p.QueryParallelism == nil || other.QueryParallelism == nil {
      return false
    }
    if (*p.QueryParallelism) != (*other.QueryParallelism) { return false }
  }
  if p.DefaultPoolPath != other.DefaultPoolPath {
    if p.DefaultPoolPath == nil || other.DefaultPoolPath == nil {
      return false
    }
    if (*p.DefaultPoolPath) != (*other.DefaultPoolPath) { return false }
  }
  return true
}

func (p *WMResourcePlan) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMResourcePlan(%+v)", *p)
}

// Attributes:
//  - ResourcePlanName
//  - PoolPath
//  - AllocFraction
//  - QueryParallelism
//  - SchedulingPolicy
type WMPool struct {
  ResourcePlanName string `thrift:"resourcePlanName,1,required" db:"resourcePlanName" json:"resourcePlanName"`
  PoolPath string `thrift:"poolPath,2,required" db:"poolPath" json:"poolPath"`
  AllocFraction *float64 `thrift:"allocFraction,3" db:"allocFraction" json:"allocFraction,omitempty"`
  QueryParallelism *int32 `thrift:"queryParallelism,4" db:"queryParallelism" json:"queryParallelism,omitempty"`
  SchedulingPolicy *string `thrift:"schedulingPolicy,5" db:"schedulingPolicy" json:"schedulingPolicy,omitempty"`
}

func NewWMPool() *WMPool {
  return &WMPool{}
}


func (p *WMPool) GetResourcePlanName() string {
  return p.ResourcePlanName
}

func (p *WMPool) GetPoolPath() string {
  return p.PoolPath
}
var WMPool_AllocFraction_DEFAULT float64
func (p *WMPool) GetAllocFraction() float64 {
  if !p.IsSetAllocFraction() {
    return WMPool_AllocFraction_DEFAULT
  }
return *p.AllocFraction
}
var WMPool_QueryParallelism_DEFAULT int32
func (p *WMPool) GetQueryParallelism() int32 {
  if !p.IsSetQueryParallelism() {
    return WMPool_QueryParallelism_DEFAULT
  }
return *p.QueryParallelism
}
var WMPool_SchedulingPolicy_DEFAULT string
func (p *WMPool) GetSchedulingPolicy() string {
  if !p.IsSetSchedulingPolicy() {
    return WMPool_SchedulingPolicy_DEFAULT
  }
return *p.SchedulingPolicy
}
func (p *WMPool) IsSetAllocFraction() bool {
  return p.AllocFraction != nil
}

func (p *WMPool) IsSetQueryParallelism() bool {
  return p.QueryParallelism != nil
}

func (p *WMPool) IsSetSchedulingPolicy() bool {
  return p.SchedulingPolicy != nil
}

func (p *WMPool) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResourcePlanName bool = false;
  var issetPoolPath bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResourcePlanName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetPoolPath = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResourcePlanName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourcePlanName is not set"));
  }
  if !issetPoolPath{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PoolPath is not set"));
  }
  return nil
}

func (p *WMPool)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ResourcePlanName = v
}
  return nil
}

func (p *WMPool)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PoolPath = v
}
  return nil
}

func (p *WMPool)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AllocFraction = &v
}
  return nil
}

func (p *WMPool)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.QueryParallelism = &v
}
  return nil
}

func (p *WMPool)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SchedulingPolicy = &v
}
  return nil
}

func (p *WMPool) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMPool"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMPool) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "resourcePlanName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourcePlanName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ResourcePlanName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourcePlanName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourcePlanName: ", p), err) }
  return err
}

func (p *WMPool) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "poolPath", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:poolPath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PoolPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.poolPath (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:poolPath: ", p), err) }
  return err
}

func (p *WMPool) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAllocFraction() {
    if err := oprot.WriteFieldBegin(ctx, "allocFraction", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:allocFraction: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.AllocFraction)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.allocFraction (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:allocFraction: ", p), err) }
  }
  return err
}

func (p *WMPool) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetQueryParallelism() {
    if err := oprot.WriteFieldBegin(ctx, "queryParallelism", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:queryParallelism: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.QueryParallelism)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.queryParallelism (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:queryParallelism: ", p), err) }
  }
  return err
}

func (p *WMPool) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSchedulingPolicy() {
    if err := oprot.WriteFieldBegin(ctx, "schedulingPolicy", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:schedulingPolicy: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.SchedulingPolicy)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.schedulingPolicy (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:schedulingPolicy: ", p), err) }
  }
  return err
}

func (p *WMPool) Equals(other *WMPool) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ResourcePlanName != other.ResourcePlanName { return false }
  if p.PoolPath != other.PoolPath { return false }
  if p.AllocFraction != other.AllocFraction {
    if p.AllocFraction == nil || other.AllocFraction == nil {
      return false
    }
    if (*p.AllocFraction) != (*other.AllocFraction) { return false }
  }
  if p.QueryParallelism != other.QueryParallelism {
    if p.QueryParallelism == nil || other.QueryParallelism == nil {
      return false
    }
    if (*p.QueryParallelism) != (*other.QueryParallelism) { return false }
  }
  if p.SchedulingPolicy != other.SchedulingPolicy {
    if p.SchedulingPolicy == nil || other.SchedulingPolicy == nil {
      return false
    }
    if (*p.SchedulingPolicy) != (*other.SchedulingPolicy) { return false }
  }
  return true
}

func (p *WMPool) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMPool(%+v)", *p)
}

// Attributes:
//  - ResourcePlanName
//  - TriggerName
//  - TriggerExpression
//  - ActionExpression
type WMTrigger struct {
  ResourcePlanName string `thrift:"resourcePlanName,1,required" db:"resourcePlanName" json:"resourcePlanName"`
  TriggerName string `thrift:"triggerName,2,required" db:"triggerName" json:"triggerName"`
  TriggerExpression *string `thrift:"triggerExpression,3" db:"triggerExpression" json:"triggerExpression,omitempty"`
  ActionExpression *string `thrift:"actionExpression,4" db:"actionExpression" json:"actionExpression,omitempty"`
}

func NewWMTrigger() *WMTrigger {
  return &WMTrigger{}
}


func (p *WMTrigger) GetResourcePlanName() string {
  return p.ResourcePlanName
}

func (p *WMTrigger) GetTriggerName() string {
  return p.TriggerName
}
var WMTrigger_TriggerExpression_DEFAULT string
func (p *WMTrigger) GetTriggerExpression() string {
  if !p.IsSetTriggerExpression() {
    return WMTrigger_TriggerExpression_DEFAULT
  }
return *p.TriggerExpression
}
var WMTrigger_ActionExpression_DEFAULT string
func (p *WMTrigger) GetActionExpression() string {
  if !p.IsSetActionExpression() {
    return WMTrigger_ActionExpression_DEFAULT
  }
return *p.ActionExpression
}
func (p *WMTrigger) IsSetTriggerExpression() bool {
  return p.TriggerExpression != nil
}

func (p *WMTrigger) IsSetActionExpression() bool {
  return p.ActionExpression != nil
}

func (p *WMTrigger) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResourcePlanName bool = false;
  var issetTriggerName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResourcePlanName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTriggerName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResourcePlanName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourcePlanName is not set"));
  }
  if !issetTriggerName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TriggerName is not set"));
  }
  return nil
}

func (p *WMTrigger)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ResourcePlanName = v
}
  return nil
}

func (p *WMTrigger)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TriggerName = v
}
  return nil
}

func (p *WMTrigger)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TriggerExpression = &v
}
  return nil
}

func (p *WMTrigger)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ActionExpression = &v
}
  return nil
}

func (p *WMTrigger) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMTrigger"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMTrigger) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "resourcePlanName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourcePlanName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ResourcePlanName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourcePlanName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourcePlanName: ", p), err) }
  return err
}

func (p *WMTrigger) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "triggerName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:triggerName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TriggerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.triggerName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:triggerName: ", p), err) }
  return err
}

func (p *WMTrigger) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTriggerExpression() {
    if err := oprot.WriteFieldBegin(ctx, "triggerExpression", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:triggerExpression: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.TriggerExpression)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.triggerExpression (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:triggerExpression: ", p), err) }
  }
  return err
}

func (p *WMTrigger) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetActionExpression() {
    if err := oprot.WriteFieldBegin(ctx, "actionExpression", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:actionExpression: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ActionExpression)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.actionExpression (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:actionExpression: ", p), err) }
  }
  return err
}

func (p *WMTrigger) Equals(other *WMTrigger) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ResourcePlanName != other.ResourcePlanName { return false }
  if p.TriggerName != other.TriggerName { return false }
  if p.TriggerExpression != other.TriggerExpression {
    if p.TriggerExpression == nil || other.TriggerExpression == nil {
      return false
    }
    if (*p.TriggerExpression) != (*other.TriggerExpression) { return false }
  }
  if p.ActionExpression != other.ActionExpression {
    if p.ActionExpression == nil || other.ActionExpression == nil {
      return false
    }
    if (*p.ActionExpression) != (*other.ActionExpression) { return false }
  }
  return true
}

func (p *WMTrigger) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMTrigger(%+v)", *p)
}

// Attributes:
//  - ResourcePlanName
//  - EntityType
//  - EntityName
//  - PoolName
//  - Ordering
type WMMapping struct {
  ResourcePlanName string `thrift:"resourcePlanName,1,required" db:"resourcePlanName" json:"resourcePlanName"`
  EntityType string `thrift:"entityType,2,required" db:"entityType" json:"entityType"`
  EntityName string `thrift:"entityName,3,required" db:"entityName" json:"entityName"`
  PoolName *string `thrift:"poolName,4" db:"poolName" json:"poolName,omitempty"`
  Ordering *int32 `thrift:"ordering,5" db:"ordering" json:"ordering,omitempty"`
}

func NewWMMapping() *WMMapping {
  return &WMMapping{}
}


func (p *WMMapping) GetResourcePlanName() string {
  return p.ResourcePlanName
}

func (p *WMMapping) GetEntityType() string {
  return p.EntityType
}

func (p *WMMapping) GetEntityName() string {
  return p.EntityName
}
var WMMapping_PoolName_DEFAULT string
func (p *WMMapping) GetPoolName() string {
  if !p.IsSetPoolName() {
    return WMMapping_PoolName_DEFAULT
  }
return *p.PoolName
}
var WMMapping_Ordering_DEFAULT int32
func (p *WMMapping) GetOrdering() int32 {
  if !p.IsSetOrdering() {
    return WMMapping_Ordering_DEFAULT
  }
return *p.Ordering
}
func (p *WMMapping) IsSetPoolName() bool {
  return p.PoolName != nil
}

func (p *WMMapping) IsSetOrdering() bool {
  return p.Ordering != nil
}

func (p *WMMapping) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResourcePlanName bool = false;
  var issetEntityType bool = false;
  var issetEntityName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResourcePlanName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetEntityType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetEntityName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResourcePlanName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourcePlanName is not set"));
  }
  if !issetEntityType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EntityType is not set"));
  }
  if !issetEntityName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EntityName is not set"));
  }
  return nil
}

func (p *WMMapping)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ResourcePlanName = v
}
  return nil
}

func (p *WMMapping)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EntityType = v
}
  return nil
}

func (p *WMMapping)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EntityName = v
}
  return nil
}

func (p *WMMapping)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PoolName = &v
}
  return nil
}

func (p *WMMapping)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Ordering = &v
}
  return nil
}

func (p *WMMapping) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMMapping"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMMapping) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "resourcePlanName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourcePlanName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ResourcePlanName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourcePlanName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourcePlanName: ", p), err) }
  return err
}

func (p *WMMapping) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entityType", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityType: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EntityType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.entityType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityType: ", p), err) }
  return err
}

func (p *WMMapping) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entityName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EntityName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.entityName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityName: ", p), err) }
  return err
}

func (p *WMMapping) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPoolName() {
    if err := oprot.WriteFieldBegin(ctx, "poolName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:poolName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.PoolName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.poolName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:poolName: ", p), err) }
  }
  return err
}

func (p *WMMapping) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOrdering() {
    if err := oprot.WriteFieldBegin(ctx, "ordering", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ordering: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Ordering)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ordering (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ordering: ", p), err) }
  }
  return err
}

func (p *WMMapping) Equals(other *WMMapping) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ResourcePlanName != other.ResourcePlanName { return false }
  if p.EntityType != other.EntityType { return false }
  if p.EntityName != other.EntityName { return false }
  if p.PoolName != other.PoolName {
    if p.PoolName == nil || other.PoolName == nil {
      return false
    }
    if (*p.PoolName) != (*other.PoolName) { return false }
  }
  if p.Ordering != other.Ordering {
    if p.Ordering == nil || other.Ordering == nil {
      return false
    }
    if (*p.Ordering) != (*other.Ordering) { return false }
  }
  return true
}

func (p *WMMapping) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMMapping(%+v)", *p)
}

// Attributes:
//  - Pool
//  - Trigger
type WMPoolTrigger struct {
  Pool string `thrift:"pool,1,required" db:"pool" json:"pool"`
  Trigger string `thrift:"trigger,2,required" db:"trigger" json:"trigger"`
}

func NewWMPoolTrigger() *WMPoolTrigger {
  return &WMPoolTrigger{}
}


func (p *WMPoolTrigger) GetPool() string {
  return p.Pool
}

func (p *WMPoolTrigger) GetTrigger() string {
  return p.Trigger
}
func (p *WMPoolTrigger) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPool bool = false;
  var issetTrigger bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPool = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTrigger = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPool{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Pool is not set"));
  }
  if !issetTrigger{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Trigger is not set"));
  }
  return nil
}

func (p *WMPoolTrigger)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Pool = v
}
  return nil
}

func (p *WMPoolTrigger)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Trigger = v
}
  return nil
}

func (p *WMPoolTrigger) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMPoolTrigger"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMPoolTrigger) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pool", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pool: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pool)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pool (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pool: ", p), err) }
  return err
}

func (p *WMPoolTrigger) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trigger", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trigger: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Trigger)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trigger (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trigger: ", p), err) }
  return err
}

func (p *WMPoolTrigger) Equals(other *WMPoolTrigger) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Pool != other.Pool { return false }
  if p.Trigger != other.Trigger { return false }
  return true
}

func (p *WMPoolTrigger) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMPoolTrigger(%+v)", *p)
}

// Attributes:
//  - Plan
//  - Pools
//  - Mappings
//  - Triggers
//  - PoolTriggers
type WMFullResourcePlan struct {
  Plan *WMResourcePlan `thrift:"plan,1,required" db:"plan" json:"plan"`
  Pools []*WMPool `thrift:"pools,2,required" db:"pools" json:"pools"`
  Mappings []*WMMapping `thrift:"mappings,3" db:"mappings" json:"mappings,omitempty"`
  Triggers []*WMTrigger `thrift:"triggers,4" db:"triggers" json:"triggers,omitempty"`
  PoolTriggers []*WMPoolTrigger `thrift:"poolTriggers,5" db:"poolTriggers" json:"poolTriggers,omitempty"`
}

func NewWMFullResourcePlan() *WMFullResourcePlan {
  return &WMFullResourcePlan{}
}

var WMFullResourcePlan_Plan_DEFAULT *WMResourcePlan
func (p *WMFullResourcePlan) GetPlan() *WMResourcePlan {
  if !p.IsSetPlan() {
    return WMFullResourcePlan_Plan_DEFAULT
  }
return p.Plan
}

func (p *WMFullResourcePlan) GetPools() []*WMPool {
  return p.Pools
}
var WMFullResourcePlan_Mappings_DEFAULT []*WMMapping

func (p *WMFullResourcePlan) GetMappings() []*WMMapping {
  return p.Mappings
}
var WMFullResourcePlan_Triggers_DEFAULT []*WMTrigger

func (p *WMFullResourcePlan) GetTriggers() []*WMTrigger {
  return p.Triggers
}
var WMFullResourcePlan_PoolTriggers_DEFAULT []*WMPoolTrigger

func (p *WMFullResourcePlan) GetPoolTriggers() []*WMPoolTrigger {
  return p.PoolTriggers
}
func (p *WMFullResourcePlan) IsSetPlan() bool {
  return p.Plan != nil
}

func (p *WMFullResourcePlan) IsSetMappings() bool {
  return p.Mappings != nil
}

func (p *WMFullResourcePlan) IsSetTriggers() bool {
  return p.Triggers != nil
}

func (p *WMFullResourcePlan) IsSetPoolTriggers() bool {
  return p.PoolTriggers != nil
}

func (p *WMFullResourcePlan) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPlan bool = false;
  var issetPools bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPlan = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetPools = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPlan{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Plan is not set"));
  }
  if !issetPools{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Pools is not set"));
  }
  return nil
}

func (p *WMFullResourcePlan)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Plan = &WMResourcePlan{}
  if err := p.Plan.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Plan), err)
  }
  return nil
}

func (p *WMFullResourcePlan)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*WMPool, 0, size)
  p.Pools =  tSlice
  for i := 0; i < size; i ++ {
    _elem191 := &WMPool{}
    if err := _elem191.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem191), err)
    }
    p.Pools = append(p.Pools, _elem191)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WMFullResourcePlan)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*WMMapping, 0, size)
  p.Mappings =  tSlice
  for i := 0; i < size; i ++ {
    _elem192 := &WMMapping{}
    if err := _elem192.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem192), err)
    }
    p.Mappings = append(p.Mappings, _elem192)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WMFullResourcePlan)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*WMTrigger, 0, size)
  p.Triggers =  tSlice
  for i := 0; i < size; i ++ {
    _elem193 := &WMTrigger{}
    if err := _elem193.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem193), err)
    }
    p.Triggers = append(p.Triggers, _elem193)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WMFullResourcePlan)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*WMPoolTrigger, 0, size)
  p.PoolTriggers =  tSlice
  for i := 0; i < size; i ++ {
    _elem194 := &WMPoolTrigger{}
    if err := _elem194.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem194), err)
    }
    p.PoolTriggers = append(p.PoolTriggers, _elem194)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WMFullResourcePlan) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMFullResourcePlan"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMFullResourcePlan) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "plan", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:plan: ", p), err) }
  if err := p.Plan.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Plan), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:plan: ", p), err) }
  return err
}

func (p *WMFullResourcePlan) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pools", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pools: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Pools)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Pools {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pools: ", p), err) }
  return err
}

func (p *WMFullResourcePlan) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMappings() {
    if err := oprot.WriteFieldBegin(ctx, "mappings", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mappings: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Mappings)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Mappings {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mappings: ", p), err) }
  }
  return err
}

func (p *WMFullResourcePlan) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTriggers() {
    if err := oprot.WriteFieldBegin(ctx, "triggers", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:triggers: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Triggers)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Triggers {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:triggers: ", p), err) }
  }
  return err
}

func (p *WMFullResourcePlan) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPoolTriggers() {
    if err := oprot.WriteFieldBegin(ctx, "poolTriggers", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:poolTriggers: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.PoolTriggers)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.PoolTriggers {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:poolTriggers: ", p), err) }
  }
  return err
}

func (p *WMFullResourcePlan) Equals(other *WMFullResourcePlan) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Plan.Equals(other.Plan) { return false }
  if len(p.Pools) != len(other.Pools) { return false }
  for i, _tgt := range p.Pools {
    _src195 := other.Pools[i]
    if !_tgt.Equals(_src195) { return false }
  }
  if len(p.Mappings) != len(other.Mappings) { return false }
  for i, _tgt := range p.Mappings {
    _src196 := other.Mappings[i]
    if !_tgt.Equals(_src196) { return false }
  }
  if len(p.Triggers) != len(other.Triggers) { return false }
  for i, _tgt := range p.Triggers {
    _src197 := other.Triggers[i]
    if !_tgt.Equals(_src197) { return false }
  }
  if len(p.PoolTriggers) != len(other.PoolTriggers) { return false }
  for i, _tgt := range p.PoolTriggers {
    _src198 := other.PoolTriggers[i]
    if !_tgt.Equals(_src198) { return false }
  }
  return true
}

func (p *WMFullResourcePlan) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMFullResourcePlan(%+v)", *p)
}

// Attributes:
//  - ResourcePlan
type WMCreateResourcePlanRequest struct {
  ResourcePlan *WMResourcePlan `thrift:"resourcePlan,1" db:"resourcePlan" json:"resourcePlan,omitempty"`
}

func NewWMCreateResourcePlanRequest() *WMCreateResourcePlanRequest {
  return &WMCreateResourcePlanRequest{}
}

var WMCreateResourcePlanRequest_ResourcePlan_DEFAULT *WMResourcePlan
func (p *WMCreateResourcePlanRequest) GetResourcePlan() *WMResourcePlan {
  if !p.IsSetResourcePlan() {
    return WMCreateResourcePlanRequest_ResourcePlan_DEFAULT
  }
return p.ResourcePlan
}
func (p *WMCreateResourcePlanRequest) IsSetResourcePlan() bool {
  return p.ResourcePlan != nil
}

func (p *WMCreateResourcePlanRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMCreateResourcePlanRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ResourcePlan = &WMResourcePlan{}
  if err := p.ResourcePlan.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResourcePlan), err)
  }
  return nil
}

func (p *WMCreateResourcePlanRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMCreateResourcePlanRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMCreateResourcePlanRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResourcePlan() {
    if err := oprot.WriteFieldBegin(ctx, "resourcePlan", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourcePlan: ", p), err) }
    if err := p.ResourcePlan.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResourcePlan), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourcePlan: ", p), err) }
  }
  return err
}

func (p *WMCreateResourcePlanRequest) Equals(other *WMCreateResourcePlanRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.ResourcePlan.Equals(other.ResourcePlan) { return false }
  return true
}

func (p *WMCreateResourcePlanRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMCreateResourcePlanRequest(%+v)", *p)
}

type WMCreateResourcePlanResponse struct {
}

func NewWMCreateResourcePlanResponse() *WMCreateResourcePlanResponse {
  return &WMCreateResourcePlanResponse{}
}

func (p *WMCreateResourcePlanResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMCreateResourcePlanResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMCreateResourcePlanResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMCreateResourcePlanResponse) Equals(other *WMCreateResourcePlanResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *WMCreateResourcePlanResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMCreateResourcePlanResponse(%+v)", *p)
}

type WMGetActiveResourcePlanRequest struct {
}

func NewWMGetActiveResourcePlanRequest() *WMGetActiveResourcePlanRequest {
  return &WMGetActiveResourcePlanRequest{}
}

func (p *WMGetActiveResourcePlanRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMGetActiveResourcePlanRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMGetActiveResourcePlanRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMGetActiveResourcePlanRequest) Equals(other *WMGetActiveResourcePlanRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *WMGetActiveResourcePlanRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMGetActiveResourcePlanRequest(%+v)", *p)
}

// Attributes:
//  - ResourcePlan
type WMGetActiveResourcePlanResponse struct {
  ResourcePlan *WMFullResourcePlan `thrift:"resourcePlan,1" db:"resourcePlan" json:"resourcePlan,omitempty"`
}

func NewWMGetActiveResourcePlanResponse() *WMGetActiveResourcePlanResponse {
  return &WMGetActiveResourcePlanResponse{}
}

var WMGetActiveResourcePlanResponse_ResourcePlan_DEFAULT *WMFullResourcePlan
func (p *WMGetActiveResourcePlanResponse) GetResourcePlan() *WMFullResourcePlan {
  if !p.IsSetResourcePlan() {
    return WMGetActiveResourcePlanResponse_ResourcePlan_DEFAULT
  }
return p.ResourcePlan
}
func (p *WMGetActiveResourcePlanResponse) IsSetResourcePlan() bool {
  return p.ResourcePlan != nil
}

func (p *WMGetActiveResourcePlanResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMGetActiveResourcePlanResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ResourcePlan = &WMFullResourcePlan{}
  if err := p.ResourcePlan.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResourcePlan), err)
  }
  return nil
}

func (p *WMGetActiveResourcePlanResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMGetActiveResourcePlanResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMGetActiveResourcePlanResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResourcePlan() {
    if err := oprot.WriteFieldBegin(ctx, "resourcePlan", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourcePlan: ", p), err) }
    if err := p.ResourcePlan.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResourcePlan), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourcePlan: ", p), err) }
  }
  return err
}

func (p *WMGetActiveResourcePlanResponse) Equals(other *WMGetActiveResourcePlanResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.ResourcePlan.Equals(other.ResourcePlan) { return false }
  return true
}

func (p *WMGetActiveResourcePlanResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMGetActiveResourcePlanResponse(%+v)", *p)
}

// Attributes:
//  - ResourcePlanName
type WMGetResourcePlanRequest struct {
  ResourcePlanName *string `thrift:"resourcePlanName,1" db:"resourcePlanName" json:"resourcePlanName,omitempty"`
}

func NewWMGetResourcePlanRequest() *WMGetResourcePlanRequest {
  return &WMGetResourcePlanRequest{}
}

var WMGetResourcePlanRequest_ResourcePlanName_DEFAULT string
func (p *WMGetResourcePlanRequest) GetResourcePlanName() string {
  if !p.IsSetResourcePlanName() {
    return WMGetResourcePlanRequest_ResourcePlanName_DEFAULT
  }
return *p.ResourcePlanName
}
func (p *WMGetResourcePlanRequest) IsSetResourcePlanName() bool {
  return p.ResourcePlanName != nil
}

func (p *WMGetResourcePlanRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMGetResourcePlanRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ResourcePlanName = &v
}
  return nil
}

func (p *WMGetResourcePlanRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMGetResourcePlanRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMGetResourcePlanRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResourcePlanName() {
    if err := oprot.WriteFieldBegin(ctx, "resourcePlanName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourcePlanName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ResourcePlanName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resourcePlanName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourcePlanName: ", p), err) }
  }
  return err
}

func (p *WMGetResourcePlanRequest) Equals(other *WMGetResourcePlanRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ResourcePlanName != other.ResourcePlanName {
    if p.ResourcePlanName == nil || other.ResourcePlanName == nil {
      return false
    }
    if (*p.ResourcePlanName) != (*other.ResourcePlanName) { return false }
  }
  return true
}

func (p *WMGetResourcePlanRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMGetResourcePlanRequest(%+v)", *p)
}

// Attributes:
//  - ResourcePlan
type WMGetResourcePlanResponse struct {
  ResourcePlan *WMResourcePlan `thrift:"resourcePlan,1" db:"resourcePlan" json:"resourcePlan,omitempty"`
}

func NewWMGetResourcePlanResponse() *WMGetResourcePlanResponse {
  return &WMGetResourcePlanResponse{}
}

var WMGetResourcePlanResponse_ResourcePlan_DEFAULT *WMResourcePlan
func (p *WMGetResourcePlanResponse) GetResourcePlan() *WMResourcePlan {
  if !p.IsSetResourcePlan() {
    return WMGetResourcePlanResponse_ResourcePlan_DEFAULT
  }
return p.ResourcePlan
}
func (p *WMGetResourcePlanResponse) IsSetResourcePlan() bool {
  return p.ResourcePlan != nil
}

func (p *WMGetResourcePlanResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMGetResourcePlanResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ResourcePlan = &WMResourcePlan{}
  if err := p.ResourcePlan.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResourcePlan), err)
  }
  return nil
}

func (p *WMGetResourcePlanResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMGetResourcePlanResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMGetResourcePlanResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResourcePlan() {
    if err := oprot.WriteFieldBegin(ctx, "resourcePlan", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourcePlan: ", p), err) }
    if err := p.ResourcePlan.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResourcePlan), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourcePlan: ", p), err) }
  }
  return err
}

func (p *WMGetResourcePlanResponse) Equals(other *WMGetResourcePlanResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.ResourcePlan.Equals(other.ResourcePlan) { return false }
  return true
}

func (p *WMGetResourcePlanResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMGetResourcePlanResponse(%+v)", *p)
}

type WMGetAllResourcePlanRequest struct {
}

func NewWMGetAllResourcePlanRequest() *WMGetAllResourcePlanRequest {
  return &WMGetAllResourcePlanRequest{}
}

func (p *WMGetAllResourcePlanRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMGetAllResourcePlanRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMGetAllResourcePlanRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMGetAllResourcePlanRequest) Equals(other *WMGetAllResourcePlanRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *WMGetAllResourcePlanRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMGetAllResourcePlanRequest(%+v)", *p)
}

// Attributes:
//  - ResourcePlans
type WMGetAllResourcePlanResponse struct {
  ResourcePlans []*WMResourcePlan `thrift:"resourcePlans,1" db:"resourcePlans" json:"resourcePlans,omitempty"`
}

func NewWMGetAllResourcePlanResponse() *WMGetAllResourcePlanResponse {
  return &WMGetAllResourcePlanResponse{}
}

var WMGetAllResourcePlanResponse_ResourcePlans_DEFAULT []*WMResourcePlan

func (p *WMGetAllResourcePlanResponse) GetResourcePlans() []*WMResourcePlan {
  return p.ResourcePlans
}
func (p *WMGetAllResourcePlanResponse) IsSetResourcePlans() bool {
  return p.ResourcePlans != nil
}

func (p *WMGetAllResourcePlanResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMGetAllResourcePlanResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*WMResourcePlan, 0, size)
  p.ResourcePlans =  tSlice
  for i := 0; i < size; i ++ {
    _elem199 := &WMResourcePlan{}
    if err := _elem199.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem199), err)
    }
    p.ResourcePlans = append(p.ResourcePlans, _elem199)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WMGetAllResourcePlanResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMGetAllResourcePlanResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMGetAllResourcePlanResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResourcePlans() {
    if err := oprot.WriteFieldBegin(ctx, "resourcePlans", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourcePlans: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ResourcePlans)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ResourcePlans {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourcePlans: ", p), err) }
  }
  return err
}

func (p *WMGetAllResourcePlanResponse) Equals(other *WMGetAllResourcePlanResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ResourcePlans) != len(other.ResourcePlans) { return false }
  for i, _tgt := range p.ResourcePlans {
    _src200 := other.ResourcePlans[i]
    if !_tgt.Equals(_src200) { return false }
  }
  return true
}

func (p *WMGetAllResourcePlanResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMGetAllResourcePlanResponse(%+v)", *p)
}

// Attributes:
//  - ResourcePlanName
//  - ResourcePlan
//  - IsEnableAndActivate
type WMAlterResourcePlanRequest struct {
  ResourcePlanName *string `thrift:"resourcePlanName,1" db:"resourcePlanName" json:"resourcePlanName,omitempty"`
  ResourcePlan *WMResourcePlan `thrift:"resourcePlan,2" db:"resourcePlan" json:"resourcePlan,omitempty"`
  IsEnableAndActivate *bool `thrift:"isEnableAndActivate,3" db:"isEnableAndActivate" json:"isEnableAndActivate,omitempty"`
}

func NewWMAlterResourcePlanRequest() *WMAlterResourcePlanRequest {
  return &WMAlterResourcePlanRequest{}
}

var WMAlterResourcePlanRequest_ResourcePlanName_DEFAULT string
func (p *WMAlterResourcePlanRequest) GetResourcePlanName() string {
  if !p.IsSetResourcePlanName() {
    return WMAlterResourcePlanRequest_ResourcePlanName_DEFAULT
  }
return *p.ResourcePlanName
}
var WMAlterResourcePlanRequest_ResourcePlan_DEFAULT *WMResourcePlan
func (p *WMAlterResourcePlanRequest) GetResourcePlan() *WMResourcePlan {
  if !p.IsSetResourcePlan() {
    return WMAlterResourcePlanRequest_ResourcePlan_DEFAULT
  }
return p.ResourcePlan
}
var WMAlterResourcePlanRequest_IsEnableAndActivate_DEFAULT bool
func (p *WMAlterResourcePlanRequest) GetIsEnableAndActivate() bool {
  if !p.IsSetIsEnableAndActivate() {
    return WMAlterResourcePlanRequest_IsEnableAndActivate_DEFAULT
  }
return *p.IsEnableAndActivate
}
func (p *WMAlterResourcePlanRequest) IsSetResourcePlanName() bool {
  return p.ResourcePlanName != nil
}

func (p *WMAlterResourcePlanRequest) IsSetResourcePlan() bool {
  return p.ResourcePlan != nil
}

func (p *WMAlterResourcePlanRequest) IsSetIsEnableAndActivate() bool {
  return p.IsEnableAndActivate != nil
}

func (p *WMAlterResourcePlanRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMAlterResourcePlanRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ResourcePlanName = &v
}
  return nil
}

func (p *WMAlterResourcePlanRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.ResourcePlan = &WMResourcePlan{}
  if err := p.ResourcePlan.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResourcePlan), err)
  }
  return nil
}

func (p *WMAlterResourcePlanRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsEnableAndActivate = &v
}
  return nil
}

func (p *WMAlterResourcePlanRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMAlterResourcePlanRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMAlterResourcePlanRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResourcePlanName() {
    if err := oprot.WriteFieldBegin(ctx, "resourcePlanName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourcePlanName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ResourcePlanName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resourcePlanName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourcePlanName: ", p), err) }
  }
  return err
}

func (p *WMAlterResourcePlanRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResourcePlan() {
    if err := oprot.WriteFieldBegin(ctx, "resourcePlan", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resourcePlan: ", p), err) }
    if err := p.ResourcePlan.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResourcePlan), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resourcePlan: ", p), err) }
  }
  return err
}

func (p *WMAlterResourcePlanRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIsEnableAndActivate() {
    if err := oprot.WriteFieldBegin(ctx, "isEnableAndActivate", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:isEnableAndActivate: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.IsEnableAndActivate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isEnableAndActivate (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:isEnableAndActivate: ", p), err) }
  }
  return err
}

func (p *WMAlterResourcePlanRequest) Equals(other *WMAlterResourcePlanRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ResourcePlanName != other.ResourcePlanName {
    if p.ResourcePlanName == nil || other.ResourcePlanName == nil {
      return false
    }
    if (*p.ResourcePlanName) != (*other.ResourcePlanName) { return false }
  }
  if !p.ResourcePlan.Equals(other.ResourcePlan) { return false }
  if p.IsEnableAndActivate != other.IsEnableAndActivate {
    if p.IsEnableAndActivate == nil || other.IsEnableAndActivate == nil {
      return false
    }
    if (*p.IsEnableAndActivate) != (*other.IsEnableAndActivate) { return false }
  }
  return true
}

func (p *WMAlterResourcePlanRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMAlterResourcePlanRequest(%+v)", *p)
}

// Attributes:
//  - FullResourcePlan
type WMAlterResourcePlanResponse struct {
  FullResourcePlan *WMFullResourcePlan `thrift:"fullResourcePlan,1" db:"fullResourcePlan" json:"fullResourcePlan,omitempty"`
}

func NewWMAlterResourcePlanResponse() *WMAlterResourcePlanResponse {
  return &WMAlterResourcePlanResponse{}
}

var WMAlterResourcePlanResponse_FullResourcePlan_DEFAULT *WMFullResourcePlan
func (p *WMAlterResourcePlanResponse) GetFullResourcePlan() *WMFullResourcePlan {
  if !p.IsSetFullResourcePlan() {
    return WMAlterResourcePlanResponse_FullResourcePlan_DEFAULT
  }
return p.FullResourcePlan
}
func (p *WMAlterResourcePlanResponse) IsSetFullResourcePlan() bool {
  return p.FullResourcePlan != nil
}

func (p *WMAlterResourcePlanResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMAlterResourcePlanResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FullResourcePlan = &WMFullResourcePlan{}
  if err := p.FullResourcePlan.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FullResourcePlan), err)
  }
  return nil
}

func (p *WMAlterResourcePlanResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMAlterResourcePlanResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMAlterResourcePlanResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFullResourcePlan() {
    if err := oprot.WriteFieldBegin(ctx, "fullResourcePlan", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fullResourcePlan: ", p), err) }
    if err := p.FullResourcePlan.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FullResourcePlan), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fullResourcePlan: ", p), err) }
  }
  return err
}

func (p *WMAlterResourcePlanResponse) Equals(other *WMAlterResourcePlanResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FullResourcePlan.Equals(other.FullResourcePlan) { return false }
  return true
}

func (p *WMAlterResourcePlanResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMAlterResourcePlanResponse(%+v)", *p)
}

// Attributes:
//  - ResourcePlanName
type WMValidateResourcePlanRequest struct {
  ResourcePlanName *string `thrift:"resourcePlanName,1" db:"resourcePlanName" json:"resourcePlanName,omitempty"`
}

func NewWMValidateResourcePlanRequest() *WMValidateResourcePlanRequest {
  return &WMValidateResourcePlanRequest{}
}

var WMValidateResourcePlanRequest_ResourcePlanName_DEFAULT string
func (p *WMValidateResourcePlanRequest) GetResourcePlanName() string {
  if !p.IsSetResourcePlanName() {
    return WMValidateResourcePlanRequest_ResourcePlanName_DEFAULT
  }
return *p.ResourcePlanName
}
func (p *WMValidateResourcePlanRequest) IsSetResourcePlanName() bool {
  return p.ResourcePlanName != nil
}

func (p *WMValidateResourcePlanRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMValidateResourcePlanRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ResourcePlanName = &v
}
  return nil
}

func (p *WMValidateResourcePlanRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMValidateResourcePlanRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMValidateResourcePlanRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResourcePlanName() {
    if err := oprot.WriteFieldBegin(ctx, "resourcePlanName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourcePlanName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ResourcePlanName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resourcePlanName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourcePlanName: ", p), err) }
  }
  return err
}

func (p *WMValidateResourcePlanRequest) Equals(other *WMValidateResourcePlanRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ResourcePlanName != other.ResourcePlanName {
    if p.ResourcePlanName == nil || other.ResourcePlanName == nil {
      return false
    }
    if (*p.ResourcePlanName) != (*other.ResourcePlanName) { return false }
  }
  return true
}

func (p *WMValidateResourcePlanRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMValidateResourcePlanRequest(%+v)", *p)
}

// Attributes:
//  - IsValid
type WMValidateResourcePlanResponse struct {
  IsValid *bool `thrift:"isValid,1" db:"isValid" json:"isValid,omitempty"`
}

func NewWMValidateResourcePlanResponse() *WMValidateResourcePlanResponse {
  return &WMValidateResourcePlanResponse{}
}

var WMValidateResourcePlanResponse_IsValid_DEFAULT bool
func (p *WMValidateResourcePlanResponse) GetIsValid() bool {
  if !p.IsSetIsValid() {
    return WMValidateResourcePlanResponse_IsValid_DEFAULT
  }
return *p.IsValid
}
func (p *WMValidateResourcePlanResponse) IsSetIsValid() bool {
  return p.IsValid != nil
}

func (p *WMValidateResourcePlanResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMValidateResourcePlanResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IsValid = &v
}
  return nil
}

func (p *WMValidateResourcePlanResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMValidateResourcePlanResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMValidateResourcePlanResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIsValid() {
    if err := oprot.WriteFieldBegin(ctx, "isValid", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:isValid: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.IsValid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isValid (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:isValid: ", p), err) }
  }
  return err
}

func (p *WMValidateResourcePlanResponse) Equals(other *WMValidateResourcePlanResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IsValid != other.IsValid {
    if p.IsValid == nil || other.IsValid == nil {
      return false
    }
    if (*p.IsValid) != (*other.IsValid) { return false }
  }
  return true
}

func (p *WMValidateResourcePlanResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMValidateResourcePlanResponse(%+v)", *p)
}

// Attributes:
//  - ResourcePlanName
type WMDropResourcePlanRequest struct {
  ResourcePlanName *string `thrift:"resourcePlanName,1" db:"resourcePlanName" json:"resourcePlanName,omitempty"`
}

func NewWMDropResourcePlanRequest() *WMDropResourcePlanRequest {
  return &WMDropResourcePlanRequest{}
}

var WMDropResourcePlanRequest_ResourcePlanName_DEFAULT string
func (p *WMDropResourcePlanRequest) GetResourcePlanName() string {
  if !p.IsSetResourcePlanName() {
    return WMDropResourcePlanRequest_ResourcePlanName_DEFAULT
  }
return *p.ResourcePlanName
}
func (p *WMDropResourcePlanRequest) IsSetResourcePlanName() bool {
  return p.ResourcePlanName != nil
}

func (p *WMDropResourcePlanRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMDropResourcePlanRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ResourcePlanName = &v
}
  return nil
}

func (p *WMDropResourcePlanRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMDropResourcePlanRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMDropResourcePlanRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResourcePlanName() {
    if err := oprot.WriteFieldBegin(ctx, "resourcePlanName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourcePlanName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ResourcePlanName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resourcePlanName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourcePlanName: ", p), err) }
  }
  return err
}

func (p *WMDropResourcePlanRequest) Equals(other *WMDropResourcePlanRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ResourcePlanName != other.ResourcePlanName {
    if p.ResourcePlanName == nil || other.ResourcePlanName == nil {
      return false
    }
    if (*p.ResourcePlanName) != (*other.ResourcePlanName) { return false }
  }
  return true
}

func (p *WMDropResourcePlanRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMDropResourcePlanRequest(%+v)", *p)
}

type WMDropResourcePlanResponse struct {
}

func NewWMDropResourcePlanResponse() *WMDropResourcePlanResponse {
  return &WMDropResourcePlanResponse{}
}

func (p *WMDropResourcePlanResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMDropResourcePlanResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMDropResourcePlanResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMDropResourcePlanResponse) Equals(other *WMDropResourcePlanResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *WMDropResourcePlanResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMDropResourcePlanResponse(%+v)", *p)
}

// Attributes:
//  - Trigger
type WMCreateTriggerRequest struct {
  Trigger *WMTrigger `thrift:"trigger,1" db:"trigger" json:"trigger,omitempty"`
}

func NewWMCreateTriggerRequest() *WMCreateTriggerRequest {
  return &WMCreateTriggerRequest{}
}

var WMCreateTriggerRequest_Trigger_DEFAULT *WMTrigger
func (p *WMCreateTriggerRequest) GetTrigger() *WMTrigger {
  if !p.IsSetTrigger() {
    return WMCreateTriggerRequest_Trigger_DEFAULT
  }
return p.Trigger
}
func (p *WMCreateTriggerRequest) IsSetTrigger() bool {
  return p.Trigger != nil
}

func (p *WMCreateTriggerRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMCreateTriggerRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Trigger = &WMTrigger{}
  if err := p.Trigger.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Trigger), err)
  }
  return nil
}

func (p *WMCreateTriggerRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMCreateTriggerRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMCreateTriggerRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTrigger() {
    if err := oprot.WriteFieldBegin(ctx, "trigger", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:trigger: ", p), err) }
    if err := p.Trigger.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Trigger), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:trigger: ", p), err) }
  }
  return err
}

func (p *WMCreateTriggerRequest) Equals(other *WMCreateTriggerRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Trigger.Equals(other.Trigger) { return false }
  return true
}

func (p *WMCreateTriggerRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMCreateTriggerRequest(%+v)", *p)
}

type WMCreateTriggerResponse struct {
}

func NewWMCreateTriggerResponse() *WMCreateTriggerResponse {
  return &WMCreateTriggerResponse{}
}

func (p *WMCreateTriggerResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMCreateTriggerResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMCreateTriggerResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMCreateTriggerResponse) Equals(other *WMCreateTriggerResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *WMCreateTriggerResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMCreateTriggerResponse(%+v)", *p)
}

// Attributes:
//  - Trigger
type WMAlterTriggerRequest struct {
  Trigger *WMTrigger `thrift:"trigger,1" db:"trigger" json:"trigger,omitempty"`
}

func NewWMAlterTriggerRequest() *WMAlterTriggerRequest {
  return &WMAlterTriggerRequest{}
}

var WMAlterTriggerRequest_Trigger_DEFAULT *WMTrigger
func (p *WMAlterTriggerRequest) GetTrigger() *WMTrigger {
  if !p.IsSetTrigger() {
    return WMAlterTriggerRequest_Trigger_DEFAULT
  }
return p.Trigger
}
func (p *WMAlterTriggerRequest) IsSetTrigger() bool {
  return p.Trigger != nil
}

func (p *WMAlterTriggerRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMAlterTriggerRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Trigger = &WMTrigger{}
  if err := p.Trigger.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Trigger), err)
  }
  return nil
}

func (p *WMAlterTriggerRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMAlterTriggerRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMAlterTriggerRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTrigger() {
    if err := oprot.WriteFieldBegin(ctx, "trigger", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:trigger: ", p), err) }
    if err := p.Trigger.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Trigger), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:trigger: ", p), err) }
  }
  return err
}

func (p *WMAlterTriggerRequest) Equals(other *WMAlterTriggerRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Trigger.Equals(other.Trigger) { return false }
  return true
}

func (p *WMAlterTriggerRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMAlterTriggerRequest(%+v)", *p)
}

type WMAlterTriggerResponse struct {
}

func NewWMAlterTriggerResponse() *WMAlterTriggerResponse {
  return &WMAlterTriggerResponse{}
}

func (p *WMAlterTriggerResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMAlterTriggerResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMAlterTriggerResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMAlterTriggerResponse) Equals(other *WMAlterTriggerResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *WMAlterTriggerResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMAlterTriggerResponse(%+v)", *p)
}

// Attributes:
//  - ResourcePlanName
//  - TriggerName
type WMDropTriggerRequest struct {
  ResourcePlanName *string `thrift:"resourcePlanName,1" db:"resourcePlanName" json:"resourcePlanName,omitempty"`
  TriggerName *string `thrift:"triggerName,2" db:"triggerName" json:"triggerName,omitempty"`
}

func NewWMDropTriggerRequest() *WMDropTriggerRequest {
  return &WMDropTriggerRequest{}
}

var WMDropTriggerRequest_ResourcePlanName_DEFAULT string
func (p *WMDropTriggerRequest) GetResourcePlanName() string {
  if !p.IsSetResourcePlanName() {
    return WMDropTriggerRequest_ResourcePlanName_DEFAULT
  }
return *p.ResourcePlanName
}
var WMDropTriggerRequest_TriggerName_DEFAULT string
func (p *WMDropTriggerRequest) GetTriggerName() string {
  if !p.IsSetTriggerName() {
    return WMDropTriggerRequest_TriggerName_DEFAULT
  }
return *p.TriggerName
}
func (p *WMDropTriggerRequest) IsSetResourcePlanName() bool {
  return p.ResourcePlanName != nil
}

func (p *WMDropTriggerRequest) IsSetTriggerName() bool {
  return p.TriggerName != nil
}

func (p *WMDropTriggerRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMDropTriggerRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ResourcePlanName = &v
}
  return nil
}

func (p *WMDropTriggerRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TriggerName = &v
}
  return nil
}

func (p *WMDropTriggerRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMDropTriggerRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMDropTriggerRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResourcePlanName() {
    if err := oprot.WriteFieldBegin(ctx, "resourcePlanName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourcePlanName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ResourcePlanName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resourcePlanName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourcePlanName: ", p), err) }
  }
  return err
}

func (p *WMDropTriggerRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTriggerName() {
    if err := oprot.WriteFieldBegin(ctx, "triggerName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:triggerName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.TriggerName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.triggerName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:triggerName: ", p), err) }
  }
  return err
}

func (p *WMDropTriggerRequest) Equals(other *WMDropTriggerRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ResourcePlanName != other.ResourcePlanName {
    if p.ResourcePlanName == nil || other.ResourcePlanName == nil {
      return false
    }
    if (*p.ResourcePlanName) != (*other.ResourcePlanName) { return false }
  }
  if p.TriggerName != other.TriggerName {
    if p.TriggerName == nil || other.TriggerName == nil {
      return false
    }
    if (*p.TriggerName) != (*other.TriggerName) { return false }
  }
  return true
}

func (p *WMDropTriggerRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMDropTriggerRequest(%+v)", *p)
}

type WMDropTriggerResponse struct {
}

func NewWMDropTriggerResponse() *WMDropTriggerResponse {
  return &WMDropTriggerResponse{}
}

func (p *WMDropTriggerResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMDropTriggerResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMDropTriggerResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMDropTriggerResponse) Equals(other *WMDropTriggerResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *WMDropTriggerResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMDropTriggerResponse(%+v)", *p)
}

// Attributes:
//  - ResourcePlanName
type WMGetTriggersForResourePlanRequest struct {
  ResourcePlanName *string `thrift:"resourcePlanName,1" db:"resourcePlanName" json:"resourcePlanName,omitempty"`
}

func NewWMGetTriggersForResourePlanRequest() *WMGetTriggersForResourePlanRequest {
  return &WMGetTriggersForResourePlanRequest{}
}

var WMGetTriggersForResourePlanRequest_ResourcePlanName_DEFAULT string
func (p *WMGetTriggersForResourePlanRequest) GetResourcePlanName() string {
  if !p.IsSetResourcePlanName() {
    return WMGetTriggersForResourePlanRequest_ResourcePlanName_DEFAULT
  }
return *p.ResourcePlanName
}
func (p *WMGetTriggersForResourePlanRequest) IsSetResourcePlanName() bool {
  return p.ResourcePlanName != nil
}

func (p *WMGetTriggersForResourePlanRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMGetTriggersForResourePlanRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ResourcePlanName = &v
}
  return nil
}

func (p *WMGetTriggersForResourePlanRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMGetTriggersForResourePlanRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMGetTriggersForResourePlanRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResourcePlanName() {
    if err := oprot.WriteFieldBegin(ctx, "resourcePlanName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourcePlanName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ResourcePlanName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resourcePlanName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourcePlanName: ", p), err) }
  }
  return err
}

func (p *WMGetTriggersForResourePlanRequest) Equals(other *WMGetTriggersForResourePlanRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ResourcePlanName != other.ResourcePlanName {
    if p.ResourcePlanName == nil || other.ResourcePlanName == nil {
      return false
    }
    if (*p.ResourcePlanName) != (*other.ResourcePlanName) { return false }
  }
  return true
}

func (p *WMGetTriggersForResourePlanRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMGetTriggersForResourePlanRequest(%+v)", *p)
}

// Attributes:
//  - Triggers
type WMGetTriggersForResourePlanResponse struct {
  Triggers []*WMTrigger `thrift:"triggers,1" db:"triggers" json:"triggers,omitempty"`
}

func NewWMGetTriggersForResourePlanResponse() *WMGetTriggersForResourePlanResponse {
  return &WMGetTriggersForResourePlanResponse{}
}

var WMGetTriggersForResourePlanResponse_Triggers_DEFAULT []*WMTrigger

func (p *WMGetTriggersForResourePlanResponse) GetTriggers() []*WMTrigger {
  return p.Triggers
}
func (p *WMGetTriggersForResourePlanResponse) IsSetTriggers() bool {
  return p.Triggers != nil
}

func (p *WMGetTriggersForResourePlanResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WMGetTriggersForResourePlanResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*WMTrigger, 0, size)
  p.Triggers =  tSlice
  for i := 0; i < size; i ++ {
    _elem201 := &WMTrigger{}
    if err := _elem201.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem201), err)
    }
    p.Triggers = append(p.Triggers, _elem201)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WMGetTriggersForResourePlanResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WMGetTriggersForResourePlanResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WMGetTriggersForResourePlanResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTriggers() {
    if err := oprot.WriteFieldBegin(ctx, "triggers", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:triggers: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Triggers)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Triggers {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:triggers: ", p), err) }
  }
  return err
}

func (p *WMGetTriggersForResourePlanResponse) Equals(other *WMGetTriggersForResourePlanResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Triggers) != len(other.Triggers) { return false }
  for i, _tgt := range p.Triggers {
    _src202 := other.Triggers[i]
    if !_tgt.Equals(_src202) { return false }
  }
  return true
}

func (p *WMGetTriggersForResourePlanResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WMGetTriggersForResourePlanResponse(%+v)", *p)
}

// Attributes:
//  - Message
type MetaException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewMetaException() *MetaException {
  return &MetaException{}
}


func (p *MetaException) GetMessage() string {
  return p.Message
}
func (p *MetaException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *MetaException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MetaException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *MetaException) Equals(other *MetaException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *MetaException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaException(%+v)", *p)
}

func (p *MetaException) Error() string {
  return p.String()
}

func (MetaException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*MetaException)(nil)

// Attributes:
//  - Message
type UnknownTableException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewUnknownTableException() *UnknownTableException {
  return &UnknownTableException{}
}


func (p *UnknownTableException) GetMessage() string {
  return p.Message
}
func (p *UnknownTableException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnknownTableException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *UnknownTableException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UnknownTableException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnknownTableException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *UnknownTableException) Equals(other *UnknownTableException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *UnknownTableException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnknownTableException(%+v)", *p)
}

func (p *UnknownTableException) Error() string {
  return p.String()
}

func (UnknownTableException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*UnknownTableException)(nil)

// Attributes:
//  - Message
type UnknownDBException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewUnknownDBException() *UnknownDBException {
  return &UnknownDBException{}
}


func (p *UnknownDBException) GetMessage() string {
  return p.Message
}
func (p *UnknownDBException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnknownDBException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *UnknownDBException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UnknownDBException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnknownDBException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *UnknownDBException) Equals(other *UnknownDBException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *UnknownDBException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnknownDBException(%+v)", *p)
}

func (p *UnknownDBException) Error() string {
  return p.String()
}

func (UnknownDBException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*UnknownDBException)(nil)

// Attributes:
//  - Message
type AlreadyExistsException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewAlreadyExistsException() *AlreadyExistsException {
  return &AlreadyExistsException{}
}


func (p *AlreadyExistsException) GetMessage() string {
  return p.Message
}
func (p *AlreadyExistsException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlreadyExistsException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *AlreadyExistsException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AlreadyExistsException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlreadyExistsException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *AlreadyExistsException) Equals(other *AlreadyExistsException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *AlreadyExistsException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlreadyExistsException(%+v)", *p)
}

func (p *AlreadyExistsException) Error() string {
  return p.String()
}

func (AlreadyExistsException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*AlreadyExistsException)(nil)

// Attributes:
//  - Message
type InvalidPartitionException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewInvalidPartitionException() *InvalidPartitionException {
  return &InvalidPartitionException{}
}


func (p *InvalidPartitionException) GetMessage() string {
  return p.Message
}
func (p *InvalidPartitionException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidPartitionException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidPartitionException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InvalidPartitionException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidPartitionException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InvalidPartitionException) Equals(other *InvalidPartitionException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *InvalidPartitionException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidPartitionException(%+v)", *p)
}

func (p *InvalidPartitionException) Error() string {
  return p.String()
}

func (InvalidPartitionException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*InvalidPartitionException)(nil)

// Attributes:
//  - Message
type UnknownPartitionException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewUnknownPartitionException() *UnknownPartitionException {
  return &UnknownPartitionException{}
}


func (p *UnknownPartitionException) GetMessage() string {
  return p.Message
}
func (p *UnknownPartitionException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnknownPartitionException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *UnknownPartitionException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UnknownPartitionException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnknownPartitionException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *UnknownPartitionException) Equals(other *UnknownPartitionException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *UnknownPartitionException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnknownPartitionException(%+v)", *p)
}

func (p *UnknownPartitionException) Error() string {
  return p.String()
}

func (UnknownPartitionException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*UnknownPartitionException)(nil)

// Attributes:
//  - Message
type InvalidObjectException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewInvalidObjectException() *InvalidObjectException {
  return &InvalidObjectException{}
}


func (p *InvalidObjectException) GetMessage() string {
  return p.Message
}
func (p *InvalidObjectException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidObjectException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidObjectException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InvalidObjectException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidObjectException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InvalidObjectException) Equals(other *InvalidObjectException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *InvalidObjectException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidObjectException(%+v)", *p)
}

func (p *InvalidObjectException) Error() string {
  return p.String()
}

func (InvalidObjectException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*InvalidObjectException)(nil)

// Attributes:
//  - Message
type NoSuchObjectException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewNoSuchObjectException() *NoSuchObjectException {
  return &NoSuchObjectException{}
}


func (p *NoSuchObjectException) GetMessage() string {
  return p.Message
}
func (p *NoSuchObjectException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NoSuchObjectException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *NoSuchObjectException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NoSuchObjectException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NoSuchObjectException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *NoSuchObjectException) Equals(other *NoSuchObjectException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *NoSuchObjectException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoSuchObjectException(%+v)", *p)
}

func (p *NoSuchObjectException) Error() string {
  return p.String()
}

func (NoSuchObjectException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*NoSuchObjectException)(nil)

// Attributes:
//  - Message
type IndexAlreadyExistsException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewIndexAlreadyExistsException() *IndexAlreadyExistsException {
  return &IndexAlreadyExistsException{}
}


func (p *IndexAlreadyExistsException) GetMessage() string {
  return p.Message
}
func (p *IndexAlreadyExistsException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexAlreadyExistsException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *IndexAlreadyExistsException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IndexAlreadyExistsException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexAlreadyExistsException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *IndexAlreadyExistsException) Equals(other *IndexAlreadyExistsException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *IndexAlreadyExistsException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexAlreadyExistsException(%+v)", *p)
}

func (p *IndexAlreadyExistsException) Error() string {
  return p.String()
}

func (IndexAlreadyExistsException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*IndexAlreadyExistsException)(nil)

// Attributes:
//  - Message
type InvalidOperationException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewInvalidOperationException() *InvalidOperationException {
  return &InvalidOperationException{}
}


func (p *InvalidOperationException) GetMessage() string {
  return p.Message
}
func (p *InvalidOperationException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidOperationException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidOperationException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InvalidOperationException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidOperationException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InvalidOperationException) Equals(other *InvalidOperationException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *InvalidOperationException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidOperationException(%+v)", *p)
}

func (p *InvalidOperationException) Error() string {
  return p.String()
}

func (InvalidOperationException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*InvalidOperationException)(nil)

// Attributes:
//  - Message
type ConfigValSecurityException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewConfigValSecurityException() *ConfigValSecurityException {
  return &ConfigValSecurityException{}
}


func (p *ConfigValSecurityException) GetMessage() string {
  return p.Message
}
func (p *ConfigValSecurityException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigValSecurityException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ConfigValSecurityException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ConfigValSecurityException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigValSecurityException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *ConfigValSecurityException) Equals(other *ConfigValSecurityException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *ConfigValSecurityException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigValSecurityException(%+v)", *p)
}

func (p *ConfigValSecurityException) Error() string {
  return p.String()
}

func (ConfigValSecurityException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*ConfigValSecurityException)(nil)

// Attributes:
//  - Message
type InvalidInputException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewInvalidInputException() *InvalidInputException {
  return &InvalidInputException{}
}


func (p *InvalidInputException) GetMessage() string {
  return p.Message
}
func (p *InvalidInputException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidInputException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidInputException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InvalidInputException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidInputException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InvalidInputException) Equals(other *InvalidInputException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *InvalidInputException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidInputException(%+v)", *p)
}

func (p *InvalidInputException) Error() string {
  return p.String()
}

func (InvalidInputException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*InvalidInputException)(nil)

// Attributes:
//  - Message
type NoSuchTxnException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewNoSuchTxnException() *NoSuchTxnException {
  return &NoSuchTxnException{}
}


func (p *NoSuchTxnException) GetMessage() string {
  return p.Message
}
func (p *NoSuchTxnException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NoSuchTxnException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *NoSuchTxnException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NoSuchTxnException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NoSuchTxnException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *NoSuchTxnException) Equals(other *NoSuchTxnException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *NoSuchTxnException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoSuchTxnException(%+v)", *p)
}

func (p *NoSuchTxnException) Error() string {
  return p.String()
}

func (NoSuchTxnException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*NoSuchTxnException)(nil)

// Attributes:
//  - Message
type TxnAbortedException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewTxnAbortedException() *TxnAbortedException {
  return &TxnAbortedException{}
}


func (p *TxnAbortedException) GetMessage() string {
  return p.Message
}
func (p *TxnAbortedException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TxnAbortedException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TxnAbortedException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TxnAbortedException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TxnAbortedException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *TxnAbortedException) Equals(other *TxnAbortedException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *TxnAbortedException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TxnAbortedException(%+v)", *p)
}

func (p *TxnAbortedException) Error() string {
  return p.String()
}

func (TxnAbortedException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*TxnAbortedException)(nil)

// Attributes:
//  - Message
type TxnOpenException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewTxnOpenException() *TxnOpenException {
  return &TxnOpenException{}
}


func (p *TxnOpenException) GetMessage() string {
  return p.Message
}
func (p *TxnOpenException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TxnOpenException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TxnOpenException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TxnOpenException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TxnOpenException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *TxnOpenException) Equals(other *TxnOpenException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *TxnOpenException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TxnOpenException(%+v)", *p)
}

func (p *TxnOpenException) Error() string {
  return p.String()
}

func (TxnOpenException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*TxnOpenException)(nil)

// Attributes:
//  - Message
type NoSuchLockException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewNoSuchLockException() *NoSuchLockException {
  return &NoSuchLockException{}
}


func (p *NoSuchLockException) GetMessage() string {
  return p.Message
}
func (p *NoSuchLockException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NoSuchLockException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *NoSuchLockException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NoSuchLockException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NoSuchLockException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *NoSuchLockException) Equals(other *NoSuchLockException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *NoSuchLockException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoSuchLockException(%+v)", *p)
}

func (p *NoSuchLockException) Error() string {
  return p.String()
}

func (NoSuchLockException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*NoSuchLockException)(nil)

type ThriftHiveMetastore interface {  //This interface is live.

  // Parameters:
  //  - Key
  GetMetaConf(ctx context.Context, key string) (r string, err error)
  // Parameters:
  //  - Key
  //  - Value
  SetMetaConf(ctx context.Context, key string, value string) (err error)
  // Parameters:
  //  - Database
  CreateDatabase(ctx context.Context, database *Database) (err error)
  // Parameters:
  //  - Name
  GetDatabase(ctx context.Context, name string) (r *Database, err error)
  // Parameters:
  //  - Name
  //  - DeleteData
  //  - Cascade
  DropDatabase(ctx context.Context, name string, deleteData bool, cascade bool) (err error)
  // Parameters:
  //  - Pattern
  GetDatabases(ctx context.Context, pattern string) (r []string, err error)
  GetAllDatabases(ctx context.Context) (r []string, err error)
  // Parameters:
  //  - Dbname
  //  - Db
  AlterDatabase(ctx context.Context, dbname string, db *Database) (err error)
  // Parameters:
  //  - Name
  GetType(ctx context.Context, name string) (r *Type, err error)
  // Parameters:
  //  - Type
  CreateType(ctx context.Context, type_a1 *Type) (r bool, err error)
  // Parameters:
  //  - Type
  DropType(ctx context.Context, type_a1 string) (r bool, err error)
  // Parameters:
  //  - Name
  GetTypeAll(ctx context.Context, name string) (r map[string]*Type, err error)
  // Parameters:
  //  - DbName
  //  - TableName
  GetFields(ctx context.Context, db_name string, table_name string) (r []*FieldSchema, err error)
  // Parameters:
  //  - DbName
  //  - TableName
  //  - EnvironmentContext
  GetFieldsWithEnvironmentContext(ctx context.Context, db_name string, table_name string, environment_context *EnvironmentContext) (r []*FieldSchema, err error)
  // Parameters:
  //  - DbName
  //  - TableName
  GetSchema(ctx context.Context, db_name string, table_name string) (r []*FieldSchema, err error)
  // Parameters:
  //  - DbName
  //  - TableName
  //  - EnvironmentContext
  GetSchemaWithEnvironmentContext(ctx context.Context, db_name string, table_name string, environment_context *EnvironmentContext) (r []*FieldSchema, err error)
  // Parameters:
  //  - Tbl
  CreateTable(ctx context.Context, tbl *Table) (err error)
  // Parameters:
  //  - Tbl
  //  - EnvironmentContext
  CreateTableWithEnvironmentContext(ctx context.Context, tbl *Table, environment_context *EnvironmentContext) (err error)
  // Parameters:
  //  - Tbl
  //  - PrimaryKeys
  //  - ForeignKeys
  //  - UniqueConstraints
  //  - NotNullConstraints
  CreateTableWithConstraints(ctx context.Context, tbl *Table, primaryKeys []*SQLPrimaryKey, foreignKeys []*SQLForeignKey, uniqueConstraints []*SQLUniqueConstraint, notNullConstraints []*SQLNotNullConstraint) (err error)
  // Parameters:
  //  - Req
  DropConstraint(ctx context.Context, req *DropConstraintRequest) (err error)
  // Parameters:
  //  - Req
  AddPrimaryKey(ctx context.Context, req *AddPrimaryKeyRequest) (err error)
  // Parameters:
  //  - Req
  AddForeignKey(ctx context.Context, req *AddForeignKeyRequest) (err error)
  // Parameters:
  //  - Req
  AddUniqueConstraint(ctx context.Context, req *AddUniqueConstraintRequest) (err error)
  // Parameters:
  //  - Req
  AddNotNullConstraint(ctx context.Context, req *AddNotNullConstraintRequest) (err error)
  // Parameters:
  //  - Dbname
  //  - Name
  //  - DeleteData
  DropTable(ctx context.Context, dbname string, name string, deleteData bool) (err error)
  // Parameters:
  //  - Dbname
  //  - Name
  //  - DeleteData
  //  - EnvironmentContext
  DropTableWithEnvironmentContext(ctx context.Context, dbname string, name string, deleteData bool, environment_context *EnvironmentContext) (err error)
  // Parameters:
  //  - DbName
  //  - TableName
  //  - PartNames
  TruncateTable(ctx context.Context, dbName string, tableName string, partNames []string) (err error)
  // Parameters:
  //  - DbName
  //  - Pattern
  GetTables(ctx context.Context, db_name string, pattern string) (r []string, err error)
  // Parameters:
  //  - DbName
  //  - Pattern
  //  - TableType
  GetTablesByType(ctx context.Context, db_name string, pattern string, tableType string) (r []string, err error)
  // Parameters:
  //  - DbPatterns
  //  - TblPatterns
  //  - TblTypes
  GetTableMeta(ctx context.Context, db_patterns string, tbl_patterns string, tbl_types []string) (r []*TableMeta, err error)
  // Parameters:
  //  - DbName
  GetAllTables(ctx context.Context, db_name string) (r []string, err error)
  // Parameters:
  //  - Dbname
  //  - TblName
  GetTable(ctx context.Context, dbname string, tbl_name string) (r *Table, err error)
  // Parameters:
  //  - Dbname
  //  - TblNames
  GetTableObjectsByName(ctx context.Context, dbname string, tbl_names []string) (r []*Table, err error)
  // Parameters:
  //  - Req
  GetTableReq(ctx context.Context, req *GetTableRequest) (r *GetTableResult_, err error)
  // Parameters:
  //  - Req
  GetTableObjectsByNameReq(ctx context.Context, req *GetTablesRequest) (r *GetTablesResult_, err error)
  // Parameters:
  //  - Dbname
  //  - Filter
  //  - MaxTables
  GetTableNamesByFilter(ctx context.Context, dbname string, filter string, max_tables int16) (r []string, err error)
  // Parameters:
  //  - Dbname
  //  - TblName
  //  - NewTbl_
  AlterTable(ctx context.Context, dbname string, tbl_name string, new_tbl *Table) (err error)
  // Parameters:
  //  - Dbname
  //  - TblName
  //  - NewTbl_
  //  - EnvironmentContext
  AlterTableWithEnvironmentContext(ctx context.Context, dbname string, tbl_name string, new_tbl *Table, environment_context *EnvironmentContext) (err error)
  // Parameters:
  //  - Dbname
  //  - TblName
  //  - NewTbl_
  //  - Cascade
  AlterTableWithCascade(ctx context.Context, dbname string, tbl_name string, new_tbl *Table, cascade bool) (err error)
  // Parameters:
  //  - NewPart_
  AddPartition(ctx context.Context, new_part *Partition) (r *Partition, err error)
  // Parameters:
  //  - NewPart_
  //  - EnvironmentContext
  AddPartitionWithEnvironmentContext(ctx context.Context, new_part *Partition, environment_context *EnvironmentContext) (r *Partition, err error)
  // Parameters:
  //  - NewParts_
  AddPartitions(ctx context.Context, new_parts []*Partition) (r int32, err error)
  // Parameters:
  //  - NewParts_
  AddPartitionsPspec(ctx context.Context, new_parts []*PartitionSpec) (r int32, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  AppendPartition(ctx context.Context, db_name string, tbl_name string, part_vals []string) (r *Partition, err error)
  // Parameters:
  //  - Request
  AddPartitionsReq(ctx context.Context, request *AddPartitionsRequest) (r *AddPartitionsResult_, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - EnvironmentContext
  AppendPartitionWithEnvironmentContext(ctx context.Context, db_name string, tbl_name string, part_vals []string, environment_context *EnvironmentContext) (r *Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartName
  AppendPartitionByName(ctx context.Context, db_name string, tbl_name string, part_name string) (r *Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartName
  //  - EnvironmentContext
  AppendPartitionByNameWithEnvironmentContext(ctx context.Context, db_name string, tbl_name string, part_name string, environment_context *EnvironmentContext) (r *Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - DeleteData
  DropPartition(ctx context.Context, db_name string, tbl_name string, part_vals []string, deleteData bool) (r bool, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - DeleteData
  //  - EnvironmentContext
  DropPartitionWithEnvironmentContext(ctx context.Context, db_name string, tbl_name string, part_vals []string, deleteData bool, environment_context *EnvironmentContext) (r bool, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartName
  //  - DeleteData
  DropPartitionByName(ctx context.Context, db_name string, tbl_name string, part_name string, deleteData bool) (r bool, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartName
  //  - DeleteData
  //  - EnvironmentContext
  DropPartitionByNameWithEnvironmentContext(ctx context.Context, db_name string, tbl_name string, part_name string, deleteData bool, environment_context *EnvironmentContext) (r bool, err error)
  // Parameters:
  //  - Req
  DropPartitionsReq(ctx context.Context, req *DropPartitionsRequest) (r *DropPartitionsResult_, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  GetPartition(ctx context.Context, db_name string, tbl_name string, part_vals []string) (r *Partition, err error)
  // Parameters:
  //  - PartitionSpecs
  //  - SourceDb
  //  - SourceTableName
  //  - DestDb
  //  - DestTableName
  ExchangePartition(ctx context.Context, partitionSpecs map[string]string, source_db string, source_table_name string, dest_db string, dest_table_name string) (r *Partition, err error)
  // Parameters:
  //  - PartitionSpecs
  //  - SourceDb
  //  - SourceTableName
  //  - DestDb
  //  - DestTableName
  ExchangePartitions(ctx context.Context, partitionSpecs map[string]string, source_db string, source_table_name string, dest_db string, dest_table_name string) (r []*Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - UserName
  //  - GroupNames
  GetPartitionWithAuth(ctx context.Context, db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (r *Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartName
  GetPartitionByName(ctx context.Context, db_name string, tbl_name string, part_name string) (r *Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - MaxParts
  GetPartitions(ctx context.Context, db_name string, tbl_name string, max_parts int16) (r []*Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - MaxParts
  //  - UserName
  //  - GroupNames
  GetPartitionsWithAuth(ctx context.Context, db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - MaxParts
  GetPartitionsPspec(ctx context.Context, db_name string, tbl_name string, max_parts int32) (r []*PartitionSpec, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - MaxParts
  GetPartitionNames(ctx context.Context, db_name string, tbl_name string, max_parts int16) (r []string, err error)
  // Parameters:
  //  - Request
  GetPartitionValues(ctx context.Context, request *PartitionValuesRequest) (r *PartitionValuesResponse, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - MaxParts
  GetPartitionsPs(ctx context.Context, db_name string, tbl_name string, part_vals []string, max_parts int16) (r []*Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - MaxParts
  //  - UserName
  //  - GroupNames
  GetPartitionsPsWithAuth(ctx context.Context, db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - MaxParts
  GetPartitionNamesPs(ctx context.Context, db_name string, tbl_name string, part_vals []string, max_parts int16) (r []string, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - Filter
  //  - MaxParts
  GetPartitionsByFilter(ctx context.Context, db_name string, tbl_name string, filter string, max_parts int16) (r []*Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - Filter
  //  - MaxParts
  GetPartSpecsByFilter(ctx context.Context, db_name string, tbl_name string, filter string, max_parts int32) (r []*PartitionSpec, err error)
  // Parameters:
  //  - Req
  GetPartitionsByExpr(ctx context.Context, req *PartitionsByExprRequest) (r *PartitionsByExprResult_, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - Filter
  GetNumPartitionsByFilter(ctx context.Context, db_name string, tbl_name string, filter string) (r int32, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - Names
  GetPartitionsByNames(ctx context.Context, db_name string, tbl_name string, names []string) (r []*Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - NewPart_
  AlterPartition(ctx context.Context, db_name string, tbl_name string, new_part *Partition) (err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - NewParts_
  AlterPartitions(ctx context.Context, db_name string, tbl_name string, new_parts []*Partition) (err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - NewParts_
  //  - EnvironmentContext
  AlterPartitionsWithEnvironmentContext(ctx context.Context, db_name string, tbl_name string, new_parts []*Partition, environment_context *EnvironmentContext) (err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - NewPart_
  //  - EnvironmentContext
  AlterPartitionWithEnvironmentContext(ctx context.Context, db_name string, tbl_name string, new_part *Partition, environment_context *EnvironmentContext) (err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - NewPart_
  RenamePartition(ctx context.Context, db_name string, tbl_name string, part_vals []string, new_part *Partition) (err error)
  // Parameters:
  //  - PartVals
  //  - ThrowException
  PartitionNameHasValidCharacters(ctx context.Context, part_vals []string, throw_exception bool) (r bool, err error)
  // Parameters:
  //  - Name
  //  - DefaultValue
  GetConfigValue(ctx context.Context, name string, defaultValue string) (r string, err error)
  // Parameters:
  //  - PartName
  PartitionNameToVals(ctx context.Context, part_name string) (r []string, err error)
  // Parameters:
  //  - PartName
  PartitionNameToSpec(ctx context.Context, part_name string) (r map[string]string, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - EventType
  MarkPartitionForEvent(ctx context.Context, db_name string, tbl_name string, part_vals map[string]string, eventType PartitionEventType) (err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - EventType
  IsPartitionMarkedForEvent(ctx context.Context, db_name string, tbl_name string, part_vals map[string]string, eventType PartitionEventType) (r bool, err error)
  // Parameters:
  //  - NewIndex_
  //  - IndexTable
  AddIndex(ctx context.Context, new_index *Index, index_table *Table) (r *Index, err error)
  // Parameters:
  //  - Dbname
  //  - BaseTblName
  //  - IdxName
  //  - NewIdx_
  AlterIndex(ctx context.Context, dbname string, base_tbl_name string, idx_name string, new_idx *Index) (err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - IndexName
  //  - DeleteData
  DropIndexByName(ctx context.Context, db_name string, tbl_name string, index_name string, deleteData bool) (r bool, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - IndexName
  GetIndexByName(ctx context.Context, db_name string, tbl_name string, index_name string) (r *Index, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - MaxIndexes
  GetIndexes(ctx context.Context, db_name string, tbl_name string, max_indexes int16) (r []*Index, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - MaxIndexes
  GetIndexNames(ctx context.Context, db_name string, tbl_name string, max_indexes int16) (r []string, err error)
  // Parameters:
  //  - Request
  GetPrimaryKeys(ctx context.Context, request *PrimaryKeysRequest) (r *PrimaryKeysResponse, err error)
  // Parameters:
  //  - Request
  GetForeignKeys(ctx context.Context, request *ForeignKeysRequest) (r *ForeignKeysResponse, err error)
  // Parameters:
  //  - Request
  GetUniqueConstraints(ctx context.Context, request *UniqueConstraintsRequest) (r *UniqueConstraintsResponse, err error)
  // Parameters:
  //  - Request
  GetNotNullConstraints(ctx context.Context, request *NotNullConstraintsRequest) (r *NotNullConstraintsResponse, err error)
  // Parameters:
  //  - StatsObj
  UpdateTableColumnStatistics(ctx context.Context, stats_obj *ColumnStatistics) (r bool, err error)
  // Parameters:
  //  - StatsObj
  UpdatePartitionColumnStatistics(ctx context.Context, stats_obj *ColumnStatistics) (r bool, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - ColName
  GetTableColumnStatistics(ctx context.Context, db_name string, tbl_name string, col_name string) (r *ColumnStatistics, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartName
  //  - ColName
  GetPartitionColumnStatistics(ctx context.Context, db_name string, tbl_name string, part_name string, col_name string) (r *ColumnStatistics, err error)
  // Parameters:
  //  - Request
  GetTableStatisticsReq(ctx context.Context, request *TableStatsRequest) (r *TableStatsResult_, err error)
  // Parameters:
  //  - Request
  GetPartitionsStatisticsReq(ctx context.Context, request *PartitionsStatsRequest) (r *PartitionsStatsResult_, err error)
  // Parameters:
  //  - Request
  GetAggrStatsFor(ctx context.Context, request *PartitionsStatsRequest) (r *AggrStats, err error)
  // Parameters:
  //  - Request
  SetAggrStatsFor(ctx context.Context, request *SetPartitionsStatsRequest) (r bool, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartName
  //  - ColName
  DeletePartitionColumnStatistics(ctx context.Context, db_name string, tbl_name string, part_name string, col_name string) (r bool, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - ColName
  DeleteTableColumnStatistics(ctx context.Context, db_name string, tbl_name string, col_name string) (r bool, err error)
  // Parameters:
  //  - Func
  CreateFunction(ctx context.Context, func_a1 *Function) (err error)
  // Parameters:
  //  - DbName
  //  - FuncName
  DropFunction(ctx context.Context, dbName string, funcName string) (err error)
  // Parameters:
  //  - DbName
  //  - FuncName
  //  - NewFunc_
  AlterFunction(ctx context.Context, dbName string, funcName string, newFunc *Function) (err error)
  // Parameters:
  //  - DbName
  //  - Pattern
  GetFunctions(ctx context.Context, dbName string, pattern string) (r []string, err error)
  // Parameters:
  //  - DbName
  //  - FuncName
  GetFunction(ctx context.Context, dbName string, funcName string) (r *Function, err error)
  GetAllFunctions(ctx context.Context) (r *GetAllFunctionsResponse, err error)
  // Parameters:
  //  - Role
  CreateRole(ctx context.Context, role *Role) (r bool, err error)
  // Parameters:
  //  - RoleName
  DropRole(ctx context.Context, role_name string) (r bool, err error)
  GetRoleNames(ctx context.Context) (r []string, err error)
  // Parameters:
  //  - RoleName
  //  - PrincipalName
  //  - PrincipalType
  //  - Grantor
  //  - GrantorType
  //  - GrantOption
  GrantRole(ctx context.Context, role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (r bool, err error)
  // Parameters:
  //  - RoleName
  //  - PrincipalName
  //  - PrincipalType
  RevokeRole(ctx context.Context, role_name string, principal_name string, principal_type PrincipalType) (r bool, err error)
  // Parameters:
  //  - PrincipalName
  //  - PrincipalType
  ListRoles(ctx context.Context, principal_name string, principal_type PrincipalType) (r []*Role, err error)
  // Parameters:
  //  - Request
  GrantRevokeRole(ctx context.Context, request *GrantRevokeRoleRequest) (r *GrantRevokeRoleResponse, err error)
  // Parameters:
  //  - Request
  GetPrincipalsInRole(ctx context.Context, request *GetPrincipalsInRoleRequest) (r *GetPrincipalsInRoleResponse, err error)
  // Parameters:
  //  - Request
  GetRoleGrantsForPrincipal(ctx context.Context, request *GetRoleGrantsForPrincipalRequest) (r *GetRoleGrantsForPrincipalResponse, err error)
  // Parameters:
  //  - HiveObject
  //  - UserName
  //  - GroupNames
  GetPrivilegeSet(ctx context.Context, hiveObject *HiveObjectRef, user_name string, group_names []string) (r *PrincipalPrivilegeSet, err error)
  // Parameters:
  //  - PrincipalName
  //  - PrincipalType
  //  - HiveObject
  ListPrivileges(ctx context.Context, principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (r []*HiveObjectPrivilege, err error)
  // Parameters:
  //  - Privileges
  GrantPrivileges(ctx context.Context, privileges *PrivilegeBag) (r bool, err error)
  // Parameters:
  //  - Privileges
  RevokePrivileges(ctx context.Context, privileges *PrivilegeBag) (r bool, err error)
  // Parameters:
  //  - Request
  GrantRevokePrivileges(ctx context.Context, request *GrantRevokePrivilegeRequest) (r *GrantRevokePrivilegeResponse, err error)
  // Parameters:
  //  - UserName
  //  - GroupNames
  SetUgi(ctx context.Context, user_name string, group_names []string) (r []string, err error)
  // Parameters:
  //  - TokenOwner
  //  - RenewerKerberosPrincipalName
  GetDelegationToken(ctx context.Context, token_owner string, renewer_kerberos_principal_name string) (r string, err error)
  // Parameters:
  //  - TokenStrForm
  RenewDelegationToken(ctx context.Context, token_str_form string) (r int64, err error)
  // Parameters:
  //  - TokenStrForm
  CancelDelegationToken(ctx context.Context, token_str_form string) (err error)
  // Parameters:
  //  - TokenIdentifier
  //  - DelegationToken
  AddToken(ctx context.Context, token_identifier string, delegation_token string) (r bool, err error)
  // Parameters:
  //  - TokenIdentifier
  RemoveToken(ctx context.Context, token_identifier string) (r bool, err error)
  // Parameters:
  //  - TokenIdentifier
  GetToken(ctx context.Context, token_identifier string) (r string, err error)
  GetAllTokenIdentifiers(ctx context.Context) (r []string, err error)
  // Parameters:
  //  - Key
  AddMasterKey(ctx context.Context, key string) (r int32, err error)
  // Parameters:
  //  - SeqNumber
  //  - Key
  UpdateMasterKey(ctx context.Context, seq_number int32, key string) (err error)
  // Parameters:
  //  - KeySeq
  RemoveMasterKey(ctx context.Context, key_seq int32) (r bool, err error)
  GetMasterKeys(ctx context.Context) (r []string, err error)
  GetOpenTxns(ctx context.Context) (r *GetOpenTxnsResponse, err error)
  GetOpenTxnsInfo(ctx context.Context) (r *GetOpenTxnsInfoResponse, err error)
  // Parameters:
  //  - Rqst
  OpenTxns(ctx context.Context, rqst *OpenTxnRequest) (r *OpenTxnsResponse, err error)
  // Parameters:
  //  - Rqst
  AbortTxn(ctx context.Context, rqst *AbortTxnRequest) (err error)
  // Parameters:
  //  - Rqst
  AbortTxns(ctx context.Context, rqst *AbortTxnsRequest) (err error)
  // Parameters:
  //  - Rqst
  CommitTxn(ctx context.Context, rqst *CommitTxnRequest) (err error)
  // Parameters:
  //  - Rqst
  Lock(ctx context.Context, rqst *LockRequest) (r *LockResponse, err error)
  // Parameters:
  //  - Rqst
  CheckLock(ctx context.Context, rqst *CheckLockRequest) (r *LockResponse, err error)
  // Parameters:
  //  - Rqst
  Unlock(ctx context.Context, rqst *UnlockRequest) (err error)
  // Parameters:
  //  - Rqst
  ShowLocks(ctx context.Context, rqst *ShowLocksRequest) (r *ShowLocksResponse, err error)
  // Parameters:
  //  - Ids
  Heartbeat(ctx context.Context, ids *HeartbeatRequest) (err error)
  // Parameters:
  //  - Txns
  HeartbeatTxnRange(ctx context.Context, txns *HeartbeatTxnRangeRequest) (r *HeartbeatTxnRangeResponse, err error)
  // Parameters:
  //  - Rqst
  Compact(ctx context.Context, rqst *CompactionRequest) (err error)
  // Parameters:
  //  - Rqst
  Compact2(ctx context.Context, rqst *CompactionRequest) (r *CompactionResponse, err error)
  // Parameters:
  //  - Rqst
  ShowCompact(ctx context.Context, rqst *ShowCompactRequest) (r *ShowCompactResponse, err error)
  // Parameters:
  //  - Rqst
  AddDynamicPartitions(ctx context.Context, rqst *AddDynamicPartitions) (err error)
  // Parameters:
  //  - Rqst
  GetNextNotification(ctx context.Context, rqst *NotificationEventRequest) (r *NotificationEventResponse, err error)
  GetCurrentNotificationEventId(ctx context.Context) (r *CurrentNotificationEventId, err error)
  // Parameters:
  //  - Rqst
  GetNotificationEventsCount(ctx context.Context, rqst *NotificationEventsCountRequest) (r *NotificationEventsCountResponse, err error)
  // Parameters:
  //  - Rqst
  FireListenerEvent(ctx context.Context, rqst *FireEventRequest) (r *FireEventResponse, err error)
  FlushCache(ctx context.Context) (err error)
  // Parameters:
  //  - Request
  CmRecycle(ctx context.Context, request *CmRecycleRequest) (r *CmRecycleResponse, err error)
  // Parameters:
  //  - Req
  GetFileMetadataByExpr(ctx context.Context, req *GetFileMetadataByExprRequest) (r *GetFileMetadataByExprResult_, err error)
  // Parameters:
  //  - Req
  GetFileMetadata(ctx context.Context, req *GetFileMetadataRequest) (r *GetFileMetadataResult_, err error)
  // Parameters:
  //  - Req
  PutFileMetadata(ctx context.Context, req *PutFileMetadataRequest) (r *PutFileMetadataResult_, err error)
  // Parameters:
  //  - Req
  ClearFileMetadata(ctx context.Context, req *ClearFileMetadataRequest) (r *ClearFileMetadataResult_, err error)
  // Parameters:
  //  - Req
  CacheFileMetadata(ctx context.Context, req *CacheFileMetadataRequest) (r *CacheFileMetadataResult_, err error)
  GetMetastoreDbUUID(ctx context.Context) (r string, err error)
  // Parameters:
  //  - Request
  CreateResourcePlan(ctx context.Context, request *WMCreateResourcePlanRequest) (r *WMCreateResourcePlanResponse, err error)
  // Parameters:
  //  - Request
  GetResourcePlan(ctx context.Context, request *WMGetResourcePlanRequest) (r *WMGetResourcePlanResponse, err error)
  // Parameters:
  //  - Request
  GetActiveResourcePlan(ctx context.Context, request *WMGetActiveResourcePlanRequest) (r *WMGetActiveResourcePlanResponse, err error)
  // Parameters:
  //  - Request
  GetAllResourcePlans(ctx context.Context, request *WMGetAllResourcePlanRequest) (r *WMGetAllResourcePlanResponse, err error)
  // Parameters:
  //  - Request
  AlterResourcePlan(ctx context.Context, request *WMAlterResourcePlanRequest) (r *WMAlterResourcePlanResponse, err error)
  // Parameters:
  //  - Request
  ValidateResourcePlan(ctx context.Context, request *WMValidateResourcePlanRequest) (r *WMValidateResourcePlanResponse, err error)
  // Parameters:
  //  - Request
  DropResourcePlan(ctx context.Context, request *WMDropResourcePlanRequest) (r *WMDropResourcePlanResponse, err error)
  // Parameters:
  //  - Request
  CreateWmTrigger(ctx context.Context, request *WMCreateTriggerRequest) (r *WMCreateTriggerResponse, err error)
  // Parameters:
  //  - Request
  AlterWmTrigger(ctx context.Context, request *WMAlterTriggerRequest) (r *WMAlterTriggerResponse, err error)
  // Parameters:
  //  - Request
  DropWmTrigger(ctx context.Context, request *WMDropTriggerRequest) (r *WMDropTriggerResponse, err error)
  // Parameters:
  //  - Request
  GetTriggersForResourceplan(ctx context.Context, request *WMGetTriggersForResourePlanRequest) (r *WMGetTriggersForResourePlanResponse, err error)
}

//This interface is live.
type ThriftHiveMetastoreClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewThriftHiveMetastoreClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftHiveMetastoreClient {
  return &ThriftHiveMetastoreClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewThriftHiveMetastoreClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftHiveMetastoreClient {
  return &ThriftHiveMetastoreClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewThriftHiveMetastoreClient(c thrift.TClient) *ThriftHiveMetastoreClient {
  return &ThriftHiveMetastoreClient{
    c: c,
  }
}

func (p *ThriftHiveMetastoreClient) Client_() thrift.TClient {
  return p.c
}

func (p *ThriftHiveMetastoreClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *ThriftHiveMetastoreClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Key
func (p *ThriftHiveMetastoreClient) GetMetaConf(ctx context.Context, key string) (r string, err error) {
  var _args203 ThriftHiveMetastoreGetMetaConfArgs
  _args203.Key = key
  var _result204 ThriftHiveMetastoreGetMetaConfResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "getMetaConf", &_args203, &_result204)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result204.O1!= nil:
    return r, _result204.O1
  }

  return _result204.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - Value
func (p *ThriftHiveMetastoreClient) SetMetaConf(ctx context.Context, key string, value string) (err error) {
  var _args205 ThriftHiveMetastoreSetMetaConfArgs
  _args205.Key = key
  _args205.Value = value
  var _result206 ThriftHiveMetastoreSetMetaConfResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "setMetaConf", &_args205, &_result206)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result206.O1!= nil:
    return _result206.O1
  }

  return nil
}

// Parameters:
//  - Database
func (p *ThriftHiveMetastoreClient) CreateDatabase(ctx context.Context, database *Database) (err error) {
  var _args207 ThriftHiveMetastoreCreateDatabaseArgs
  _args207.Database = database
  var _result208 ThriftHiveMetastoreCreateDatabaseResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "create_database", &_args207, &_result208)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result208.O1!= nil:
    return _result208.O1
  case _result208.O2!= nil:
    return _result208.O2
  case _result208.O3!= nil:
    return _result208.O3
  }

  return nil
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetDatabase(ctx context.Context, name string) (r *Database, err error) {
  var _args209 ThriftHiveMetastoreGetDatabaseArgs
  _args209.Name = name
  var _result210 ThriftHiveMetastoreGetDatabaseResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_database", &_args209, &_result210)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result210.O1!= nil:
    return r, _result210.O1
  case _result210.O2!= nil:
    return r, _result210.O2
  }

  return _result210.GetSuccess(), nil
}

// Parameters:
//  - Name
//  - DeleteData
//  - Cascade
func (p *ThriftHiveMetastoreClient) DropDatabase(ctx context.Context, name string, deleteData bool, cascade bool) (err error) {
  var _args211 ThriftHiveMetastoreDropDatabaseArgs
  _args211.Name = name
  _args211.DeleteData = deleteData
  _args211.Cascade = cascade
  var _result212 ThriftHiveMetastoreDropDatabaseResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_database", &_args211, &_result212)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result212.O1!= nil:
    return _result212.O1
  case _result212.O2!= nil:
    return _result212.O2
  case _result212.O3!= nil:
    return _result212.O3
  }

  return nil
}

// Parameters:
//  - Pattern
func (p *ThriftHiveMetastoreClient) GetDatabases(ctx context.Context, pattern string) (r []string, err error) {
  var _args213 ThriftHiveMetastoreGetDatabasesArgs
  _args213.Pattern = pattern
  var _result214 ThriftHiveMetastoreGetDatabasesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_databases", &_args213, &_result214)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result214.O1!= nil:
    return r, _result214.O1
  }

  return _result214.GetSuccess(), nil
}

func (p *ThriftHiveMetastoreClient) GetAllDatabases(ctx context.Context) (r []string, err error) {
  var _args215 ThriftHiveMetastoreGetAllDatabasesArgs
  var _result216 ThriftHiveMetastoreGetAllDatabasesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_all_databases", &_args215, &_result216)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result216.O1!= nil:
    return r, _result216.O1
  }

  return _result216.GetSuccess(), nil
}

// Parameters:
//  - Dbname
//  - Db
func (p *ThriftHiveMetastoreClient) AlterDatabase(ctx context.Context, dbname string, db *Database) (err error) {
  var _args217 ThriftHiveMetastoreAlterDatabaseArgs
  _args217.Dbname = dbname
  _args217.Db = db
  var _result218 ThriftHiveMetastoreAlterDatabaseResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "alter_database", &_args217, &_result218)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result218.O1!= nil:
    return _result218.O1
  case _result218.O2!= nil:
    return _result218.O2
  }

  return nil
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetType(ctx context.Context, name string) (r *Type, err error) {
  var _args219 ThriftHiveMetastoreGetTypeArgs
  _args219.Name = name
  var _result220 ThriftHiveMetastoreGetTypeResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_type", &_args219, &_result220)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result220.O1!= nil:
    return r, _result220.O1
  case _result220.O2!= nil:
    return r, _result220.O2
  }

  return _result220.GetSuccess(), nil
}

// Parameters:
//  - Type
func (p *ThriftHiveMetastoreClient) CreateType(ctx context.Context, type_a1 *Type) (r bool, err error) {
  var _args221 ThriftHiveMetastoreCreateTypeArgs
  _args221.Type = type_a1
  var _result222 ThriftHiveMetastoreCreateTypeResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "create_type", &_args221, &_result222)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result222.O1!= nil:
    return r, _result222.O1
  case _result222.O2!= nil:
    return r, _result222.O2
  case _result222.O3!= nil:
    return r, _result222.O3
  }

  return _result222.GetSuccess(), nil
}

// Parameters:
//  - Type
func (p *ThriftHiveMetastoreClient) DropType(ctx context.Context, type_a1 string) (r bool, err error) {
  var _args223 ThriftHiveMetastoreDropTypeArgs
  _args223.Type = type_a1
  var _result224 ThriftHiveMetastoreDropTypeResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_type", &_args223, &_result224)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result224.O1!= nil:
    return r, _result224.O1
  case _result224.O2!= nil:
    return r, _result224.O2
  }

  return _result224.GetSuccess(), nil
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetTypeAll(ctx context.Context, name string) (r map[string]*Type, err error) {
  var _args225 ThriftHiveMetastoreGetTypeAllArgs
  _args225.Name = name
  var _result226 ThriftHiveMetastoreGetTypeAllResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_type_all", &_args225, &_result226)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result226.O2!= nil:
    return r, _result226.O2
  }

  return _result226.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TableName
func (p *ThriftHiveMetastoreClient) GetFields(ctx context.Context, db_name string, table_name string) (r []*FieldSchema, err error) {
  var _args227 ThriftHiveMetastoreGetFieldsArgs
  _args227.DbName = db_name
  _args227.TableName = table_name
  var _result228 ThriftHiveMetastoreGetFieldsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_fields", &_args227, &_result228)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result228.O1!= nil:
    return r, _result228.O1
  case _result228.O2!= nil:
    return r, _result228.O2
  case _result228.O3!= nil:
    return r, _result228.O3
  }

  return _result228.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TableName
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) GetFieldsWithEnvironmentContext(ctx context.Context, db_name string, table_name string, environment_context *EnvironmentContext) (r []*FieldSchema, err error) {
  var _args229 ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs
  _args229.DbName = db_name
  _args229.TableName = table_name
  _args229.EnvironmentContext = environment_context
  var _result230 ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_fields_with_environment_context", &_args229, &_result230)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result230.O1!= nil:
    return r, _result230.O1
  case _result230.O2!= nil:
    return r, _result230.O2
  case _result230.O3!= nil:
    return r, _result230.O3
  }

  return _result230.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TableName
func (p *ThriftHiveMetastoreClient) GetSchema(ctx context.Context, db_name string, table_name string) (r []*FieldSchema, err error) {
  var _args231 ThriftHiveMetastoreGetSchemaArgs
  _args231.DbName = db_name
  _args231.TableName = table_name
  var _result232 ThriftHiveMetastoreGetSchemaResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_schema", &_args231, &_result232)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result232.O1!= nil:
    return r, _result232.O1
  case _result232.O2!= nil:
    return r, _result232.O2
  case _result232.O3!= nil:
    return r, _result232.O3
  }

  return _result232.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TableName
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) GetSchemaWithEnvironmentContext(ctx context.Context, db_name string, table_name string, environment_context *EnvironmentContext) (r []*FieldSchema, err error) {
  var _args233 ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs
  _args233.DbName = db_name
  _args233.TableName = table_name
  _args233.EnvironmentContext = environment_context
  var _result234 ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_schema_with_environment_context", &_args233, &_result234)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result234.O1!= nil:
    return r, _result234.O1
  case _result234.O2!= nil:
    return r, _result234.O2
  case _result234.O3!= nil:
    return r, _result234.O3
  }

  return _result234.GetSuccess(), nil
}

// Parameters:
//  - Tbl
func (p *ThriftHiveMetastoreClient) CreateTable(ctx context.Context, tbl *Table) (err error) {
  var _args235 ThriftHiveMetastoreCreateTableArgs
  _args235.Tbl = tbl
  var _result236 ThriftHiveMetastoreCreateTableResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "create_table", &_args235, &_result236)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result236.O1!= nil:
    return _result236.O1
  case _result236.O2!= nil:
    return _result236.O2
  case _result236.O3!= nil:
    return _result236.O3
  case _result236.O4!= nil:
    return _result236.O4
  }

  return nil
}

// Parameters:
//  - Tbl
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) CreateTableWithEnvironmentContext(ctx context.Context, tbl *Table, environment_context *EnvironmentContext) (err error) {
  var _args237 ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs
  _args237.Tbl = tbl
  _args237.EnvironmentContext = environment_context
  var _result238 ThriftHiveMetastoreCreateTableWithEnvironmentContextResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "create_table_with_environment_context", &_args237, &_result238)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result238.O1!= nil:
    return _result238.O1
  case _result238.O2!= nil:
    return _result238.O2
  case _result238.O3!= nil:
    return _result238.O3
  case _result238.O4!= nil:
    return _result238.O4
  }

  return nil
}

// Parameters:
//  - Tbl
//  - PrimaryKeys
//  - ForeignKeys
//  - UniqueConstraints
//  - NotNullConstraints
func (p *ThriftHiveMetastoreClient) CreateTableWithConstraints(ctx context.Context, tbl *Table, primaryKeys []*SQLPrimaryKey, foreignKeys []*SQLForeignKey, uniqueConstraints []*SQLUniqueConstraint, notNullConstraints []*SQLNotNullConstraint) (err error) {
  var _args239 ThriftHiveMetastoreCreateTableWithConstraintsArgs
  _args239.Tbl = tbl
  _args239.PrimaryKeys = primaryKeys
  _args239.ForeignKeys = foreignKeys
  _args239.UniqueConstraints = uniqueConstraints
  _args239.NotNullConstraints = notNullConstraints
  var _result240 ThriftHiveMetastoreCreateTableWithConstraintsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "create_table_with_constraints", &_args239, &_result240)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result240.O1!= nil:
    return _result240.O1
  case _result240.O2!= nil:
    return _result240.O2
  case _result240.O3!= nil:
    return _result240.O3
  case _result240.O4!= nil:
    return _result240.O4
  }

  return nil
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) DropConstraint(ctx context.Context, req *DropConstraintRequest) (err error) {
  var _args241 ThriftHiveMetastoreDropConstraintArgs
  _args241.Req = req
  var _result242 ThriftHiveMetastoreDropConstraintResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_constraint", &_args241, &_result242)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result242.O1!= nil:
    return _result242.O1
  case _result242.O3!= nil:
    return _result242.O3
  }

  return nil
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) AddPrimaryKey(ctx context.Context, req *AddPrimaryKeyRequest) (err error) {
  var _args243 ThriftHiveMetastoreAddPrimaryKeyArgs
  _args243.Req = req
  var _result244 ThriftHiveMetastoreAddPrimaryKeyResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "add_primary_key", &_args243, &_result244)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result244.O1!= nil:
    return _result244.O1
  case _result244.O2!= nil:
    return _result244.O2
  }

  return nil
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) AddForeignKey(ctx context.Context, req *AddForeignKeyRequest) (err error) {
  var _args245 ThriftHiveMetastoreAddForeignKeyArgs
  _args245.Req = req
  var _result246 ThriftHiveMetastoreAddForeignKeyResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "add_foreign_key", &_args245, &_result246)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result246.O1!= nil:
    return _result246.O1
  case _result246.O2!= nil:
    return _result246.O2
  }

  return nil
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) AddUniqueConstraint(ctx context.Context, req *AddUniqueConstraintRequest) (err error) {
  var _args247 ThriftHiveMetastoreAddUniqueConstraintArgs
  _args247.Req = req
  var _result248 ThriftHiveMetastoreAddUniqueConstraintResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "add_unique_constraint", &_args247, &_result248)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result248.O1!= nil:
    return _result248.O1
  case _result248.O2!= nil:
    return _result248.O2
  }

  return nil
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) AddNotNullConstraint(ctx context.Context, req *AddNotNullConstraintRequest) (err error) {
  var _args249 ThriftHiveMetastoreAddNotNullConstraintArgs
  _args249.Req = req
  var _result250 ThriftHiveMetastoreAddNotNullConstraintResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "add_not_null_constraint", &_args249, &_result250)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result250.O1!= nil:
    return _result250.O1
  case _result250.O2!= nil:
    return _result250.O2
  }

  return nil
}

// Parameters:
//  - Dbname
//  - Name
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropTable(ctx context.Context, dbname string, name string, deleteData bool) (err error) {
  var _args251 ThriftHiveMetastoreDropTableArgs
  _args251.Dbname = dbname
  _args251.Name = name
  _args251.DeleteData = deleteData
  var _result252 ThriftHiveMetastoreDropTableResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_table", &_args251, &_result252)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result252.O1!= nil:
    return _result252.O1
  case _result252.O3!= nil:
    return _result252.O3
  }

  return nil
}

// Parameters:
//  - Dbname
//  - Name
//  - DeleteData
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) DropTableWithEnvironmentContext(ctx context.Context, dbname string, name string, deleteData bool, environment_context *EnvironmentContext) (err error) {
  var _args253 ThriftHiveMetastoreDropTableWithEnvironmentContextArgs
  _args253.Dbname = dbname
  _args253.Name = name
  _args253.DeleteData = deleteData
  _args253.EnvironmentContext = environment_context
  var _result254 ThriftHiveMetastoreDropTableWithEnvironmentContextResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_table_with_environment_context", &_args253, &_result254)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result254.O1!= nil:
    return _result254.O1
  case _result254.O3!= nil:
    return _result254.O3
  }

  return nil
}

// Parameters:
//  - DbName
//  - TableName
//  - PartNames
func (p *ThriftHiveMetastoreClient) TruncateTable(ctx context.Context, dbName string, tableName string, partNames []string) (err error) {
  var _args255 ThriftHiveMetastoreTruncateTableArgs
  _args255.DbName = dbName
  _args255.TableName = tableName
  _args255.PartNames = partNames
  var _result256 ThriftHiveMetastoreTruncateTableResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "truncate_table", &_args255, &_result256)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result256.O1!= nil:
    return _result256.O1
  }

  return nil
}

// Parameters:
//  - DbName
//  - Pattern
func (p *ThriftHiveMetastoreClient) GetTables(ctx context.Context, db_name string, pattern string) (r []string, err error) {
  var _args257 ThriftHiveMetastoreGetTablesArgs
  _args257.DbName = db_name
  _args257.Pattern = pattern
  var _result258 ThriftHiveMetastoreGetTablesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_tables", &_args257, &_result258)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result258.O1!= nil:
    return r, _result258.O1
  }

  return _result258.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - Pattern
//  - TableType
func (p *ThriftHiveMetastoreClient) GetTablesByType(ctx context.Context, db_name string, pattern string, tableType string) (r []string, err error) {
  var _args259 ThriftHiveMetastoreGetTablesByTypeArgs
  _args259.DbName = db_name
  _args259.Pattern = pattern
  _args259.TableType = tableType
  var _result260 ThriftHiveMetastoreGetTablesByTypeResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_tables_by_type", &_args259, &_result260)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result260.O1!= nil:
    return r, _result260.O1
  }

  return _result260.GetSuccess(), nil
}

// Parameters:
//  - DbPatterns
//  - TblPatterns
//  - TblTypes
func (p *ThriftHiveMetastoreClient) GetTableMeta(ctx context.Context, db_patterns string, tbl_patterns string, tbl_types []string) (r []*TableMeta, err error) {
  var _args261 ThriftHiveMetastoreGetTableMetaArgs
  _args261.DbPatterns = db_patterns
  _args261.TblPatterns = tbl_patterns
  _args261.TblTypes = tbl_types
  var _result262 ThriftHiveMetastoreGetTableMetaResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_table_meta", &_args261, &_result262)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result262.O1!= nil:
    return r, _result262.O1
  }

  return _result262.GetSuccess(), nil
}

// Parameters:
//  - DbName
func (p *ThriftHiveMetastoreClient) GetAllTables(ctx context.Context, db_name string) (r []string, err error) {
  var _args263 ThriftHiveMetastoreGetAllTablesArgs
  _args263.DbName = db_name
  var _result264 ThriftHiveMetastoreGetAllTablesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_all_tables", &_args263, &_result264)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result264.O1!= nil:
    return r, _result264.O1
  }

  return _result264.GetSuccess(), nil
}

// Parameters:
//  - Dbname
//  - TblName
func (p *ThriftHiveMetastoreClient) GetTable(ctx context.Context, dbname string, tbl_name string) (r *Table, err error) {
  var _args265 ThriftHiveMetastoreGetTableArgs
  _args265.Dbname = dbname
  _args265.TblName = tbl_name
  var _result266 ThriftHiveMetastoreGetTableResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_table", &_args265, &_result266)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result266.O1!= nil:
    return r, _result266.O1
  case _result266.O2!= nil:
    return r, _result266.O2
  }

  return _result266.GetSuccess(), nil
}

// Parameters:
//  - Dbname
//  - TblNames
func (p *ThriftHiveMetastoreClient) GetTableObjectsByName(ctx context.Context, dbname string, tbl_names []string) (r []*Table, err error) {
  var _args267 ThriftHiveMetastoreGetTableObjectsByNameArgs
  _args267.Dbname = dbname
  _args267.TblNames = tbl_names
  var _result268 ThriftHiveMetastoreGetTableObjectsByNameResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_table_objects_by_name", &_args267, &_result268)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result268.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) GetTableReq(ctx context.Context, req *GetTableRequest) (r *GetTableResult_, err error) {
  var _args269 ThriftHiveMetastoreGetTableReqArgs
  _args269.Req = req
  var _result270 ThriftHiveMetastoreGetTableReqResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_table_req", &_args269, &_result270)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result270.O1!= nil:
    return r, _result270.O1
  case _result270.O2!= nil:
    return r, _result270.O2
  }

  return _result270.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) GetTableObjectsByNameReq(ctx context.Context, req *GetTablesRequest) (r *GetTablesResult_, err error) {
  var _args271 ThriftHiveMetastoreGetTableObjectsByNameReqArgs
  _args271.Req = req
  var _result272 ThriftHiveMetastoreGetTableObjectsByNameReqResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_table_objects_by_name_req", &_args271, &_result272)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result272.O1!= nil:
    return r, _result272.O1
  case _result272.O2!= nil:
    return r, _result272.O2
  case _result272.O3!= nil:
    return r, _result272.O3
  }

  return _result272.GetSuccess(), nil
}

// Parameters:
//  - Dbname
//  - Filter
//  - MaxTables
func (p *ThriftHiveMetastoreClient) GetTableNamesByFilter(ctx context.Context, dbname string, filter string, max_tables int16) (r []string, err error) {
  var _args273 ThriftHiveMetastoreGetTableNamesByFilterArgs
  _args273.Dbname = dbname
  _args273.Filter = filter
  _args273.MaxTables = max_tables
  var _result274 ThriftHiveMetastoreGetTableNamesByFilterResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_table_names_by_filter", &_args273, &_result274)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result274.O1!= nil:
    return r, _result274.O1
  case _result274.O2!= nil:
    return r, _result274.O2
  case _result274.O3!= nil:
    return r, _result274.O3
  }

  return _result274.GetSuccess(), nil
}

// Parameters:
//  - Dbname
//  - TblName
//  - NewTbl_
func (p *ThriftHiveMetastoreClient) AlterTable(ctx context.Context, dbname string, tbl_name string, new_tbl *Table) (err error) {
  var _args275 ThriftHiveMetastoreAlterTableArgs
  _args275.Dbname = dbname
  _args275.TblName = tbl_name
  _args275.NewTbl_ = new_tbl
  var _result276 ThriftHiveMetastoreAlterTableResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "alter_table", &_args275, &_result276)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result276.O1!= nil:
    return _result276.O1
  case _result276.O2!= nil:
    return _result276.O2
  }

  return nil
}

// Parameters:
//  - Dbname
//  - TblName
//  - NewTbl_
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) AlterTableWithEnvironmentContext(ctx context.Context, dbname string, tbl_name string, new_tbl *Table, environment_context *EnvironmentContext) (err error) {
  var _args277 ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs
  _args277.Dbname = dbname
  _args277.TblName = tbl_name
  _args277.NewTbl_ = new_tbl
  _args277.EnvironmentContext = environment_context
  var _result278 ThriftHiveMetastoreAlterTableWithEnvironmentContextResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "alter_table_with_environment_context", &_args277, &_result278)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result278.O1!= nil:
    return _result278.O1
  case _result278.O2!= nil:
    return _result278.O2
  }

  return nil
}

// Parameters:
//  - Dbname
//  - TblName
//  - NewTbl_
//  - Cascade
func (p *ThriftHiveMetastoreClient) AlterTableWithCascade(ctx context.Context, dbname string, tbl_name string, new_tbl *Table, cascade bool) (err error) {
  var _args279 ThriftHiveMetastoreAlterTableWithCascadeArgs
  _args279.Dbname = dbname
  _args279.TblName = tbl_name
  _args279.NewTbl_ = new_tbl
  _args279.Cascade = cascade
  var _result280 ThriftHiveMetastoreAlterTableWithCascadeResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "alter_table_with_cascade", &_args279, &_result280)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result280.O1!= nil:
    return _result280.O1
  case _result280.O2!= nil:
    return _result280.O2
  }

  return nil
}

// Parameters:
//  - NewPart_
func (p *ThriftHiveMetastoreClient) AddPartition(ctx context.Context, new_part *Partition) (r *Partition, err error) {
  var _args281 ThriftHiveMetastoreAddPartitionArgs
  _args281.NewPart_ = new_part
  var _result282 ThriftHiveMetastoreAddPartitionResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "add_partition", &_args281, &_result282)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result282.O1!= nil:
    return r, _result282.O1
  case _result282.O2!= nil:
    return r, _result282.O2
  case _result282.O3!= nil:
    return r, _result282.O3
  }

  return _result282.GetSuccess(), nil
}

// Parameters:
//  - NewPart_
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) AddPartitionWithEnvironmentContext(ctx context.Context, new_part *Partition, environment_context *EnvironmentContext) (r *Partition, err error) {
  var _args283 ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs
  _args283.NewPart_ = new_part
  _args283.EnvironmentContext = environment_context
  var _result284 ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "add_partition_with_environment_context", &_args283, &_result284)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result284.O1!= nil:
    return r, _result284.O1
  case _result284.O2!= nil:
    return r, _result284.O2
  case _result284.O3!= nil:
    return r, _result284.O3
  }

  return _result284.GetSuccess(), nil
}

// Parameters:
//  - NewParts_
func (p *ThriftHiveMetastoreClient) AddPartitions(ctx context.Context, new_parts []*Partition) (r int32, err error) {
  var _args285 ThriftHiveMetastoreAddPartitionsArgs
  _args285.NewParts_ = new_parts
  var _result286 ThriftHiveMetastoreAddPartitionsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "add_partitions", &_args285, &_result286)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result286.O1!= nil:
    return r, _result286.O1
  case _result286.O2!= nil:
    return r, _result286.O2
  case _result286.O3!= nil:
    return r, _result286.O3
  }

  return _result286.GetSuccess(), nil
}

// Parameters:
//  - NewParts_
func (p *ThriftHiveMetastoreClient) AddPartitionsPspec(ctx context.Context, new_parts []*PartitionSpec) (r int32, err error) {
  var _args287 ThriftHiveMetastoreAddPartitionsPspecArgs
  _args287.NewParts_ = new_parts
  var _result288 ThriftHiveMetastoreAddPartitionsPspecResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "add_partitions_pspec", &_args287, &_result288)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result288.O1!= nil:
    return r, _result288.O1
  case _result288.O2!= nil:
    return r, _result288.O2
  case _result288.O3!= nil:
    return r, _result288.O3
  }

  return _result288.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
func (p *ThriftHiveMetastoreClient) AppendPartition(ctx context.Context, db_name string, tbl_name string, part_vals []string) (r *Partition, err error) {
  var _args289 ThriftHiveMetastoreAppendPartitionArgs
  _args289.DbName = db_name
  _args289.TblName = tbl_name
  _args289.PartVals = part_vals
  var _result290 ThriftHiveMetastoreAppendPartitionResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "append_partition", &_args289, &_result290)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result290.O1!= nil:
    return r, _result290.O1
  case _result290.O2!= nil:
    return r, _result290.O2
  case _result290.O3!= nil:
    return r, _result290.O3
  }

  return _result290.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) AddPartitionsReq(ctx context.Context, request *AddPartitionsRequest) (r *AddPartitionsResult_, err error) {
  var _args291 ThriftHiveMetastoreAddPartitionsReqArgs
  _args291.Request = request
  var _result292 ThriftHiveMetastoreAddPartitionsReqResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "add_partitions_req", &_args291, &_result292)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result292.O1!= nil:
    return r, _result292.O1
  case _result292.O2!= nil:
    return r, _result292.O2
  case _result292.O3!= nil:
    return r, _result292.O3
  }

  return _result292.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) AppendPartitionWithEnvironmentContext(ctx context.Context, db_name string, tbl_name string, part_vals []string, environment_context *EnvironmentContext) (r *Partition, err error) {
  var _args293 ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs
  _args293.DbName = db_name
  _args293.TblName = tbl_name
  _args293.PartVals = part_vals
  _args293.EnvironmentContext = environment_context
  var _result294 ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "append_partition_with_environment_context", &_args293, &_result294)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result294.O1!= nil:
    return r, _result294.O1
  case _result294.O2!= nil:
    return r, _result294.O2
  case _result294.O3!= nil:
    return r, _result294.O3
  }

  return _result294.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
func (p *ThriftHiveMetastoreClient) AppendPartitionByName(ctx context.Context, db_name string, tbl_name string, part_name string) (r *Partition, err error) {
  var _args295 ThriftHiveMetastoreAppendPartitionByNameArgs
  _args295.DbName = db_name
  _args295.TblName = tbl_name
  _args295.PartName = part_name
  var _result296 ThriftHiveMetastoreAppendPartitionByNameResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "append_partition_by_name", &_args295, &_result296)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result296.O1!= nil:
    return r, _result296.O1
  case _result296.O2!= nil:
    return r, _result296.O2
  case _result296.O3!= nil:
    return r, _result296.O3
  }

  return _result296.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) AppendPartitionByNameWithEnvironmentContext(ctx context.Context, db_name string, tbl_name string, part_name string, environment_context *EnvironmentContext) (r *Partition, err error) {
  var _args297 ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs
  _args297.DbName = db_name
  _args297.TblName = tbl_name
  _args297.PartName = part_name
  _args297.EnvironmentContext = environment_context
  var _result298 ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "append_partition_by_name_with_environment_context", &_args297, &_result298)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result298.O1!= nil:
    return r, _result298.O1
  case _result298.O2!= nil:
    return r, _result298.O2
  case _result298.O3!= nil:
    return r, _result298.O3
  }

  return _result298.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropPartition(ctx context.Context, db_name string, tbl_name string, part_vals []string, deleteData bool) (r bool, err error) {
  var _args299 ThriftHiveMetastoreDropPartitionArgs
  _args299.DbName = db_name
  _args299.TblName = tbl_name
  _args299.PartVals = part_vals
  _args299.DeleteData = deleteData
  var _result300 ThriftHiveMetastoreDropPartitionResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_partition", &_args299, &_result300)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result300.O1!= nil:
    return r, _result300.O1
  case _result300.O2!= nil:
    return r, _result300.O2
  }

  return _result300.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - DeleteData
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) DropPartitionWithEnvironmentContext(ctx context.Context, db_name string, tbl_name string, part_vals []string, deleteData bool, environment_context *EnvironmentContext) (r bool, err error) {
  var _args301 ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs
  _args301.DbName = db_name
  _args301.TblName = tbl_name
  _args301.PartVals = part_vals
  _args301.DeleteData = deleteData
  _args301.EnvironmentContext = environment_context
  var _result302 ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_partition_with_environment_context", &_args301, &_result302)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result302.O1!= nil:
    return r, _result302.O1
  case _result302.O2!= nil:
    return r, _result302.O2
  }

  return _result302.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropPartitionByName(ctx context.Context, db_name string, tbl_name string, part_name string, deleteData bool) (r bool, err error) {
  var _args303 ThriftHiveMetastoreDropPartitionByNameArgs
  _args303.DbName = db_name
  _args303.TblName = tbl_name
  _args303.PartName = part_name
  _args303.DeleteData = deleteData
  var _result304 ThriftHiveMetastoreDropPartitionByNameResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_partition_by_name", &_args303, &_result304)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result304.O1!= nil:
    return r, _result304.O1
  case _result304.O2!= nil:
    return r, _result304.O2
  }

  return _result304.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - DeleteData
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) DropPartitionByNameWithEnvironmentContext(ctx context.Context, db_name string, tbl_name string, part_name string, deleteData bool, environment_context *EnvironmentContext) (r bool, err error) {
  var _args305 ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs
  _args305.DbName = db_name
  _args305.TblName = tbl_name
  _args305.PartName = part_name
  _args305.DeleteData = deleteData
  _args305.EnvironmentContext = environment_context
  var _result306 ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_partition_by_name_with_environment_context", &_args305, &_result306)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result306.O1!= nil:
    return r, _result306.O1
  case _result306.O2!= nil:
    return r, _result306.O2
  }

  return _result306.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) DropPartitionsReq(ctx context.Context, req *DropPartitionsRequest) (r *DropPartitionsResult_, err error) {
  var _args307 ThriftHiveMetastoreDropPartitionsReqArgs
  _args307.Req = req
  var _result308 ThriftHiveMetastoreDropPartitionsReqResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_partitions_req", &_args307, &_result308)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result308.O1!= nil:
    return r, _result308.O1
  case _result308.O2!= nil:
    return r, _result308.O2
  }

  return _result308.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
func (p *ThriftHiveMetastoreClient) GetPartition(ctx context.Context, db_name string, tbl_name string, part_vals []string) (r *Partition, err error) {
  var _args309 ThriftHiveMetastoreGetPartitionArgs
  _args309.DbName = db_name
  _args309.TblName = tbl_name
  _args309.PartVals = part_vals
  var _result310 ThriftHiveMetastoreGetPartitionResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partition", &_args309, &_result310)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result310.O1!= nil:
    return r, _result310.O1
  case _result310.O2!= nil:
    return r, _result310.O2
  }

  return _result310.GetSuccess(), nil
}

// Parameters:
//  - PartitionSpecs
//  - SourceDb
//  - SourceTableName
//  - DestDb
//  - DestTableName
func (p *ThriftHiveMetastoreClient) ExchangePartition(ctx context.Context, partitionSpecs map[string]string, source_db string, source_table_name string, dest_db string, dest_table_name string) (r *Partition, err error) {
  var _args311 ThriftHiveMetastoreExchangePartitionArgs
  _args311.PartitionSpecs = partitionSpecs
  _args311.SourceDb = source_db
  _args311.SourceTableName = source_table_name
  _args311.DestDb = dest_db
  _args311.DestTableName = dest_table_name
  var _result312 ThriftHiveMetastoreExchangePartitionResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "exchange_partition", &_args311, &_result312)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result312.O1!= nil:
    return r, _result312.O1
  case _result312.O2!= nil:
    return r, _result312.O2
  case _result312.O3!= nil:
    return r, _result312.O3
  case _result312.O4!= nil:
    return r, _result312.O4
  }

  return _result312.GetSuccess(), nil
}

// Parameters:
//  - PartitionSpecs
//  - SourceDb
//  - SourceTableName
//  - DestDb
//  - DestTableName
func (p *ThriftHiveMetastoreClient) ExchangePartitions(ctx context.Context, partitionSpecs map[string]string, source_db string, source_table_name string, dest_db string, dest_table_name string) (r []*Partition, err error) {
  var _args313 ThriftHiveMetastoreExchangePartitionsArgs
  _args313.PartitionSpecs = partitionSpecs
  _args313.SourceDb = source_db
  _args313.SourceTableName = source_table_name
  _args313.DestDb = dest_db
  _args313.DestTableName = dest_table_name
  var _result314 ThriftHiveMetastoreExchangePartitionsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "exchange_partitions", &_args313, &_result314)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result314.O1!= nil:
    return r, _result314.O1
  case _result314.O2!= nil:
    return r, _result314.O2
  case _result314.O3!= nil:
    return r, _result314.O3
  case _result314.O4!= nil:
    return r, _result314.O4
  }

  return _result314.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionWithAuth(ctx context.Context, db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (r *Partition, err error) {
  var _args315 ThriftHiveMetastoreGetPartitionWithAuthArgs
  _args315.DbName = db_name
  _args315.TblName = tbl_name
  _args315.PartVals = part_vals
  _args315.UserName = user_name
  _args315.GroupNames = group_names
  var _result316 ThriftHiveMetastoreGetPartitionWithAuthResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partition_with_auth", &_args315, &_result316)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result316.O1!= nil:
    return r, _result316.O1
  case _result316.O2!= nil:
    return r, _result316.O2
  }

  return _result316.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
func (p *ThriftHiveMetastoreClient) GetPartitionByName(ctx context.Context, db_name string, tbl_name string, part_name string) (r *Partition, err error) {
  var _args317 ThriftHiveMetastoreGetPartitionByNameArgs
  _args317.DbName = db_name
  _args317.TblName = tbl_name
  _args317.PartName = part_name
  var _result318 ThriftHiveMetastoreGetPartitionByNameResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partition_by_name", &_args317, &_result318)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result318.O1!= nil:
    return r, _result318.O1
  case _result318.O2!= nil:
    return r, _result318.O2
  }

  return _result318.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitions(ctx context.Context, db_name string, tbl_name string, max_parts int16) (r []*Partition, err error) {
  var _args319 ThriftHiveMetastoreGetPartitionsArgs
  _args319.DbName = db_name
  _args319.TblName = tbl_name
  _args319.MaxParts = max_parts
  var _result320 ThriftHiveMetastoreGetPartitionsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partitions", &_args319, &_result320)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result320.O1!= nil:
    return r, _result320.O1
  case _result320.O2!= nil:
    return r, _result320.O2
  }

  return _result320.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionsWithAuth(ctx context.Context, db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error) {
  var _args321 ThriftHiveMetastoreGetPartitionsWithAuthArgs
  _args321.DbName = db_name
  _args321.TblName = tbl_name
  _args321.MaxParts = max_parts
  _args321.UserName = user_name
  _args321.GroupNames = group_names
  var _result322 ThriftHiveMetastoreGetPartitionsWithAuthResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partitions_with_auth", &_args321, &_result322)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result322.O1!= nil:
    return r, _result322.O1
  case _result322.O2!= nil:
    return r, _result322.O2
  }

  return _result322.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionsPspec(ctx context.Context, db_name string, tbl_name string, max_parts int32) (r []*PartitionSpec, err error) {
  var _args323 ThriftHiveMetastoreGetPartitionsPspecArgs
  _args323.DbName = db_name
  _args323.TblName = tbl_name
  _args323.MaxParts = max_parts
  var _result324 ThriftHiveMetastoreGetPartitionsPspecResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partitions_pspec", &_args323, &_result324)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result324.O1!= nil:
    return r, _result324.O1
  case _result324.O2!= nil:
    return r, _result324.O2
  }

  return _result324.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionNames(ctx context.Context, db_name string, tbl_name string, max_parts int16) (r []string, err error) {
  var _args325 ThriftHiveMetastoreGetPartitionNamesArgs
  _args325.DbName = db_name
  _args325.TblName = tbl_name
  _args325.MaxParts = max_parts
  var _result326 ThriftHiveMetastoreGetPartitionNamesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partition_names", &_args325, &_result326)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result326.O1!= nil:
    return r, _result326.O1
  case _result326.O2!= nil:
    return r, _result326.O2
  }

  return _result326.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetPartitionValues(ctx context.Context, request *PartitionValuesRequest) (r *PartitionValuesResponse, err error) {
  var _args327 ThriftHiveMetastoreGetPartitionValuesArgs
  _args327.Request = request
  var _result328 ThriftHiveMetastoreGetPartitionValuesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partition_values", &_args327, &_result328)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result328.O1!= nil:
    return r, _result328.O1
  case _result328.O2!= nil:
    return r, _result328.O2
  }

  return _result328.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionsPs(ctx context.Context, db_name string, tbl_name string, part_vals []string, max_parts int16) (r []*Partition, err error) {
  var _args329 ThriftHiveMetastoreGetPartitionsPsArgs
  _args329.DbName = db_name
  _args329.TblName = tbl_name
  _args329.PartVals = part_vals
  _args329.MaxParts = max_parts
  var _result330 ThriftHiveMetastoreGetPartitionsPsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partitions_ps", &_args329, &_result330)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result330.O1!= nil:
    return r, _result330.O1
  case _result330.O2!= nil:
    return r, _result330.O2
  }

  return _result330.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionsPsWithAuth(ctx context.Context, db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error) {
  var _args331 ThriftHiveMetastoreGetPartitionsPsWithAuthArgs
  _args331.DbName = db_name
  _args331.TblName = tbl_name
  _args331.PartVals = part_vals
  _args331.MaxParts = max_parts
  _args331.UserName = user_name
  _args331.GroupNames = group_names
  var _result332 ThriftHiveMetastoreGetPartitionsPsWithAuthResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partitions_ps_with_auth", &_args331, &_result332)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result332.O1!= nil:
    return r, _result332.O1
  case _result332.O2!= nil:
    return r, _result332.O2
  }

  return _result332.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionNamesPs(ctx context.Context, db_name string, tbl_name string, part_vals []string, max_parts int16) (r []string, err error) {
  var _args333 ThriftHiveMetastoreGetPartitionNamesPsArgs
  _args333.DbName = db_name
  _args333.TblName = tbl_name
  _args333.PartVals = part_vals
  _args333.MaxParts = max_parts
  var _result334 ThriftHiveMetastoreGetPartitionNamesPsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partition_names_ps", &_args333, &_result334)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result334.O1!= nil:
    return r, _result334.O1
  case _result334.O2!= nil:
    return r, _result334.O2
  }

  return _result334.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - Filter
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionsByFilter(ctx context.Context, db_name string, tbl_name string, filter string, max_parts int16) (r []*Partition, err error) {
  var _args335 ThriftHiveMetastoreGetPartitionsByFilterArgs
  _args335.DbName = db_name
  _args335.TblName = tbl_name
  _args335.Filter = filter
  _args335.MaxParts = max_parts
  var _result336 ThriftHiveMetastoreGetPartitionsByFilterResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partitions_by_filter", &_args335, &_result336)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result336.O1!= nil:
    return r, _result336.O1
  case _result336.O2!= nil:
    return r, _result336.O2
  }

  return _result336.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - Filter
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartSpecsByFilter(ctx context.Context, db_name string, tbl_name string, filter string, max_parts int32) (r []*PartitionSpec, err error) {
  var _args337 ThriftHiveMetastoreGetPartSpecsByFilterArgs
  _args337.DbName = db_name
  _args337.TblName = tbl_name
  _args337.Filter = filter
  _args337.MaxParts = max_parts
  var _result338 ThriftHiveMetastoreGetPartSpecsByFilterResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_part_specs_by_filter", &_args337, &_result338)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result338.O1!= nil:
    return r, _result338.O1
  case _result338.O2!= nil:
    return r, _result338.O2
  }

  return _result338.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) GetPartitionsByExpr(ctx context.Context, req *PartitionsByExprRequest) (r *PartitionsByExprResult_, err error) {
  var _args339 ThriftHiveMetastoreGetPartitionsByExprArgs
  _args339.Req = req
  var _result340 ThriftHiveMetastoreGetPartitionsByExprResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partitions_by_expr", &_args339, &_result340)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result340.O1!= nil:
    return r, _result340.O1
  case _result340.O2!= nil:
    return r, _result340.O2
  }

  return _result340.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - Filter
func (p *ThriftHiveMetastoreClient) GetNumPartitionsByFilter(ctx context.Context, db_name string, tbl_name string, filter string) (r int32, err error) {
  var _args341 ThriftHiveMetastoreGetNumPartitionsByFilterArgs
  _args341.DbName = db_name
  _args341.TblName = tbl_name
  _args341.Filter = filter
  var _result342 ThriftHiveMetastoreGetNumPartitionsByFilterResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_num_partitions_by_filter", &_args341, &_result342)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result342.O1!= nil:
    return r, _result342.O1
  case _result342.O2!= nil:
    return r, _result342.O2
  }

  return _result342.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - Names
func (p *ThriftHiveMetastoreClient) GetPartitionsByNames(ctx context.Context, db_name string, tbl_name string, names []string) (r []*Partition, err error) {
  var _args343 ThriftHiveMetastoreGetPartitionsByNamesArgs
  _args343.DbName = db_name
  _args343.TblName = tbl_name
  _args343.Names = names
  var _result344 ThriftHiveMetastoreGetPartitionsByNamesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partitions_by_names", &_args343, &_result344)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result344.O1!= nil:
    return r, _result344.O1
  case _result344.O2!= nil:
    return r, _result344.O2
  }

  return _result344.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - NewPart_
func (p *ThriftHiveMetastoreClient) AlterPartition(ctx context.Context, db_name string, tbl_name string, new_part *Partition) (err error) {
  var _args345 ThriftHiveMetastoreAlterPartitionArgs
  _args345.DbName = db_name
  _args345.TblName = tbl_name
  _args345.NewPart_ = new_part
  var _result346 ThriftHiveMetastoreAlterPartitionResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "alter_partition", &_args345, &_result346)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result346.O1!= nil:
    return _result346.O1
  case _result346.O2!= nil:
    return _result346.O2
  }

  return nil
}

// Parameters:
//  - DbName
//  - TblName
//  - NewParts_
func (p *ThriftHiveMetastoreClient) AlterPartitions(ctx context.Context, db_name string, tbl_name string, new_parts []*Partition) (err error) {
  var _args347 ThriftHiveMetastoreAlterPartitionsArgs
  _args347.DbName = db_name
  _args347.TblName = tbl_name
  _args347.NewParts_ = new_parts
  var _result348 ThriftHiveMetastoreAlterPartitionsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "alter_partitions", &_args347, &_result348)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result348.O1!= nil:
    return _result348.O1
  case _result348.O2!= nil:
    return _result348.O2
  }

  return nil
}

// Parameters:
//  - DbName
//  - TblName
//  - NewParts_
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) AlterPartitionsWithEnvironmentContext(ctx context.Context, db_name string, tbl_name string, new_parts []*Partition, environment_context *EnvironmentContext) (err error) {
  var _args349 ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs
  _args349.DbName = db_name
  _args349.TblName = tbl_name
  _args349.NewParts_ = new_parts
  _args349.EnvironmentContext = environment_context
  var _result350 ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "alter_partitions_with_environment_context", &_args349, &_result350)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result350.O1!= nil:
    return _result350.O1
  case _result350.O2!= nil:
    return _result350.O2
  }

  return nil
}

// Parameters:
//  - DbName
//  - TblName
//  - NewPart_
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) AlterPartitionWithEnvironmentContext(ctx context.Context, db_name string, tbl_name string, new_part *Partition, environment_context *EnvironmentContext) (err error) {
  var _args351 ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs
  _args351.DbName = db_name
  _args351.TblName = tbl_name
  _args351.NewPart_ = new_part
  _args351.EnvironmentContext = environment_context
  var _result352 ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "alter_partition_with_environment_context", &_args351, &_result352)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result352.O1!= nil:
    return _result352.O1
  case _result352.O2!= nil:
    return _result352.O2
  }

  return nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - NewPart_
func (p *ThriftHiveMetastoreClient) RenamePartition(ctx context.Context, db_name string, tbl_name string, part_vals []string, new_part *Partition) (err error) {
  var _args353 ThriftHiveMetastoreRenamePartitionArgs
  _args353.DbName = db_name
  _args353.TblName = tbl_name
  _args353.PartVals = part_vals
  _args353.NewPart_ = new_part
  var _result354 ThriftHiveMetastoreRenamePartitionResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "rename_partition", &_args353, &_result354)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result354.O1!= nil:
    return _result354.O1
  case _result354.O2!= nil:
    return _result354.O2
  }

  return nil
}

// Parameters:
//  - PartVals
//  - ThrowException
func (p *ThriftHiveMetastoreClient) PartitionNameHasValidCharacters(ctx context.Context, part_vals []string, throw_exception bool) (r bool, err error) {
  var _args355 ThriftHiveMetastorePartitionNameHasValidCharactersArgs
  _args355.PartVals = part_vals
  _args355.ThrowException = throw_exception
  var _result356 ThriftHiveMetastorePartitionNameHasValidCharactersResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "partition_name_has_valid_characters", &_args355, &_result356)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result356.O1!= nil:
    return r, _result356.O1
  }

  return _result356.GetSuccess(), nil
}

// Parameters:
//  - Name
//  - DefaultValue
func (p *ThriftHiveMetastoreClient) GetConfigValue(ctx context.Context, name string, defaultValue string) (r string, err error) {
  var _args357 ThriftHiveMetastoreGetConfigValueArgs
  _args357.Name = name
  _args357.DefaultValue = defaultValue
  var _result358 ThriftHiveMetastoreGetConfigValueResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_config_value", &_args357, &_result358)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result358.O1!= nil:
    return r, _result358.O1
  }

  return _result358.GetSuccess(), nil
}

// Parameters:
//  - PartName
func (p *ThriftHiveMetastoreClient) PartitionNameToVals(ctx context.Context, part_name string) (r []string, err error) {
  var _args359 ThriftHiveMetastorePartitionNameToValsArgs
  _args359.PartName = part_name
  var _result360 ThriftHiveMetastorePartitionNameToValsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "partition_name_to_vals", &_args359, &_result360)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result360.O1!= nil:
    return r, _result360.O1
  }

  return _result360.GetSuccess(), nil
}

// Parameters:
//  - PartName
func (p *ThriftHiveMetastoreClient) PartitionNameToSpec(ctx context.Context, part_name string) (r map[string]string, err error) {
  var _args361 ThriftHiveMetastorePartitionNameToSpecArgs
  _args361.PartName = part_name
  var _result362 ThriftHiveMetastorePartitionNameToSpecResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "partition_name_to_spec", &_args361, &_result362)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result362.O1!= nil:
    return r, _result362.O1
  }

  return _result362.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - EventType
func (p *ThriftHiveMetastoreClient) MarkPartitionForEvent(ctx context.Context, db_name string, tbl_name string, part_vals map[string]string, eventType PartitionEventType) (err error) {
  var _args363 ThriftHiveMetastoreMarkPartitionForEventArgs
  _args363.DbName = db_name
  _args363.TblName = tbl_name
  _args363.PartVals = part_vals
  _args363.EventType = eventType
  var _result364 ThriftHiveMetastoreMarkPartitionForEventResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "markPartitionForEvent", &_args363, &_result364)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result364.O1!= nil:
    return _result364.O1
  case _result364.O2!= nil:
    return _result364.O2
  case _result364.O3!= nil:
    return _result364.O3
  case _result364.O4!= nil:
    return _result364.O4
  case _result364.O5!= nil:
    return _result364.O5
  case _result364.O6!= nil:
    return _result364.O6
  }

  return nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - EventType
func (p *ThriftHiveMetastoreClient) IsPartitionMarkedForEvent(ctx context.Context, db_name string, tbl_name string, part_vals map[string]string, eventType PartitionEventType) (r bool, err error) {
  var _args365 ThriftHiveMetastoreIsPartitionMarkedForEventArgs
  _args365.DbName = db_name
  _args365.TblName = tbl_name
  _args365.PartVals = part_vals
  _args365.EventType = eventType
  var _result366 ThriftHiveMetastoreIsPartitionMarkedForEventResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "isPartitionMarkedForEvent", &_args365, &_result366)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result366.O1!= nil:
    return r, _result366.O1
  case _result366.O2!= nil:
    return r, _result366.O2
  case _result366.O3!= nil:
    return r, _result366.O3
  case _result366.O4!= nil:
    return r, _result366.O4
  case _result366.O5!= nil:
    return r, _result366.O5
  case _result366.O6!= nil:
    return r, _result366.O6
  }

  return _result366.GetSuccess(), nil
}

// Parameters:
//  - NewIndex_
//  - IndexTable
func (p *ThriftHiveMetastoreClient) AddIndex(ctx context.Context, new_index *Index, index_table *Table) (r *Index, err error) {
  var _args367 ThriftHiveMetastoreAddIndexArgs
  _args367.NewIndex_ = new_index
  _args367.IndexTable = index_table
  var _result368 ThriftHiveMetastoreAddIndexResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "add_index", &_args367, &_result368)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result368.O1!= nil:
    return r, _result368.O1
  case _result368.O2!= nil:
    return r, _result368.O2
  case _result368.O3!= nil:
    return r, _result368.O3
  }

  return _result368.GetSuccess(), nil
}

// Parameters:
//  - Dbname
//  - BaseTblName
//  - IdxName
//  - NewIdx_
func (p *ThriftHiveMetastoreClient) AlterIndex(ctx context.Context, dbname string, base_tbl_name string, idx_name string, new_idx *Index) (err error) {
  var _args369 ThriftHiveMetastoreAlterIndexArgs
  _args369.Dbname = dbname
  _args369.BaseTblName = base_tbl_name
  _args369.IdxName = idx_name
  _args369.NewIdx_ = new_idx
  var _result370 ThriftHiveMetastoreAlterIndexResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "alter_index", &_args369, &_result370)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result370.O1!= nil:
    return _result370.O1
  case _result370.O2!= nil:
    return _result370.O2
  }

  return nil
}

// Parameters:
//  - DbName
//  - TblName
//  - IndexName
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropIndexByName(ctx context.Context, db_name string, tbl_name string, index_name string, deleteData bool) (r bool, err error) {
  var _args371 ThriftHiveMetastoreDropIndexByNameArgs
  _args371.DbName = db_name
  _args371.TblName = tbl_name
  _args371.IndexName = index_name
  _args371.DeleteData = deleteData
  var _result372 ThriftHiveMetastoreDropIndexByNameResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_index_by_name", &_args371, &_result372)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result372.O1!= nil:
    return r, _result372.O1
  case _result372.O2!= nil:
    return r, _result372.O2
  }

  return _result372.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - IndexName
func (p *ThriftHiveMetastoreClient) GetIndexByName(ctx context.Context, db_name string, tbl_name string, index_name string) (r *Index, err error) {
  var _args373 ThriftHiveMetastoreGetIndexByNameArgs
  _args373.DbName = db_name
  _args373.TblName = tbl_name
  _args373.IndexName = index_name
  var _result374 ThriftHiveMetastoreGetIndexByNameResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_index_by_name", &_args373, &_result374)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result374.O1!= nil:
    return r, _result374.O1
  case _result374.O2!= nil:
    return r, _result374.O2
  }

  return _result374.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxIndexes
func (p *ThriftHiveMetastoreClient) GetIndexes(ctx context.Context, db_name string, tbl_name string, max_indexes int16) (r []*Index, err error) {
  var _args375 ThriftHiveMetastoreGetIndexesArgs
  _args375.DbName = db_name
  _args375.TblName = tbl_name
  _args375.MaxIndexes = max_indexes
  var _result376 ThriftHiveMetastoreGetIndexesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_indexes", &_args375, &_result376)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result376.O1!= nil:
    return r, _result376.O1
  case _result376.O2!= nil:
    return r, _result376.O2
  }

  return _result376.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxIndexes
func (p *ThriftHiveMetastoreClient) GetIndexNames(ctx context.Context, db_name string, tbl_name string, max_indexes int16) (r []string, err error) {
  var _args377 ThriftHiveMetastoreGetIndexNamesArgs
  _args377.DbName = db_name
  _args377.TblName = tbl_name
  _args377.MaxIndexes = max_indexes
  var _result378 ThriftHiveMetastoreGetIndexNamesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_index_names", &_args377, &_result378)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result378.O2!= nil:
    return r, _result378.O2
  }

  return _result378.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetPrimaryKeys(ctx context.Context, request *PrimaryKeysRequest) (r *PrimaryKeysResponse, err error) {
  var _args379 ThriftHiveMetastoreGetPrimaryKeysArgs
  _args379.Request = request
  var _result380 ThriftHiveMetastoreGetPrimaryKeysResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_primary_keys", &_args379, &_result380)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result380.O1!= nil:
    return r, _result380.O1
  case _result380.O2!= nil:
    return r, _result380.O2
  }

  return _result380.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetForeignKeys(ctx context.Context, request *ForeignKeysRequest) (r *ForeignKeysResponse, err error) {
  var _args381 ThriftHiveMetastoreGetForeignKeysArgs
  _args381.Request = request
  var _result382 ThriftHiveMetastoreGetForeignKeysResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_foreign_keys", &_args381, &_result382)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result382.O1!= nil:
    return r, _result382.O1
  case _result382.O2!= nil:
    return r, _result382.O2
  }

  return _result382.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetUniqueConstraints(ctx context.Context, request *UniqueConstraintsRequest) (r *UniqueConstraintsResponse, err error) {
  var _args383 ThriftHiveMetastoreGetUniqueConstraintsArgs
  _args383.Request = request
  var _result384 ThriftHiveMetastoreGetUniqueConstraintsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_unique_constraints", &_args383, &_result384)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result384.O1!= nil:
    return r, _result384.O1
  case _result384.O2!= nil:
    return r, _result384.O2
  }

  return _result384.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetNotNullConstraints(ctx context.Context, request *NotNullConstraintsRequest) (r *NotNullConstraintsResponse, err error) {
  var _args385 ThriftHiveMetastoreGetNotNullConstraintsArgs
  _args385.Request = request
  var _result386 ThriftHiveMetastoreGetNotNullConstraintsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_not_null_constraints", &_args385, &_result386)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result386.O1!= nil:
    return r, _result386.O1
  case _result386.O2!= nil:
    return r, _result386.O2
  }

  return _result386.GetSuccess(), nil
}

// Parameters:
//  - StatsObj
func (p *ThriftHiveMetastoreClient) UpdateTableColumnStatistics(ctx context.Context, stats_obj *ColumnStatistics) (r bool, err error) {
  var _args387 ThriftHiveMetastoreUpdateTableColumnStatisticsArgs
  _args387.StatsObj = stats_obj
  var _result388 ThriftHiveMetastoreUpdateTableColumnStatisticsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "update_table_column_statistics", &_args387, &_result388)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result388.O1!= nil:
    return r, _result388.O1
  case _result388.O2!= nil:
    return r, _result388.O2
  case _result388.O3!= nil:
    return r, _result388.O3
  case _result388.O4!= nil:
    return r, _result388.O4
  }

  return _result388.GetSuccess(), nil
}

// Parameters:
//  - StatsObj
func (p *ThriftHiveMetastoreClient) UpdatePartitionColumnStatistics(ctx context.Context, stats_obj *ColumnStatistics) (r bool, err error) {
  var _args389 ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs
  _args389.StatsObj = stats_obj
  var _result390 ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "update_partition_column_statistics", &_args389, &_result390)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result390.O1!= nil:
    return r, _result390.O1
  case _result390.O2!= nil:
    return r, _result390.O2
  case _result390.O3!= nil:
    return r, _result390.O3
  case _result390.O4!= nil:
    return r, _result390.O4
  }

  return _result390.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - ColName
func (p *ThriftHiveMetastoreClient) GetTableColumnStatistics(ctx context.Context, db_name string, tbl_name string, col_name string) (r *ColumnStatistics, err error) {
  var _args391 ThriftHiveMetastoreGetTableColumnStatisticsArgs
  _args391.DbName = db_name
  _args391.TblName = tbl_name
  _args391.ColName = col_name
  var _result392 ThriftHiveMetastoreGetTableColumnStatisticsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_table_column_statistics", &_args391, &_result392)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result392.O1!= nil:
    return r, _result392.O1
  case _result392.O2!= nil:
    return r, _result392.O2
  case _result392.O3!= nil:
    return r, _result392.O3
  case _result392.O4!= nil:
    return r, _result392.O4
  }

  return _result392.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - ColName
func (p *ThriftHiveMetastoreClient) GetPartitionColumnStatistics(ctx context.Context, db_name string, tbl_name string, part_name string, col_name string) (r *ColumnStatistics, err error) {
  var _args393 ThriftHiveMetastoreGetPartitionColumnStatisticsArgs
  _args393.DbName = db_name
  _args393.TblName = tbl_name
  _args393.PartName = part_name
  _args393.ColName = col_name
  var _result394 ThriftHiveMetastoreGetPartitionColumnStatisticsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partition_column_statistics", &_args393, &_result394)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result394.O1!= nil:
    return r, _result394.O1
  case _result394.O2!= nil:
    return r, _result394.O2
  case _result394.O3!= nil:
    return r, _result394.O3
  case _result394.O4!= nil:
    return r, _result394.O4
  }

  return _result394.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetTableStatisticsReq(ctx context.Context, request *TableStatsRequest) (r *TableStatsResult_, err error) {
  var _args395 ThriftHiveMetastoreGetTableStatisticsReqArgs
  _args395.Request = request
  var _result396 ThriftHiveMetastoreGetTableStatisticsReqResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_table_statistics_req", &_args395, &_result396)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result396.O1!= nil:
    return r, _result396.O1
  case _result396.O2!= nil:
    return r, _result396.O2
  }

  return _result396.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetPartitionsStatisticsReq(ctx context.Context, request *PartitionsStatsRequest) (r *PartitionsStatsResult_, err error) {
  var _args397 ThriftHiveMetastoreGetPartitionsStatisticsReqArgs
  _args397.Request = request
  var _result398 ThriftHiveMetastoreGetPartitionsStatisticsReqResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_partitions_statistics_req", &_args397, &_result398)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result398.O1!= nil:
    return r, _result398.O1
  case _result398.O2!= nil:
    return r, _result398.O2
  }

  return _result398.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetAggrStatsFor(ctx context.Context, request *PartitionsStatsRequest) (r *AggrStats, err error) {
  var _args399 ThriftHiveMetastoreGetAggrStatsForArgs
  _args399.Request = request
  var _result400 ThriftHiveMetastoreGetAggrStatsForResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_aggr_stats_for", &_args399, &_result400)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result400.O1!= nil:
    return r, _result400.O1
  case _result400.O2!= nil:
    return r, _result400.O2
  }

  return _result400.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) SetAggrStatsFor(ctx context.Context, request *SetPartitionsStatsRequest) (r bool, err error) {
  var _args401 ThriftHiveMetastoreSetAggrStatsForArgs
  _args401.Request = request
  var _result402 ThriftHiveMetastoreSetAggrStatsForResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "set_aggr_stats_for", &_args401, &_result402)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result402.O1!= nil:
    return r, _result402.O1
  case _result402.O2!= nil:
    return r, _result402.O2
  case _result402.O3!= nil:
    return r, _result402.O3
  case _result402.O4!= nil:
    return r, _result402.O4
  }

  return _result402.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - ColName
func (p *ThriftHiveMetastoreClient) DeletePartitionColumnStatistics(ctx context.Context, db_name string, tbl_name string, part_name string, col_name string) (r bool, err error) {
  var _args403 ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs
  _args403.DbName = db_name
  _args403.TblName = tbl_name
  _args403.PartName = part_name
  _args403.ColName = col_name
  var _result404 ThriftHiveMetastoreDeletePartitionColumnStatisticsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "delete_partition_column_statistics", &_args403, &_result404)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result404.O1!= nil:
    return r, _result404.O1
  case _result404.O2!= nil:
    return r, _result404.O2
  case _result404.O3!= nil:
    return r, _result404.O3
  case _result404.O4!= nil:
    return r, _result404.O4
  }

  return _result404.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - ColName
func (p *ThriftHiveMetastoreClient) DeleteTableColumnStatistics(ctx context.Context, db_name string, tbl_name string, col_name string) (r bool, err error) {
  var _args405 ThriftHiveMetastoreDeleteTableColumnStatisticsArgs
  _args405.DbName = db_name
  _args405.TblName = tbl_name
  _args405.ColName = col_name
  var _result406 ThriftHiveMetastoreDeleteTableColumnStatisticsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "delete_table_column_statistics", &_args405, &_result406)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result406.O1!= nil:
    return r, _result406.O1
  case _result406.O2!= nil:
    return r, _result406.O2
  case _result406.O3!= nil:
    return r, _result406.O3
  case _result406.O4!= nil:
    return r, _result406.O4
  }

  return _result406.GetSuccess(), nil
}

// Parameters:
//  - Func
func (p *ThriftHiveMetastoreClient) CreateFunction(ctx context.Context, func_a1 *Function) (err error) {
  var _args407 ThriftHiveMetastoreCreateFunctionArgs
  _args407.Func = func_a1
  var _result408 ThriftHiveMetastoreCreateFunctionResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "create_function", &_args407, &_result408)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result408.O1!= nil:
    return _result408.O1
  case _result408.O2!= nil:
    return _result408.O2
  case _result408.O3!= nil:
    return _result408.O3
  case _result408.O4!= nil:
    return _result408.O4
  }

  return nil
}

// Parameters:
//  - DbName
//  - FuncName
func (p *ThriftHiveMetastoreClient) DropFunction(ctx context.Context, dbName string, funcName string) (err error) {
  var _args409 ThriftHiveMetastoreDropFunctionArgs
  _args409.DbName = dbName
  _args409.FuncName = funcName
  var _result410 ThriftHiveMetastoreDropFunctionResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_function", &_args409, &_result410)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result410.O1!= nil:
    return _result410.O1
  case _result410.O3!= nil:
    return _result410.O3
  }

  return nil
}

// Parameters:
//  - DbName
//  - FuncName
//  - NewFunc_
func (p *ThriftHiveMetastoreClient) AlterFunction(ctx context.Context, dbName string, funcName string, newFunc *Function) (err error) {
  var _args411 ThriftHiveMetastoreAlterFunctionArgs
  _args411.DbName = dbName
  _args411.FuncName = funcName
  _args411.NewFunc_ = newFunc
  var _result412 ThriftHiveMetastoreAlterFunctionResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "alter_function", &_args411, &_result412)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result412.O1!= nil:
    return _result412.O1
  case _result412.O2!= nil:
    return _result412.O2
  }

  return nil
}

// Parameters:
//  - DbName
//  - Pattern
func (p *ThriftHiveMetastoreClient) GetFunctions(ctx context.Context, dbName string, pattern string) (r []string, err error) {
  var _args413 ThriftHiveMetastoreGetFunctionsArgs
  _args413.DbName = dbName
  _args413.Pattern = pattern
  var _result414 ThriftHiveMetastoreGetFunctionsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_functions", &_args413, &_result414)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result414.O1!= nil:
    return r, _result414.O1
  }

  return _result414.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - FuncName
func (p *ThriftHiveMetastoreClient) GetFunction(ctx context.Context, dbName string, funcName string) (r *Function, err error) {
  var _args415 ThriftHiveMetastoreGetFunctionArgs
  _args415.DbName = dbName
  _args415.FuncName = funcName
  var _result416 ThriftHiveMetastoreGetFunctionResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_function", &_args415, &_result416)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result416.O1!= nil:
    return r, _result416.O1
  case _result416.O2!= nil:
    return r, _result416.O2
  }

  return _result416.GetSuccess(), nil
}

func (p *ThriftHiveMetastoreClient) GetAllFunctions(ctx context.Context) (r *GetAllFunctionsResponse, err error) {
  var _args417 ThriftHiveMetastoreGetAllFunctionsArgs
  var _result418 ThriftHiveMetastoreGetAllFunctionsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_all_functions", &_args417, &_result418)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result418.O1!= nil:
    return r, _result418.O1
  }

  return _result418.GetSuccess(), nil
}

// Parameters:
//  - Role
func (p *ThriftHiveMetastoreClient) CreateRole(ctx context.Context, role *Role) (r bool, err error) {
  var _args419 ThriftHiveMetastoreCreateRoleArgs
  _args419.Role = role
  var _result420 ThriftHiveMetastoreCreateRoleResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "create_role", &_args419, &_result420)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result420.O1!= nil:
    return r, _result420.O1
  }

  return _result420.GetSuccess(), nil
}

// Parameters:
//  - RoleName
func (p *ThriftHiveMetastoreClient) DropRole(ctx context.Context, role_name string) (r bool, err error) {
  var _args421 ThriftHiveMetastoreDropRoleArgs
  _args421.RoleName = role_name
  var _result422 ThriftHiveMetastoreDropRoleResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_role", &_args421, &_result422)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result422.O1!= nil:
    return r, _result422.O1
  }

  return _result422.GetSuccess(), nil
}

func (p *ThriftHiveMetastoreClient) GetRoleNames(ctx context.Context) (r []string, err error) {
  var _args423 ThriftHiveMetastoreGetRoleNamesArgs
  var _result424 ThriftHiveMetastoreGetRoleNamesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_role_names", &_args423, &_result424)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result424.O1!= nil:
    return r, _result424.O1
  }

  return _result424.GetSuccess(), nil
}

// Parameters:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
//  - Grantor
//  - GrantorType
//  - GrantOption
func (p *ThriftHiveMetastoreClient) GrantRole(ctx context.Context, role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (r bool, err error) {
  var _args425 ThriftHiveMetastoreGrantRoleArgs
  _args425.RoleName = role_name
  _args425.PrincipalName = principal_name
  _args425.PrincipalType = principal_type
  _args425.Grantor = grantor
  _args425.GrantorType = grantorType
  _args425.GrantOption = grant_option
  var _result426 ThriftHiveMetastoreGrantRoleResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "grant_role", &_args425, &_result426)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result426.O1!= nil:
    return r, _result426.O1
  }

  return _result426.GetSuccess(), nil
}

// Parameters:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
func (p *ThriftHiveMetastoreClient) RevokeRole(ctx context.Context, role_name string, principal_name string, principal_type PrincipalType) (r bool, err error) {
  var _args427 ThriftHiveMetastoreRevokeRoleArgs
  _args427.RoleName = role_name
  _args427.PrincipalName = principal_name
  _args427.PrincipalType = principal_type
  var _result428 ThriftHiveMetastoreRevokeRoleResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "revoke_role", &_args427, &_result428)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result428.O1!= nil:
    return r, _result428.O1
  }

  return _result428.GetSuccess(), nil
}

// Parameters:
//  - PrincipalName
//  - PrincipalType
func (p *ThriftHiveMetastoreClient) ListRoles(ctx context.Context, principal_name string, principal_type PrincipalType) (r []*Role, err error) {
  var _args429 ThriftHiveMetastoreListRolesArgs
  _args429.PrincipalName = principal_name
  _args429.PrincipalType = principal_type
  var _result430 ThriftHiveMetastoreListRolesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "list_roles", &_args429, &_result430)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result430.O1!= nil:
    return r, _result430.O1
  }

  return _result430.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GrantRevokeRole(ctx context.Context, request *GrantRevokeRoleRequest) (r *GrantRevokeRoleResponse, err error) {
  var _args431 ThriftHiveMetastoreGrantRevokeRoleArgs
  _args431.Request = request
  var _result432 ThriftHiveMetastoreGrantRevokeRoleResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "grant_revoke_role", &_args431, &_result432)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result432.O1!= nil:
    return r, _result432.O1
  }

  return _result432.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetPrincipalsInRole(ctx context.Context, request *GetPrincipalsInRoleRequest) (r *GetPrincipalsInRoleResponse, err error) {
  var _args433 ThriftHiveMetastoreGetPrincipalsInRoleArgs
  _args433.Request = request
  var _result434 ThriftHiveMetastoreGetPrincipalsInRoleResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_principals_in_role", &_args433, &_result434)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result434.O1!= nil:
    return r, _result434.O1
  }

  return _result434.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetRoleGrantsForPrincipal(ctx context.Context, request *GetRoleGrantsForPrincipalRequest) (r *GetRoleGrantsForPrincipalResponse, err error) {
  var _args435 ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs
  _args435.Request = request
  var _result436 ThriftHiveMetastoreGetRoleGrantsForPrincipalResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_role_grants_for_principal", &_args435, &_result436)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result436.O1!= nil:
    return r, _result436.O1
  }

  return _result436.GetSuccess(), nil
}

// Parameters:
//  - HiveObject
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPrivilegeSet(ctx context.Context, hiveObject *HiveObjectRef, user_name string, group_names []string) (r *PrincipalPrivilegeSet, err error) {
  var _args437 ThriftHiveMetastoreGetPrivilegeSetArgs
  _args437.HiveObject = hiveObject
  _args437.UserName = user_name
  _args437.GroupNames = group_names
  var _result438 ThriftHiveMetastoreGetPrivilegeSetResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_privilege_set", &_args437, &_result438)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result438.O1!= nil:
    return r, _result438.O1
  }

  return _result438.GetSuccess(), nil
}

// Parameters:
//  - PrincipalName
//  - PrincipalType
//  - HiveObject
func (p *ThriftHiveMetastoreClient) ListPrivileges(ctx context.Context, principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (r []*HiveObjectPrivilege, err error) {
  var _args439 ThriftHiveMetastoreListPrivilegesArgs
  _args439.PrincipalName = principal_name
  _args439.PrincipalType = principal_type
  _args439.HiveObject = hiveObject
  var _result440 ThriftHiveMetastoreListPrivilegesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "list_privileges", &_args439, &_result440)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result440.O1!= nil:
    return r, _result440.O1
  }

  return _result440.GetSuccess(), nil
}

// Parameters:
//  - Privileges
func (p *ThriftHiveMetastoreClient) GrantPrivileges(ctx context.Context, privileges *PrivilegeBag) (r bool, err error) {
  var _args441 ThriftHiveMetastoreGrantPrivilegesArgs
  _args441.Privileges = privileges
  var _result442 ThriftHiveMetastoreGrantPrivilegesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "grant_privileges", &_args441, &_result442)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result442.O1!= nil:
    return r, _result442.O1
  }

  return _result442.GetSuccess(), nil
}

// Parameters:
//  - Privileges
func (p *ThriftHiveMetastoreClient) RevokePrivileges(ctx context.Context, privileges *PrivilegeBag) (r bool, err error) {
  var _args443 ThriftHiveMetastoreRevokePrivilegesArgs
  _args443.Privileges = privileges
  var _result444 ThriftHiveMetastoreRevokePrivilegesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "revoke_privileges", &_args443, &_result444)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result444.O1!= nil:
    return r, _result444.O1
  }

  return _result444.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GrantRevokePrivileges(ctx context.Context, request *GrantRevokePrivilegeRequest) (r *GrantRevokePrivilegeResponse, err error) {
  var _args445 ThriftHiveMetastoreGrantRevokePrivilegesArgs
  _args445.Request = request
  var _result446 ThriftHiveMetastoreGrantRevokePrivilegesResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "grant_revoke_privileges", &_args445, &_result446)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result446.O1!= nil:
    return r, _result446.O1
  }

  return _result446.GetSuccess(), nil
}

// Parameters:
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) SetUgi(ctx context.Context, user_name string, group_names []string) (r []string, err error) {
  var _args447 ThriftHiveMetastoreSetUgiArgs
  _args447.UserName = user_name
  _args447.GroupNames = group_names
  var _result448 ThriftHiveMetastoreSetUgiResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "set_ugi", &_args447, &_result448)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result448.O1!= nil:
    return r, _result448.O1
  }

  return _result448.GetSuccess(), nil
}

// Parameters:
//  - TokenOwner
//  - RenewerKerberosPrincipalName
func (p *ThriftHiveMetastoreClient) GetDelegationToken(ctx context.Context, token_owner string, renewer_kerberos_principal_name string) (r string, err error) {
  var _args449 ThriftHiveMetastoreGetDelegationTokenArgs
  _args449.TokenOwner = token_owner
  _args449.RenewerKerberosPrincipalName = renewer_kerberos_principal_name
  var _result450 ThriftHiveMetastoreGetDelegationTokenResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_delegation_token", &_args449, &_result450)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result450.O1!= nil:
    return r, _result450.O1
  }

  return _result450.GetSuccess(), nil
}

// Parameters:
//  - TokenStrForm
func (p *ThriftHiveMetastoreClient) RenewDelegationToken(ctx context.Context, token_str_form string) (r int64, err error) {
  var _args451 ThriftHiveMetastoreRenewDelegationTokenArgs
  _args451.TokenStrForm = token_str_form
  var _result452 ThriftHiveMetastoreRenewDelegationTokenResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "renew_delegation_token", &_args451, &_result452)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result452.O1!= nil:
    return r, _result452.O1
  }

  return _result452.GetSuccess(), nil
}

// Parameters:
//  - TokenStrForm
func (p *ThriftHiveMetastoreClient) CancelDelegationToken(ctx context.Context, token_str_form string) (err error) {
  var _args453 ThriftHiveMetastoreCancelDelegationTokenArgs
  _args453.TokenStrForm = token_str_form
  var _result454 ThriftHiveMetastoreCancelDelegationTokenResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "cancel_delegation_token", &_args453, &_result454)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result454.O1!= nil:
    return _result454.O1
  }

  return nil
}

// Parameters:
//  - TokenIdentifier
//  - DelegationToken
func (p *ThriftHiveMetastoreClient) AddToken(ctx context.Context, token_identifier string, delegation_token string) (r bool, err error) {
  var _args455 ThriftHiveMetastoreAddTokenArgs
  _args455.TokenIdentifier = token_identifier
  _args455.DelegationToken = delegation_token
  var _result456 ThriftHiveMetastoreAddTokenResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "add_token", &_args455, &_result456)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result456.GetSuccess(), nil
}

// Parameters:
//  - TokenIdentifier
func (p *ThriftHiveMetastoreClient) RemoveToken(ctx context.Context, token_identifier string) (r bool, err error) {
  var _args457 ThriftHiveMetastoreRemoveTokenArgs
  _args457.TokenIdentifier = token_identifier
  var _result458 ThriftHiveMetastoreRemoveTokenResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "remove_token", &_args457, &_result458)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result458.GetSuccess(), nil
}

// Parameters:
//  - TokenIdentifier
func (p *ThriftHiveMetastoreClient) GetToken(ctx context.Context, token_identifier string) (r string, err error) {
  var _args459 ThriftHiveMetastoreGetTokenArgs
  _args459.TokenIdentifier = token_identifier
  var _result460 ThriftHiveMetastoreGetTokenResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_token", &_args459, &_result460)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result460.GetSuccess(), nil
}

func (p *ThriftHiveMetastoreClient) GetAllTokenIdentifiers(ctx context.Context) (r []string, err error) {
  var _args461 ThriftHiveMetastoreGetAllTokenIdentifiersArgs
  var _result462 ThriftHiveMetastoreGetAllTokenIdentifiersResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_all_token_identifiers", &_args461, &_result462)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result462.GetSuccess(), nil
}

// Parameters:
//  - Key
func (p *ThriftHiveMetastoreClient) AddMasterKey(ctx context.Context, key string) (r int32, err error) {
  var _args463 ThriftHiveMetastoreAddMasterKeyArgs
  _args463.Key = key
  var _result464 ThriftHiveMetastoreAddMasterKeyResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "add_master_key", &_args463, &_result464)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result464.O1!= nil:
    return r, _result464.O1
  }

  return _result464.GetSuccess(), nil
}

// Parameters:
//  - SeqNumber
//  - Key
func (p *ThriftHiveMetastoreClient) UpdateMasterKey(ctx context.Context, seq_number int32, key string) (err error) {
  var _args465 ThriftHiveMetastoreUpdateMasterKeyArgs
  _args465.SeqNumber = seq_number
  _args465.Key = key
  var _result466 ThriftHiveMetastoreUpdateMasterKeyResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "update_master_key", &_args465, &_result466)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result466.O1!= nil:
    return _result466.O1
  case _result466.O2!= nil:
    return _result466.O2
  }

  return nil
}

// Parameters:
//  - KeySeq
func (p *ThriftHiveMetastoreClient) RemoveMasterKey(ctx context.Context, key_seq int32) (r bool, err error) {
  var _args467 ThriftHiveMetastoreRemoveMasterKeyArgs
  _args467.KeySeq = key_seq
  var _result468 ThriftHiveMetastoreRemoveMasterKeyResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "remove_master_key", &_args467, &_result468)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result468.GetSuccess(), nil
}

func (p *ThriftHiveMetastoreClient) GetMasterKeys(ctx context.Context) (r []string, err error) {
  var _args469 ThriftHiveMetastoreGetMasterKeysArgs
  var _result470 ThriftHiveMetastoreGetMasterKeysResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_master_keys", &_args469, &_result470)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result470.GetSuccess(), nil
}

func (p *ThriftHiveMetastoreClient) GetOpenTxns(ctx context.Context) (r *GetOpenTxnsResponse, err error) {
  var _args471 ThriftHiveMetastoreGetOpenTxnsArgs
  var _result472 ThriftHiveMetastoreGetOpenTxnsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_open_txns", &_args471, &_result472)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result472.GetSuccess(), nil
}

func (p *ThriftHiveMetastoreClient) GetOpenTxnsInfo(ctx context.Context) (r *GetOpenTxnsInfoResponse, err error) {
  var _args473 ThriftHiveMetastoreGetOpenTxnsInfoArgs
  var _result474 ThriftHiveMetastoreGetOpenTxnsInfoResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_open_txns_info", &_args473, &_result474)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result474.GetSuccess(), nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) OpenTxns(ctx context.Context, rqst *OpenTxnRequest) (r *OpenTxnsResponse, err error) {
  var _args475 ThriftHiveMetastoreOpenTxnsArgs
  _args475.Rqst = rqst
  var _result476 ThriftHiveMetastoreOpenTxnsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "open_txns", &_args475, &_result476)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result476.GetSuccess(), nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) AbortTxn(ctx context.Context, rqst *AbortTxnRequest) (err error) {
  var _args477 ThriftHiveMetastoreAbortTxnArgs
  _args477.Rqst = rqst
  var _result478 ThriftHiveMetastoreAbortTxnResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "abort_txn", &_args477, &_result478)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result478.O1!= nil:
    return _result478.O1
  }

  return nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) AbortTxns(ctx context.Context, rqst *AbortTxnsRequest) (err error) {
  var _args479 ThriftHiveMetastoreAbortTxnsArgs
  _args479.Rqst = rqst
  var _result480 ThriftHiveMetastoreAbortTxnsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "abort_txns", &_args479, &_result480)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result480.O1!= nil:
    return _result480.O1
  }

  return nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) CommitTxn(ctx context.Context, rqst *CommitTxnRequest) (err error) {
  var _args481 ThriftHiveMetastoreCommitTxnArgs
  _args481.Rqst = rqst
  var _result482 ThriftHiveMetastoreCommitTxnResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "commit_txn", &_args481, &_result482)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result482.O1!= nil:
    return _result482.O1
  case _result482.O2!= nil:
    return _result482.O2
  }

  return nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) Lock(ctx context.Context, rqst *LockRequest) (r *LockResponse, err error) {
  var _args483 ThriftHiveMetastoreLockArgs
  _args483.Rqst = rqst
  var _result484 ThriftHiveMetastoreLockResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "lock", &_args483, &_result484)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result484.O1!= nil:
    return r, _result484.O1
  case _result484.O2!= nil:
    return r, _result484.O2
  }

  return _result484.GetSuccess(), nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) CheckLock(ctx context.Context, rqst *CheckLockRequest) (r *LockResponse, err error) {
  var _args485 ThriftHiveMetastoreCheckLockArgs
  _args485.Rqst = rqst
  var _result486 ThriftHiveMetastoreCheckLockResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "check_lock", &_args485, &_result486)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result486.O1!= nil:
    return r, _result486.O1
  case _result486.O2!= nil:
    return r, _result486.O2
  case _result486.O3!= nil:
    return r, _result486.O3
  }

  return _result486.GetSuccess(), nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) Unlock(ctx context.Context, rqst *UnlockRequest) (err error) {
  var _args487 ThriftHiveMetastoreUnlockArgs
  _args487.Rqst = rqst
  var _result488 ThriftHiveMetastoreUnlockResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "unlock", &_args487, &_result488)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result488.O1!= nil:
    return _result488.O1
  case _result488.O2!= nil:
    return _result488.O2
  }

  return nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) ShowLocks(ctx context.Context, rqst *ShowLocksRequest) (r *ShowLocksResponse, err error) {
  var _args489 ThriftHiveMetastoreShowLocksArgs
  _args489.Rqst = rqst
  var _result490 ThriftHiveMetastoreShowLocksResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "show_locks", &_args489, &_result490)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result490.GetSuccess(), nil
}

// Parameters:
//  - Ids
func (p *ThriftHiveMetastoreClient) Heartbeat(ctx context.Context, ids *HeartbeatRequest) (err error) {
  var _args491 ThriftHiveMetastoreHeartbeatArgs
  _args491.Ids = ids
  var _result492 ThriftHiveMetastoreHeartbeatResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "heartbeat", &_args491, &_result492)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result492.O1!= nil:
    return _result492.O1
  case _result492.O2!= nil:
    return _result492.O2
  case _result492.O3!= nil:
    return _result492.O3
  }

  return nil
}

// Parameters:
//  - Txns
func (p *ThriftHiveMetastoreClient) HeartbeatTxnRange(ctx context.Context, txns *HeartbeatTxnRangeRequest) (r *HeartbeatTxnRangeResponse, err error) {
  var _args493 ThriftHiveMetastoreHeartbeatTxnRangeArgs
  _args493.Txns = txns
  var _result494 ThriftHiveMetastoreHeartbeatTxnRangeResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "heartbeat_txn_range", &_args493, &_result494)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result494.GetSuccess(), nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) Compact(ctx context.Context, rqst *CompactionRequest) (err error) {
  var _args495 ThriftHiveMetastoreCompactArgs
  _args495.Rqst = rqst
  var _result496 ThriftHiveMetastoreCompactResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "compact", &_args495, &_result496)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) Compact2(ctx context.Context, rqst *CompactionRequest) (r *CompactionResponse, err error) {
  var _args497 ThriftHiveMetastoreCompact2Args
  _args497.Rqst = rqst
  var _result498 ThriftHiveMetastoreCompact2Result
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "compact2", &_args497, &_result498)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result498.GetSuccess(), nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) ShowCompact(ctx context.Context, rqst *ShowCompactRequest) (r *ShowCompactResponse, err error) {
  var _args499 ThriftHiveMetastoreShowCompactArgs
  _args499.Rqst = rqst
  var _result500 ThriftHiveMetastoreShowCompactResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "show_compact", &_args499, &_result500)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result500.GetSuccess(), nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) AddDynamicPartitions(ctx context.Context, rqst *AddDynamicPartitions) (err error) {
  var _args501 ThriftHiveMetastoreAddDynamicPartitionsArgs
  _args501.Rqst = rqst
  var _result502 ThriftHiveMetastoreAddDynamicPartitionsResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "add_dynamic_partitions", &_args501, &_result502)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result502.O1!= nil:
    return _result502.O1
  case _result502.O2!= nil:
    return _result502.O2
  }

  return nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) GetNextNotification(ctx context.Context, rqst *NotificationEventRequest) (r *NotificationEventResponse, err error) {
  var _args503 ThriftHiveMetastoreGetNextNotificationArgs
  _args503.Rqst = rqst
  var _result504 ThriftHiveMetastoreGetNextNotificationResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_next_notification", &_args503, &_result504)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result504.GetSuccess(), nil
}

func (p *ThriftHiveMetastoreClient) GetCurrentNotificationEventId(ctx context.Context) (r *CurrentNotificationEventId, err error) {
  var _args505 ThriftHiveMetastoreGetCurrentNotificationEventIdArgs
  var _result506 ThriftHiveMetastoreGetCurrentNotificationEventIdResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_current_notificationEventId", &_args505, &_result506)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result506.GetSuccess(), nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) GetNotificationEventsCount(ctx context.Context, rqst *NotificationEventsCountRequest) (r *NotificationEventsCountResponse, err error) {
  var _args507 ThriftHiveMetastoreGetNotificationEventsCountArgs
  _args507.Rqst = rqst
  var _result508 ThriftHiveMetastoreGetNotificationEventsCountResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_notification_events_count", &_args507, &_result508)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result508.GetSuccess(), nil
}

// Parameters:
//  - Rqst
func (p *ThriftHiveMetastoreClient) FireListenerEvent(ctx context.Context, rqst *FireEventRequest) (r *FireEventResponse, err error) {
  var _args509 ThriftHiveMetastoreFireListenerEventArgs
  _args509.Rqst = rqst
  var _result510 ThriftHiveMetastoreFireListenerEventResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "fire_listener_event", &_args509, &_result510)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result510.GetSuccess(), nil
}

func (p *ThriftHiveMetastoreClient) FlushCache(ctx context.Context) (err error) {
  var _args511 ThriftHiveMetastoreFlushCacheArgs
  var _result512 ThriftHiveMetastoreFlushCacheResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "flushCache", &_args511, &_result512)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) CmRecycle(ctx context.Context, request *CmRecycleRequest) (r *CmRecycleResponse, err error) {
  var _args513 ThriftHiveMetastoreCmRecycleArgs
  _args513.Request = request
  var _result514 ThriftHiveMetastoreCmRecycleResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "cm_recycle", &_args513, &_result514)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result514.O1!= nil:
    return r, _result514.O1
  }

  return _result514.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) GetFileMetadataByExpr(ctx context.Context, req *GetFileMetadataByExprRequest) (r *GetFileMetadataByExprResult_, err error) {
  var _args515 ThriftHiveMetastoreGetFileMetadataByExprArgs
  _args515.Req = req
  var _result516 ThriftHiveMetastoreGetFileMetadataByExprResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_file_metadata_by_expr", &_args515, &_result516)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result516.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) GetFileMetadata(ctx context.Context, req *GetFileMetadataRequest) (r *GetFileMetadataResult_, err error) {
  var _args517 ThriftHiveMetastoreGetFileMetadataArgs
  _args517.Req = req
  var _result518 ThriftHiveMetastoreGetFileMetadataResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_file_metadata", &_args517, &_result518)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result518.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) PutFileMetadata(ctx context.Context, req *PutFileMetadataRequest) (r *PutFileMetadataResult_, err error) {
  var _args519 ThriftHiveMetastorePutFileMetadataArgs
  _args519.Req = req
  var _result520 ThriftHiveMetastorePutFileMetadataResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "put_file_metadata", &_args519, &_result520)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result520.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) ClearFileMetadata(ctx context.Context, req *ClearFileMetadataRequest) (r *ClearFileMetadataResult_, err error) {
  var _args521 ThriftHiveMetastoreClearFileMetadataArgs
  _args521.Req = req
  var _result522 ThriftHiveMetastoreClearFileMetadataResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "clear_file_metadata", &_args521, &_result522)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result522.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ThriftHiveMetastoreClient) CacheFileMetadata(ctx context.Context, req *CacheFileMetadataRequest) (r *CacheFileMetadataResult_, err error) {
  var _args523 ThriftHiveMetastoreCacheFileMetadataArgs
  _args523.Req = req
  var _result524 ThriftHiveMetastoreCacheFileMetadataResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "cache_file_metadata", &_args523, &_result524)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result524.GetSuccess(), nil
}

func (p *ThriftHiveMetastoreClient) GetMetastoreDbUUID(ctx context.Context) (r string, err error) {
  var _args525 ThriftHiveMetastoreGetMetastoreDbUUIDArgs
  var _result526 ThriftHiveMetastoreGetMetastoreDbUUIDResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_metastore_db_uuid", &_args525, &_result526)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result526.O1!= nil:
    return r, _result526.O1
  }

  return _result526.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) CreateResourcePlan(ctx context.Context, request *WMCreateResourcePlanRequest) (r *WMCreateResourcePlanResponse, err error) {
  var _args527 ThriftHiveMetastoreCreateResourcePlanArgs
  _args527.Request = request
  var _result528 ThriftHiveMetastoreCreateResourcePlanResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "create_resource_plan", &_args527, &_result528)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result528.O1!= nil:
    return r, _result528.O1
  case _result528.O2!= nil:
    return r, _result528.O2
  case _result528.O3!= nil:
    return r, _result528.O3
  }

  return _result528.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetResourcePlan(ctx context.Context, request *WMGetResourcePlanRequest) (r *WMGetResourcePlanResponse, err error) {
  var _args529 ThriftHiveMetastoreGetResourcePlanArgs
  _args529.Request = request
  var _result530 ThriftHiveMetastoreGetResourcePlanResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_resource_plan", &_args529, &_result530)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result530.O1!= nil:
    return r, _result530.O1
  case _result530.O2!= nil:
    return r, _result530.O2
  }

  return _result530.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetActiveResourcePlan(ctx context.Context, request *WMGetActiveResourcePlanRequest) (r *WMGetActiveResourcePlanResponse, err error) {
  var _args531 ThriftHiveMetastoreGetActiveResourcePlanArgs
  _args531.Request = request
  var _result532 ThriftHiveMetastoreGetActiveResourcePlanResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_active_resource_plan", &_args531, &_result532)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result532.O2!= nil:
    return r, _result532.O2
  }

  return _result532.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetAllResourcePlans(ctx context.Context, request *WMGetAllResourcePlanRequest) (r *WMGetAllResourcePlanResponse, err error) {
  var _args533 ThriftHiveMetastoreGetAllResourcePlansArgs
  _args533.Request = request
  var _result534 ThriftHiveMetastoreGetAllResourcePlansResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_all_resource_plans", &_args533, &_result534)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result534.O1!= nil:
    return r, _result534.O1
  }

  return _result534.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) AlterResourcePlan(ctx context.Context, request *WMAlterResourcePlanRequest) (r *WMAlterResourcePlanResponse, err error) {
  var _args535 ThriftHiveMetastoreAlterResourcePlanArgs
  _args535.Request = request
  var _result536 ThriftHiveMetastoreAlterResourcePlanResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "alter_resource_plan", &_args535, &_result536)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result536.O1!= nil:
    return r, _result536.O1
  case _result536.O2!= nil:
    return r, _result536.O2
  case _result536.O3!= nil:
    return r, _result536.O3
  }

  return _result536.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) ValidateResourcePlan(ctx context.Context, request *WMValidateResourcePlanRequest) (r *WMValidateResourcePlanResponse, err error) {
  var _args537 ThriftHiveMetastoreValidateResourcePlanArgs
  _args537.Request = request
  var _result538 ThriftHiveMetastoreValidateResourcePlanResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "validate_resource_plan", &_args537, &_result538)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result538.O1!= nil:
    return r, _result538.O1
  case _result538.O2!= nil:
    return r, _result538.O2
  }

  return _result538.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) DropResourcePlan(ctx context.Context, request *WMDropResourcePlanRequest) (r *WMDropResourcePlanResponse, err error) {
  var _args539 ThriftHiveMetastoreDropResourcePlanArgs
  _args539.Request = request
  var _result540 ThriftHiveMetastoreDropResourcePlanResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_resource_plan", &_args539, &_result540)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result540.O1!= nil:
    return r, _result540.O1
  case _result540.O2!= nil:
    return r, _result540.O2
  case _result540.O3!= nil:
    return r, _result540.O3
  }

  return _result540.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) CreateWmTrigger(ctx context.Context, request *WMCreateTriggerRequest) (r *WMCreateTriggerResponse, err error) {
  var _args541 ThriftHiveMetastoreCreateWmTriggerArgs
  _args541.Request = request
  var _result542 ThriftHiveMetastoreCreateWmTriggerResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "create_wm_trigger", &_args541, &_result542)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result542.O1!= nil:
    return r, _result542.O1
  case _result542.O2!= nil:
    return r, _result542.O2
  case _result542.O3!= nil:
    return r, _result542.O3
  case _result542.O4!= nil:
    return r, _result542.O4
  }

  return _result542.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) AlterWmTrigger(ctx context.Context, request *WMAlterTriggerRequest) (r *WMAlterTriggerResponse, err error) {
  var _args543 ThriftHiveMetastoreAlterWmTriggerArgs
  _args543.Request = request
  var _result544 ThriftHiveMetastoreAlterWmTriggerResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "alter_wm_trigger", &_args543, &_result544)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result544.O1!= nil:
    return r, _result544.O1
  case _result544.O2!= nil:
    return r, _result544.O2
  case _result544.O3!= nil:
    return r, _result544.O3
  }

  return _result544.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) DropWmTrigger(ctx context.Context, request *WMDropTriggerRequest) (r *WMDropTriggerResponse, err error) {
  var _args545 ThriftHiveMetastoreDropWmTriggerArgs
  _args545.Request = request
  var _result546 ThriftHiveMetastoreDropWmTriggerResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "drop_wm_trigger", &_args545, &_result546)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result546.O1!= nil:
    return r, _result546.O1
  case _result546.O2!= nil:
    return r, _result546.O2
  case _result546.O3!= nil:
    return r, _result546.O3
  }

  return _result546.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ThriftHiveMetastoreClient) GetTriggersForResourceplan(ctx context.Context, request *WMGetTriggersForResourePlanRequest) (r *WMGetTriggersForResourePlanResponse, err error) {
  var _args547 ThriftHiveMetastoreGetTriggersForResourceplanArgs
  _args547.Request = request
  var _result548 ThriftHiveMetastoreGetTriggersForResourceplanResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "get_triggers_for_resourceplan", &_args547, &_result548)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  switch {
  case _result548.O1!= nil:
    return r, _result548.O1
  case _result548.O2!= nil:
    return r, _result548.O2
  }

  return _result548.GetSuccess(), nil
}

type ThriftHiveMetastoreProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ThriftHiveMetastore
}

func (p *ThriftHiveMetastoreProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ThriftHiveMetastoreProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ThriftHiveMetastoreProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewThriftHiveMetastoreProcessor(handler ThriftHiveMetastore) *ThriftHiveMetastoreProcessor {

  self549 := &ThriftHiveMetastoreProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self549.processorMap["getMetaConf"] = &thriftHiveMetastoreProcessorGetMetaConf{handler:handler}
  self549.processorMap["setMetaConf"] = &thriftHiveMetastoreProcessorSetMetaConf{handler:handler}
  self549.processorMap["create_database"] = &thriftHiveMetastoreProcessorCreateDatabase{handler:handler}
  self549.processorMap["get_database"] = &thriftHiveMetastoreProcessorGetDatabase{handler:handler}
  self549.processorMap["drop_database"] = &thriftHiveMetastoreProcessorDropDatabase{handler:handler}
  self549.processorMap["get_databases"] = &thriftHiveMetastoreProcessorGetDatabases{handler:handler}
  self549.processorMap["get_all_databases"] = &thriftHiveMetastoreProcessorGetAllDatabases{handler:handler}
  self549.processorMap["alter_database"] = &thriftHiveMetastoreProcessorAlterDatabase{handler:handler}
  self549.processorMap["get_type"] = &thriftHiveMetastoreProcessorGetType{handler:handler}
  self549.processorMap["create_type"] = &thriftHiveMetastoreProcessorCreateType{handler:handler}
  self549.processorMap["drop_type"] = &thriftHiveMetastoreProcessorDropType{handler:handler}
  self549.processorMap["get_type_all"] = &thriftHiveMetastoreProcessorGetTypeAll{handler:handler}
  self549.processorMap["get_fields"] = &thriftHiveMetastoreProcessorGetFields{handler:handler}
  self549.processorMap["get_fields_with_environment_context"] = &thriftHiveMetastoreProcessorGetFieldsWithEnvironmentContext{handler:handler}
  self549.processorMap["get_schema"] = &thriftHiveMetastoreProcessorGetSchema{handler:handler}
  self549.processorMap["get_schema_with_environment_context"] = &thriftHiveMetastoreProcessorGetSchemaWithEnvironmentContext{handler:handler}
  self549.processorMap["create_table"] = &thriftHiveMetastoreProcessorCreateTable{handler:handler}
  self549.processorMap["create_table_with_environment_context"] = &thriftHiveMetastoreProcessorCreateTableWithEnvironmentContext{handler:handler}
  self549.processorMap["create_table_with_constraints"] = &thriftHiveMetastoreProcessorCreateTableWithConstraints{handler:handler}
  self549.processorMap["drop_constraint"] = &thriftHiveMetastoreProcessorDropConstraint{handler:handler}
  self549.processorMap["add_primary_key"] = &thriftHiveMetastoreProcessorAddPrimaryKey{handler:handler}
  self549.processorMap["add_foreign_key"] = &thriftHiveMetastoreProcessorAddForeignKey{handler:handler}
  self549.processorMap["add_unique_constraint"] = &thriftHiveMetastoreProcessorAddUniqueConstraint{handler:handler}
  self549.processorMap["add_not_null_constraint"] = &thriftHiveMetastoreProcessorAddNotNullConstraint{handler:handler}
  self549.processorMap["drop_table"] = &thriftHiveMetastoreProcessorDropTable{handler:handler}
  self549.processorMap["drop_table_with_environment_context"] = &thriftHiveMetastoreProcessorDropTableWithEnvironmentContext{handler:handler}
  self549.processorMap["truncate_table"] = &thriftHiveMetastoreProcessorTruncateTable{handler:handler}
  self549.processorMap["get_tables"] = &thriftHiveMetastoreProcessorGetTables{handler:handler}
  self549.processorMap["get_tables_by_type"] = &thriftHiveMetastoreProcessorGetTablesByType{handler:handler}
  self549.processorMap["get_table_meta"] = &thriftHiveMetastoreProcessorGetTableMeta{handler:handler}
  self549.processorMap["get_all_tables"] = &thriftHiveMetastoreProcessorGetAllTables{handler:handler}
  self549.processorMap["get_table"] = &thriftHiveMetastoreProcessorGetTable{handler:handler}
  self549.processorMap["get_table_objects_by_name"] = &thriftHiveMetastoreProcessorGetTableObjectsByName{handler:handler}
  self549.processorMap["get_table_req"] = &thriftHiveMetastoreProcessorGetTableReq{handler:handler}
  self549.processorMap["get_table_objects_by_name_req"] = &thriftHiveMetastoreProcessorGetTableObjectsByNameReq{handler:handler}
  self549.processorMap["get_table_names_by_filter"] = &thriftHiveMetastoreProcessorGetTableNamesByFilter{handler:handler}
  self549.processorMap["alter_table"] = &thriftHiveMetastoreProcessorAlterTable{handler:handler}
  self549.processorMap["alter_table_with_environment_context"] = &thriftHiveMetastoreProcessorAlterTableWithEnvironmentContext{handler:handler}
  self549.processorMap["alter_table_with_cascade"] = &thriftHiveMetastoreProcessorAlterTableWithCascade{handler:handler}
  self549.processorMap["add_partition"] = &thriftHiveMetastoreProcessorAddPartition{handler:handler}
  self549.processorMap["add_partition_with_environment_context"] = &thriftHiveMetastoreProcessorAddPartitionWithEnvironmentContext{handler:handler}
  self549.processorMap["add_partitions"] = &thriftHiveMetastoreProcessorAddPartitions{handler:handler}
  self549.processorMap["add_partitions_pspec"] = &thriftHiveMetastoreProcessorAddPartitionsPspec{handler:handler}
  self549.processorMap["append_partition"] = &thriftHiveMetastoreProcessorAppendPartition{handler:handler}
  self549.processorMap["add_partitions_req"] = &thriftHiveMetastoreProcessorAddPartitionsReq{handler:handler}
  self549.processorMap["append_partition_with_environment_context"] = &thriftHiveMetastoreProcessorAppendPartitionWithEnvironmentContext{handler:handler}
  self549.processorMap["append_partition_by_name"] = &thriftHiveMetastoreProcessorAppendPartitionByName{handler:handler}
  self549.processorMap["append_partition_by_name_with_environment_context"] = &thriftHiveMetastoreProcessorAppendPartitionByNameWithEnvironmentContext{handler:handler}
  self549.processorMap["drop_partition"] = &thriftHiveMetastoreProcessorDropPartition{handler:handler}
  self549.processorMap["drop_partition_with_environment_context"] = &thriftHiveMetastoreProcessorDropPartitionWithEnvironmentContext{handler:handler}
  self549.processorMap["drop_partition_by_name"] = &thriftHiveMetastoreProcessorDropPartitionByName{handler:handler}
  self549.processorMap["drop_partition_by_name_with_environment_context"] = &thriftHiveMetastoreProcessorDropPartitionByNameWithEnvironmentContext{handler:handler}
  self549.processorMap["drop_partitions_req"] = &thriftHiveMetastoreProcessorDropPartitionsReq{handler:handler}
  self549.processorMap["get_partition"] = &thriftHiveMetastoreProcessorGetPartition{handler:handler}
  self549.processorMap["exchange_partition"] = &thriftHiveMetastoreProcessorExchangePartition{handler:handler}
  self549.processorMap["exchange_partitions"] = &thriftHiveMetastoreProcessorExchangePartitions{handler:handler}
  self549.processorMap["get_partition_with_auth"] = &thriftHiveMetastoreProcessorGetPartitionWithAuth{handler:handler}
  self549.processorMap["get_partition_by_name"] = &thriftHiveMetastoreProcessorGetPartitionByName{handler:handler}
  self549.processorMap["get_partitions"] = &thriftHiveMetastoreProcessorGetPartitions{handler:handler}
  self549.processorMap["get_partitions_with_auth"] = &thriftHiveMetastoreProcessorGetPartitionsWithAuth{handler:handler}
  self549.processorMap["get_partitions_pspec"] = &thriftHiveMetastoreProcessorGetPartitionsPspec{handler:handler}
  self549.processorMap["get_partition_names"] = &thriftHiveMetastoreProcessorGetPartitionNames{handler:handler}
  self549.processorMap["get_partition_values"] = &thriftHiveMetastoreProcessorGetPartitionValues{handler:handler}
  self549.processorMap["get_partitions_ps"] = &thriftHiveMetastoreProcessorGetPartitionsPs{handler:handler}
  self549.processorMap["get_partitions_ps_with_auth"] = &thriftHiveMetastoreProcessorGetPartitionsPsWithAuth{handler:handler}
  self549.processorMap["get_partition_names_ps"] = &thriftHiveMetastoreProcessorGetPartitionNamesPs{handler:handler}
  self549.processorMap["get_partitions_by_filter"] = &thriftHiveMetastoreProcessorGetPartitionsByFilter{handler:handler}
  self549.processorMap["get_part_specs_by_filter"] = &thriftHiveMetastoreProcessorGetPartSpecsByFilter{handler:handler}
  self549.processorMap["get_partitions_by_expr"] = &thriftHiveMetastoreProcessorGetPartitionsByExpr{handler:handler}
  self549.processorMap["get_num_partitions_by_filter"] = &thriftHiveMetastoreProcessorGetNumPartitionsByFilter{handler:handler}
  self549.processorMap["get_partitions_by_names"] = &thriftHiveMetastoreProcessorGetPartitionsByNames{handler:handler}
  self549.processorMap["alter_partition"] = &thriftHiveMetastoreProcessorAlterPartition{handler:handler}
  self549.processorMap["alter_partitions"] = &thriftHiveMetastoreProcessorAlterPartitions{handler:handler}
  self549.processorMap["alter_partitions_with_environment_context"] = &thriftHiveMetastoreProcessorAlterPartitionsWithEnvironmentContext{handler:handler}
  self549.processorMap["alter_partition_with_environment_context"] = &thriftHiveMetastoreProcessorAlterPartitionWithEnvironmentContext{handler:handler}
  self549.processorMap["rename_partition"] = &thriftHiveMetastoreProcessorRenamePartition{handler:handler}
  self549.processorMap["partition_name_has_valid_characters"] = &thriftHiveMetastoreProcessorPartitionNameHasValidCharacters{handler:handler}
  self549.processorMap["get_config_value"] = &thriftHiveMetastoreProcessorGetConfigValue{handler:handler}
  self549.processorMap["partition_name_to_vals"] = &thriftHiveMetastoreProcessorPartitionNameToVals{handler:handler}
  self549.processorMap["partition_name_to_spec"] = &thriftHiveMetastoreProcessorPartitionNameToSpec{handler:handler}
  self549.processorMap["markPartitionForEvent"] = &thriftHiveMetastoreProcessorMarkPartitionForEvent{handler:handler}
  self549.processorMap["isPartitionMarkedForEvent"] = &thriftHiveMetastoreProcessorIsPartitionMarkedForEvent{handler:handler}
  self549.processorMap["add_index"] = &thriftHiveMetastoreProcessorAddIndex{handler:handler}
  self549.processorMap["alter_index"] = &thriftHiveMetastoreProcessorAlterIndex{handler:handler}
  self549.processorMap["drop_index_by_name"] = &thriftHiveMetastoreProcessorDropIndexByName{handler:handler}
  self549.processorMap["get_index_by_name"] = &thriftHiveMetastoreProcessorGetIndexByName{handler:handler}
  self549.processorMap["get_indexes"] = &thriftHiveMetastoreProcessorGetIndexes{handler:handler}
  self549.processorMap["get_index_names"] = &thriftHiveMetastoreProcessorGetIndexNames{handler:handler}
  self549.processorMap["get_primary_keys"] = &thriftHiveMetastoreProcessorGetPrimaryKeys{handler:handler}
  self549.processorMap["get_foreign_keys"] = &thriftHiveMetastoreProcessorGetForeignKeys{handler:handler}
  self549.processorMap["get_unique_constraints"] = &thriftHiveMetastoreProcessorGetUniqueConstraints{handler:handler}
  self549.processorMap["get_not_null_constraints"] = &thriftHiveMetastoreProcessorGetNotNullConstraints{handler:handler}
  self549.processorMap["update_table_column_statistics"] = &thriftHiveMetastoreProcessorUpdateTableColumnStatistics{handler:handler}
  self549.processorMap["update_partition_column_statistics"] = &thriftHiveMetastoreProcessorUpdatePartitionColumnStatistics{handler:handler}
  self549.processorMap["get_table_column_statistics"] = &thriftHiveMetastoreProcessorGetTableColumnStatistics{handler:handler}
  self549.processorMap["get_partition_column_statistics"] = &thriftHiveMetastoreProcessorGetPartitionColumnStatistics{handler:handler}
  self549.processorMap["get_table_statistics_req"] = &thriftHiveMetastoreProcessorGetTableStatisticsReq{handler:handler}
  self549.processorMap["get_partitions_statistics_req"] = &thriftHiveMetastoreProcessorGetPartitionsStatisticsReq{handler:handler}
  self549.processorMap["get_aggr_stats_for"] = &thriftHiveMetastoreProcessorGetAggrStatsFor{handler:handler}
  self549.processorMap["set_aggr_stats_for"] = &thriftHiveMetastoreProcessorSetAggrStatsFor{handler:handler}
  self549.processorMap["delete_partition_column_statistics"] = &thriftHiveMetastoreProcessorDeletePartitionColumnStatistics{handler:handler}
  self549.processorMap["delete_table_column_statistics"] = &thriftHiveMetastoreProcessorDeleteTableColumnStatistics{handler:handler}
  self549.processorMap["create_function"] = &thriftHiveMetastoreProcessorCreateFunction{handler:handler}
  self549.processorMap["drop_function"] = &thriftHiveMetastoreProcessorDropFunction{handler:handler}
  self549.processorMap["alter_function"] = &thriftHiveMetastoreProcessorAlterFunction{handler:handler}
  self549.processorMap["get_functions"] = &thriftHiveMetastoreProcessorGetFunctions{handler:handler}
  self549.processorMap["get_function"] = &thriftHiveMetastoreProcessorGetFunction{handler:handler}
  self549.processorMap["get_all_functions"] = &thriftHiveMetastoreProcessorGetAllFunctions{handler:handler}
  self549.processorMap["create_role"] = &thriftHiveMetastoreProcessorCreateRole{handler:handler}
  self549.processorMap["drop_role"] = &thriftHiveMetastoreProcessorDropRole{handler:handler}
  self549.processorMap["get_role_names"] = &thriftHiveMetastoreProcessorGetRoleNames{handler:handler}
  self549.processorMap["grant_role"] = &thriftHiveMetastoreProcessorGrantRole{handler:handler}
  self549.processorMap["revoke_role"] = &thriftHiveMetastoreProcessorRevokeRole{handler:handler}
  self549.processorMap["list_roles"] = &thriftHiveMetastoreProcessorListRoles{handler:handler}
  self549.processorMap["grant_revoke_role"] = &thriftHiveMetastoreProcessorGrantRevokeRole{handler:handler}
  self549.processorMap["get_principals_in_role"] = &thriftHiveMetastoreProcessorGetPrincipalsInRole{handler:handler}
  self549.processorMap["get_role_grants_for_principal"] = &thriftHiveMetastoreProcessorGetRoleGrantsForPrincipal{handler:handler}
  self549.processorMap["get_privilege_set"] = &thriftHiveMetastoreProcessorGetPrivilegeSet{handler:handler}
  self549.processorMap["list_privileges"] = &thriftHiveMetastoreProcessorListPrivileges{handler:handler}
  self549.processorMap["grant_privileges"] = &thriftHiveMetastoreProcessorGrantPrivileges{handler:handler}
  self549.processorMap["revoke_privileges"] = &thriftHiveMetastoreProcessorRevokePrivileges{handler:handler}
  self549.processorMap["grant_revoke_privileges"] = &thriftHiveMetastoreProcessorGrantRevokePrivileges{handler:handler}
  self549.processorMap["set_ugi"] = &thriftHiveMetastoreProcessorSetUgi{handler:handler}
  self549.processorMap["get_delegation_token"] = &thriftHiveMetastoreProcessorGetDelegationToken{handler:handler}
  self549.processorMap["renew_delegation_token"] = &thriftHiveMetastoreProcessorRenewDelegationToken{handler:handler}
  self549.processorMap["cancel_delegation_token"] = &thriftHiveMetastoreProcessorCancelDelegationToken{handler:handler}
  self549.processorMap["add_token"] = &thriftHiveMetastoreProcessorAddToken{handler:handler}
  self549.processorMap["remove_token"] = &thriftHiveMetastoreProcessorRemoveToken{handler:handler}
  self549.processorMap["get_token"] = &thriftHiveMetastoreProcessorGetToken{handler:handler}
  self549.processorMap["get_all_token_identifiers"] = &thriftHiveMetastoreProcessorGetAllTokenIdentifiers{handler:handler}
  self549.processorMap["add_master_key"] = &thriftHiveMetastoreProcessorAddMasterKey{handler:handler}
  self549.processorMap["update_master_key"] = &thriftHiveMetastoreProcessorUpdateMasterKey{handler:handler}
  self549.processorMap["remove_master_key"] = &thriftHiveMetastoreProcessorRemoveMasterKey{handler:handler}
  self549.processorMap["get_master_keys"] = &thriftHiveMetastoreProcessorGetMasterKeys{handler:handler}
  self549.processorMap["get_open_txns"] = &thriftHiveMetastoreProcessorGetOpenTxns{handler:handler}
  self549.processorMap["get_open_txns_info"] = &thriftHiveMetastoreProcessorGetOpenTxnsInfo{handler:handler}
  self549.processorMap["open_txns"] = &thriftHiveMetastoreProcessorOpenTxns{handler:handler}
  self549.processorMap["abort_txn"] = &thriftHiveMetastoreProcessorAbortTxn{handler:handler}
  self549.processorMap["abort_txns"] = &thriftHiveMetastoreProcessorAbortTxns{handler:handler}
  self549.processorMap["commit_txn"] = &thriftHiveMetastoreProcessorCommitTxn{handler:handler}
  self549.processorMap["lock"] = &thriftHiveMetastoreProcessorLock{handler:handler}
  self549.processorMap["check_lock"] = &thriftHiveMetastoreProcessorCheckLock{handler:handler}
  self549.processorMap["unlock"] = &thriftHiveMetastoreProcessorUnlock{handler:handler}
  self549.processorMap["show_locks"] = &thriftHiveMetastoreProcessorShowLocks{handler:handler}
  self549.processorMap["heartbeat"] = &thriftHiveMetastoreProcessorHeartbeat{handler:handler}
  self549.processorMap["heartbeat_txn_range"] = &thriftHiveMetastoreProcessorHeartbeatTxnRange{handler:handler}
  self549.processorMap["compact"] = &thriftHiveMetastoreProcessorCompact{handler:handler}
  self549.processorMap["compact2"] = &thriftHiveMetastoreProcessorCompact2{handler:handler}
  self549.processorMap["show_compact"] = &thriftHiveMetastoreProcessorShowCompact{handler:handler}
  self549.processorMap["add_dynamic_partitions"] = &thriftHiveMetastoreProcessorAddDynamicPartitions{handler:handler}
  self549.processorMap["get_next_notification"] = &thriftHiveMetastoreProcessorGetNextNotification{handler:handler}
  self549.processorMap["get_current_notificationEventId"] = &thriftHiveMetastoreProcessorGetCurrentNotificationEventId{handler:handler}
  self549.processorMap["get_notification_events_count"] = &thriftHiveMetastoreProcessorGetNotificationEventsCount{handler:handler}
  self549.processorMap["fire_listener_event"] = &thriftHiveMetastoreProcessorFireListenerEvent{handler:handler}
  self549.processorMap["flushCache"] = &thriftHiveMetastoreProcessorFlushCache{handler:handler}
  self549.processorMap["cm_recycle"] = &thriftHiveMetastoreProcessorCmRecycle{handler:handler}
  self549.processorMap["get_file_metadata_by_expr"] = &thriftHiveMetastoreProcessorGetFileMetadataByExpr{handler:handler}
  self549.processorMap["get_file_metadata"] = &thriftHiveMetastoreProcessorGetFileMetadata{handler:handler}
  self549.processorMap["put_file_metadata"] = &thriftHiveMetastoreProcessorPutFileMetadata{handler:handler}
  self549.processorMap["clear_file_metadata"] = &thriftHiveMetastoreProcessorClearFileMetadata{handler:handler}
  self549.processorMap["cache_file_metadata"] = &thriftHiveMetastoreProcessorCacheFileMetadata{handler:handler}
  self549.processorMap["get_metastore_db_uuid"] = &thriftHiveMetastoreProcessorGetMetastoreDbUUID{handler:handler}
  self549.processorMap["create_resource_plan"] = &thriftHiveMetastoreProcessorCreateResourcePlan{handler:handler}
  self549.processorMap["get_resource_plan"] = &thriftHiveMetastoreProcessorGetResourcePlan{handler:handler}
  self549.processorMap["get_active_resource_plan"] = &thriftHiveMetastoreProcessorGetActiveResourcePlan{handler:handler}
  self549.processorMap["get_all_resource_plans"] = &thriftHiveMetastoreProcessorGetAllResourcePlans{handler:handler}
  self549.processorMap["alter_resource_plan"] = &thriftHiveMetastoreProcessorAlterResourcePlan{handler:handler}
  self549.processorMap["validate_resource_plan"] = &thriftHiveMetastoreProcessorValidateResourcePlan{handler:handler}
  self549.processorMap["drop_resource_plan"] = &thriftHiveMetastoreProcessorDropResourcePlan{handler:handler}
  self549.processorMap["create_wm_trigger"] = &thriftHiveMetastoreProcessorCreateWmTrigger{handler:handler}
  self549.processorMap["alter_wm_trigger"] = &thriftHiveMetastoreProcessorAlterWmTrigger{handler:handler}
  self549.processorMap["drop_wm_trigger"] = &thriftHiveMetastoreProcessorDropWmTrigger{handler:handler}
  self549.processorMap["get_triggers_for_resourceplan"] = &thriftHiveMetastoreProcessorGetTriggersForResourceplan{handler:handler}
return self549
}

func (p *ThriftHiveMetastoreProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x550 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x550.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x550

}

type thriftHiveMetastoreProcessorGetMetaConf struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetMetaConf) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetMetaConfArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getMetaConf", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetMetaConfResult{}
  var retval string
  if retval, err2 = p.handler.GetMetaConf(ctx, args.Key); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMetaConf: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getMetaConf", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getMetaConf", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorSetMetaConf struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorSetMetaConf) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreSetMetaConfArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "setMetaConf", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreSetMetaConfResult{}
  if err2 = p.handler.SetMetaConf(ctx, args.Key, args.Value); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setMetaConf: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "setMetaConf", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "setMetaConf", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateDatabase struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateDatabase) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCreateDatabaseArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "create_database", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCreateDatabaseResult{}
  if err2 = p.handler.CreateDatabase(ctx, args.Database); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *AlreadyExistsException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_database: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "create_database", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "create_database", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetDatabase struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDatabase) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetDatabaseArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_database", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetDatabaseResult{}
  var retval *Database
  if retval, err2 = p.handler.GetDatabase(ctx, args.Name); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_database: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_database", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_database", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropDatabase struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropDatabase) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropDatabaseArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_database", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropDatabaseResult{}
  if err2 = p.handler.DropDatabase(ctx, args.Name, args.DeleteData, args.Cascade); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *InvalidOperationException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_database: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_database", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_database", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetDatabases struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDatabases) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetDatabasesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_databases", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetDatabasesResult{}
  var retval []string
  if retval, err2 = p.handler.GetDatabases(ctx, args.Pattern); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_databases: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_databases", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_databases", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetAllDatabases struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllDatabases) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetAllDatabasesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_all_databases", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetAllDatabasesResult{}
  var retval []string
  if retval, err2 = p.handler.GetAllDatabases(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_databases: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_all_databases", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_all_databases", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterDatabase struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterDatabase) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterDatabaseArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_database", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAlterDatabaseResult{}
  if err2 = p.handler.AlterDatabase(ctx, args.Dbname, args.Db); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_database: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_database", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "alter_database", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetType struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTypeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_type", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetTypeResult{}
  var retval *Type
  if retval, err2 = p.handler.GetType(ctx, args.Name); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_type: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_type", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_type", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateType struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCreateTypeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "create_type", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCreateTypeResult{}
  var retval bool
  if retval, err2 = p.handler.CreateType(ctx, args.Type); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *AlreadyExistsException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_type: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "create_type", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "create_type", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropType struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropTypeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_type", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropTypeResult{}
  var retval bool
  if retval, err2 = p.handler.DropType(ctx, args.Type); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_type: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_type", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_type", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTypeAll struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTypeAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTypeAllArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_type_all", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetTypeAllResult{}
  var retval map[string]*Type
  if retval, err2 = p.handler.GetTypeAll(ctx, args.Name); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_type_all: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_type_all", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_type_all", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetFields struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetFields) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetFieldsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_fields", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetFieldsResult{}
  var retval []*FieldSchema
  if retval, err2 = p.handler.GetFields(ctx, args.DbName, args.TableName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *UnknownTableException:
  result.O2 = v
    case *UnknownDBException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_fields: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_fields", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_fields", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetFieldsWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetFieldsWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_fields_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult{}
  var retval []*FieldSchema
  if retval, err2 = p.handler.GetFieldsWithEnvironmentContext(ctx, args.DbName, args.TableName, args.EnvironmentContext); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *UnknownTableException:
  result.O2 = v
    case *UnknownDBException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_fields_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_fields_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_fields_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetSchema struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetSchema) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetSchemaArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_schema", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetSchemaResult{}
  var retval []*FieldSchema
  if retval, err2 = p.handler.GetSchema(ctx, args.DbName, args.TableName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *UnknownTableException:
  result.O2 = v
    case *UnknownDBException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_schema: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_schema", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_schema", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetSchemaWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetSchemaWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_schema_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult{}
  var retval []*FieldSchema
  if retval, err2 = p.handler.GetSchemaWithEnvironmentContext(ctx, args.DbName, args.TableName, args.EnvironmentContext); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *UnknownTableException:
  result.O2 = v
    case *UnknownDBException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_schema_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_schema_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_schema_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateTable struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCreateTableArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "create_table", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCreateTableResult{}
  if err2 = p.handler.CreateTable(ctx, args.Tbl); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *AlreadyExistsException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    case *NoSuchObjectException:
  result.O4 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_table: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "create_table", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "create_table", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateTableWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateTableWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "create_table_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCreateTableWithEnvironmentContextResult{}
  if err2 = p.handler.CreateTableWithEnvironmentContext(ctx, args.Tbl, args.EnvironmentContext); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *AlreadyExistsException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    case *NoSuchObjectException:
  result.O4 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_table_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "create_table_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "create_table_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateTableWithConstraints struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateTableWithConstraints) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCreateTableWithConstraintsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "create_table_with_constraints", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCreateTableWithConstraintsResult{}
  if err2 = p.handler.CreateTableWithConstraints(ctx, args.Tbl, args.PrimaryKeys, args.ForeignKeys, args.UniqueConstraints, args.NotNullConstraints); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *AlreadyExistsException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    case *NoSuchObjectException:
  result.O4 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_table_with_constraints: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "create_table_with_constraints", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "create_table_with_constraints", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropConstraint struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropConstraint) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropConstraintArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_constraint", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropConstraintResult{}
  if err2 = p.handler.DropConstraint(ctx, args.Req); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_constraint: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_constraint", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_constraint", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddPrimaryKey struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPrimaryKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddPrimaryKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_primary_key", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAddPrimaryKeyResult{}
  if err2 = p.handler.AddPrimaryKey(ctx, args.Req); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_primary_key: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "add_primary_key", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "add_primary_key", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddForeignKey struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddForeignKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddForeignKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_foreign_key", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAddForeignKeyResult{}
  if err2 = p.handler.AddForeignKey(ctx, args.Req); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_foreign_key: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "add_foreign_key", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "add_foreign_key", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddUniqueConstraint struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddUniqueConstraint) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddUniqueConstraintArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_unique_constraint", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAddUniqueConstraintResult{}
  if err2 = p.handler.AddUniqueConstraint(ctx, args.Req); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_unique_constraint: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "add_unique_constraint", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "add_unique_constraint", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddNotNullConstraint struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddNotNullConstraint) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddNotNullConstraintArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_not_null_constraint", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAddNotNullConstraintResult{}
  if err2 = p.handler.AddNotNullConstraint(ctx, args.Req); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_not_null_constraint: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "add_not_null_constraint", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "add_not_null_constraint", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropTable struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropTableArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_table", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropTableResult{}
  if err2 = p.handler.DropTable(ctx, args.Dbname, args.Name, args.DeleteData); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_table: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_table", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_table", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropTableWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropTableWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropTableWithEnvironmentContextArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_table_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropTableWithEnvironmentContextResult{}
  if err2 = p.handler.DropTableWithEnvironmentContext(ctx, args.Dbname, args.Name, args.DeleteData, args.EnvironmentContext); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_table_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_table_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_table_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorTruncateTable struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorTruncateTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreTruncateTableArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "truncate_table", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreTruncateTableResult{}
  if err2 = p.handler.TruncateTable(ctx, args.DbName, args.TableName, args.PartNames); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing truncate_table: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "truncate_table", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "truncate_table", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTables struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTables) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTablesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_tables", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetTablesResult{}
  var retval []string
  if retval, err2 = p.handler.GetTables(ctx, args.DbName, args.Pattern); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_tables: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_tables", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_tables", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTablesByType struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTablesByType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTablesByTypeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_tables_by_type", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetTablesByTypeResult{}
  var retval []string
  if retval, err2 = p.handler.GetTablesByType(ctx, args.DbName, args.Pattern, args.TableType); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_tables_by_type: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_tables_by_type", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_tables_by_type", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTableMeta struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTableMeta) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTableMetaArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table_meta", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetTableMetaResult{}
  var retval []*TableMeta
  if retval, err2 = p.handler.GetTableMeta(ctx, args.DbPatterns, args.TblPatterns, args.TblTypes); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_meta: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table_meta", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_table_meta", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetAllTables struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllTables) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetAllTablesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_all_tables", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetAllTablesResult{}
  var retval []string
  if retval, err2 = p.handler.GetAllTables(ctx, args.DbName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_tables: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_all_tables", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_all_tables", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTable struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTableArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetTableResult{}
  var retval *Table
  if retval, err2 = p.handler.GetTable(ctx, args.Dbname, args.TblName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_table", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTableObjectsByName struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTableObjectsByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTableObjectsByNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table_objects_by_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetTableObjectsByNameResult{}
  var retval []*Table
  if retval, err2 = p.handler.GetTableObjectsByName(ctx, args.Dbname, args.TblNames); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_objects_by_name: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table_objects_by_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_table_objects_by_name", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTableReq struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTableReq) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTableReqArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table_req", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetTableReqResult{}
  var retval *GetTableResult_
  if retval, err2 = p.handler.GetTableReq(ctx, args.Req); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_req: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table_req", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_table_req", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTableObjectsByNameReq struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTableObjectsByNameReq) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTableObjectsByNameReqArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table_objects_by_name_req", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetTableObjectsByNameReqResult{}
  var retval *GetTablesResult_
  if retval, err2 = p.handler.GetTableObjectsByNameReq(ctx, args.Req); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *InvalidOperationException:
  result.O2 = v
    case *UnknownDBException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_objects_by_name_req: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table_objects_by_name_req", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_table_objects_by_name_req", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTableNamesByFilter struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTableNamesByFilter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTableNamesByFilterArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table_names_by_filter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetTableNamesByFilterResult{}
  var retval []string
  if retval, err2 = p.handler.GetTableNamesByFilter(ctx, args.Dbname, args.Filter, args.MaxTables); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *InvalidOperationException:
  result.O2 = v
    case *UnknownDBException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_names_by_filter: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table_names_by_filter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_table_names_by_filter", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterTable struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterTableArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_table", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAlterTableResult{}
  if err2 = p.handler.AlterTable(ctx, args.Dbname, args.TblName, args.NewTbl_); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_table: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_table", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "alter_table", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterTableWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterTableWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_table_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAlterTableWithEnvironmentContextResult{}
  if err2 = p.handler.AlterTableWithEnvironmentContext(ctx, args.Dbname, args.TblName, args.NewTbl_, args.EnvironmentContext); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_table_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_table_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "alter_table_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterTableWithCascade struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterTableWithCascade) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterTableWithCascadeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_table_with_cascade", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAlterTableWithCascadeResult{}
  if err2 = p.handler.AlterTableWithCascade(ctx, args.Dbname, args.TblName, args.NewTbl_, args.Cascade); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_table_with_cascade: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_table_with_cascade", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "alter_table_with_cascade", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddPartition struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddPartitionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_partition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAddPartitionResult{}
  var retval *Partition
  if retval, err2 = p.handler.AddPartition(ctx, args.NewPart_); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partition: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "add_partition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "add_partition", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddPartitionWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartitionWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_partition_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult{}
  var retval *Partition
  if retval, err2 = p.handler.AddPartitionWithEnvironmentContext(ctx, args.NewPart_, args.EnvironmentContext); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partition_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "add_partition_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "add_partition_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddPartitions struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartitions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddPartitionsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_partitions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAddPartitionsResult{}
  var retval int32
  if retval, err2 = p.handler.AddPartitions(ctx, args.NewParts_); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partitions: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "add_partitions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "add_partitions", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddPartitionsPspec struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartitionsPspec) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddPartitionsPspecArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_partitions_pspec", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAddPartitionsPspecResult{}
  var retval int32
  if retval, err2 = p.handler.AddPartitionsPspec(ctx, args.NewParts_); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partitions_pspec: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "add_partitions_pspec", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "add_partitions_pspec", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAppendPartition struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAppendPartitionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "append_partition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAppendPartitionResult{}
  var retval *Partition
  if retval, err2 = p.handler.AppendPartition(ctx, args.DbName, args.TblName, args.PartVals); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "append_partition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "append_partition", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddPartitionsReq struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartitionsReq) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddPartitionsReqArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_partitions_req", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAddPartitionsReqResult{}
  var retval *AddPartitionsResult_
  if retval, err2 = p.handler.AddPartitionsReq(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partitions_req: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "add_partitions_req", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "add_partitions_req", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAppendPartitionWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartitionWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "append_partition_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult{}
  var retval *Partition
  if retval, err2 = p.handler.AppendPartitionWithEnvironmentContext(ctx, args.DbName, args.TblName, args.PartVals, args.EnvironmentContext); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "append_partition_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "append_partition_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAppendPartitionByName struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartitionByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAppendPartitionByNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "append_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAppendPartitionByNameResult{}
  var retval *Partition
  if retval, err2 = p.handler.AppendPartitionByName(ctx, args.DbName, args.TblName, args.PartName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition_by_name: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "append_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "append_partition_by_name", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAppendPartitionByNameWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartitionByNameWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "append_partition_by_name_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult{}
  var retval *Partition
  if retval, err2 = p.handler.AppendPartitionByNameWithEnvironmentContext(ctx, args.DbName, args.TblName, args.PartName, args.EnvironmentContext); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition_by_name_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "append_partition_by_name_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "append_partition_by_name_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropPartition struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropPartitionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_partition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropPartitionResult{}
  var retval bool
  if retval, err2 = p.handler.DropPartition(ctx, args.DbName, args.TblName, args.PartVals, args.DeleteData); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_partition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_partition", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropPartitionWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartitionWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_partition_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult{}
  var retval bool
  if retval, err2 = p.handler.DropPartitionWithEnvironmentContext(ctx, args.DbName, args.TblName, args.PartVals, args.DeleteData, args.EnvironmentContext); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_partition_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_partition_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropPartitionByName struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartitionByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropPartitionByNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropPartitionByNameResult{}
  var retval bool
  if retval, err2 = p.handler.DropPartitionByName(ctx, args.DbName, args.TblName, args.PartName, args.DeleteData); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition_by_name: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_partition_by_name", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropPartitionByNameWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartitionByNameWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_partition_by_name_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult{}
  var retval bool
  if retval, err2 = p.handler.DropPartitionByNameWithEnvironmentContext(ctx, args.DbName, args.TblName, args.PartName, args.DeleteData, args.EnvironmentContext); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition_by_name_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_partition_by_name_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_partition_by_name_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropPartitionsReq struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartitionsReq) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropPartitionsReqArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_partitions_req", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropPartitionsReqResult{}
  var retval *DropPartitionsResult_
  if retval, err2 = p.handler.DropPartitionsReq(ctx, args.Req); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partitions_req: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_partitions_req", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_partitions_req", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartition struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionResult{}
  var retval *Partition
  if retval, err2 = p.handler.GetPartition(ctx, args.DbName, args.TblName, args.PartVals); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partition", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorExchangePartition struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorExchangePartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreExchangePartitionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "exchange_partition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreExchangePartitionResult{}
  var retval *Partition
  if retval, err2 = p.handler.ExchangePartition(ctx, args.PartitionSpecs, args.SourceDb, args.SourceTableName, args.DestDb, args.DestTableName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    case *InvalidObjectException:
  result.O3 = v
    case *InvalidInputException:
  result.O4 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exchange_partition: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "exchange_partition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "exchange_partition", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorExchangePartitions struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorExchangePartitions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreExchangePartitionsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "exchange_partitions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreExchangePartitionsResult{}
  var retval []*Partition
  if retval, err2 = p.handler.ExchangePartitions(ctx, args.PartitionSpecs, args.SourceDb, args.SourceTableName, args.DestDb, args.DestTableName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    case *InvalidObjectException:
  result.O3 = v
    case *InvalidInputException:
  result.O4 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exchange_partitions: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "exchange_partitions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "exchange_partitions", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionWithAuth struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionWithAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionWithAuthArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partition_with_auth", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionWithAuthResult{}
  var retval *Partition
  if retval, err2 = p.handler.GetPartitionWithAuth(ctx, args.DbName, args.TblName, args.PartVals, args.UserName, args.GroupNames); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_with_auth: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partition_with_auth", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partition_with_auth", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionByName struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionByNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionByNameResult{}
  var retval *Partition
  if retval, err2 = p.handler.GetPartitionByName(ctx, args.DbName, args.TblName, args.PartName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_by_name: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partition_by_name", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitions struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionsResult{}
  var retval []*Partition
  if retval, err2 = p.handler.GetPartitions(ctx, args.DbName, args.TblName, args.MaxParts); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partitions", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsWithAuth struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsWithAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsWithAuthArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_with_auth", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionsWithAuthResult{}
  var retval []*Partition
  if retval, err2 = p.handler.GetPartitionsWithAuth(ctx, args.DbName, args.TblName, args.MaxParts, args.UserName, args.GroupNames); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_with_auth: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_with_auth", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partitions_with_auth", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPspec struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPspec) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsPspecArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_pspec", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionsPspecResult{}
  var retval []*PartitionSpec
  if retval, err2 = p.handler.GetPartitionsPspec(ctx, args.DbName, args.TblName, args.MaxParts); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_pspec: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_pspec", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partitions_pspec", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionNames struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionNamesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partition_names", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionNamesResult{}
  var retval []string
  if retval, err2 = p.handler.GetPartitionNames(ctx, args.DbName, args.TblName, args.MaxParts); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_names: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partition_names", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partition_names", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionValues struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionValues) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionValuesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partition_values", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionValuesResult{}
  var retval *PartitionValuesResponse
  if retval, err2 = p.handler.GetPartitionValues(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_values: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partition_values", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partition_values", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPs struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsPsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_ps", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionsPsResult{}
  var retval []*Partition
  if retval, err2 = p.handler.GetPartitionsPs(ctx, args.DbName, args.TblName, args.PartVals, args.MaxParts); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_ps: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_ps", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partitions_ps", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPsWithAuth struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPsWithAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsPsWithAuthArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_ps_with_auth", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionsPsWithAuthResult{}
  var retval []*Partition
  if retval, err2 = p.handler.GetPartitionsPsWithAuth(ctx, args.DbName, args.TblName, args.PartVals, args.MaxParts, args.UserName, args.GroupNames); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_ps_with_auth: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_ps_with_auth", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partitions_ps_with_auth", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionNamesPs struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionNamesPs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionNamesPsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partition_names_ps", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionNamesPsResult{}
  var retval []string
  if retval, err2 = p.handler.GetPartitionNamesPs(ctx, args.DbName, args.TblName, args.PartVals, args.MaxParts); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_names_ps: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partition_names_ps", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partition_names_ps", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsByFilter struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsByFilter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsByFilterArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_by_filter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionsByFilterResult{}
  var retval []*Partition
  if retval, err2 = p.handler.GetPartitionsByFilter(ctx, args.DbName, args.TblName, args.Filter, args.MaxParts); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_by_filter: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_by_filter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partitions_by_filter", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartSpecsByFilter struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartSpecsByFilter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartSpecsByFilterArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_part_specs_by_filter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartSpecsByFilterResult{}
  var retval []*PartitionSpec
  if retval, err2 = p.handler.GetPartSpecsByFilter(ctx, args.DbName, args.TblName, args.Filter, args.MaxParts); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_part_specs_by_filter: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_part_specs_by_filter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_part_specs_by_filter", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsByExpr struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsByExpr) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsByExprArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_by_expr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionsByExprResult{}
  var retval *PartitionsByExprResult_
  if retval, err2 = p.handler.GetPartitionsByExpr(ctx, args.Req); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_by_expr: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_by_expr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partitions_by_expr", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetNumPartitionsByFilter struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetNumPartitionsByFilter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetNumPartitionsByFilterArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_num_partitions_by_filter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetNumPartitionsByFilterResult{}
  var retval int32
  if retval, err2 = p.handler.GetNumPartitionsByFilter(ctx, args.DbName, args.TblName, args.Filter); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_num_partitions_by_filter: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_num_partitions_by_filter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_num_partitions_by_filter", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsByNames struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsByNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsByNamesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_by_names", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionsByNamesResult{}
  var retval []*Partition
  if retval, err2 = p.handler.GetPartitionsByNames(ctx, args.DbName, args.TblName, args.Names); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_by_names: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_by_names", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partitions_by_names", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterPartition struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterPartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterPartitionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_partition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAlterPartitionResult{}
  if err2 = p.handler.AlterPartition(ctx, args.DbName, args.TblName, args.NewPart_); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_partition: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_partition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "alter_partition", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterPartitions struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterPartitions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterPartitionsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_partitions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAlterPartitionsResult{}
  if err2 = p.handler.AlterPartitions(ctx, args.DbName, args.TblName, args.NewParts_); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_partitions: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_partitions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "alter_partitions", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterPartitionsWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterPartitionsWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_partitions_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult{}
  if err2 = p.handler.AlterPartitionsWithEnvironmentContext(ctx, args.DbName, args.TblName, args.NewParts_, args.EnvironmentContext); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_partitions_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_partitions_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "alter_partitions_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterPartitionWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterPartitionWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_partition_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult{}
  if err2 = p.handler.AlterPartitionWithEnvironmentContext(ctx, args.DbName, args.TblName, args.NewPart_, args.EnvironmentContext); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_partition_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_partition_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "alter_partition_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorRenamePartition struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRenamePartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreRenamePartitionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "rename_partition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreRenamePartitionResult{}
  if err2 = p.handler.RenamePartition(ctx, args.DbName, args.TblName, args.PartVals, args.NewPart_); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rename_partition: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "rename_partition", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "rename_partition", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorPartitionNameHasValidCharacters struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameHasValidCharacters) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastorePartitionNameHasValidCharactersArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "partition_name_has_valid_characters", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastorePartitionNameHasValidCharactersResult{}
  var retval bool
  if retval, err2 = p.handler.PartitionNameHasValidCharacters(ctx, args.PartVals, args.ThrowException); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_has_valid_characters: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "partition_name_has_valid_characters", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "partition_name_has_valid_characters", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetConfigValue struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetConfigValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetConfigValueArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_config_value", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetConfigValueResult{}
  var retval string
  if retval, err2 = p.handler.GetConfigValue(ctx, args.Name, args.DefaultValue); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ConfigValSecurityException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_config_value: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_config_value", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_config_value", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorPartitionNameToVals struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameToVals) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastorePartitionNameToValsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "partition_name_to_vals", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastorePartitionNameToValsResult{}
  var retval []string
  if retval, err2 = p.handler.PartitionNameToVals(ctx, args.PartName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_to_vals: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "partition_name_to_vals", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "partition_name_to_vals", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorPartitionNameToSpec struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameToSpec) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastorePartitionNameToSpecArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "partition_name_to_spec", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastorePartitionNameToSpecResult{}
  var retval map[string]string
  if retval, err2 = p.handler.PartitionNameToSpec(ctx, args.PartName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_to_spec: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "partition_name_to_spec", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "partition_name_to_spec", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorMarkPartitionForEvent struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorMarkPartitionForEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreMarkPartitionForEventArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "markPartitionForEvent", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreMarkPartitionForEventResult{}
  if err2 = p.handler.MarkPartitionForEvent(ctx, args.DbName, args.TblName, args.PartVals, args.EventType); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    case *UnknownDBException:
  result.O3 = v
    case *UnknownTableException:
  result.O4 = v
    case *UnknownPartitionException:
  result.O5 = v
    case *InvalidPartitionException:
  result.O6 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing markPartitionForEvent: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "markPartitionForEvent", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "markPartitionForEvent", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorIsPartitionMarkedForEvent struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorIsPartitionMarkedForEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreIsPartitionMarkedForEventArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "isPartitionMarkedForEvent", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreIsPartitionMarkedForEventResult{}
  var retval bool
  if retval, err2 = p.handler.IsPartitionMarkedForEvent(ctx, args.DbName, args.TblName, args.PartVals, args.EventType); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    case *UnknownDBException:
  result.O3 = v
    case *UnknownTableException:
  result.O4 = v
    case *UnknownPartitionException:
  result.O5 = v
    case *InvalidPartitionException:
  result.O6 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isPartitionMarkedForEvent: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "isPartitionMarkedForEvent", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "isPartitionMarkedForEvent", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddIndex struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddIndexArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_index", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAddIndexResult{}
  var retval *Index
  if retval, err2 = p.handler.AddIndex(ctx, args.NewIndex_, args.IndexTable); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_index: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "add_index", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "add_index", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterIndex struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterIndexArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_index", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAlterIndexResult{}
  if err2 = p.handler.AlterIndex(ctx, args.Dbname, args.BaseTblName, args.IdxName, args.NewIdx_); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_index: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_index", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "alter_index", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropIndexByName struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropIndexByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropIndexByNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_index_by_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropIndexByNameResult{}
  var retval bool
  if retval, err2 = p.handler.DropIndexByName(ctx, args.DbName, args.TblName, args.IndexName, args.DeleteData); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_index_by_name: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_index_by_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_index_by_name", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetIndexByName struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetIndexByNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_index_by_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetIndexByNameResult{}
  var retval *Index
  if retval, err2 = p.handler.GetIndexByName(ctx, args.DbName, args.TblName, args.IndexName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_index_by_name: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_index_by_name", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_index_by_name", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetIndexes struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetIndexesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_indexes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetIndexesResult{}
  var retval []*Index
  if retval, err2 = p.handler.GetIndexes(ctx, args.DbName, args.TblName, args.MaxIndexes); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_indexes: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_indexes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_indexes", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetIndexNames struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetIndexNamesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_index_names", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetIndexNamesResult{}
  var retval []string
  if retval, err2 = p.handler.GetIndexNames(ctx, args.DbName, args.TblName, args.MaxIndexes); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_index_names: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_index_names", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_index_names", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPrimaryKeys struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPrimaryKeys) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPrimaryKeysArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_primary_keys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPrimaryKeysResult{}
  var retval *PrimaryKeysResponse
  if retval, err2 = p.handler.GetPrimaryKeys(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_primary_keys: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_primary_keys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_primary_keys", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetForeignKeys struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetForeignKeys) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetForeignKeysArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_foreign_keys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetForeignKeysResult{}
  var retval *ForeignKeysResponse
  if retval, err2 = p.handler.GetForeignKeys(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_foreign_keys: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_foreign_keys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_foreign_keys", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetUniqueConstraints struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetUniqueConstraints) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetUniqueConstraintsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_unique_constraints", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetUniqueConstraintsResult{}
  var retval *UniqueConstraintsResponse
  if retval, err2 = p.handler.GetUniqueConstraints(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_unique_constraints: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_unique_constraints", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_unique_constraints", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetNotNullConstraints struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetNotNullConstraints) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetNotNullConstraintsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_not_null_constraints", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetNotNullConstraintsResult{}
  var retval *NotNullConstraintsResponse
  if retval, err2 = p.handler.GetNotNullConstraints(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_not_null_constraints: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_not_null_constraints", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_not_null_constraints", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorUpdateTableColumnStatistics struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorUpdateTableColumnStatistics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreUpdateTableColumnStatisticsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_table_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreUpdateTableColumnStatisticsResult{}
  var retval bool
  if retval, err2 = p.handler.UpdateTableColumnStatistics(ctx, args.StatsObj); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    case *InvalidInputException:
  result.O4 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_table_column_statistics: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_table_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_table_column_statistics", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorUpdatePartitionColumnStatistics struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorUpdatePartitionColumnStatistics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_partition_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult{}
  var retval bool
  if retval, err2 = p.handler.UpdatePartitionColumnStatistics(ctx, args.StatsObj); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    case *InvalidInputException:
  result.O4 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_partition_column_statistics: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_partition_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_partition_column_statistics", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTableColumnStatistics struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTableColumnStatistics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTableColumnStatisticsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetTableColumnStatisticsResult{}
  var retval *ColumnStatistics
  if retval, err2 = p.handler.GetTableColumnStatistics(ctx, args.DbName, args.TblName, args.ColName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    case *InvalidInputException:
  result.O3 = v
    case *InvalidObjectException:
  result.O4 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_column_statistics: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_table_column_statistics", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionColumnStatistics struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionColumnStatistics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionColumnStatisticsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partition_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionColumnStatisticsResult{}
  var retval *ColumnStatistics
  if retval, err2 = p.handler.GetPartitionColumnStatistics(ctx, args.DbName, args.TblName, args.PartName, args.ColName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    case *InvalidInputException:
  result.O3 = v
    case *InvalidObjectException:
  result.O4 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_column_statistics: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partition_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partition_column_statistics", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTableStatisticsReq struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTableStatisticsReq) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTableStatisticsReqArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table_statistics_req", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetTableStatisticsReqResult{}
  var retval *TableStatsResult_
  if retval, err2 = p.handler.GetTableStatisticsReq(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_statistics_req: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_table_statistics_req", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_table_statistics_req", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsStatisticsReq struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsStatisticsReq) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsStatisticsReqArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_statistics_req", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPartitionsStatisticsReqResult{}
  var retval *PartitionsStatsResult_
  if retval, err2 = p.handler.GetPartitionsStatisticsReq(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_statistics_req: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_partitions_statistics_req", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_partitions_statistics_req", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetAggrStatsFor struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAggrStatsFor) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetAggrStatsForArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_aggr_stats_for", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetAggrStatsForResult{}
  var retval *AggrStats
  if retval, err2 = p.handler.GetAggrStatsFor(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_aggr_stats_for: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_aggr_stats_for", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_aggr_stats_for", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorSetAggrStatsFor struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorSetAggrStatsFor) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreSetAggrStatsForArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "set_aggr_stats_for", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreSetAggrStatsForResult{}
  var retval bool
  if retval, err2 = p.handler.SetAggrStatsFor(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    case *InvalidInputException:
  result.O4 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_aggr_stats_for: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "set_aggr_stats_for", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "set_aggr_stats_for", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDeletePartitionColumnStatistics struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDeletePartitionColumnStatistics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "delete_partition_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDeletePartitionColumnStatisticsResult{}
  var retval bool
  if retval, err2 = p.handler.DeletePartitionColumnStatistics(ctx, args.DbName, args.TblName, args.PartName, args.ColName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    case *InvalidObjectException:
  result.O3 = v
    case *InvalidInputException:
  result.O4 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_partition_column_statistics: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "delete_partition_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "delete_partition_column_statistics", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDeleteTableColumnStatistics struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDeleteTableColumnStatistics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDeleteTableColumnStatisticsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "delete_table_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDeleteTableColumnStatisticsResult{}
  var retval bool
  if retval, err2 = p.handler.DeleteTableColumnStatistics(ctx, args.DbName, args.TblName, args.ColName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    case *InvalidObjectException:
  result.O3 = v
    case *InvalidInputException:
  result.O4 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_table_column_statistics: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "delete_table_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "delete_table_column_statistics", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateFunction struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateFunction) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCreateFunctionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "create_function", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCreateFunctionResult{}
  if err2 = p.handler.CreateFunction(ctx, args.Func); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *AlreadyExistsException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    case *NoSuchObjectException:
  result.O4 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_function: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "create_function", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "create_function", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropFunction struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropFunction) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropFunctionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_function", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropFunctionResult{}
  if err2 = p.handler.DropFunction(ctx, args.DbName, args.FuncName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_function: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_function", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_function", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterFunction struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterFunction) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterFunctionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_function", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAlterFunctionResult{}
  if err2 = p.handler.AlterFunction(ctx, args.DbName, args.FuncName, args.NewFunc_); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_function: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_function", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "alter_function", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetFunctions struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetFunctions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetFunctionsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_functions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetFunctionsResult{}
  var retval []string
  if retval, err2 = p.handler.GetFunctions(ctx, args.DbName, args.Pattern); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_functions: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_functions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_functions", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetFunction struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetFunction) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetFunctionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_function", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetFunctionResult{}
  var retval *Function
  if retval, err2 = p.handler.GetFunction(ctx, args.DbName, args.FuncName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_function: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_function", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_function", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetAllFunctions struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllFunctions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetAllFunctionsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_all_functions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetAllFunctionsResult{}
  var retval *GetAllFunctionsResponse
  if retval, err2 = p.handler.GetAllFunctions(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_functions: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_all_functions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_all_functions", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateRole struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCreateRoleArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "create_role", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCreateRoleResult{}
  var retval bool
  if retval, err2 = p.handler.CreateRole(ctx, args.Role); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_role: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "create_role", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "create_role", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropRole struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropRoleArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_role", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropRoleResult{}
  var retval bool
  if retval, err2 = p.handler.DropRole(ctx, args.RoleName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_role: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_role", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_role", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetRoleNames struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetRoleNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetRoleNamesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_role_names", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetRoleNamesResult{}
  var retval []string
  if retval, err2 = p.handler.GetRoleNames(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_role_names: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_role_names", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_role_names", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGrantRole struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGrantRoleArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "grant_role", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGrantRoleResult{}
  var retval bool
  if retval, err2 = p.handler.GrantRole(ctx, args.RoleName, args.PrincipalName, args.PrincipalType, args.Grantor, args.GrantorType, args.GrantOption); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_role: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "grant_role", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "grant_role", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorRevokeRole struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRevokeRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreRevokeRoleArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "revoke_role", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreRevokeRoleResult{}
  var retval bool
  if retval, err2 = p.handler.RevokeRole(ctx, args.RoleName, args.PrincipalName, args.PrincipalType); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revoke_role: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "revoke_role", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "revoke_role", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorListRoles struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorListRoles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreListRolesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "list_roles", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreListRolesResult{}
  var retval []*Role
  if retval, err2 = p.handler.ListRoles(ctx, args.PrincipalName, args.PrincipalType); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_roles: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "list_roles", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "list_roles", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGrantRevokeRole struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantRevokeRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGrantRevokeRoleArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "grant_revoke_role", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGrantRevokeRoleResult{}
  var retval *GrantRevokeRoleResponse
  if retval, err2 = p.handler.GrantRevokeRole(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_revoke_role: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "grant_revoke_role", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "grant_revoke_role", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPrincipalsInRole struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPrincipalsInRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPrincipalsInRoleArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_principals_in_role", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPrincipalsInRoleResult{}
  var retval *GetPrincipalsInRoleResponse
  if retval, err2 = p.handler.GetPrincipalsInRole(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_principals_in_role: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_principals_in_role", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_principals_in_role", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetRoleGrantsForPrincipal struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetRoleGrantsForPrincipal) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_role_grants_for_principal", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetRoleGrantsForPrincipalResult{}
  var retval *GetRoleGrantsForPrincipalResponse
  if retval, err2 = p.handler.GetRoleGrantsForPrincipal(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_role_grants_for_principal: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_role_grants_for_principal", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_role_grants_for_principal", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPrivilegeSet struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPrivilegeSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPrivilegeSetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_privilege_set", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetPrivilegeSetResult{}
  var retval *PrincipalPrivilegeSet
  if retval, err2 = p.handler.GetPrivilegeSet(ctx, args.HiveObject, args.UserName, args.GroupNames); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_privilege_set: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_privilege_set", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_privilege_set", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorListPrivileges struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorListPrivileges) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreListPrivilegesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "list_privileges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreListPrivilegesResult{}
  var retval []*HiveObjectPrivilege
  if retval, err2 = p.handler.ListPrivileges(ctx, args.PrincipalName, args.PrincipalType, args.HiveObject); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_privileges: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "list_privileges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "list_privileges", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGrantPrivileges struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantPrivileges) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGrantPrivilegesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "grant_privileges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGrantPrivilegesResult{}
  var retval bool
  if retval, err2 = p.handler.GrantPrivileges(ctx, args.Privileges); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_privileges: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "grant_privileges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "grant_privileges", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorRevokePrivileges struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRevokePrivileges) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreRevokePrivilegesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "revoke_privileges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreRevokePrivilegesResult{}
  var retval bool
  if retval, err2 = p.handler.RevokePrivileges(ctx, args.Privileges); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revoke_privileges: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "revoke_privileges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "revoke_privileges", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGrantRevokePrivileges struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantRevokePrivileges) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGrantRevokePrivilegesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "grant_revoke_privileges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGrantRevokePrivilegesResult{}
  var retval *GrantRevokePrivilegeResponse
  if retval, err2 = p.handler.GrantRevokePrivileges(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_revoke_privileges: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "grant_revoke_privileges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "grant_revoke_privileges", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorSetUgi struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorSetUgi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreSetUgiArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "set_ugi", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreSetUgiResult{}
  var retval []string
  if retval, err2 = p.handler.SetUgi(ctx, args.UserName, args.GroupNames); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_ugi: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "set_ugi", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "set_ugi", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetDelegationToken struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDelegationToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetDelegationTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetDelegationTokenResult{}
  var retval string
  if retval, err2 = p.handler.GetDelegationToken(ctx, args.TokenOwner, args.RenewerKerberosPrincipalName); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_delegation_token: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_delegation_token", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorRenewDelegationToken struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRenewDelegationToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreRenewDelegationTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "renew_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreRenewDelegationTokenResult{}
  var retval int64
  if retval, err2 = p.handler.RenewDelegationToken(ctx, args.TokenStrForm); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing renew_delegation_token: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "renew_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "renew_delegation_token", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCancelDelegationToken struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCancelDelegationToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCancelDelegationTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "cancel_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCancelDelegationTokenResult{}
  if err2 = p.handler.CancelDelegationToken(ctx, args.TokenStrForm); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancel_delegation_token: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "cancel_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "cancel_delegation_token", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddToken struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_token", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAddTokenResult{}
  var retval bool
  if retval, err2 = p.handler.AddToken(ctx, args.TokenIdentifier, args.DelegationToken); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_token: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "add_token", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "add_token", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorRemoveToken struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRemoveToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreRemoveTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "remove_token", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreRemoveTokenResult{}
  var retval bool
  if retval, err2 = p.handler.RemoveToken(ctx, args.TokenIdentifier); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove_token: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "remove_token", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "remove_token", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetToken struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_token", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetTokenResult{}
  var retval string
  if retval, err2 = p.handler.GetToken(ctx, args.TokenIdentifier); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_token: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_token", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_token", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetAllTokenIdentifiers struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllTokenIdentifiers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetAllTokenIdentifiersArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_all_token_identifiers", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetAllTokenIdentifiersResult{}
  var retval []string
  if retval, err2 = p.handler.GetAllTokenIdentifiers(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_token_identifiers: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_all_token_identifiers", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_all_token_identifiers", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddMasterKey struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddMasterKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddMasterKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_master_key", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAddMasterKeyResult{}
  var retval int32
  if retval, err2 = p.handler.AddMasterKey(ctx, args.Key); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_master_key: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "add_master_key", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "add_master_key", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorUpdateMasterKey struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorUpdateMasterKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreUpdateMasterKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "update_master_key", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreUpdateMasterKeyResult{}
  if err2 = p.handler.UpdateMasterKey(ctx, args.SeqNumber, args.Key); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_master_key: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "update_master_key", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "update_master_key", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorRemoveMasterKey struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRemoveMasterKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreRemoveMasterKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "remove_master_key", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreRemoveMasterKeyResult{}
  var retval bool
  if retval, err2 = p.handler.RemoveMasterKey(ctx, args.KeySeq); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove_master_key: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "remove_master_key", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "remove_master_key", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetMasterKeys struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetMasterKeys) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetMasterKeysArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_master_keys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetMasterKeysResult{}
  var retval []string
  if retval, err2 = p.handler.GetMasterKeys(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_master_keys: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_master_keys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_master_keys", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetOpenTxns struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetOpenTxns) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetOpenTxnsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_open_txns", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetOpenTxnsResult{}
  var retval *GetOpenTxnsResponse
  if retval, err2 = p.handler.GetOpenTxns(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_open_txns: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_open_txns", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_open_txns", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetOpenTxnsInfo struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetOpenTxnsInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetOpenTxnsInfoArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_open_txns_info", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetOpenTxnsInfoResult{}
  var retval *GetOpenTxnsInfoResponse
  if retval, err2 = p.handler.GetOpenTxnsInfo(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_open_txns_info: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_open_txns_info", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_open_txns_info", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorOpenTxns struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorOpenTxns) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreOpenTxnsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "open_txns", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreOpenTxnsResult{}
  var retval *OpenTxnsResponse
  if retval, err2 = p.handler.OpenTxns(ctx, args.Rqst); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing open_txns: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "open_txns", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "open_txns", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAbortTxn struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAbortTxn) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAbortTxnArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "abort_txn", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAbortTxnResult{}
  if err2 = p.handler.AbortTxn(ctx, args.Rqst); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchTxnException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing abort_txn: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "abort_txn", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "abort_txn", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAbortTxns struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAbortTxns) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAbortTxnsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "abort_txns", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAbortTxnsResult{}
  if err2 = p.handler.AbortTxns(ctx, args.Rqst); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchTxnException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing abort_txns: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "abort_txns", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "abort_txns", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCommitTxn struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCommitTxn) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCommitTxnArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "commit_txn", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCommitTxnResult{}
  if err2 = p.handler.CommitTxn(ctx, args.Rqst); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchTxnException:
  result.O1 = v
    case *TxnAbortedException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing commit_txn: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "commit_txn", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "commit_txn", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorLock struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorLock) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreLockArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "lock", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreLockResult{}
  var retval *LockResponse
  if retval, err2 = p.handler.Lock(ctx, args.Rqst); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchTxnException:
  result.O1 = v
    case *TxnAbortedException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lock: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "lock", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "lock", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCheckLock struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCheckLock) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCheckLockArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "check_lock", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCheckLockResult{}
  var retval *LockResponse
  if retval, err2 = p.handler.CheckLock(ctx, args.Rqst); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchTxnException:
  result.O1 = v
    case *TxnAbortedException:
  result.O2 = v
    case *NoSuchLockException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing check_lock: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "check_lock", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "check_lock", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorUnlock struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorUnlock) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreUnlockArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unlock", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreUnlockResult{}
  if err2 = p.handler.Unlock(ctx, args.Rqst); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchLockException:
  result.O1 = v
    case *TxnOpenException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unlock: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unlock", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unlock", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorShowLocks struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorShowLocks) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreShowLocksArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "show_locks", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreShowLocksResult{}
  var retval *ShowLocksResponse
  if retval, err2 = p.handler.ShowLocks(ctx, args.Rqst); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing show_locks: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "show_locks", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "show_locks", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorHeartbeat struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorHeartbeat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreHeartbeatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "heartbeat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreHeartbeatResult{}
  if err2 = p.handler.Heartbeat(ctx, args.Ids); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchLockException:
  result.O1 = v
    case *NoSuchTxnException:
  result.O2 = v
    case *TxnAbortedException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heartbeat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "heartbeat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "heartbeat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorHeartbeatTxnRange struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorHeartbeatTxnRange) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreHeartbeatTxnRangeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "heartbeat_txn_range", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreHeartbeatTxnRangeResult{}
  var retval *HeartbeatTxnRangeResponse
  if retval, err2 = p.handler.HeartbeatTxnRange(ctx, args.Txns); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heartbeat_txn_range: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "heartbeat_txn_range", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "heartbeat_txn_range", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCompact struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCompact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCompactArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "compact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCompactResult{}
  if err2 = p.handler.Compact(ctx, args.Rqst); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing compact: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "compact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "compact", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCompact2 struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCompact2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCompact2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "compact2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCompact2Result{}
  var retval *CompactionResponse
  if retval, err2 = p.handler.Compact2(ctx, args.Rqst); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing compact2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "compact2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "compact2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorShowCompact struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorShowCompact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreShowCompactArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "show_compact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreShowCompactResult{}
  var retval *ShowCompactResponse
  if retval, err2 = p.handler.ShowCompact(ctx, args.Rqst); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing show_compact: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "show_compact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "show_compact", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddDynamicPartitions struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddDynamicPartitions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddDynamicPartitionsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_dynamic_partitions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAddDynamicPartitionsResult{}
  if err2 = p.handler.AddDynamicPartitions(ctx, args.Rqst); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchTxnException:
  result.O1 = v
    case *TxnAbortedException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_dynamic_partitions: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "add_dynamic_partitions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "add_dynamic_partitions", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetNextNotification struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetNextNotification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetNextNotificationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_next_notification", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetNextNotificationResult{}
  var retval *NotificationEventResponse
  if retval, err2 = p.handler.GetNextNotification(ctx, args.Rqst); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_next_notification: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_next_notification", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_next_notification", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetCurrentNotificationEventId struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetCurrentNotificationEventId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetCurrentNotificationEventIdArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_current_notificationEventId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetCurrentNotificationEventIdResult{}
  var retval *CurrentNotificationEventId
  if retval, err2 = p.handler.GetCurrentNotificationEventId(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_current_notificationEventId: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_current_notificationEventId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_current_notificationEventId", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetNotificationEventsCount struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetNotificationEventsCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetNotificationEventsCountArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_notification_events_count", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetNotificationEventsCountResult{}
  var retval *NotificationEventsCountResponse
  if retval, err2 = p.handler.GetNotificationEventsCount(ctx, args.Rqst); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_notification_events_count: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_notification_events_count", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_notification_events_count", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorFireListenerEvent struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorFireListenerEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreFireListenerEventArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "fire_listener_event", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreFireListenerEventResult{}
  var retval *FireEventResponse
  if retval, err2 = p.handler.FireListenerEvent(ctx, args.Rqst); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fire_listener_event: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "fire_listener_event", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "fire_listener_event", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorFlushCache struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorFlushCache) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreFlushCacheArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "flushCache", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreFlushCacheResult{}
  if err2 = p.handler.FlushCache(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing flushCache: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "flushCache", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "flushCache", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCmRecycle struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCmRecycle) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCmRecycleArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "cm_recycle", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCmRecycleResult{}
  var retval *CmRecycleResponse
  if retval, err2 = p.handler.CmRecycle(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cm_recycle: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "cm_recycle", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "cm_recycle", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetFileMetadataByExpr struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetFileMetadataByExpr) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetFileMetadataByExprArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_file_metadata_by_expr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetFileMetadataByExprResult{}
  var retval *GetFileMetadataByExprResult_
  if retval, err2 = p.handler.GetFileMetadataByExpr(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_file_metadata_by_expr: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_file_metadata_by_expr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_file_metadata_by_expr", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetFileMetadata struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetFileMetadata) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetFileMetadataArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_file_metadata", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetFileMetadataResult{}
  var retval *GetFileMetadataResult_
  if retval, err2 = p.handler.GetFileMetadata(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_file_metadata: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_file_metadata", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_file_metadata", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorPutFileMetadata struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPutFileMetadata) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastorePutFileMetadataArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "put_file_metadata", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastorePutFileMetadataResult{}
  var retval *PutFileMetadataResult_
  if retval, err2 = p.handler.PutFileMetadata(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put_file_metadata: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "put_file_metadata", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "put_file_metadata", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorClearFileMetadata struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorClearFileMetadata) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreClearFileMetadataArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "clear_file_metadata", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreClearFileMetadataResult{}
  var retval *ClearFileMetadataResult_
  if retval, err2 = p.handler.ClearFileMetadata(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clear_file_metadata: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "clear_file_metadata", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "clear_file_metadata", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCacheFileMetadata struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCacheFileMetadata) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCacheFileMetadataArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "cache_file_metadata", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCacheFileMetadataResult{}
  var retval *CacheFileMetadataResult_
  if retval, err2 = p.handler.CacheFileMetadata(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cache_file_metadata: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "cache_file_metadata", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "cache_file_metadata", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetMetastoreDbUUID struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetMetastoreDbUUID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetMetastoreDbUUIDArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_metastore_db_uuid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetMetastoreDbUUIDResult{}
  var retval string
  if retval, err2 = p.handler.GetMetastoreDbUUID(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_metastore_db_uuid: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_metastore_db_uuid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_metastore_db_uuid", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateResourcePlan struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateResourcePlan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCreateResourcePlanArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "create_resource_plan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCreateResourcePlanResult{}
  var retval *WMCreateResourcePlanResponse
  if retval, err2 = p.handler.CreateResourcePlan(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *AlreadyExistsException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_resource_plan: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "create_resource_plan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "create_resource_plan", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetResourcePlan struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetResourcePlan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetResourcePlanArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_resource_plan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetResourcePlanResult{}
  var retval *WMGetResourcePlanResponse
  if retval, err2 = p.handler.GetResourcePlan(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_resource_plan: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_resource_plan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_resource_plan", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetActiveResourcePlan struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetActiveResourcePlan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetActiveResourcePlanArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_active_resource_plan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetActiveResourcePlanResult{}
  var retval *WMGetActiveResourcePlanResponse
  if retval, err2 = p.handler.GetActiveResourcePlan(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_active_resource_plan: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_active_resource_plan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_active_resource_plan", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetAllResourcePlans struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllResourcePlans) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetAllResourcePlansArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_all_resource_plans", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetAllResourcePlansResult{}
  var retval *WMGetAllResourcePlanResponse
  if retval, err2 = p.handler.GetAllResourcePlans(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_resource_plans: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_all_resource_plans", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_all_resource_plans", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterResourcePlan struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterResourcePlan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterResourcePlanArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_resource_plan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAlterResourcePlanResult{}
  var retval *WMAlterResourcePlanResponse
  if retval, err2 = p.handler.AlterResourcePlan(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *InvalidOperationException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_resource_plan: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_resource_plan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "alter_resource_plan", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorValidateResourcePlan struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorValidateResourcePlan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreValidateResourcePlanArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "validate_resource_plan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreValidateResourcePlanResult{}
  var retval *WMValidateResourcePlanResponse
  if retval, err2 = p.handler.ValidateResourcePlan(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing validate_resource_plan: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "validate_resource_plan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "validate_resource_plan", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropResourcePlan struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropResourcePlan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropResourcePlanArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_resource_plan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropResourcePlanResult{}
  var retval *WMDropResourcePlanResponse
  if retval, err2 = p.handler.DropResourcePlan(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *InvalidOperationException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_resource_plan: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_resource_plan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_resource_plan", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateWmTrigger struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateWmTrigger) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCreateWmTriggerArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "create_wm_trigger", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreCreateWmTriggerResult{}
  var retval *WMCreateTriggerResponse
  if retval, err2 = p.handler.CreateWmTrigger(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *AlreadyExistsException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    case *InvalidObjectException:
  result.O3 = v
    case *MetaException:
  result.O4 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_wm_trigger: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "create_wm_trigger", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "create_wm_trigger", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterWmTrigger struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterWmTrigger) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterWmTriggerArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_wm_trigger", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreAlterWmTriggerResult{}
  var retval *WMAlterTriggerResponse
  if retval, err2 = p.handler.AlterWmTrigger(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_wm_trigger: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "alter_wm_trigger", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "alter_wm_trigger", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropWmTrigger struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropWmTrigger) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropWmTriggerArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_wm_trigger", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreDropWmTriggerResult{}
  var retval *WMDropTriggerResponse
  if retval, err2 = p.handler.DropWmTrigger(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *InvalidOperationException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_wm_trigger: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "drop_wm_trigger", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "drop_wm_trigger", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTriggersForResourceplan struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTriggersForResourceplan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTriggersForResourceplanArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_triggers_for_resourceplan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ThriftHiveMetastoreGetTriggersForResourceplanResult{}
  var retval *WMGetTriggersForResourePlanResponse
  if retval, err2 = p.handler.GetTriggersForResourceplan(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_triggers_for_resourceplan: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "get_triggers_for_resourceplan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "get_triggers_for_resourceplan", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type ThriftHiveMetastoreGetMetaConfArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewThriftHiveMetastoreGetMetaConfArgs() *ThriftHiveMetastoreGetMetaConfArgs {
  return &ThriftHiveMetastoreGetMetaConfArgs{}
}


func (p *ThriftHiveMetastoreGetMetaConfArgs) GetKey() string {
  return p.Key
}
func (p *ThriftHiveMetastoreGetMetaConfArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetMetaConfArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetMetaConfArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMetaConf_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetMetaConfArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetMetaConfArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetMetaConfArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetMetaConfResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetMetaConfResult() *ThriftHiveMetastoreGetMetaConfResult {
  return &ThriftHiveMetastoreGetMetaConfResult{}
}

var ThriftHiveMetastoreGetMetaConfResult_Success_DEFAULT string
func (p *ThriftHiveMetastoreGetMetaConfResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetMetaConfResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreGetMetaConfResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetMetaConfResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetMetaConfResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetMetaConfResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetMetaConfResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetMetaConfResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetMetaConfResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreGetMetaConfResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetMetaConfResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMetaConf_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetMetaConfResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetMetaConfResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetMetaConfResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetMetaConfResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type ThriftHiveMetastoreSetMetaConfArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Value string `thrift:"value,2" db:"value" json:"value"`
}

func NewThriftHiveMetastoreSetMetaConfArgs() *ThriftHiveMetastoreSetMetaConfArgs {
  return &ThriftHiveMetastoreSetMetaConfArgs{}
}


func (p *ThriftHiveMetastoreSetMetaConfArgs) GetKey() string {
  return p.Key
}

func (p *ThriftHiveMetastoreSetMetaConfArgs) GetValue() string {
  return p.Value
}
func (p *ThriftHiveMetastoreSetMetaConfArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetMetaConfArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ThriftHiveMetastoreSetMetaConfArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *ThriftHiveMetastoreSetMetaConfArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setMetaConf_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreSetMetaConfArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreSetMetaConfArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreSetMetaConfArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreSetMetaConfArgs(%+v)", *p)
}

// Attributes:
//  - O1
type ThriftHiveMetastoreSetMetaConfResult struct {
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreSetMetaConfResult() *ThriftHiveMetastoreSetMetaConfResult {
  return &ThriftHiveMetastoreSetMetaConfResult{}
}

var ThriftHiveMetastoreSetMetaConfResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreSetMetaConfResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreSetMetaConfResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreSetMetaConfResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreSetMetaConfResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetMetaConfResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetMetaConfResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setMetaConf_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreSetMetaConfResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreSetMetaConfResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreSetMetaConfResult(%+v)", *p)
}

// Attributes:
//  - Database
type ThriftHiveMetastoreCreateDatabaseArgs struct {
  Database *Database `thrift:"database,1" db:"database" json:"database"`
}

func NewThriftHiveMetastoreCreateDatabaseArgs() *ThriftHiveMetastoreCreateDatabaseArgs {
  return &ThriftHiveMetastoreCreateDatabaseArgs{}
}

var ThriftHiveMetastoreCreateDatabaseArgs_Database_DEFAULT *Database
func (p *ThriftHiveMetastoreCreateDatabaseArgs) GetDatabase() *Database {
  if !p.IsSetDatabase() {
    return ThriftHiveMetastoreCreateDatabaseArgs_Database_DEFAULT
  }
return p.Database
}
func (p *ThriftHiveMetastoreCreateDatabaseArgs) IsSetDatabase() bool {
  return p.Database != nil
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Database = &Database{}
  if err := p.Database.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Database), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_database_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "database", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:database: ", p), err) }
  if err := p.Database.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Database), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:database: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateDatabaseArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreCreateDatabaseResult struct {
  O1 *AlreadyExistsException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreCreateDatabaseResult() *ThriftHiveMetastoreCreateDatabaseResult {
  return &ThriftHiveMetastoreCreateDatabaseResult{}
}

var ThriftHiveMetastoreCreateDatabaseResult_O1_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreCreateDatabaseResult) GetO1() *AlreadyExistsException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCreateDatabaseResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreCreateDatabaseResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreCreateDatabaseResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreCreateDatabaseResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreCreateDatabaseResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCreateDatabaseResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreCreateDatabaseResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreCreateDatabaseResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &AlreadyExistsException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_database_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateDatabaseResult(%+v)", *p)
}

// Attributes:
//  - Name
type ThriftHiveMetastoreGetDatabaseArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewThriftHiveMetastoreGetDatabaseArgs() *ThriftHiveMetastoreGetDatabaseArgs {
  return &ThriftHiveMetastoreGetDatabaseArgs{}
}


func (p *ThriftHiveMetastoreGetDatabaseArgs) GetName() string {
  return p.Name
}
func (p *ThriftHiveMetastoreGetDatabaseArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_database_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetDatabaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetDatabaseArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetDatabaseResult struct {
  Success *Database `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetDatabaseResult() *ThriftHiveMetastoreGetDatabaseResult {
  return &ThriftHiveMetastoreGetDatabaseResult{}
}

var ThriftHiveMetastoreGetDatabaseResult_Success_DEFAULT *Database
func (p *ThriftHiveMetastoreGetDatabaseResult) GetSuccess() *Database {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetDatabaseResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetDatabaseResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetDatabaseResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetDatabaseResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetDatabaseResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetDatabaseResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetDatabaseResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetDatabaseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Database{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_database_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetDatabaseResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetDatabaseResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetDatabaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetDatabaseResult(%+v)", *p)
}

// Attributes:
//  - Name
//  - DeleteData
//  - Cascade
type ThriftHiveMetastoreDropDatabaseArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  DeleteData bool `thrift:"deleteData,2" db:"deleteData" json:"deleteData"`
  Cascade bool `thrift:"cascade,3" db:"cascade" json:"cascade"`
}

func NewThriftHiveMetastoreDropDatabaseArgs() *ThriftHiveMetastoreDropDatabaseArgs {
  return &ThriftHiveMetastoreDropDatabaseArgs{}
}


func (p *ThriftHiveMetastoreDropDatabaseArgs) GetName() string {
  return p.Name
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) GetDeleteData() bool {
  return p.DeleteData
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) GetCascade() bool {
  return p.Cascade
}
func (p *ThriftHiveMetastoreDropDatabaseArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeleteData = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Cascade = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_database_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deleteData", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deleteData: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.DeleteData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleteData (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deleteData: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cascade", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cascade: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Cascade)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cascade (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cascade: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropDatabaseArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreDropDatabaseResult struct {
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidOperationException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreDropDatabaseResult() *ThriftHiveMetastoreDropDatabaseResult {
  return &ThriftHiveMetastoreDropDatabaseResult{}
}

var ThriftHiveMetastoreDropDatabaseResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropDatabaseResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropDatabaseResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropDatabaseResult_O2_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreDropDatabaseResult) GetO2() *InvalidOperationException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropDatabaseResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreDropDatabaseResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropDatabaseResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreDropDatabaseResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreDropDatabaseResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidOperationException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_database_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropDatabaseResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropDatabaseResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropDatabaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropDatabaseResult(%+v)", *p)
}

// Attributes:
//  - Pattern
type ThriftHiveMetastoreGetDatabasesArgs struct {
  Pattern string `thrift:"pattern,1" db:"pattern" json:"pattern"`
}

func NewThriftHiveMetastoreGetDatabasesArgs() *ThriftHiveMetastoreGetDatabasesArgs {
  return &ThriftHiveMetastoreGetDatabasesArgs{}
}


func (p *ThriftHiveMetastoreGetDatabasesArgs) GetPattern() string {
  return p.Pattern
}
func (p *ThriftHiveMetastoreGetDatabasesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabasesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Pattern = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetDatabasesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_databases_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabasesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pattern", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pattern: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pattern)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pattern (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pattern: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetDatabasesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetDatabasesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetDatabasesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetDatabasesResult() *ThriftHiveMetastoreGetDatabasesResult {
  return &ThriftHiveMetastoreGetDatabasesResult{}
}

var ThriftHiveMetastoreGetDatabasesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetDatabasesResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetDatabasesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetDatabasesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetDatabasesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetDatabasesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem551 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem551 = v
}
    p.Success = append(p.Success, _elem551)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_databases_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetDatabasesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetDatabasesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetDatabasesResult(%+v)", *p)
}

type ThriftHiveMetastoreGetAllDatabasesArgs struct {
}

func NewThriftHiveMetastoreGetAllDatabasesArgs() *ThriftHiveMetastoreGetAllDatabasesArgs {
  return &ThriftHiveMetastoreGetAllDatabasesArgs{}
}

func (p *ThriftHiveMetastoreGetAllDatabasesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_all_databases_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAllDatabasesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetAllDatabasesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetAllDatabasesResult() *ThriftHiveMetastoreGetAllDatabasesResult {
  return &ThriftHiveMetastoreGetAllDatabasesResult{}
}

var ThriftHiveMetastoreGetAllDatabasesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetAllDatabasesResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetAllDatabasesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetAllDatabasesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetAllDatabasesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetAllDatabasesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem552 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem552 = v
}
    p.Success = append(p.Success, _elem552)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_all_databases_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAllDatabasesResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - Db
type ThriftHiveMetastoreAlterDatabaseArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  Db *Database `thrift:"db,2" db:"db" json:"db"`
}

func NewThriftHiveMetastoreAlterDatabaseArgs() *ThriftHiveMetastoreAlterDatabaseArgs {
  return &ThriftHiveMetastoreAlterDatabaseArgs{}
}


func (p *ThriftHiveMetastoreAlterDatabaseArgs) GetDbname() string {
  return p.Dbname
}
var ThriftHiveMetastoreAlterDatabaseArgs_Db_DEFAULT *Database
func (p *ThriftHiveMetastoreAlterDatabaseArgs) GetDb() *Database {
  if !p.IsSetDb() {
    return ThriftHiveMetastoreAlterDatabaseArgs_Db_DEFAULT
  }
return p.Db
}
func (p *ThriftHiveMetastoreAlterDatabaseArgs) IsSetDb() bool {
  return p.Db != nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Db = &Database{}
  if err := p.Db.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Db), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_database_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:db: ", p), err) }
  if err := p.Db.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Db), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:db: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterDatabaseArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterDatabaseResult struct {
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterDatabaseResult() *ThriftHiveMetastoreAlterDatabaseResult {
  return &ThriftHiveMetastoreAlterDatabaseResult{}
}

var ThriftHiveMetastoreAlterDatabaseResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterDatabaseResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterDatabaseResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterDatabaseResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreAlterDatabaseResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterDatabaseResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterDatabaseResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_database_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterDatabaseResult(%+v)", *p)
}

// Attributes:
//  - Name
type ThriftHiveMetastoreGetTypeArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewThriftHiveMetastoreGetTypeArgs() *ThriftHiveMetastoreGetTypeArgs {
  return &ThriftHiveMetastoreGetTypeArgs{}
}


func (p *ThriftHiveMetastoreGetTypeArgs) GetName() string {
  return p.Name
}
func (p *ThriftHiveMetastoreGetTypeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTypeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_type_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetTypeResult struct {
  Success *Type `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetTypeResult() *ThriftHiveMetastoreGetTypeResult {
  return &ThriftHiveMetastoreGetTypeResult{}
}

var ThriftHiveMetastoreGetTypeResult_Success_DEFAULT *Type
func (p *ThriftHiveMetastoreGetTypeResult) GetSuccess() *Type {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetTypeResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetTypeResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTypeResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTypeResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetTypeResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetTypeResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTypeResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetTypeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTypeResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTypeResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTypeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Type{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_type_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTypeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTypeResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTypeResult(%+v)", *p)
}

// Attributes:
//  - Type
type ThriftHiveMetastoreCreateTypeArgs struct {
  Type *Type `thrift:"type,1" db:"type" json:"type"`
}

func NewThriftHiveMetastoreCreateTypeArgs() *ThriftHiveMetastoreCreateTypeArgs {
  return &ThriftHiveMetastoreCreateTypeArgs{}
}

var ThriftHiveMetastoreCreateTypeArgs_Type_DEFAULT *Type
func (p *ThriftHiveMetastoreCreateTypeArgs) GetType() *Type {
  if !p.IsSetType() {
    return ThriftHiveMetastoreCreateTypeArgs_Type_DEFAULT
  }
return p.Type
}
func (p *ThriftHiveMetastoreCreateTypeArgs) IsSetType() bool {
  return p.Type != nil
}

func (p *ThriftHiveMetastoreCreateTypeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Type = &Type{}
  if err := p.Type.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Type), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_type_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := p.Type.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Type), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreCreateTypeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *AlreadyExistsException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreCreateTypeResult() *ThriftHiveMetastoreCreateTypeResult {
  return &ThriftHiveMetastoreCreateTypeResult{}
}

var ThriftHiveMetastoreCreateTypeResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreCreateTypeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreCreateTypeResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreCreateTypeResult_O1_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreCreateTypeResult) GetO1() *AlreadyExistsException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCreateTypeResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreCreateTypeResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreCreateTypeResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreCreateTypeResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreCreateTypeResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCreateTypeResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreCreateTypeResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreCreateTypeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &AlreadyExistsException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_type_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTypeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTypeResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTypeResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateTypeResult(%+v)", *p)
}

// Attributes:
//  - Type
type ThriftHiveMetastoreDropTypeArgs struct {
  Type string `thrift:"type,1" db:"type" json:"type"`
}

func NewThriftHiveMetastoreDropTypeArgs() *ThriftHiveMetastoreDropTypeArgs {
  return &ThriftHiveMetastoreDropTypeArgs{}
}


func (p *ThriftHiveMetastoreDropTypeArgs) GetType() string {
  return p.Type
}
func (p *ThriftHiveMetastoreDropTypeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTypeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropTypeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_type_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropTypeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropTypeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropTypeResult() *ThriftHiveMetastoreDropTypeResult {
  return &ThriftHiveMetastoreDropTypeResult{}
}

var ThriftHiveMetastoreDropTypeResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDropTypeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropTypeResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDropTypeResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropTypeResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropTypeResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropTypeResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropTypeResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropTypeResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreDropTypeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropTypeResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropTypeResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropTypeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTypeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDropTypeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTypeResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTypeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_type_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropTypeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropTypeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropTypeResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropTypeResult(%+v)", *p)
}

// Attributes:
//  - Name
type ThriftHiveMetastoreGetTypeAllArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewThriftHiveMetastoreGetTypeAllArgs() *ThriftHiveMetastoreGetTypeAllArgs {
  return &ThriftHiveMetastoreGetTypeAllArgs{}
}


func (p *ThriftHiveMetastoreGetTypeAllArgs) GetName() string {
  return p.Name
}
func (p *ThriftHiveMetastoreGetTypeAllArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeAllArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTypeAllArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_type_all_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeAllArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTypeAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTypeAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O2
type ThriftHiveMetastoreGetTypeAllResult struct {
  Success map[string]*Type `thrift:"success,0" db:"success" json:"success,omitempty"`
  O2 *MetaException `thrift:"o2,1" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetTypeAllResult() *ThriftHiveMetastoreGetTypeAllResult {
  return &ThriftHiveMetastoreGetTypeAllResult{}
}

var ThriftHiveMetastoreGetTypeAllResult_Success_DEFAULT map[string]*Type

func (p *ThriftHiveMetastoreGetTypeAllResult) GetSuccess() map[string]*Type {
  return p.Success
}
var ThriftHiveMetastoreGetTypeAllResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTypeAllResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTypeAllResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetTypeAllResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Type, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key553 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key553 = v
}
    _val554 := &Type{}
    if err := _val554.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val554), err)
    }
    p.Success[_key553] = _val554
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_type_all_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTypeAllResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTypeAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTypeAllResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TableName
type ThriftHiveMetastoreGetFieldsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
}

func NewThriftHiveMetastoreGetFieldsArgs() *ThriftHiveMetastoreGetFieldsArgs {
  return &ThriftHiveMetastoreGetFieldsArgs{}
}


func (p *ThriftHiveMetastoreGetFieldsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetFieldsArgs) GetTableName() string {
  return p.TableName
}
func (p *ThriftHiveMetastoreGetFieldsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_fields_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetFieldsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreGetFieldsResult struct {
  Success []*FieldSchema `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *UnknownTableException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *UnknownDBException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreGetFieldsResult() *ThriftHiveMetastoreGetFieldsResult {
  return &ThriftHiveMetastoreGetFieldsResult{}
}

var ThriftHiveMetastoreGetFieldsResult_Success_DEFAULT []*FieldSchema

func (p *ThriftHiveMetastoreGetFieldsResult) GetSuccess() []*FieldSchema {
  return p.Success
}
var ThriftHiveMetastoreGetFieldsResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetFieldsResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetFieldsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetFieldsResult_O2_DEFAULT *UnknownTableException
func (p *ThriftHiveMetastoreGetFieldsResult) GetO2() *UnknownTableException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetFieldsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreGetFieldsResult_O3_DEFAULT *UnknownDBException
func (p *ThriftHiveMetastoreGetFieldsResult) GetO3() *UnknownDBException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreGetFieldsResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreGetFieldsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem555 := &FieldSchema{}
    if err := _elem555.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem555), err)
    }
    p.Success = append(p.Success, _elem555)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &UnknownTableException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &UnknownDBException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_fields_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetFieldsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TableName
//  - EnvironmentContext
type ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,3" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs() *ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs{}
}


func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs) GetTableName() string {
  return p.TableName
}
var ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_fields_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "environment_context", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetFieldsWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult struct {
  Success []*FieldSchema `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *UnknownTableException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *UnknownDBException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreGetFieldsWithEnvironmentContextResult() *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult {
  return &ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult_Success_DEFAULT []*FieldSchema

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) GetSuccess() []*FieldSchema {
  return p.Success
}
var ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult_O2_DEFAULT *UnknownTableException
func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) GetO2() *UnknownTableException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult_O3_DEFAULT *UnknownDBException
func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) GetO3() *UnknownDBException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem556 := &FieldSchema{}
    if err := _elem556.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem556), err)
    }
    p.Success = append(p.Success, _elem556)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &UnknownTableException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &UnknownDBException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_fields_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetFieldsWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TableName
type ThriftHiveMetastoreGetSchemaArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
}

func NewThriftHiveMetastoreGetSchemaArgs() *ThriftHiveMetastoreGetSchemaArgs {
  return &ThriftHiveMetastoreGetSchemaArgs{}
}


func (p *ThriftHiveMetastoreGetSchemaArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetSchemaArgs) GetTableName() string {
  return p.TableName
}
func (p *ThriftHiveMetastoreGetSchemaArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_schema_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetSchemaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreGetSchemaResult struct {
  Success []*FieldSchema `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *UnknownTableException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *UnknownDBException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreGetSchemaResult() *ThriftHiveMetastoreGetSchemaResult {
  return &ThriftHiveMetastoreGetSchemaResult{}
}

var ThriftHiveMetastoreGetSchemaResult_Success_DEFAULT []*FieldSchema

func (p *ThriftHiveMetastoreGetSchemaResult) GetSuccess() []*FieldSchema {
  return p.Success
}
var ThriftHiveMetastoreGetSchemaResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetSchemaResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetSchemaResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetSchemaResult_O2_DEFAULT *UnknownTableException
func (p *ThriftHiveMetastoreGetSchemaResult) GetO2() *UnknownTableException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetSchemaResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreGetSchemaResult_O3_DEFAULT *UnknownDBException
func (p *ThriftHiveMetastoreGetSchemaResult) GetO3() *UnknownDBException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreGetSchemaResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreGetSchemaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem557 := &FieldSchema{}
    if err := _elem557.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem557), err)
    }
    p.Success = append(p.Success, _elem557)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &UnknownTableException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &UnknownDBException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_schema_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetSchemaResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TableName
//  - EnvironmentContext
type ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,3" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs() *ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs{}
}


func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs) GetTableName() string {
  return p.TableName
}
var ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_schema_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "environment_context", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetSchemaWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult struct {
  Success []*FieldSchema `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *UnknownTableException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *UnknownDBException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreGetSchemaWithEnvironmentContextResult() *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult {
  return &ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult_Success_DEFAULT []*FieldSchema

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) GetSuccess() []*FieldSchema {
  return p.Success
}
var ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult_O2_DEFAULT *UnknownTableException
func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) GetO2() *UnknownTableException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult_O3_DEFAULT *UnknownDBException
func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) GetO3() *UnknownDBException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem558 := &FieldSchema{}
    if err := _elem558.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem558), err)
    }
    p.Success = append(p.Success, _elem558)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &UnknownTableException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &UnknownDBException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_schema_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetSchemaWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - Tbl
type ThriftHiveMetastoreCreateTableArgs struct {
  Tbl *Table `thrift:"tbl,1" db:"tbl" json:"tbl"`
}

func NewThriftHiveMetastoreCreateTableArgs() *ThriftHiveMetastoreCreateTableArgs {
  return &ThriftHiveMetastoreCreateTableArgs{}
}

var ThriftHiveMetastoreCreateTableArgs_Tbl_DEFAULT *Table
func (p *ThriftHiveMetastoreCreateTableArgs) GetTbl() *Table {
  if !p.IsSetTbl() {
    return ThriftHiveMetastoreCreateTableArgs_Tbl_DEFAULT
  }
return p.Tbl
}
func (p *ThriftHiveMetastoreCreateTableArgs) IsSetTbl() bool {
  return p.Tbl != nil
}

func (p *ThriftHiveMetastoreCreateTableArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tbl = &Table{}
  if err := p.Tbl.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tbl), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tbl: ", p), err) }
  if err := p.Tbl.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tbl), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tbl: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateTableArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreCreateTableResult struct {
  O1 *AlreadyExistsException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *NoSuchObjectException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreCreateTableResult() *ThriftHiveMetastoreCreateTableResult {
  return &ThriftHiveMetastoreCreateTableResult{}
}

var ThriftHiveMetastoreCreateTableResult_O1_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreCreateTableResult) GetO1() *AlreadyExistsException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCreateTableResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreCreateTableResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreCreateTableResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreCreateTableResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreCreateTableResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCreateTableResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreCreateTableResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreCreateTableResult_O4_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreCreateTableResult) GetO4() *NoSuchObjectException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreCreateTableResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreCreateTableResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateTableResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateTableResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateTableResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreCreateTableResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &AlreadyExistsException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &NoSuchObjectException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateTableResult(%+v)", *p)
}

// Attributes:
//  - Tbl
//  - EnvironmentContext
type ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs struct {
  Tbl *Table `thrift:"tbl,1" db:"tbl" json:"tbl"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,2" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreCreateTableWithEnvironmentContextArgs() *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs{}
}

var ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs_Tbl_DEFAULT *Table
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) GetTbl() *Table {
  if !p.IsSetTbl() {
    return ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs_Tbl_DEFAULT
  }
return p.Tbl
}
var ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) IsSetTbl() bool {
  return p.Tbl != nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tbl = &Table{}
  if err := p.Tbl.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tbl), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_table_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tbl: ", p), err) }
  if err := p.Tbl.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tbl), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tbl: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "environment_context", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreCreateTableWithEnvironmentContextResult struct {
  O1 *AlreadyExistsException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *NoSuchObjectException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreCreateTableWithEnvironmentContextResult() *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult {
  return &ThriftHiveMetastoreCreateTableWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O1_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) GetO1() *AlreadyExistsException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O4_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) GetO4() *NoSuchObjectException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &AlreadyExistsException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &NoSuchObjectException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_table_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateTableWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - Tbl
//  - PrimaryKeys
//  - ForeignKeys
//  - UniqueConstraints
//  - NotNullConstraints
type ThriftHiveMetastoreCreateTableWithConstraintsArgs struct {
  Tbl *Table `thrift:"tbl,1" db:"tbl" json:"tbl"`
  PrimaryKeys []*SQLPrimaryKey `thrift:"primaryKeys,2" db:"primaryKeys" json:"primaryKeys"`
  ForeignKeys []*SQLForeignKey `thrift:"foreignKeys,3" db:"foreignKeys" json:"foreignKeys"`
  UniqueConstraints []*SQLUniqueConstraint `thrift:"uniqueConstraints,4" db:"uniqueConstraints" json:"uniqueConstraints"`
  NotNullConstraints []*SQLNotNullConstraint `thrift:"notNullConstraints,5" db:"notNullConstraints" json:"notNullConstraints"`
}

func NewThriftHiveMetastoreCreateTableWithConstraintsArgs() *ThriftHiveMetastoreCreateTableWithConstraintsArgs {
  return &ThriftHiveMetastoreCreateTableWithConstraintsArgs{}
}

var ThriftHiveMetastoreCreateTableWithConstraintsArgs_Tbl_DEFAULT *Table
func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs) GetTbl() *Table {
  if !p.IsSetTbl() {
    return ThriftHiveMetastoreCreateTableWithConstraintsArgs_Tbl_DEFAULT
  }
return p.Tbl
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs) GetPrimaryKeys() []*SQLPrimaryKey {
  return p.PrimaryKeys
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs) GetForeignKeys() []*SQLForeignKey {
  return p.ForeignKeys
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs) GetUniqueConstraints() []*SQLUniqueConstraint {
  return p.UniqueConstraints
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs) GetNotNullConstraints() []*SQLNotNullConstraint {
  return p.NotNullConstraints
}
func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs) IsSetTbl() bool {
  return p.Tbl != nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tbl = &Table{}
  if err := p.Tbl.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tbl), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SQLPrimaryKey, 0, size)
  p.PrimaryKeys =  tSlice
  for i := 0; i < size; i ++ {
    _elem559 := &SQLPrimaryKey{}
    if err := _elem559.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem559), err)
    }
    p.PrimaryKeys = append(p.PrimaryKeys, _elem559)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SQLForeignKey, 0, size)
  p.ForeignKeys =  tSlice
  for i := 0; i < size; i ++ {
    _elem560 := &SQLForeignKey{}
    if err := _elem560.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem560), err)
    }
    p.ForeignKeys = append(p.ForeignKeys, _elem560)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SQLUniqueConstraint, 0, size)
  p.UniqueConstraints =  tSlice
  for i := 0; i < size; i ++ {
    _elem561 := &SQLUniqueConstraint{}
    if err := _elem561.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem561), err)
    }
    p.UniqueConstraints = append(p.UniqueConstraints, _elem561)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SQLNotNullConstraint, 0, size)
  p.NotNullConstraints =  tSlice
  for i := 0; i < size; i ++ {
    _elem562 := &SQLNotNullConstraint{}
    if err := _elem562.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem562), err)
    }
    p.NotNullConstraints = append(p.NotNullConstraints, _elem562)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_table_with_constraints_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tbl: ", p), err) }
  if err := p.Tbl.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tbl), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tbl: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "primaryKeys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:primaryKeys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.PrimaryKeys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PrimaryKeys {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:primaryKeys: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "foreignKeys", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:foreignKeys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ForeignKeys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ForeignKeys {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:foreignKeys: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uniqueConstraints", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:uniqueConstraints: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.UniqueConstraints)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UniqueConstraints {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:uniqueConstraints: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notNullConstraints", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:notNullConstraints: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.NotNullConstraints)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NotNullConstraints {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:notNullConstraints: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateTableWithConstraintsArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreCreateTableWithConstraintsResult struct {
  O1 *AlreadyExistsException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *NoSuchObjectException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreCreateTableWithConstraintsResult() *ThriftHiveMetastoreCreateTableWithConstraintsResult {
  return &ThriftHiveMetastoreCreateTableWithConstraintsResult{}
}

var ThriftHiveMetastoreCreateTableWithConstraintsResult_O1_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) GetO1() *AlreadyExistsException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCreateTableWithConstraintsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreCreateTableWithConstraintsResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreCreateTableWithConstraintsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreCreateTableWithConstraintsResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreCreateTableWithConstraintsResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreCreateTableWithConstraintsResult_O4_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) GetO4() *NoSuchObjectException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreCreateTableWithConstraintsResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &AlreadyExistsException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &NoSuchObjectException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_table_with_constraints_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithConstraintsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateTableWithConstraintsResult(%+v)", *p)
}

// Attributes:
//  - Req
type ThriftHiveMetastoreDropConstraintArgs struct {
  Req *DropConstraintRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewThriftHiveMetastoreDropConstraintArgs() *ThriftHiveMetastoreDropConstraintArgs {
  return &ThriftHiveMetastoreDropConstraintArgs{}
}

var ThriftHiveMetastoreDropConstraintArgs_Req_DEFAULT *DropConstraintRequest
func (p *ThriftHiveMetastoreDropConstraintArgs) GetReq() *DropConstraintRequest {
  if !p.IsSetReq() {
    return ThriftHiveMetastoreDropConstraintArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ThriftHiveMetastoreDropConstraintArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ThriftHiveMetastoreDropConstraintArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropConstraintArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DropConstraintRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropConstraintArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_constraint_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropConstraintArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropConstraintArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropConstraintArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O3
type ThriftHiveMetastoreDropConstraintResult struct {
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O3 *MetaException `thrift:"o3,2" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreDropConstraintResult() *ThriftHiveMetastoreDropConstraintResult {
  return &ThriftHiveMetastoreDropConstraintResult{}
}

var ThriftHiveMetastoreDropConstraintResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropConstraintResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropConstraintResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropConstraintResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropConstraintResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreDropConstraintResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreDropConstraintResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropConstraintResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreDropConstraintResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropConstraintResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropConstraintResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropConstraintResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_constraint_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropConstraintResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropConstraintResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropConstraintResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropConstraintResult(%+v)", *p)
}

// Attributes:
//  - Req
type ThriftHiveMetastoreAddPrimaryKeyArgs struct {
  Req *AddPrimaryKeyRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewThriftHiveMetastoreAddPrimaryKeyArgs() *ThriftHiveMetastoreAddPrimaryKeyArgs {
  return &ThriftHiveMetastoreAddPrimaryKeyArgs{}
}

var ThriftHiveMetastoreAddPrimaryKeyArgs_Req_DEFAULT *AddPrimaryKeyRequest
func (p *ThriftHiveMetastoreAddPrimaryKeyArgs) GetReq() *AddPrimaryKeyRequest {
  if !p.IsSetReq() {
    return ThriftHiveMetastoreAddPrimaryKeyArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ThriftHiveMetastoreAddPrimaryKeyArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ThriftHiveMetastoreAddPrimaryKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPrimaryKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AddPrimaryKeyRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPrimaryKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_primary_key_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPrimaryKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddPrimaryKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPrimaryKeyArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAddPrimaryKeyResult struct {
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAddPrimaryKeyResult() *ThriftHiveMetastoreAddPrimaryKeyResult {
  return &ThriftHiveMetastoreAddPrimaryKeyResult{}
}

var ThriftHiveMetastoreAddPrimaryKeyResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreAddPrimaryKeyResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddPrimaryKeyResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddPrimaryKeyResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddPrimaryKeyResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddPrimaryKeyResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAddPrimaryKeyResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddPrimaryKeyResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddPrimaryKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPrimaryKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPrimaryKeyResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPrimaryKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_primary_key_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPrimaryKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPrimaryKeyResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPrimaryKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPrimaryKeyResult(%+v)", *p)
}

// Attributes:
//  - Req
type ThriftHiveMetastoreAddForeignKeyArgs struct {
  Req *AddForeignKeyRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewThriftHiveMetastoreAddForeignKeyArgs() *ThriftHiveMetastoreAddForeignKeyArgs {
  return &ThriftHiveMetastoreAddForeignKeyArgs{}
}

var ThriftHiveMetastoreAddForeignKeyArgs_Req_DEFAULT *AddForeignKeyRequest
func (p *ThriftHiveMetastoreAddForeignKeyArgs) GetReq() *AddForeignKeyRequest {
  if !p.IsSetReq() {
    return ThriftHiveMetastoreAddForeignKeyArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ThriftHiveMetastoreAddForeignKeyArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ThriftHiveMetastoreAddForeignKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddForeignKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AddForeignKeyRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddForeignKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_foreign_key_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddForeignKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddForeignKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddForeignKeyArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAddForeignKeyResult struct {
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAddForeignKeyResult() *ThriftHiveMetastoreAddForeignKeyResult {
  return &ThriftHiveMetastoreAddForeignKeyResult{}
}

var ThriftHiveMetastoreAddForeignKeyResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreAddForeignKeyResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddForeignKeyResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddForeignKeyResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddForeignKeyResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddForeignKeyResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAddForeignKeyResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddForeignKeyResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddForeignKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddForeignKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddForeignKeyResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddForeignKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_foreign_key_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddForeignKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddForeignKeyResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddForeignKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddForeignKeyResult(%+v)", *p)
}

// Attributes:
//  - Req
type ThriftHiveMetastoreAddUniqueConstraintArgs struct {
  Req *AddUniqueConstraintRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewThriftHiveMetastoreAddUniqueConstraintArgs() *ThriftHiveMetastoreAddUniqueConstraintArgs {
  return &ThriftHiveMetastoreAddUniqueConstraintArgs{}
}

var ThriftHiveMetastoreAddUniqueConstraintArgs_Req_DEFAULT *AddUniqueConstraintRequest
func (p *ThriftHiveMetastoreAddUniqueConstraintArgs) GetReq() *AddUniqueConstraintRequest {
  if !p.IsSetReq() {
    return ThriftHiveMetastoreAddUniqueConstraintArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ThriftHiveMetastoreAddUniqueConstraintArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ThriftHiveMetastoreAddUniqueConstraintArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddUniqueConstraintArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AddUniqueConstraintRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddUniqueConstraintArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_unique_constraint_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddUniqueConstraintArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddUniqueConstraintArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddUniqueConstraintArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAddUniqueConstraintResult struct {
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAddUniqueConstraintResult() *ThriftHiveMetastoreAddUniqueConstraintResult {
  return &ThriftHiveMetastoreAddUniqueConstraintResult{}
}

var ThriftHiveMetastoreAddUniqueConstraintResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreAddUniqueConstraintResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddUniqueConstraintResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddUniqueConstraintResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddUniqueConstraintResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddUniqueConstraintResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAddUniqueConstraintResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddUniqueConstraintResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddUniqueConstraintResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddUniqueConstraintResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddUniqueConstraintResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddUniqueConstraintResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_unique_constraint_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddUniqueConstraintResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddUniqueConstraintResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddUniqueConstraintResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddUniqueConstraintResult(%+v)", *p)
}

// Attributes:
//  - Req
type ThriftHiveMetastoreAddNotNullConstraintArgs struct {
  Req *AddNotNullConstraintRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewThriftHiveMetastoreAddNotNullConstraintArgs() *ThriftHiveMetastoreAddNotNullConstraintArgs {
  return &ThriftHiveMetastoreAddNotNullConstraintArgs{}
}

var ThriftHiveMetastoreAddNotNullConstraintArgs_Req_DEFAULT *AddNotNullConstraintRequest
func (p *ThriftHiveMetastoreAddNotNullConstraintArgs) GetReq() *AddNotNullConstraintRequest {
  if !p.IsSetReq() {
    return ThriftHiveMetastoreAddNotNullConstraintArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ThriftHiveMetastoreAddNotNullConstraintArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ThriftHiveMetastoreAddNotNullConstraintArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddNotNullConstraintArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AddNotNullConstraintRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddNotNullConstraintArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_not_null_constraint_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddNotNullConstraintArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddNotNullConstraintArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddNotNullConstraintArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAddNotNullConstraintResult struct {
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAddNotNullConstraintResult() *ThriftHiveMetastoreAddNotNullConstraintResult {
  return &ThriftHiveMetastoreAddNotNullConstraintResult{}
}

var ThriftHiveMetastoreAddNotNullConstraintResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreAddNotNullConstraintResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddNotNullConstraintResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddNotNullConstraintResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddNotNullConstraintResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddNotNullConstraintResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAddNotNullConstraintResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddNotNullConstraintResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddNotNullConstraintResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddNotNullConstraintResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddNotNullConstraintResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddNotNullConstraintResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_not_null_constraint_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddNotNullConstraintResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddNotNullConstraintResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddNotNullConstraintResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddNotNullConstraintResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - Name
//  - DeleteData
type ThriftHiveMetastoreDropTableArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  DeleteData bool `thrift:"deleteData,3" db:"deleteData" json:"deleteData"`
}

func NewThriftHiveMetastoreDropTableArgs() *ThriftHiveMetastoreDropTableArgs {
  return &ThriftHiveMetastoreDropTableArgs{}
}


func (p *ThriftHiveMetastoreDropTableArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreDropTableArgs) GetName() string {
  return p.Name
}

func (p *ThriftHiveMetastoreDropTableArgs) GetDeleteData() bool {
  return p.DeleteData
}
func (p *ThriftHiveMetastoreDropTableArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTableArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropTableArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropTableArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DeleteData = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropTableArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropTableArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropTableArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropTableArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deleteData", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deleteData: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.DeleteData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleteData (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deleteData: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropTableArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O3
type ThriftHiveMetastoreDropTableResult struct {
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O3 *MetaException `thrift:"o3,2" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreDropTableResult() *ThriftHiveMetastoreDropTableResult {
  return &ThriftHiveMetastoreDropTableResult{}
}

var ThriftHiveMetastoreDropTableResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropTableResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropTableResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropTableResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropTableResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreDropTableResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreDropTableResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropTableResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreDropTableResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTableResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTableResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTableResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropTableResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropTableResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropTableResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - Name
//  - DeleteData
//  - EnvironmentContext
type ThriftHiveMetastoreDropTableWithEnvironmentContextArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  DeleteData bool `thrift:"deleteData,3" db:"deleteData" json:"deleteData"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,4" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreDropTableWithEnvironmentContextArgs() *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreDropTableWithEnvironmentContextArgs{}
}


func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs) GetName() string {
  return p.Name
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs) GetDeleteData() bool {
  return p.DeleteData
}
var ThriftHiveMetastoreDropTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreDropTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DeleteData = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_table_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deleteData", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deleteData: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.DeleteData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleteData (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deleteData: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "environment_context", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropTableWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O3
type ThriftHiveMetastoreDropTableWithEnvironmentContextResult struct {
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O3 *MetaException `thrift:"o3,2" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreDropTableWithEnvironmentContextResult() *ThriftHiveMetastoreDropTableWithEnvironmentContextResult {
  return &ThriftHiveMetastoreDropTableWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreDropTableWithEnvironmentContextResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropTableWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropTableWithEnvironmentContextResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreDropTableWithEnvironmentContextResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_table_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropTableWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropTableWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TableName
//  - PartNames
type ThriftHiveMetastoreTruncateTableArgs struct {
  DbName string `thrift:"dbName,1" db:"dbName" json:"dbName"`
  TableName string `thrift:"tableName,2" db:"tableName" json:"tableName"`
  PartNames []string `thrift:"partNames,3" db:"partNames" json:"partNames"`
}

func NewThriftHiveMetastoreTruncateTableArgs() *ThriftHiveMetastoreTruncateTableArgs {
  return &ThriftHiveMetastoreTruncateTableArgs{}
}


func (p *ThriftHiveMetastoreTruncateTableArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreTruncateTableArgs) GetTableName() string {
  return p.TableName
}

func (p *ThriftHiveMetastoreTruncateTableArgs) GetPartNames() []string {
  return p.PartNames
}
func (p *ThriftHiveMetastoreTruncateTableArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreTruncateTableArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreTruncateTableArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *ThriftHiveMetastoreTruncateTableArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem563 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem563 = v
}
    p.PartNames = append(p.PartNames, _elem563)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreTruncateTableArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "truncate_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreTruncateTableArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreTruncateTableArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tableName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreTruncateTableArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partNames", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partNames: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartNames {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partNames: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreTruncateTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreTruncateTableArgs(%+v)", *p)
}

// Attributes:
//  - O1
type ThriftHiveMetastoreTruncateTableResult struct {
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreTruncateTableResult() *ThriftHiveMetastoreTruncateTableResult {
  return &ThriftHiveMetastoreTruncateTableResult{}
}

var ThriftHiveMetastoreTruncateTableResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreTruncateTableResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreTruncateTableResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreTruncateTableResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreTruncateTableResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreTruncateTableResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreTruncateTableResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "truncate_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreTruncateTableResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreTruncateTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreTruncateTableResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - Pattern
type ThriftHiveMetastoreGetTablesArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  Pattern string `thrift:"pattern,2" db:"pattern" json:"pattern"`
}

func NewThriftHiveMetastoreGetTablesArgs() *ThriftHiveMetastoreGetTablesArgs {
  return &ThriftHiveMetastoreGetTablesArgs{}
}


func (p *ThriftHiveMetastoreGetTablesArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetTablesArgs) GetPattern() string {
  return p.Pattern
}
func (p *ThriftHiveMetastoreGetTablesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTablesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pattern = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTablesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_tables_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTablesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pattern", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pattern: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pattern)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pattern (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pattern: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTablesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetTablesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetTablesResult() *ThriftHiveMetastoreGetTablesResult {
  return &ThriftHiveMetastoreGetTablesResult{}
}

var ThriftHiveMetastoreGetTablesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetTablesResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetTablesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTablesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTablesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetTablesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTablesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTablesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem564 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem564 = v
}
    p.Success = append(p.Success, _elem564)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_tables_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTablesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTablesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTablesResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - Pattern
//  - TableType
type ThriftHiveMetastoreGetTablesByTypeArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  Pattern string `thrift:"pattern,2" db:"pattern" json:"pattern"`
  TableType string `thrift:"tableType,3" db:"tableType" json:"tableType"`
}

func NewThriftHiveMetastoreGetTablesByTypeArgs() *ThriftHiveMetastoreGetTablesByTypeArgs {
  return &ThriftHiveMetastoreGetTablesByTypeArgs{}
}


func (p *ThriftHiveMetastoreGetTablesByTypeArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetTablesByTypeArgs) GetPattern() string {
  return p.Pattern
}

func (p *ThriftHiveMetastoreGetTablesByTypeArgs) GetTableType() string {
  return p.TableType
}
func (p *ThriftHiveMetastoreGetTablesByTypeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesByTypeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTablesByTypeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pattern = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTablesByTypeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TableType = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTablesByTypeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_tables_by_type_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesByTypeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTablesByTypeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pattern", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pattern: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pattern)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pattern (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pattern: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTablesByTypeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tableType", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tableType: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tableType: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTablesByTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTablesByTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetTablesByTypeResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetTablesByTypeResult() *ThriftHiveMetastoreGetTablesByTypeResult {
  return &ThriftHiveMetastoreGetTablesByTypeResult{}
}

var ThriftHiveMetastoreGetTablesByTypeResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetTablesByTypeResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetTablesByTypeResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTablesByTypeResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTablesByTypeResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetTablesByTypeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTablesByTypeResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTablesByTypeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesByTypeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem565 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem565 = v
}
    p.Success = append(p.Success, _elem565)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesByTypeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesByTypeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_tables_by_type_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesByTypeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTablesByTypeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTablesByTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTablesByTypeResult(%+v)", *p)
}

// Attributes:
//  - DbPatterns
//  - TblPatterns
//  - TblTypes
type ThriftHiveMetastoreGetTableMetaArgs struct {
  DbPatterns string `thrift:"db_patterns,1" db:"db_patterns" json:"db_patterns"`
  TblPatterns string `thrift:"tbl_patterns,2" db:"tbl_patterns" json:"tbl_patterns"`
  TblTypes []string `thrift:"tbl_types,3" db:"tbl_types" json:"tbl_types"`
}

func NewThriftHiveMetastoreGetTableMetaArgs() *ThriftHiveMetastoreGetTableMetaArgs {
  return &ThriftHiveMetastoreGetTableMetaArgs{}
}


func (p *ThriftHiveMetastoreGetTableMetaArgs) GetDbPatterns() string {
  return p.DbPatterns
}

func (p *ThriftHiveMetastoreGetTableMetaArgs) GetTblPatterns() string {
  return p.TblPatterns
}

func (p *ThriftHiveMetastoreGetTableMetaArgs) GetTblTypes() []string {
  return p.TblTypes
}
func (p *ThriftHiveMetastoreGetTableMetaArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableMetaArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbPatterns = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableMetaArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblPatterns = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableMetaArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.TblTypes =  tSlice
  for i := 0; i < size; i ++ {
var _elem566 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem566 = v
}
    p.TblTypes = append(p.TblTypes, _elem566)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableMetaArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_meta_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableMetaArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_patterns", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_patterns: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbPatterns)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_patterns (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_patterns: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableMetaArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_patterns", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_patterns: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblPatterns)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_patterns (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_patterns: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableMetaArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_types", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tbl_types: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.TblTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TblTypes {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tbl_types: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableMetaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableMetaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetTableMetaResult struct {
  Success []*TableMeta `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetTableMetaResult() *ThriftHiveMetastoreGetTableMetaResult {
  return &ThriftHiveMetastoreGetTableMetaResult{}
}

var ThriftHiveMetastoreGetTableMetaResult_Success_DEFAULT []*TableMeta

func (p *ThriftHiveMetastoreGetTableMetaResult) GetSuccess() []*TableMeta {
  return p.Success
}
var ThriftHiveMetastoreGetTableMetaResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTableMetaResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTableMetaResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetTableMetaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTableMetaResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTableMetaResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableMetaResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TableMeta, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem567 := &TableMeta{}
    if err := _elem567.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem567), err)
    }
    p.Success = append(p.Success, _elem567)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableMetaResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableMetaResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_meta_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableMetaResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableMetaResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableMetaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableMetaResult(%+v)", *p)
}

// Attributes:
//  - DbName
type ThriftHiveMetastoreGetAllTablesArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
}

func NewThriftHiveMetastoreGetAllTablesArgs() *ThriftHiveMetastoreGetAllTablesArgs {
  return &ThriftHiveMetastoreGetAllTablesArgs{}
}


func (p *ThriftHiveMetastoreGetAllTablesArgs) GetDbName() string {
  return p.DbName
}
func (p *ThriftHiveMetastoreGetAllTablesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTablesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetAllTablesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_all_tables_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTablesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetAllTablesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAllTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetAllTablesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetAllTablesResult() *ThriftHiveMetastoreGetAllTablesResult {
  return &ThriftHiveMetastoreGetAllTablesResult{}
}

var ThriftHiveMetastoreGetAllTablesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetAllTablesResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetAllTablesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetAllTablesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetAllTablesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetAllTablesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem568 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem568 = v
}
    p.Success = append(p.Success, _elem568)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_all_tables_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAllTablesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAllTablesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAllTablesResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - TblName
type ThriftHiveMetastoreGetTableArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
}

func NewThriftHiveMetastoreGetTableArgs() *ThriftHiveMetastoreGetTableArgs {
  return &ThriftHiveMetastoreGetTableArgs{}
}


func (p *ThriftHiveMetastoreGetTableArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreGetTableArgs) GetTblName() string {
  return p.TblName
}
func (p *ThriftHiveMetastoreGetTableArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetTableResult struct {
  Success *Table `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetTableResult() *ThriftHiveMetastoreGetTableResult {
  return &ThriftHiveMetastoreGetTableResult{}
}

var ThriftHiveMetastoreGetTableResult_Success_DEFAULT *Table
func (p *ThriftHiveMetastoreGetTableResult) GetSuccess() *Table {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetTableResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetTableResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTableResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTableResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetTableResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetTableResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTableResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetTableResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTableResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTableResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTableResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Table{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - TblNames
type ThriftHiveMetastoreGetTableObjectsByNameArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  TblNames []string `thrift:"tbl_names,2" db:"tbl_names" json:"tbl_names"`
}

func NewThriftHiveMetastoreGetTableObjectsByNameArgs() *ThriftHiveMetastoreGetTableObjectsByNameArgs {
  return &ThriftHiveMetastoreGetTableObjectsByNameArgs{}
}


func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs) GetTblNames() []string {
  return p.TblNames
}
func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.TblNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem569 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem569 = v
}
    p.TblNames = append(p.TblNames, _elem569)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_objects_by_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_names", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_names: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.TblNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TblNames {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_names: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableObjectsByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreGetTableObjectsByNameResult struct {
  Success []*Table `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreGetTableObjectsByNameResult() *ThriftHiveMetastoreGetTableObjectsByNameResult {
  return &ThriftHiveMetastoreGetTableObjectsByNameResult{}
}

var ThriftHiveMetastoreGetTableObjectsByNameResult_Success_DEFAULT []*Table

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) GetSuccess() []*Table {
  return p.Success
}
func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Table, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem570 := &Table{}
    if err := _elem570.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem570), err)
    }
    p.Success = append(p.Success, _elem570)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_objects_by_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableObjectsByNameResult(%+v)", *p)
}

// Attributes:
//  - Req
type ThriftHiveMetastoreGetTableReqArgs struct {
  Req *GetTableRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewThriftHiveMetastoreGetTableReqArgs() *ThriftHiveMetastoreGetTableReqArgs {
  return &ThriftHiveMetastoreGetTableReqArgs{}
}

var ThriftHiveMetastoreGetTableReqArgs_Req_DEFAULT *GetTableRequest
func (p *ThriftHiveMetastoreGetTableReqArgs) GetReq() *GetTableRequest {
  if !p.IsSetReq() {
    return ThriftHiveMetastoreGetTableReqArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ThriftHiveMetastoreGetTableReqArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ThriftHiveMetastoreGetTableReqArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableReqArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetTableRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableReqArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_req_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableReqArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableReqArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableReqArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetTableReqResult struct {
  Success *GetTableResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetTableReqResult() *ThriftHiveMetastoreGetTableReqResult {
  return &ThriftHiveMetastoreGetTableReqResult{}
}

var ThriftHiveMetastoreGetTableReqResult_Success_DEFAULT *GetTableResult_
func (p *ThriftHiveMetastoreGetTableReqResult) GetSuccess() *GetTableResult_ {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetTableReqResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetTableReqResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTableReqResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTableReqResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetTableReqResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetTableReqResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTableReqResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetTableReqResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTableReqResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTableReqResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTableReqResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableReqResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetTableResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableReqResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableReqResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableReqResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_req_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableReqResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableReqResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableReqResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableReqResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableReqResult(%+v)", *p)
}

// Attributes:
//  - Req
type ThriftHiveMetastoreGetTableObjectsByNameReqArgs struct {
  Req *GetTablesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewThriftHiveMetastoreGetTableObjectsByNameReqArgs() *ThriftHiveMetastoreGetTableObjectsByNameReqArgs {
  return &ThriftHiveMetastoreGetTableObjectsByNameReqArgs{}
}

var ThriftHiveMetastoreGetTableObjectsByNameReqArgs_Req_DEFAULT *GetTablesRequest
func (p *ThriftHiveMetastoreGetTableObjectsByNameReqArgs) GetReq() *GetTablesRequest {
  if !p.IsSetReq() {
    return ThriftHiveMetastoreGetTableObjectsByNameReqArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ThriftHiveMetastoreGetTableObjectsByNameReqArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetTablesRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_objects_by_name_req_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableObjectsByNameReqArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreGetTableObjectsByNameReqResult struct {
  Success *GetTablesResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidOperationException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *UnknownDBException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreGetTableObjectsByNameReqResult() *ThriftHiveMetastoreGetTableObjectsByNameReqResult {
  return &ThriftHiveMetastoreGetTableObjectsByNameReqResult{}
}

var ThriftHiveMetastoreGetTableObjectsByNameReqResult_Success_DEFAULT *GetTablesResult_
func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) GetSuccess() *GetTablesResult_ {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetTableObjectsByNameReqResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetTableObjectsByNameReqResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTableObjectsByNameReqResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetTableObjectsByNameReqResult_O2_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) GetO2() *InvalidOperationException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTableObjectsByNameReqResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreGetTableObjectsByNameReqResult_O3_DEFAULT *UnknownDBException
func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) GetO3() *UnknownDBException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreGetTableObjectsByNameReqResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetTablesResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidOperationException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &UnknownDBException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_objects_by_name_req_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameReqResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableObjectsByNameReqResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - Filter
//  - MaxTables
type ThriftHiveMetastoreGetTableNamesByFilterArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  Filter string `thrift:"filter,2" db:"filter" json:"filter"`
  MaxTables int16 `thrift:"max_tables,3" db:"max_tables" json:"max_tables"`
}

func NewThriftHiveMetastoreGetTableNamesByFilterArgs() *ThriftHiveMetastoreGetTableNamesByFilterArgs {
  return &ThriftHiveMetastoreGetTableNamesByFilterArgs{
MaxTables: -1,
}
}


func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) GetFilter() string {
  return p.Filter
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) GetMaxTables() int16 {
  return p.MaxTables
}
func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxTables = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_names_by_filter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "filter", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:filter: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Filter)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:filter: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_tables", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_tables: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.MaxTables)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_tables (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_tables: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableNamesByFilterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreGetTableNamesByFilterResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidOperationException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *UnknownDBException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreGetTableNamesByFilterResult() *ThriftHiveMetastoreGetTableNamesByFilterResult {
  return &ThriftHiveMetastoreGetTableNamesByFilterResult{}
}

var ThriftHiveMetastoreGetTableNamesByFilterResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetTableNamesByFilterResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTableNamesByFilterResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetTableNamesByFilterResult_O2_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) GetO2() *InvalidOperationException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTableNamesByFilterResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreGetTableNamesByFilterResult_O3_DEFAULT *UnknownDBException
func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) GetO3() *UnknownDBException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreGetTableNamesByFilterResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem571 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem571 = v
}
    p.Success = append(p.Success, _elem571)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidOperationException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &UnknownDBException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_names_by_filter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableNamesByFilterResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - TblName
//  - NewTbl_
type ThriftHiveMetastoreAlterTableArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  NewTbl_ *Table `thrift:"new_tbl,3" db:"new_tbl" json:"new_tbl"`
}

func NewThriftHiveMetastoreAlterTableArgs() *ThriftHiveMetastoreAlterTableArgs {
  return &ThriftHiveMetastoreAlterTableArgs{}
}


func (p *ThriftHiveMetastoreAlterTableArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreAlterTableArgs) GetTblName() string {
  return p.TblName
}
var ThriftHiveMetastoreAlterTableArgs_NewTbl__DEFAULT *Table
func (p *ThriftHiveMetastoreAlterTableArgs) GetNewTbl_() *Table {
  if !p.IsSetNewTbl_() {
    return ThriftHiveMetastoreAlterTableArgs_NewTbl__DEFAULT
  }
return p.NewTbl_
}
func (p *ThriftHiveMetastoreAlterTableArgs) IsSetNewTbl_() bool {
  return p.NewTbl_ != nil
}

func (p *ThriftHiveMetastoreAlterTableArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.NewTbl_ = &Table{}
  if err := p.NewTbl_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewTbl_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_tbl", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_tbl: ", p), err) }
  if err := p.NewTbl_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewTbl_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_tbl: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterTableArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterTableResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterTableResult() *ThriftHiveMetastoreAlterTableResult {
  return &ThriftHiveMetastoreAlterTableResult{}
}

var ThriftHiveMetastoreAlterTableResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterTableResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterTableResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterTableResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterTableResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterTableResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterTableResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterTableResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterTableResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterTableResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterTableResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - TblName
//  - NewTbl_
//  - EnvironmentContext
type ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  NewTbl_ *Table `thrift:"new_tbl,3" db:"new_tbl" json:"new_tbl"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,4" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreAlterTableWithEnvironmentContextArgs() *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs{}
}


func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) GetTblName() string {
  return p.TblName
}
var ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs_NewTbl__DEFAULT *Table
func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) GetNewTbl_() *Table {
  if !p.IsSetNewTbl_() {
    return ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs_NewTbl__DEFAULT
  }
return p.NewTbl_
}
var ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) IsSetNewTbl_() bool {
  return p.NewTbl_ != nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.NewTbl_ = &Table{}
  if err := p.NewTbl_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewTbl_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_table_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_tbl", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_tbl: ", p), err) }
  if err := p.NewTbl_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewTbl_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_tbl: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "environment_context", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterTableWithEnvironmentContextResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterTableWithEnvironmentContextResult() *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult {
  return &ThriftHiveMetastoreAlterTableWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreAlterTableWithEnvironmentContextResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterTableWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterTableWithEnvironmentContextResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterTableWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_table_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterTableWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - TblName
//  - NewTbl_
//  - Cascade
type ThriftHiveMetastoreAlterTableWithCascadeArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  NewTbl_ *Table `thrift:"new_tbl,3" db:"new_tbl" json:"new_tbl"`
  Cascade bool `thrift:"cascade,4" db:"cascade" json:"cascade"`
}

func NewThriftHiveMetastoreAlterTableWithCascadeArgs() *ThriftHiveMetastoreAlterTableWithCascadeArgs {
  return &ThriftHiveMetastoreAlterTableWithCascadeArgs{}
}


func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs) GetTblName() string {
  return p.TblName
}
var ThriftHiveMetastoreAlterTableWithCascadeArgs_NewTbl__DEFAULT *Table
func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs) GetNewTbl_() *Table {
  if !p.IsSetNewTbl_() {
    return ThriftHiveMetastoreAlterTableWithCascadeArgs_NewTbl__DEFAULT
  }
return p.NewTbl_
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs) GetCascade() bool {
  return p.Cascade
}
func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs) IsSetNewTbl_() bool {
  return p.NewTbl_ != nil
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.NewTbl_ = &Table{}
  if err := p.NewTbl_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewTbl_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Cascade = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_table_with_cascade_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_tbl", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_tbl: ", p), err) }
  if err := p.NewTbl_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewTbl_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_tbl: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cascade", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:cascade: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Cascade)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cascade (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:cascade: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterTableWithCascadeArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterTableWithCascadeResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterTableWithCascadeResult() *ThriftHiveMetastoreAlterTableWithCascadeResult {
  return &ThriftHiveMetastoreAlterTableWithCascadeResult{}
}

var ThriftHiveMetastoreAlterTableWithCascadeResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterTableWithCascadeResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterTableWithCascadeResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterTableWithCascadeResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterTableWithCascadeResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterTableWithCascadeResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterTableWithCascadeResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_table_with_cascade_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithCascadeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterTableWithCascadeResult(%+v)", *p)
}

// Attributes:
//  - NewPart_
type ThriftHiveMetastoreAddPartitionArgs struct {
  NewPart_ *Partition `thrift:"new_part,1" db:"new_part" json:"new_part"`
}

func NewThriftHiveMetastoreAddPartitionArgs() *ThriftHiveMetastoreAddPartitionArgs {
  return &ThriftHiveMetastoreAddPartitionArgs{}
}

var ThriftHiveMetastoreAddPartitionArgs_NewPart__DEFAULT *Partition
func (p *ThriftHiveMetastoreAddPartitionArgs) GetNewPart_() *Partition {
  if !p.IsSetNewPart_() {
    return ThriftHiveMetastoreAddPartitionArgs_NewPart__DEFAULT
  }
return p.NewPart_
}
func (p *ThriftHiveMetastoreAddPartitionArgs) IsSetNewPart_() bool {
  return p.NewPart_ != nil
}

func (p *ThriftHiveMetastoreAddPartitionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.NewPart_ = &Partition{}
  if err := p.NewPart_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewPart_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_partition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_part", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:new_part: ", p), err) }
  if err := p.NewPart_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewPart_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:new_part: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAddPartitionResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAddPartitionResult() *ThriftHiveMetastoreAddPartitionResult {
  return &ThriftHiveMetastoreAddPartitionResult{}
}

var ThriftHiveMetastoreAddPartitionResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreAddPartitionResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAddPartitionResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAddPartitionResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAddPartitionResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddPartitionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddPartitionResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAddPartitionResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddPartitionResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAddPartitionResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddPartitionResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAddPartitionResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAddPartitionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_partition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionResult(%+v)", *p)
}

// Attributes:
//  - NewPart_
//  - EnvironmentContext
type ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs struct {
  NewPart_ *Partition `thrift:"new_part,1" db:"new_part" json:"new_part"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,2" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs() *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs{}
}

var ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs_NewPart__DEFAULT *Partition
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) GetNewPart_() *Partition {
  if !p.IsSetNewPart_() {
    return ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs_NewPart__DEFAULT
  }
return p.NewPart_
}
var ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) IsSetNewPart_() bool {
  return p.NewPart_ != nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.NewPart_ = &Partition{}
  if err := p.NewPart_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewPart_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_partition_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_part", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:new_part: ", p), err) }
  if err := p.NewPart_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewPart_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:new_part: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "environment_context", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAddPartitionWithEnvironmentContextResult() *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult {
  return &ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_partition_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - NewParts_
type ThriftHiveMetastoreAddPartitionsArgs struct {
  NewParts_ []*Partition `thrift:"new_parts,1" db:"new_parts" json:"new_parts"`
}

func NewThriftHiveMetastoreAddPartitionsArgs() *ThriftHiveMetastoreAddPartitionsArgs {
  return &ThriftHiveMetastoreAddPartitionsArgs{}
}


func (p *ThriftHiveMetastoreAddPartitionsArgs) GetNewParts_() []*Partition {
  return p.NewParts_
}
func (p *ThriftHiveMetastoreAddPartitionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.NewParts_ =  tSlice
  for i := 0; i < size; i ++ {
    _elem572 := &Partition{}
    if err := _elem572.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem572), err)
    }
    p.NewParts_ = append(p.NewParts_, _elem572)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_partitions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_parts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:new_parts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.NewParts_)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NewParts_ {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:new_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAddPartitionsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAddPartitionsResult() *ThriftHiveMetastoreAddPartitionsResult {
  return &ThriftHiveMetastoreAddPartitionsResult{}
}

var ThriftHiveMetastoreAddPartitionsResult_Success_DEFAULT int32
func (p *ThriftHiveMetastoreAddPartitionsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAddPartitionsResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreAddPartitionsResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAddPartitionsResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddPartitionsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddPartitionsResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAddPartitionsResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddPartitionsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAddPartitionsResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddPartitionsResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAddPartitionsResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAddPartitionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_partitions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionsResult(%+v)", *p)
}

// Attributes:
//  - NewParts_
type ThriftHiveMetastoreAddPartitionsPspecArgs struct {
  NewParts_ []*PartitionSpec `thrift:"new_parts,1" db:"new_parts" json:"new_parts"`
}

func NewThriftHiveMetastoreAddPartitionsPspecArgs() *ThriftHiveMetastoreAddPartitionsPspecArgs {
  return &ThriftHiveMetastoreAddPartitionsPspecArgs{}
}


func (p *ThriftHiveMetastoreAddPartitionsPspecArgs) GetNewParts_() []*PartitionSpec {
  return p.NewParts_
}
func (p *ThriftHiveMetastoreAddPartitionsPspecArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsPspecArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PartitionSpec, 0, size)
  p.NewParts_ =  tSlice
  for i := 0; i < size; i ++ {
    _elem573 := &PartitionSpec{}
    if err := _elem573.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem573), err)
    }
    p.NewParts_ = append(p.NewParts_, _elem573)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsPspecArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_partitions_pspec_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsPspecArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_parts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:new_parts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.NewParts_)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NewParts_ {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:new_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsPspecArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionsPspecArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAddPartitionsPspecResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAddPartitionsPspecResult() *ThriftHiveMetastoreAddPartitionsPspecResult {
  return &ThriftHiveMetastoreAddPartitionsPspecResult{}
}

var ThriftHiveMetastoreAddPartitionsPspecResult_Success_DEFAULT int32
func (p *ThriftHiveMetastoreAddPartitionsPspecResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAddPartitionsPspecResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreAddPartitionsPspecResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAddPartitionsPspecResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddPartitionsPspecResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddPartitionsPspecResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAddPartitionsPspecResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddPartitionsPspecResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAddPartitionsPspecResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddPartitionsPspecResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAddPartitionsPspecResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAddPartitionsPspecResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAddPartitionsPspecResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddPartitionsPspecResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddPartitionsPspecResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAddPartitionsPspecResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsPspecResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsPspecResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsPspecResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsPspecResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsPspecResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_partitions_pspec_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsPspecResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsPspecResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsPspecResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsPspecResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsPspecResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionsPspecResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
type ThriftHiveMetastoreAppendPartitionArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
}

func NewThriftHiveMetastoreAppendPartitionArgs() *ThriftHiveMetastoreAppendPartitionArgs {
  return &ThriftHiveMetastoreAppendPartitionArgs{}
}


func (p *ThriftHiveMetastoreAppendPartitionArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) GetPartVals() []string {
  return p.PartVals
}
func (p *ThriftHiveMetastoreAppendPartitionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem574 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem574 = v
}
    p.PartVals = append(p.PartVals, _elem574)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "append_partition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAppendPartitionResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAppendPartitionResult() *ThriftHiveMetastoreAppendPartitionResult {
  return &ThriftHiveMetastoreAppendPartitionResult{}
}

var ThriftHiveMetastoreAppendPartitionResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreAppendPartitionResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAppendPartitionResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAppendPartitionResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAppendPartitionResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAppendPartitionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAppendPartitionResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAppendPartitionResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAppendPartitionResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAppendPartitionResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAppendPartitionResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAppendPartitionResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAppendPartitionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "append_partition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreAddPartitionsReqArgs struct {
  Request *AddPartitionsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreAddPartitionsReqArgs() *ThriftHiveMetastoreAddPartitionsReqArgs {
  return &ThriftHiveMetastoreAddPartitionsReqArgs{}
}

var ThriftHiveMetastoreAddPartitionsReqArgs_Request_DEFAULT *AddPartitionsRequest
func (p *ThriftHiveMetastoreAddPartitionsReqArgs) GetRequest() *AddPartitionsRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreAddPartitionsReqArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreAddPartitionsReqArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreAddPartitionsReqArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsReqArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &AddPartitionsRequest{
  NeedResult_: true,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsReqArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_partitions_req_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsReqArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsReqArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionsReqArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAddPartitionsReqResult struct {
  Success *AddPartitionsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAddPartitionsReqResult() *ThriftHiveMetastoreAddPartitionsReqResult {
  return &ThriftHiveMetastoreAddPartitionsReqResult{}
}

var ThriftHiveMetastoreAddPartitionsReqResult_Success_DEFAULT *AddPartitionsResult_
func (p *ThriftHiveMetastoreAddPartitionsReqResult) GetSuccess() *AddPartitionsResult_ {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAddPartitionsReqResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAddPartitionsReqResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAddPartitionsReqResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddPartitionsReqResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddPartitionsReqResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAddPartitionsReqResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddPartitionsReqResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAddPartitionsReqResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddPartitionsReqResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAddPartitionsReqResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAddPartitionsReqResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAddPartitionsReqResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddPartitionsReqResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddPartitionsReqResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAddPartitionsReqResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsReqResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AddPartitionsResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsReqResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsReqResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsReqResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsReqResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_partitions_req_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsReqResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsReqResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsReqResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsReqResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsReqResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionsReqResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - EnvironmentContext
type ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,4" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs() *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs{}
}


func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs) GetPartVals() []string {
  return p.PartVals
}
var ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem575 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem575 = v
}
    p.PartVals = append(p.PartVals, _elem575)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "append_partition_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "environment_context", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult() *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult {
  return &ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "append_partition_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
type ThriftHiveMetastoreAppendPartitionByNameArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartName string `thrift:"part_name,3" db:"part_name" json:"part_name"`
}

func NewThriftHiveMetastoreAppendPartitionByNameArgs() *ThriftHiveMetastoreAppendPartitionByNameArgs {
  return &ThriftHiveMetastoreAppendPartitionByNameArgs{}
}


func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) GetPartName() string {
  return p.PartName
}
func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "append_partition_by_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAppendPartitionByNameResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAppendPartitionByNameResult() *ThriftHiveMetastoreAppendPartitionByNameResult {
  return &ThriftHiveMetastoreAppendPartitionByNameResult{}
}

var ThriftHiveMetastoreAppendPartitionByNameResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreAppendPartitionByNameResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAppendPartitionByNameResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAppendPartitionByNameResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAppendPartitionByNameResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAppendPartitionByNameResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAppendPartitionByNameResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAppendPartitionByNameResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAppendPartitionByNameResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAppendPartitionByNameResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAppendPartitionByNameResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAppendPartitionByNameResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAppendPartitionByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "append_partition_by_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
//  - EnvironmentContext
type ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartName string `thrift:"part_name,3" db:"part_name" json:"part_name"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,4" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs() *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs{}
}


func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs) GetPartName() string {
  return p.PartName
}
var ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "append_partition_by_name_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "environment_context", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult() *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult {
  return &ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "append_partition_by_name_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionByNameWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - DeleteData
type ThriftHiveMetastoreDropPartitionArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  DeleteData bool `thrift:"deleteData,4" db:"deleteData" json:"deleteData"`
}

func NewThriftHiveMetastoreDropPartitionArgs() *ThriftHiveMetastoreDropPartitionArgs {
  return &ThriftHiveMetastoreDropPartitionArgs{}
}


func (p *ThriftHiveMetastoreDropPartitionArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreDropPartitionArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreDropPartitionArgs) GetPartVals() []string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreDropPartitionArgs) GetDeleteData() bool {
  return p.DeleteData
}
func (p *ThriftHiveMetastoreDropPartitionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem576 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem576 = v
}
    p.PartVals = append(p.PartVals, _elem576)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DeleteData = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_partition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deleteData", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deleteData: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.DeleteData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleteData (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deleteData: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropPartitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropPartitionResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropPartitionResult() *ThriftHiveMetastoreDropPartitionResult {
  return &ThriftHiveMetastoreDropPartitionResult{}
}

var ThriftHiveMetastoreDropPartitionResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDropPartitionResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropPartitionResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDropPartitionResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropPartitionResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropPartitionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropPartitionResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropPartitionResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropPartitionResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreDropPartitionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_partition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropPartitionResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - DeleteData
//  - EnvironmentContext
type ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  DeleteData bool `thrift:"deleteData,4" db:"deleteData" json:"deleteData"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,5" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs() *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs{}
}


func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs) GetPartVals() []string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs) GetDeleteData() bool {
  return p.DeleteData
}
var ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem577 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem577 = v
}
    p.PartVals = append(p.PartVals, _elem577)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DeleteData = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_partition_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deleteData", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deleteData: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.DeleteData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleteData (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deleteData: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "environment_context", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropPartitionWithEnvironmentContextResult() *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult {
  return &ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_partition_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropPartitionWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
//  - DeleteData
type ThriftHiveMetastoreDropPartitionByNameArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartName string `thrift:"part_name,3" db:"part_name" json:"part_name"`
  DeleteData bool `thrift:"deleteData,4" db:"deleteData" json:"deleteData"`
}

func NewThriftHiveMetastoreDropPartitionByNameArgs() *ThriftHiveMetastoreDropPartitionByNameArgs {
  return &ThriftHiveMetastoreDropPartitionByNameArgs{}
}


func (p *ThriftHiveMetastoreDropPartitionByNameArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) GetPartName() string {
  return p.PartName
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) GetDeleteData() bool {
  return p.DeleteData
}
func (p *ThriftHiveMetastoreDropPartitionByNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DeleteData = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_partition_by_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deleteData", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deleteData: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.DeleteData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleteData (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deleteData: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropPartitionByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropPartitionByNameResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropPartitionByNameResult() *ThriftHiveMetastoreDropPartitionByNameResult {
  return &ThriftHiveMetastoreDropPartitionByNameResult{}
}

var ThriftHiveMetastoreDropPartitionByNameResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDropPartitionByNameResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropPartitionByNameResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDropPartitionByNameResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropPartitionByNameResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropPartitionByNameResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropPartitionByNameResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropPartitionByNameResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropPartitionByNameResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreDropPartitionByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_partition_by_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropPartitionByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
//  - DeleteData
//  - EnvironmentContext
type ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartName string `thrift:"part_name,3" db:"part_name" json:"part_name"`
  DeleteData bool `thrift:"deleteData,4" db:"deleteData" json:"deleteData"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,5" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs() *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs{}
}


func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs) GetPartName() string {
  return p.PartName
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs) GetDeleteData() bool {
  return p.DeleteData
}
var ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DeleteData = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_partition_by_name_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deleteData", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deleteData: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.DeleteData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleteData (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deleteData: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "environment_context", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult() *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult {
  return &ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_partition_by_name_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropPartitionByNameWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - Req
type ThriftHiveMetastoreDropPartitionsReqArgs struct {
  Req *DropPartitionsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewThriftHiveMetastoreDropPartitionsReqArgs() *ThriftHiveMetastoreDropPartitionsReqArgs {
  return &ThriftHiveMetastoreDropPartitionsReqArgs{}
}

var ThriftHiveMetastoreDropPartitionsReqArgs_Req_DEFAULT *DropPartitionsRequest
func (p *ThriftHiveMetastoreDropPartitionsReqArgs) GetReq() *DropPartitionsRequest {
  if !p.IsSetReq() {
    return ThriftHiveMetastoreDropPartitionsReqArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ThriftHiveMetastoreDropPartitionsReqArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ThriftHiveMetastoreDropPartitionsReqArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionsReqArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DropPartitionsRequest{
  IfExists: true,

  NeedResult_: true,
}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionsReqArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_partitions_req_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionsReqArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionsReqArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropPartitionsReqArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropPartitionsReqResult struct {
  Success *DropPartitionsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropPartitionsReqResult() *ThriftHiveMetastoreDropPartitionsReqResult {
  return &ThriftHiveMetastoreDropPartitionsReqResult{}
}

var ThriftHiveMetastoreDropPartitionsReqResult_Success_DEFAULT *DropPartitionsResult_
func (p *ThriftHiveMetastoreDropPartitionsReqResult) GetSuccess() *DropPartitionsResult_ {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropPartitionsReqResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreDropPartitionsReqResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropPartitionsReqResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropPartitionsReqResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropPartitionsReqResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropPartitionsReqResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropPartitionsReqResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreDropPartitionsReqResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropPartitionsReqResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropPartitionsReqResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropPartitionsReqResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionsReqResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DropPartitionsResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionsReqResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionsReqResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionsReqResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_partitions_req_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionsReqResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionsReqResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionsReqResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionsReqResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropPartitionsReqResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
type ThriftHiveMetastoreGetPartitionArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
}

func NewThriftHiveMetastoreGetPartitionArgs() *ThriftHiveMetastoreGetPartitionArgs {
  return &ThriftHiveMetastoreGetPartitionArgs{}
}


func (p *ThriftHiveMetastoreGetPartitionArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionArgs) GetPartVals() []string {
  return p.PartVals
}
func (p *ThriftHiveMetastoreGetPartitionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem578 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem578 = v
}
    p.PartVals = append(p.PartVals, _elem578)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionResult() *ThriftHiveMetastoreGetPartitionResult {
  return &ThriftHiveMetastoreGetPartitionResult{}
}

var ThriftHiveMetastoreGetPartitionResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreGetPartitionResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPartitionResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPartitionResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionResult(%+v)", *p)
}

// Attributes:
//  - PartitionSpecs
//  - SourceDb
//  - SourceTableName
//  - DestDb
//  - DestTableName
type ThriftHiveMetastoreExchangePartitionArgs struct {
  PartitionSpecs map[string]string `thrift:"partitionSpecs,1" db:"partitionSpecs" json:"partitionSpecs"`
  SourceDb string `thrift:"source_db,2" db:"source_db" json:"source_db"`
  SourceTableName string `thrift:"source_table_name,3" db:"source_table_name" json:"source_table_name"`
  DestDb string `thrift:"dest_db,4" db:"dest_db" json:"dest_db"`
  DestTableName string `thrift:"dest_table_name,5" db:"dest_table_name" json:"dest_table_name"`
}

func NewThriftHiveMetastoreExchangePartitionArgs() *ThriftHiveMetastoreExchangePartitionArgs {
  return &ThriftHiveMetastoreExchangePartitionArgs{}
}


func (p *ThriftHiveMetastoreExchangePartitionArgs) GetPartitionSpecs() map[string]string {
  return p.PartitionSpecs
}

func (p *ThriftHiveMetastoreExchangePartitionArgs) GetSourceDb() string {
  return p.SourceDb
}

func (p *ThriftHiveMetastoreExchangePartitionArgs) GetSourceTableName() string {
  return p.SourceTableName
}

func (p *ThriftHiveMetastoreExchangePartitionArgs) GetDestDb() string {
  return p.DestDb
}

func (p *ThriftHiveMetastoreExchangePartitionArgs) GetDestTableName() string {
  return p.DestTableName
}
func (p *ThriftHiveMetastoreExchangePartitionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.PartitionSpecs =  tMap
  for i := 0; i < size; i ++ {
var _key579 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key579 = v
}
var _val580 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val580 = v
}
    p.PartitionSpecs[_key579] = _val580
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SourceDb = v
}
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SourceTableName = v
}
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DestDb = v
}
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DestTableName = v
}
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exchange_partition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitionSpecs", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partitionSpecs: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.PartitionSpecs)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PartitionSpecs {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partitionSpecs: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "source_db", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:source_db: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SourceDb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source_db (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:source_db: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "source_table_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source_table_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SourceTableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source_table_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source_table_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dest_db", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dest_db: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DestDb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dest_db (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dest_db: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dest_table_name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dest_table_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DestTableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dest_table_name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dest_table_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreExchangePartitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreExchangePartitionResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *InvalidObjectException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidInputException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreExchangePartitionResult() *ThriftHiveMetastoreExchangePartitionResult {
  return &ThriftHiveMetastoreExchangePartitionResult{}
}

var ThriftHiveMetastoreExchangePartitionResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreExchangePartitionResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreExchangePartitionResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreExchangePartitionResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreExchangePartitionResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreExchangePartitionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreExchangePartitionResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreExchangePartitionResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreExchangePartitionResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreExchangePartitionResult_O3_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreExchangePartitionResult) GetO3() *InvalidObjectException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreExchangePartitionResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreExchangePartitionResult_O4_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreExchangePartitionResult) GetO4() *InvalidInputException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreExchangePartitionResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreExchangePartitionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreExchangePartitionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreExchangePartitionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreExchangePartitionResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreExchangePartitionResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreExchangePartitionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &InvalidObjectException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &InvalidInputException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exchange_partition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreExchangePartitionResult(%+v)", *p)
}

// Attributes:
//  - PartitionSpecs
//  - SourceDb
//  - SourceTableName
//  - DestDb
//  - DestTableName
type ThriftHiveMetastoreExchangePartitionsArgs struct {
  PartitionSpecs map[string]string `thrift:"partitionSpecs,1" db:"partitionSpecs" json:"partitionSpecs"`
  SourceDb string `thrift:"source_db,2" db:"source_db" json:"source_db"`
  SourceTableName string `thrift:"source_table_name,3" db:"source_table_name" json:"source_table_name"`
  DestDb string `thrift:"dest_db,4" db:"dest_db" json:"dest_db"`
  DestTableName string `thrift:"dest_table_name,5" db:"dest_table_name" json:"dest_table_name"`
}

func NewThriftHiveMetastoreExchangePartitionsArgs() *ThriftHiveMetastoreExchangePartitionsArgs {
  return &ThriftHiveMetastoreExchangePartitionsArgs{}
}


func (p *ThriftHiveMetastoreExchangePartitionsArgs) GetPartitionSpecs() map[string]string {
  return p.PartitionSpecs
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs) GetSourceDb() string {
  return p.SourceDb
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs) GetSourceTableName() string {
  return p.SourceTableName
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs) GetDestDb() string {
  return p.DestDb
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs) GetDestTableName() string {
  return p.DestTableName
}
func (p *ThriftHiveMetastoreExchangePartitionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.PartitionSpecs =  tMap
  for i := 0; i < size; i ++ {
var _key581 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key581 = v
}
var _val582 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val582 = v
}
    p.PartitionSpecs[_key581] = _val582
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SourceDb = v
}
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SourceTableName = v
}
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DestDb = v
}
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DestTableName = v
}
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exchange_partitions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitionSpecs", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partitionSpecs: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.PartitionSpecs)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PartitionSpecs {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partitionSpecs: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "source_db", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:source_db: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SourceDb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source_db (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:source_db: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "source_table_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source_table_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SourceTableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source_table_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source_table_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dest_db", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dest_db: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DestDb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dest_db (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dest_db: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dest_table_name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dest_table_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DestTableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dest_table_name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dest_table_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreExchangePartitionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreExchangePartitionsResult struct {
  Success []*Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *InvalidObjectException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidInputException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreExchangePartitionsResult() *ThriftHiveMetastoreExchangePartitionsResult {
  return &ThriftHiveMetastoreExchangePartitionsResult{}
}

var ThriftHiveMetastoreExchangePartitionsResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreExchangePartitionsResult) GetSuccess() []*Partition {
  return p.Success
}
var ThriftHiveMetastoreExchangePartitionsResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreExchangePartitionsResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreExchangePartitionsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreExchangePartitionsResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreExchangePartitionsResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreExchangePartitionsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreExchangePartitionsResult_O3_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreExchangePartitionsResult) GetO3() *InvalidObjectException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreExchangePartitionsResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreExchangePartitionsResult_O4_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreExchangePartitionsResult) GetO4() *InvalidInputException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreExchangePartitionsResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreExchangePartitionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreExchangePartitionsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreExchangePartitionsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreExchangePartitionsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreExchangePartitionsResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreExchangePartitionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem583 := &Partition{}
    if err := _elem583.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem583), err)
    }
    p.Success = append(p.Success, _elem583)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionsResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &InvalidObjectException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionsResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &InvalidInputException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exchange_partitions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreExchangePartitionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionsResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionsResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreExchangePartitionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreExchangePartitionsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - UserName
//  - GroupNames
type ThriftHiveMetastoreGetPartitionWithAuthArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  UserName string `thrift:"user_name,4" db:"user_name" json:"user_name"`
  GroupNames []string `thrift:"group_names,5" db:"group_names" json:"group_names"`
}

func NewThriftHiveMetastoreGetPartitionWithAuthArgs() *ThriftHiveMetastoreGetPartitionWithAuthArgs {
  return &ThriftHiveMetastoreGetPartitionWithAuthArgs{}
}


func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetPartVals() []string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetUserName() string {
  return p.UserName
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetGroupNames() []string {
  return p.GroupNames
}
func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem584 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem584 = v
}
    p.PartVals = append(p.PartVals, _elem584)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GroupNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem585 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem585 = v
}
    p.GroupNames = append(p.GroupNames, _elem585)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partition_with_auth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "group_names", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:group_names: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.GroupNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GroupNames {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:group_names: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionWithAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionWithAuthResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionWithAuthResult() *ThriftHiveMetastoreGetPartitionWithAuthResult {
  return &ThriftHiveMetastoreGetPartitionWithAuthResult{}
}

var ThriftHiveMetastoreGetPartitionWithAuthResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPartitionWithAuthResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPartitionWithAuthResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionWithAuthResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionWithAuthResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionWithAuthResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partition_with_auth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionWithAuthResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
type ThriftHiveMetastoreGetPartitionByNameArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartName string `thrift:"part_name,3" db:"part_name" json:"part_name"`
}

func NewThriftHiveMetastoreGetPartitionByNameArgs() *ThriftHiveMetastoreGetPartitionByNameArgs {
  return &ThriftHiveMetastoreGetPartitionByNameArgs{}
}


func (p *ThriftHiveMetastoreGetPartitionByNameArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) GetPartName() string {
  return p.PartName
}
func (p *ThriftHiveMetastoreGetPartitionByNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partition_by_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionByNameResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionByNameResult() *ThriftHiveMetastoreGetPartitionByNameResult {
  return &ThriftHiveMetastoreGetPartitionByNameResult{}
}

var ThriftHiveMetastoreGetPartitionByNameResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreGetPartitionByNameResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPartitionByNameResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPartitionByNameResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionByNameResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionByNameResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionByNameResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionByNameResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionByNameResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partition_by_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxParts
type ThriftHiveMetastoreGetPartitionsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  MaxParts int16 `thrift:"max_parts,3" db:"max_parts" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionsArgs() *ThriftHiveMetastoreGetPartitionsArgs {
  return &ThriftHiveMetastoreGetPartitionsArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) GetMaxParts() int16 {
  return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_parts", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_parts: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsResult struct {
  Success []*Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsResult() *ThriftHiveMetastoreGetPartitionsResult {
  return &ThriftHiveMetastoreGetPartitionsResult{}
}

var ThriftHiveMetastoreGetPartitionsResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsResult) GetSuccess() []*Partition {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionsResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem586 := &Partition{}
    if err := _elem586.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem586), err)
    }
    p.Success = append(p.Success, _elem586)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxParts
//  - UserName
//  - GroupNames
type ThriftHiveMetastoreGetPartitionsWithAuthArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  MaxParts int16 `thrift:"max_parts,3" db:"max_parts" json:"max_parts"`
  UserName string `thrift:"user_name,4" db:"user_name" json:"user_name"`
  GroupNames []string `thrift:"group_names,5" db:"group_names" json:"group_names"`
}

func NewThriftHiveMetastoreGetPartitionsWithAuthArgs() *ThriftHiveMetastoreGetPartitionsWithAuthArgs {
  return &ThriftHiveMetastoreGetPartitionsWithAuthArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetMaxParts() int16 {
  return p.MaxParts
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetUserName() string {
  return p.UserName
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetGroupNames() []string {
  return p.GroupNames
}
func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GroupNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem587 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem587 = v
}
    p.GroupNames = append(p.GroupNames, _elem587)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_with_auth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_parts", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_parts: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "group_names", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:group_names: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.GroupNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GroupNames {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:group_names: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsWithAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsWithAuthResult struct {
  Success []*Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsWithAuthResult() *ThriftHiveMetastoreGetPartitionsWithAuthResult {
  return &ThriftHiveMetastoreGetPartitionsWithAuthResult{}
}

var ThriftHiveMetastoreGetPartitionsWithAuthResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) GetSuccess() []*Partition {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionsWithAuthResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsWithAuthResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsWithAuthResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsWithAuthResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem588 := &Partition{}
    if err := _elem588.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem588), err)
    }
    p.Success = append(p.Success, _elem588)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_with_auth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsWithAuthResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxParts
type ThriftHiveMetastoreGetPartitionsPspecArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  MaxParts int32 `thrift:"max_parts,3" db:"max_parts" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionsPspecArgs() *ThriftHiveMetastoreGetPartitionsPspecArgs {
  return &ThriftHiveMetastoreGetPartitionsPspecArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionsPspecArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsPspecArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsPspecArgs) GetMaxParts() int32 {
  return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionsPspecArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPspecArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPspecArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPspecArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPspecArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_pspec_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPspecArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPspecArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPspecArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_parts", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_parts: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPspecArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsPspecArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsPspecResult struct {
  Success []*PartitionSpec `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsPspecResult() *ThriftHiveMetastoreGetPartitionsPspecResult {
  return &ThriftHiveMetastoreGetPartitionsPspecResult{}
}

var ThriftHiveMetastoreGetPartitionsPspecResult_Success_DEFAULT []*PartitionSpec

func (p *ThriftHiveMetastoreGetPartitionsPspecResult) GetSuccess() []*PartitionSpec {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionsPspecResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsPspecResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsPspecResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsPspecResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsPspecResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsPspecResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsPspecResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPspecResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPspecResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPspecResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPspecResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PartitionSpec, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem589 := &PartitionSpec{}
    if err := _elem589.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem589), err)
    }
    p.Success = append(p.Success, _elem589)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPspecResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPspecResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPspecResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_pspec_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPspecResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPspecResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPspecResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPspecResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsPspecResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxParts
type ThriftHiveMetastoreGetPartitionNamesArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  MaxParts int16 `thrift:"max_parts,3" db:"max_parts" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionNamesArgs() *ThriftHiveMetastoreGetPartitionNamesArgs {
  return &ThriftHiveMetastoreGetPartitionNamesArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionNamesArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) GetMaxParts() int16 {
  return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionNamesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partition_names_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_parts", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_parts: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionNamesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionNamesResult() *ThriftHiveMetastoreGetPartitionNamesResult {
  return &ThriftHiveMetastoreGetPartitionNamesResult{}
}

var ThriftHiveMetastoreGetPartitionNamesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetPartitionNamesResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionNamesResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionNamesResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionNamesResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionNamesResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionNamesResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionNamesResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem590 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem590 = v
}
    p.Success = append(p.Success, _elem590)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partition_names_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionNamesResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGetPartitionValuesArgs struct {
  Request *PartitionValuesRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGetPartitionValuesArgs() *ThriftHiveMetastoreGetPartitionValuesArgs {
  return &ThriftHiveMetastoreGetPartitionValuesArgs{}
}

var ThriftHiveMetastoreGetPartitionValuesArgs_Request_DEFAULT *PartitionValuesRequest
func (p *ThriftHiveMetastoreGetPartitionValuesArgs) GetRequest() *PartitionValuesRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGetPartitionValuesArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGetPartitionValuesArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGetPartitionValuesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionValuesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &PartitionValuesRequest{
  ApplyDistinct: true,

  Ascending: true,

  MaxParts: -1,
}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionValuesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partition_values_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionValuesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionValuesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionValuesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionValuesResult struct {
  Success *PartitionValuesResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionValuesResult() *ThriftHiveMetastoreGetPartitionValuesResult {
  return &ThriftHiveMetastoreGetPartitionValuesResult{}
}

var ThriftHiveMetastoreGetPartitionValuesResult_Success_DEFAULT *PartitionValuesResponse
func (p *ThriftHiveMetastoreGetPartitionValuesResult) GetSuccess() *PartitionValuesResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPartitionValuesResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPartitionValuesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionValuesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionValuesResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionValuesResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionValuesResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionValuesResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionValuesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionValuesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionValuesResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionValuesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionValuesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PartitionValuesResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionValuesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionValuesResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionValuesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partition_values_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionValuesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionValuesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionValuesResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionValuesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionValuesResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
type ThriftHiveMetastoreGetPartitionsPsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  MaxParts int16 `thrift:"max_parts,4" db:"max_parts" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionsPsArgs() *ThriftHiveMetastoreGetPartitionsPsArgs {
  return &ThriftHiveMetastoreGetPartitionsPsArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionsPsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) GetPartVals() []string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) GetMaxParts() int16 {
  return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionsPsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem591 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem591 = v
}
    p.PartVals = append(p.PartVals, _elem591)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_ps_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_parts", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_parts: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsPsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsPsResult struct {
  Success []*Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsPsResult() *ThriftHiveMetastoreGetPartitionsPsResult {
  return &ThriftHiveMetastoreGetPartitionsPsResult{}
}

var ThriftHiveMetastoreGetPartitionsPsResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsPsResult) GetSuccess() []*Partition {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionsPsResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsPsResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsPsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsPsResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsPsResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsPsResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsPsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem592 := &Partition{}
    if err := _elem592.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem592), err)
    }
    p.Success = append(p.Success, _elem592)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_ps_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsPsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
//  - UserName
//  - GroupNames
type ThriftHiveMetastoreGetPartitionsPsWithAuthArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  MaxParts int16 `thrift:"max_parts,4" db:"max_parts" json:"max_parts"`
  UserName string `thrift:"user_name,5" db:"user_name" json:"user_name"`
  GroupNames []string `thrift:"group_names,6" db:"group_names" json:"group_names"`
}

func NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs() *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs {
  return &ThriftHiveMetastoreGetPartitionsPsWithAuthArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetPartVals() []string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetMaxParts() int16 {
  return p.MaxParts
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetUserName() string {
  return p.UserName
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetGroupNames() []string {
  return p.GroupNames
}
func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem593 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem593 = v
}
    p.PartVals = append(p.PartVals, _elem593)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GroupNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem594 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem594 = v
}
    p.GroupNames = append(p.GroupNames, _elem594)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_ps_with_auth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_parts", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_parts: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:user_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:user_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "group_names", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:group_names: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.GroupNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GroupNames {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:group_names: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsPsWithAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsPsWithAuthResult struct {
  Success []*Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsPsWithAuthResult() *ThriftHiveMetastoreGetPartitionsPsWithAuthResult {
  return &ThriftHiveMetastoreGetPartitionsPsWithAuthResult{}
}

var ThriftHiveMetastoreGetPartitionsPsWithAuthResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) GetSuccess() []*Partition {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionsPsWithAuthResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsPsWithAuthResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsPsWithAuthResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsPsWithAuthResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem595 := &Partition{}
    if err := _elem595.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem595), err)
    }
    p.Success = append(p.Success, _elem595)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_ps_with_auth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsPsWithAuthResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
type ThriftHiveMetastoreGetPartitionNamesPsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  MaxParts int16 `thrift:"max_parts,4" db:"max_parts" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionNamesPsArgs() *ThriftHiveMetastoreGetPartitionNamesPsArgs {
  return &ThriftHiveMetastoreGetPartitionNamesPsArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) GetPartVals() []string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) GetMaxParts() int16 {
  return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem596 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem596 = v
}
    p.PartVals = append(p.PartVals, _elem596)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partition_names_ps_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_parts", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_parts: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionNamesPsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionNamesPsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionNamesPsResult() *ThriftHiveMetastoreGetPartitionNamesPsResult {
  return &ThriftHiveMetastoreGetPartitionNamesPsResult{}
}

var ThriftHiveMetastoreGetPartitionNamesPsResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionNamesPsResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionNamesPsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionNamesPsResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionNamesPsResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem597 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem597 = v
}
    p.Success = append(p.Success, _elem597)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partition_names_ps_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionNamesPsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - Filter
//  - MaxParts
type ThriftHiveMetastoreGetPartitionsByFilterArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  Filter string `thrift:"filter,3" db:"filter" json:"filter"`
  MaxParts int16 `thrift:"max_parts,4" db:"max_parts" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionsByFilterArgs() *ThriftHiveMetastoreGetPartitionsByFilterArgs {
  return &ThriftHiveMetastoreGetPartitionsByFilterArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) GetFilter() string {
  return p.Filter
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) GetMaxParts() int16 {
  return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_by_filter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "filter", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:filter: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Filter)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:filter: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_parts", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_parts: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsByFilterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsByFilterResult struct {
  Success []*Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsByFilterResult() *ThriftHiveMetastoreGetPartitionsByFilterResult {
  return &ThriftHiveMetastoreGetPartitionsByFilterResult{}
}

var ThriftHiveMetastoreGetPartitionsByFilterResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) GetSuccess() []*Partition {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionsByFilterResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsByFilterResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsByFilterResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsByFilterResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem598 := &Partition{}
    if err := _elem598.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem598), err)
    }
    p.Success = append(p.Success, _elem598)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_by_filter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsByFilterResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - Filter
//  - MaxParts
type ThriftHiveMetastoreGetPartSpecsByFilterArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  Filter string `thrift:"filter,3" db:"filter" json:"filter"`
  MaxParts int32 `thrift:"max_parts,4" db:"max_parts" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartSpecsByFilterArgs() *ThriftHiveMetastoreGetPartSpecsByFilterArgs {
  return &ThriftHiveMetastoreGetPartSpecsByFilterArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs) GetFilter() string {
  return p.Filter
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs) GetMaxParts() int32 {
  return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_part_specs_by_filter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "filter", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:filter: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Filter)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:filter: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_parts", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_parts: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartSpecsByFilterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartSpecsByFilterResult struct {
  Success []*PartitionSpec `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartSpecsByFilterResult() *ThriftHiveMetastoreGetPartSpecsByFilterResult {
  return &ThriftHiveMetastoreGetPartSpecsByFilterResult{}
}

var ThriftHiveMetastoreGetPartSpecsByFilterResult_Success_DEFAULT []*PartitionSpec

func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult) GetSuccess() []*PartitionSpec {
  return p.Success
}
var ThriftHiveMetastoreGetPartSpecsByFilterResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartSpecsByFilterResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartSpecsByFilterResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartSpecsByFilterResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PartitionSpec, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem599 := &PartitionSpec{}
    if err := _elem599.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem599), err)
    }
    p.Success = append(p.Success, _elem599)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_part_specs_by_filter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartSpecsByFilterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartSpecsByFilterResult(%+v)", *p)
}

// Attributes:
//  - Req
type ThriftHiveMetastoreGetPartitionsByExprArgs struct {
  Req *PartitionsByExprRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewThriftHiveMetastoreGetPartitionsByExprArgs() *ThriftHiveMetastoreGetPartitionsByExprArgs {
  return &ThriftHiveMetastoreGetPartitionsByExprArgs{}
}

var ThriftHiveMetastoreGetPartitionsByExprArgs_Req_DEFAULT *PartitionsByExprRequest
func (p *ThriftHiveMetastoreGetPartitionsByExprArgs) GetReq() *PartitionsByExprRequest {
  if !p.IsSetReq() {
    return ThriftHiveMetastoreGetPartitionsByExprArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ThriftHiveMetastoreGetPartitionsByExprArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByExprArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByExprArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &PartitionsByExprRequest{
  MaxParts: -1,
}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByExprArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_by_expr_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByExprArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByExprArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsByExprArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsByExprResult struct {
  Success *PartitionsByExprResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsByExprResult() *ThriftHiveMetastoreGetPartitionsByExprResult {
  return &ThriftHiveMetastoreGetPartitionsByExprResult{}
}

var ThriftHiveMetastoreGetPartitionsByExprResult_Success_DEFAULT *PartitionsByExprResult_
func (p *ThriftHiveMetastoreGetPartitionsByExprResult) GetSuccess() *PartitionsByExprResult_ {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPartitionsByExprResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPartitionsByExprResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsByExprResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsByExprResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsByExprResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsByExprResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsByExprResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsByExprResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByExprResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByExprResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByExprResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByExprResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PartitionsByExprResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByExprResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByExprResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByExprResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_by_expr_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByExprResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByExprResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByExprResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByExprResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsByExprResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - Filter
type ThriftHiveMetastoreGetNumPartitionsByFilterArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  Filter string `thrift:"filter,3" db:"filter" json:"filter"`
}

func NewThriftHiveMetastoreGetNumPartitionsByFilterArgs() *ThriftHiveMetastoreGetNumPartitionsByFilterArgs {
  return &ThriftHiveMetastoreGetNumPartitionsByFilterArgs{}
}


func (p *ThriftHiveMetastoreGetNumPartitionsByFilterArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterArgs) GetFilter() string {
  return p.Filter
}
func (p *ThriftHiveMetastoreGetNumPartitionsByFilterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_num_partitions_by_filter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "filter", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:filter: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Filter)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:filter: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetNumPartitionsByFilterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetNumPartitionsByFilterResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetNumPartitionsByFilterResult() *ThriftHiveMetastoreGetNumPartitionsByFilterResult {
  return &ThriftHiveMetastoreGetNumPartitionsByFilterResult{}
}

var ThriftHiveMetastoreGetNumPartitionsByFilterResult_Success_DEFAULT int32
func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetNumPartitionsByFilterResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreGetNumPartitionsByFilterResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetNumPartitionsByFilterResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetNumPartitionsByFilterResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetNumPartitionsByFilterResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_num_partitions_by_filter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetNumPartitionsByFilterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetNumPartitionsByFilterResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - Names
type ThriftHiveMetastoreGetPartitionsByNamesArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  Names []string `thrift:"names,3" db:"names" json:"names"`
}

func NewThriftHiveMetastoreGetPartitionsByNamesArgs() *ThriftHiveMetastoreGetPartitionsByNamesArgs {
  return &ThriftHiveMetastoreGetPartitionsByNamesArgs{}
}


func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) GetNames() []string {
  return p.Names
}
func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Names =  tSlice
  for i := 0; i < size; i ++ {
var _elem600 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem600 = v
}
    p.Names = append(p.Names, _elem600)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_by_names_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "names", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:names: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Names)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Names {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:names: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsByNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsByNamesResult struct {
  Success []*Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsByNamesResult() *ThriftHiveMetastoreGetPartitionsByNamesResult {
  return &ThriftHiveMetastoreGetPartitionsByNamesResult{}
}

var ThriftHiveMetastoreGetPartitionsByNamesResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) GetSuccess() []*Partition {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionsByNamesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsByNamesResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsByNamesResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsByNamesResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem601 := &Partition{}
    if err := _elem601.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem601), err)
    }
    p.Success = append(p.Success, _elem601)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_by_names_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsByNamesResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - NewPart_
type ThriftHiveMetastoreAlterPartitionArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  NewPart_ *Partition `thrift:"new_part,3" db:"new_part" json:"new_part"`
}

func NewThriftHiveMetastoreAlterPartitionArgs() *ThriftHiveMetastoreAlterPartitionArgs {
  return &ThriftHiveMetastoreAlterPartitionArgs{}
}


func (p *ThriftHiveMetastoreAlterPartitionArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) GetTblName() string {
  return p.TblName
}
var ThriftHiveMetastoreAlterPartitionArgs_NewPart__DEFAULT *Partition
func (p *ThriftHiveMetastoreAlterPartitionArgs) GetNewPart_() *Partition {
  if !p.IsSetNewPart_() {
    return ThriftHiveMetastoreAlterPartitionArgs_NewPart__DEFAULT
  }
return p.NewPart_
}
func (p *ThriftHiveMetastoreAlterPartitionArgs) IsSetNewPart_() bool {
  return p.NewPart_ != nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.NewPart_ = &Partition{}
  if err := p.NewPart_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewPart_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_partition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_part", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_part: ", p), err) }
  if err := p.NewPart_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewPart_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_part: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterPartitionResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterPartitionResult() *ThriftHiveMetastoreAlterPartitionResult {
  return &ThriftHiveMetastoreAlterPartitionResult{}
}

var ThriftHiveMetastoreAlterPartitionResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterPartitionResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterPartitionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterPartitionResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterPartitionResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterPartitionResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterPartitionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_partition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - NewParts_
type ThriftHiveMetastoreAlterPartitionsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  NewParts_ []*Partition `thrift:"new_parts,3" db:"new_parts" json:"new_parts"`
}

func NewThriftHiveMetastoreAlterPartitionsArgs() *ThriftHiveMetastoreAlterPartitionsArgs {
  return &ThriftHiveMetastoreAlterPartitionsArgs{}
}


func (p *ThriftHiveMetastoreAlterPartitionsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs) GetNewParts_() []*Partition {
  return p.NewParts_
}
func (p *ThriftHiveMetastoreAlterPartitionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.NewParts_ =  tSlice
  for i := 0; i < size; i ++ {
    _elem602 := &Partition{}
    if err := _elem602.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem602), err)
    }
    p.NewParts_ = append(p.NewParts_, _elem602)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_partitions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_parts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_parts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.NewParts_)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NewParts_ {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionsArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterPartitionsResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterPartitionsResult() *ThriftHiveMetastoreAlterPartitionsResult {
  return &ThriftHiveMetastoreAlterPartitionsResult{}
}

var ThriftHiveMetastoreAlterPartitionsResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterPartitionsResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterPartitionsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterPartitionsResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterPartitionsResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterPartitionsResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterPartitionsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_partitions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - NewParts_
//  - EnvironmentContext
type ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  NewParts_ []*Partition `thrift:"new_parts,3" db:"new_parts" json:"new_parts"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,4" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs() *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs{}
}


func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs) GetNewParts_() []*Partition {
  return p.NewParts_
}
var ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.NewParts_ =  tSlice
  for i := 0; i < size; i ++ {
    _elem603 := &Partition{}
    if err := _elem603.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem603), err)
    }
    p.NewParts_ = append(p.NewParts_, _elem603)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_partitions_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_parts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_parts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.NewParts_)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NewParts_ {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "environment_context", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult() *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult {
  return &ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_partitions_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionsWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - NewPart_
//  - EnvironmentContext
type ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  NewPart_ *Partition `thrift:"new_part,3" db:"new_part" json:"new_part"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,4" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs() *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs{}
}


func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) GetTblName() string {
  return p.TblName
}
var ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs_NewPart__DEFAULT *Partition
func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) GetNewPart_() *Partition {
  if !p.IsSetNewPart_() {
    return ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs_NewPart__DEFAULT
  }
return p.NewPart_
}
var ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) IsSetNewPart_() bool {
  return p.NewPart_ != nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.NewPart_ = &Partition{}
  if err := p.NewPart_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewPart_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_partition_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_part", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_part: ", p), err) }
  if err := p.NewPart_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewPart_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_part: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "environment_context", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult() *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult {
  return &ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_partition_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - NewPart_
type ThriftHiveMetastoreRenamePartitionArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  NewPart_ *Partition `thrift:"new_part,4" db:"new_part" json:"new_part"`
}

func NewThriftHiveMetastoreRenamePartitionArgs() *ThriftHiveMetastoreRenamePartitionArgs {
  return &ThriftHiveMetastoreRenamePartitionArgs{}
}


func (p *ThriftHiveMetastoreRenamePartitionArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) GetPartVals() []string {
  return p.PartVals
}
var ThriftHiveMetastoreRenamePartitionArgs_NewPart__DEFAULT *Partition
func (p *ThriftHiveMetastoreRenamePartitionArgs) GetNewPart_() *Partition {
  if !p.IsSetNewPart_() {
    return ThriftHiveMetastoreRenamePartitionArgs_NewPart__DEFAULT
  }
return p.NewPart_
}
func (p *ThriftHiveMetastoreRenamePartitionArgs) IsSetNewPart_() bool {
  return p.NewPart_ != nil
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem604 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem604 = v
}
    p.PartVals = append(p.PartVals, _elem604)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.NewPart_ = &Partition{}
  if err := p.NewPart_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewPart_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rename_partition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_part", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:new_part: ", p), err) }
  if err := p.NewPart_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewPart_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:new_part: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRenamePartitionArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreRenamePartitionResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreRenamePartitionResult() *ThriftHiveMetastoreRenamePartitionResult {
  return &ThriftHiveMetastoreRenamePartitionResult{}
}

var ThriftHiveMetastoreRenamePartitionResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreRenamePartitionResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreRenamePartitionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreRenamePartitionResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreRenamePartitionResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreRenamePartitionResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreRenamePartitionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreRenamePartitionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreRenamePartitionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rename_partition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRenamePartitionResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRenamePartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRenamePartitionResult(%+v)", *p)
}

// Attributes:
//  - PartVals
//  - ThrowException
type ThriftHiveMetastorePartitionNameHasValidCharactersArgs struct {
  PartVals []string `thrift:"part_vals,1" db:"part_vals" json:"part_vals"`
  ThrowException bool `thrift:"throw_exception,2" db:"throw_exception" json:"throw_exception"`
}

func NewThriftHiveMetastorePartitionNameHasValidCharactersArgs() *ThriftHiveMetastorePartitionNameHasValidCharactersArgs {
  return &ThriftHiveMetastorePartitionNameHasValidCharactersArgs{}
}


func (p *ThriftHiveMetastorePartitionNameHasValidCharactersArgs) GetPartVals() []string {
  return p.PartVals
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersArgs) GetThrowException() bool {
  return p.ThrowException
}
func (p *ThriftHiveMetastorePartitionNameHasValidCharactersArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem605 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem605 = v
}
    p.PartVals = append(p.PartVals, _elem605)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ThrowException = v
}
  return nil
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partition_name_has_valid_characters_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_vals", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "throw_exception", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:throw_exception: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ThrowException)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.throw_exception (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:throw_exception: ", p), err) }
  return err
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastorePartitionNameHasValidCharactersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastorePartitionNameHasValidCharactersResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastorePartitionNameHasValidCharactersResult() *ThriftHiveMetastorePartitionNameHasValidCharactersResult {
  return &ThriftHiveMetastorePartitionNameHasValidCharactersResult{}
}

var ThriftHiveMetastorePartitionNameHasValidCharactersResult_Success_DEFAULT bool
func (p *ThriftHiveMetastorePartitionNameHasValidCharactersResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastorePartitionNameHasValidCharactersResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastorePartitionNameHasValidCharactersResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastorePartitionNameHasValidCharactersResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastorePartitionNameHasValidCharactersResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastorePartitionNameHasValidCharactersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partition_name_has_valid_characters_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastorePartitionNameHasValidCharactersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastorePartitionNameHasValidCharactersResult(%+v)", *p)
}

// Attributes:
//  - Name
//  - DefaultValue
type ThriftHiveMetastoreGetConfigValueArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  DefaultValue string `thrift:"defaultValue,2" db:"defaultValue" json:"defaultValue"`
}

func NewThriftHiveMetastoreGetConfigValueArgs() *ThriftHiveMetastoreGetConfigValueArgs {
  return &ThriftHiveMetastoreGetConfigValueArgs{}
}


func (p *ThriftHiveMetastoreGetConfigValueArgs) GetName() string {
  return p.Name
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) GetDefaultValue() string {
  return p.DefaultValue
}
func (p *ThriftHiveMetastoreGetConfigValueArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DefaultValue = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_config_value_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "defaultValue", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:defaultValue: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DefaultValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.defaultValue (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:defaultValue: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetConfigValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetConfigValueResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *ConfigValSecurityException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetConfigValueResult() *ThriftHiveMetastoreGetConfigValueResult {
  return &ThriftHiveMetastoreGetConfigValueResult{}
}

var ThriftHiveMetastoreGetConfigValueResult_Success_DEFAULT string
func (p *ThriftHiveMetastoreGetConfigValueResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetConfigValueResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreGetConfigValueResult_O1_DEFAULT *ConfigValSecurityException
func (p *ThriftHiveMetastoreGetConfigValueResult) GetO1() *ConfigValSecurityException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetConfigValueResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetConfigValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &ConfigValSecurityException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_config_value_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetConfigValueResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetConfigValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetConfigValueResult(%+v)", *p)
}

// Attributes:
//  - PartName
type ThriftHiveMetastorePartitionNameToValsArgs struct {
  PartName string `thrift:"part_name,1" db:"part_name" json:"part_name"`
}

func NewThriftHiveMetastorePartitionNameToValsArgs() *ThriftHiveMetastorePartitionNameToValsArgs {
  return &ThriftHiveMetastorePartitionNameToValsArgs{}
}


func (p *ThriftHiveMetastorePartitionNameToValsArgs) GetPartName() string {
  return p.PartName
}
func (p *ThriftHiveMetastorePartitionNameToValsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partition_name_to_vals_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastorePartitionNameToValsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastorePartitionNameToValsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastorePartitionNameToValsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastorePartitionNameToValsResult() *ThriftHiveMetastorePartitionNameToValsResult {
  return &ThriftHiveMetastorePartitionNameToValsResult{}
}

var ThriftHiveMetastorePartitionNameToValsResult_Success_DEFAULT []string

func (p *ThriftHiveMetastorePartitionNameToValsResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastorePartitionNameToValsResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastorePartitionNameToValsResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastorePartitionNameToValsResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastorePartitionNameToValsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem606 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem606 = v
}
    p.Success = append(p.Success, _elem606)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partition_name_to_vals_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastorePartitionNameToValsResult(%+v)", *p)
}

// Attributes:
//  - PartName
type ThriftHiveMetastorePartitionNameToSpecArgs struct {
  PartName string `thrift:"part_name,1" db:"part_name" json:"part_name"`
}

func NewThriftHiveMetastorePartitionNameToSpecArgs() *ThriftHiveMetastorePartitionNameToSpecArgs {
  return &ThriftHiveMetastorePartitionNameToSpecArgs{}
}


func (p *ThriftHiveMetastorePartitionNameToSpecArgs) GetPartName() string {
  return p.PartName
}
func (p *ThriftHiveMetastorePartitionNameToSpecArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partition_name_to_spec_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastorePartitionNameToSpecArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastorePartitionNameToSpecArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastorePartitionNameToSpecResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastorePartitionNameToSpecResult() *ThriftHiveMetastorePartitionNameToSpecResult {
  return &ThriftHiveMetastorePartitionNameToSpecResult{}
}

var ThriftHiveMetastorePartitionNameToSpecResult_Success_DEFAULT map[string]string

func (p *ThriftHiveMetastorePartitionNameToSpecResult) GetSuccess() map[string]string {
  return p.Success
}
var ThriftHiveMetastorePartitionNameToSpecResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastorePartitionNameToSpecResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastorePartitionNameToSpecResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastorePartitionNameToSpecResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key607 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key607 = v
}
var _val608 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val608 = v
}
    p.Success[_key607] = _val608
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "partition_name_to_spec_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastorePartitionNameToSpecResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - EventType
type ThriftHiveMetastoreMarkPartitionForEventArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals map[string]string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  EventType PartitionEventType `thrift:"eventType,4" db:"eventType" json:"eventType"`
}

func NewThriftHiveMetastoreMarkPartitionForEventArgs() *ThriftHiveMetastoreMarkPartitionForEventArgs {
  return &ThriftHiveMetastoreMarkPartitionForEventArgs{}
}


func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) GetPartVals() map[string]string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) GetEventType() PartitionEventType {
  return p.EventType
}
func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.PartVals =  tMap
  for i := 0; i < size; i ++ {
var _key609 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key609 = v
}
var _val610 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val610 = v
}
    p.PartVals[_key609] = _val610
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := PartitionEventType(v)
  p.EventType = temp
}
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "markPartitionForEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_vals", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PartVals {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eventType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:eventType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.EventType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:eventType: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreMarkPartitionForEventArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
//  - O4
//  - O5
//  - O6
type ThriftHiveMetastoreMarkPartitionForEventResult struct {
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *UnknownDBException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *UnknownTableException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
  O5 *UnknownPartitionException `thrift:"o5,5" db:"o5" json:"o5,omitempty"`
  O6 *InvalidPartitionException `thrift:"o6,6" db:"o6" json:"o6,omitempty"`
}

func NewThriftHiveMetastoreMarkPartitionForEventResult() *ThriftHiveMetastoreMarkPartitionForEventResult {
  return &ThriftHiveMetastoreMarkPartitionForEventResult{}
}

var ThriftHiveMetastoreMarkPartitionForEventResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreMarkPartitionForEventResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreMarkPartitionForEventResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreMarkPartitionForEventResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreMarkPartitionForEventResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreMarkPartitionForEventResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreMarkPartitionForEventResult_O3_DEFAULT *UnknownDBException
func (p *ThriftHiveMetastoreMarkPartitionForEventResult) GetO3() *UnknownDBException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreMarkPartitionForEventResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreMarkPartitionForEventResult_O4_DEFAULT *UnknownTableException
func (p *ThriftHiveMetastoreMarkPartitionForEventResult) GetO4() *UnknownTableException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreMarkPartitionForEventResult_O4_DEFAULT
  }
return p.O4
}
var ThriftHiveMetastoreMarkPartitionForEventResult_O5_DEFAULT *UnknownPartitionException
func (p *ThriftHiveMetastoreMarkPartitionForEventResult) GetO5() *UnknownPartitionException {
  if !p.IsSetO5() {
    return ThriftHiveMetastoreMarkPartitionForEventResult_O5_DEFAULT
  }
return p.O5
}
var ThriftHiveMetastoreMarkPartitionForEventResult_O6_DEFAULT *InvalidPartitionException
func (p *ThriftHiveMetastoreMarkPartitionForEventResult) GetO6() *InvalidPartitionException {
  if !p.IsSetO6() {
    return ThriftHiveMetastoreMarkPartitionForEventResult_O6_DEFAULT
  }
return p.O6
}
func (p *ThriftHiveMetastoreMarkPartitionForEventResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) IsSetO5() bool {
  return p.O5 != nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) IsSetO6() bool {
  return p.O6 != nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &UnknownDBException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &UnknownTableException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.O5 = &UnknownPartitionException{}
  if err := p.O5.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O5), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.O6 = &InvalidPartitionException{}
  if err := p.O6.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O6), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "markPartitionForEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO5() {
    if err := oprot.WriteFieldBegin(ctx, "o5", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:o5: ", p), err) }
    if err := p.O5.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O5), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:o5: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO6() {
    if err := oprot.WriteFieldBegin(ctx, "o6", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:o6: ", p), err) }
    if err := p.O6.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O6), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:o6: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreMarkPartitionForEventResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - EventType
type ThriftHiveMetastoreIsPartitionMarkedForEventArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals map[string]string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  EventType PartitionEventType `thrift:"eventType,4" db:"eventType" json:"eventType"`
}

func NewThriftHiveMetastoreIsPartitionMarkedForEventArgs() *ThriftHiveMetastoreIsPartitionMarkedForEventArgs {
  return &ThriftHiveMetastoreIsPartitionMarkedForEventArgs{}
}


func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) GetPartVals() map[string]string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) GetEventType() PartitionEventType {
  return p.EventType
}
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.PartVals =  tMap
  for i := 0; i < size; i ++ {
var _key611 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key611 = v
}
var _val612 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val612 = v
}
    p.PartVals[_key611] = _val612
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := PartitionEventType(v)
  p.EventType = temp
}
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "isPartitionMarkedForEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_vals", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PartVals {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eventType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:eventType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.EventType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:eventType: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreIsPartitionMarkedForEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
//  - O5
//  - O6
type ThriftHiveMetastoreIsPartitionMarkedForEventResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *UnknownDBException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *UnknownTableException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
  O5 *UnknownPartitionException `thrift:"o5,5" db:"o5" json:"o5,omitempty"`
  O6 *InvalidPartitionException `thrift:"o6,6" db:"o6" json:"o6,omitempty"`
}

func NewThriftHiveMetastoreIsPartitionMarkedForEventResult() *ThriftHiveMetastoreIsPartitionMarkedForEventResult {
  return &ThriftHiveMetastoreIsPartitionMarkedForEventResult{}
}

var ThriftHiveMetastoreIsPartitionMarkedForEventResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreIsPartitionMarkedForEventResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreIsPartitionMarkedForEventResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreIsPartitionMarkedForEventResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreIsPartitionMarkedForEventResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreIsPartitionMarkedForEventResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreIsPartitionMarkedForEventResult_O3_DEFAULT *UnknownDBException
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) GetO3() *UnknownDBException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreIsPartitionMarkedForEventResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreIsPartitionMarkedForEventResult_O4_DEFAULT *UnknownTableException
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) GetO4() *UnknownTableException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreIsPartitionMarkedForEventResult_O4_DEFAULT
  }
return p.O4
}
var ThriftHiveMetastoreIsPartitionMarkedForEventResult_O5_DEFAULT *UnknownPartitionException
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) GetO5() *UnknownPartitionException {
  if !p.IsSetO5() {
    return ThriftHiveMetastoreIsPartitionMarkedForEventResult_O5_DEFAULT
  }
return p.O5
}
var ThriftHiveMetastoreIsPartitionMarkedForEventResult_O6_DEFAULT *InvalidPartitionException
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) GetO6() *InvalidPartitionException {
  if !p.IsSetO6() {
    return ThriftHiveMetastoreIsPartitionMarkedForEventResult_O6_DEFAULT
  }
return p.O6
}
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) IsSetO5() bool {
  return p.O5 != nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) IsSetO6() bool {
  return p.O6 != nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &UnknownDBException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &UnknownTableException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.O5 = &UnknownPartitionException{}
  if err := p.O5.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O5), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.O6 = &InvalidPartitionException{}
  if err := p.O6.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O6), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "isPartitionMarkedForEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO5() {
    if err := oprot.WriteFieldBegin(ctx, "o5", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:o5: ", p), err) }
    if err := p.O5.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O5), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:o5: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO6() {
    if err := oprot.WriteFieldBegin(ctx, "o6", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:o6: ", p), err) }
    if err := p.O6.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O6), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:o6: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreIsPartitionMarkedForEventResult(%+v)", *p)
}

// Attributes:
//  - NewIndex_
//  - IndexTable
type ThriftHiveMetastoreAddIndexArgs struct {
  NewIndex_ *Index `thrift:"new_index,1" db:"new_index" json:"new_index"`
  IndexTable *Table `thrift:"index_table,2" db:"index_table" json:"index_table"`
}

func NewThriftHiveMetastoreAddIndexArgs() *ThriftHiveMetastoreAddIndexArgs {
  return &ThriftHiveMetastoreAddIndexArgs{}
}

var ThriftHiveMetastoreAddIndexArgs_NewIndex__DEFAULT *Index
func (p *ThriftHiveMetastoreAddIndexArgs) GetNewIndex_() *Index {
  if !p.IsSetNewIndex_() {
    return ThriftHiveMetastoreAddIndexArgs_NewIndex__DEFAULT
  }
return p.NewIndex_
}
var ThriftHiveMetastoreAddIndexArgs_IndexTable_DEFAULT *Table
func (p *ThriftHiveMetastoreAddIndexArgs) GetIndexTable() *Table {
  if !p.IsSetIndexTable() {
    return ThriftHiveMetastoreAddIndexArgs_IndexTable_DEFAULT
  }
return p.IndexTable
}
func (p *ThriftHiveMetastoreAddIndexArgs) IsSetNewIndex_() bool {
  return p.NewIndex_ != nil
}

func (p *ThriftHiveMetastoreAddIndexArgs) IsSetIndexTable() bool {
  return p.IndexTable != nil
}

func (p *ThriftHiveMetastoreAddIndexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.NewIndex_ = &Index{}
  if err := p.NewIndex_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewIndex_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.IndexTable = &Table{}
  if err := p.IndexTable.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IndexTable), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_index_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_index", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:new_index: ", p), err) }
  if err := p.NewIndex_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewIndex_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:new_index: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddIndexArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index_table", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_table: ", p), err) }
  if err := p.IndexTable.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IndexTable), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_table: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAddIndexResult struct {
  Success *Index `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAddIndexResult() *ThriftHiveMetastoreAddIndexResult {
  return &ThriftHiveMetastoreAddIndexResult{}
}

var ThriftHiveMetastoreAddIndexResult_Success_DEFAULT *Index
func (p *ThriftHiveMetastoreAddIndexResult) GetSuccess() *Index {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAddIndexResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAddIndexResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAddIndexResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddIndexResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddIndexResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAddIndexResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddIndexResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAddIndexResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddIndexResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAddIndexResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAddIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAddIndexResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddIndexResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddIndexResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAddIndexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Index{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_index_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddIndexResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddIndexResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddIndexResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddIndexResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - BaseTblName
//  - IdxName
//  - NewIdx_
type ThriftHiveMetastoreAlterIndexArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  BaseTblName string `thrift:"base_tbl_name,2" db:"base_tbl_name" json:"base_tbl_name"`
  IdxName string `thrift:"idx_name,3" db:"idx_name" json:"idx_name"`
  NewIdx_ *Index `thrift:"new_idx,4" db:"new_idx" json:"new_idx"`
}

func NewThriftHiveMetastoreAlterIndexArgs() *ThriftHiveMetastoreAlterIndexArgs {
  return &ThriftHiveMetastoreAlterIndexArgs{}
}


func (p *ThriftHiveMetastoreAlterIndexArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreAlterIndexArgs) GetBaseTblName() string {
  return p.BaseTblName
}

func (p *ThriftHiveMetastoreAlterIndexArgs) GetIdxName() string {
  return p.IdxName
}
var ThriftHiveMetastoreAlterIndexArgs_NewIdx__DEFAULT *Index
func (p *ThriftHiveMetastoreAlterIndexArgs) GetNewIdx_() *Index {
  if !p.IsSetNewIdx_() {
    return ThriftHiveMetastoreAlterIndexArgs_NewIdx__DEFAULT
  }
return p.NewIdx_
}
func (p *ThriftHiveMetastoreAlterIndexArgs) IsSetNewIdx_() bool {
  return p.NewIdx_ != nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BaseTblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IdxName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.NewIdx_ = &Index{}
  if err := p.NewIdx_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewIdx_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_index_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterIndexArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "base_tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:base_tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BaseTblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.base_tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:base_tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterIndexArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "idx_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:idx_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IdxName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idx_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:idx_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterIndexArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_idx", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:new_idx: ", p), err) }
  if err := p.NewIdx_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewIdx_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:new_idx: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterIndexArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterIndexResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterIndexResult() *ThriftHiveMetastoreAlterIndexResult {
  return &ThriftHiveMetastoreAlterIndexResult{}
}

var ThriftHiveMetastoreAlterIndexResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterIndexResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterIndexResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterIndexResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterIndexResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterIndexResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterIndexResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterIndexResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterIndexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_index_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterIndexResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterIndexResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - IndexName
//  - DeleteData
type ThriftHiveMetastoreDropIndexByNameArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  IndexName string `thrift:"index_name,3" db:"index_name" json:"index_name"`
  DeleteData bool `thrift:"deleteData,4" db:"deleteData" json:"deleteData"`
}

func NewThriftHiveMetastoreDropIndexByNameArgs() *ThriftHiveMetastoreDropIndexByNameArgs {
  return &ThriftHiveMetastoreDropIndexByNameArgs{}
}


func (p *ThriftHiveMetastoreDropIndexByNameArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) GetIndexName() string {
  return p.IndexName
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) GetDeleteData() bool {
  return p.DeleteData
}
func (p *ThriftHiveMetastoreDropIndexByNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DeleteData = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_index_by_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:index_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IndexName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:index_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deleteData", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deleteData: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.DeleteData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleteData (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deleteData: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropIndexByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropIndexByNameResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropIndexByNameResult() *ThriftHiveMetastoreDropIndexByNameResult {
  return &ThriftHiveMetastoreDropIndexByNameResult{}
}

var ThriftHiveMetastoreDropIndexByNameResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDropIndexByNameResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropIndexByNameResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDropIndexByNameResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropIndexByNameResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropIndexByNameResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropIndexByNameResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropIndexByNameResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropIndexByNameResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreDropIndexByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_index_by_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropIndexByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - IndexName
type ThriftHiveMetastoreGetIndexByNameArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  IndexName string `thrift:"index_name,3" db:"index_name" json:"index_name"`
}

func NewThriftHiveMetastoreGetIndexByNameArgs() *ThriftHiveMetastoreGetIndexByNameArgs {
  return &ThriftHiveMetastoreGetIndexByNameArgs{}
}


func (p *ThriftHiveMetastoreGetIndexByNameArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) GetIndexName() string {
  return p.IndexName
}
func (p *ThriftHiveMetastoreGetIndexByNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_index_by_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:index_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IndexName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:index_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetIndexByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetIndexByNameResult struct {
  Success *Index `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetIndexByNameResult() *ThriftHiveMetastoreGetIndexByNameResult {
  return &ThriftHiveMetastoreGetIndexByNameResult{}
}

var ThriftHiveMetastoreGetIndexByNameResult_Success_DEFAULT *Index
func (p *ThriftHiveMetastoreGetIndexByNameResult) GetSuccess() *Index {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetIndexByNameResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetIndexByNameResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetIndexByNameResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetIndexByNameResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetIndexByNameResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetIndexByNameResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetIndexByNameResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetIndexByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Index{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_index_by_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetIndexByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxIndexes
type ThriftHiveMetastoreGetIndexesArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  MaxIndexes int16 `thrift:"max_indexes,3" db:"max_indexes" json:"max_indexes"`
}

func NewThriftHiveMetastoreGetIndexesArgs() *ThriftHiveMetastoreGetIndexesArgs {
  return &ThriftHiveMetastoreGetIndexesArgs{
MaxIndexes: -1,
}
}


func (p *ThriftHiveMetastoreGetIndexesArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetIndexesArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetIndexesArgs) GetMaxIndexes() int16 {
  return p.MaxIndexes
}
func (p *ThriftHiveMetastoreGetIndexesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxIndexes = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_indexes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexesArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_indexes", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_indexes: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.MaxIndexes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_indexes (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_indexes: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetIndexesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetIndexesResult struct {
  Success []*Index `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetIndexesResult() *ThriftHiveMetastoreGetIndexesResult {
  return &ThriftHiveMetastoreGetIndexesResult{}
}

var ThriftHiveMetastoreGetIndexesResult_Success_DEFAULT []*Index

func (p *ThriftHiveMetastoreGetIndexesResult) GetSuccess() []*Index {
  return p.Success
}
var ThriftHiveMetastoreGetIndexesResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetIndexesResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetIndexesResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetIndexesResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetIndexesResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetIndexesResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetIndexesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Index, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem613 := &Index{}
    if err := _elem613.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem613), err)
    }
    p.Success = append(p.Success, _elem613)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_indexes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexesResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetIndexesResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxIndexes
type ThriftHiveMetastoreGetIndexNamesArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  MaxIndexes int16 `thrift:"max_indexes,3" db:"max_indexes" json:"max_indexes"`
}

func NewThriftHiveMetastoreGetIndexNamesArgs() *ThriftHiveMetastoreGetIndexNamesArgs {
  return &ThriftHiveMetastoreGetIndexNamesArgs{
MaxIndexes: -1,
}
}


func (p *ThriftHiveMetastoreGetIndexNamesArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) GetMaxIndexes() int16 {
  return p.MaxIndexes
}
func (p *ThriftHiveMetastoreGetIndexNamesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxIndexes = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_index_names_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_indexes", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_indexes: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.MaxIndexes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_indexes (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_indexes: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetIndexNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O2
type ThriftHiveMetastoreGetIndexNamesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O2 *MetaException `thrift:"o2,1" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetIndexNamesResult() *ThriftHiveMetastoreGetIndexNamesResult {
  return &ThriftHiveMetastoreGetIndexNamesResult{}
}

var ThriftHiveMetastoreGetIndexNamesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetIndexNamesResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetIndexNamesResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetIndexNamesResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetIndexNamesResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetIndexNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem614 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem614 = v
}
    p.Success = append(p.Success, _elem614)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_index_names_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetIndexNamesResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGetPrimaryKeysArgs struct {
  Request *PrimaryKeysRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGetPrimaryKeysArgs() *ThriftHiveMetastoreGetPrimaryKeysArgs {
  return &ThriftHiveMetastoreGetPrimaryKeysArgs{}
}

var ThriftHiveMetastoreGetPrimaryKeysArgs_Request_DEFAULT *PrimaryKeysRequest
func (p *ThriftHiveMetastoreGetPrimaryKeysArgs) GetRequest() *PrimaryKeysRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGetPrimaryKeysArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGetPrimaryKeysArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGetPrimaryKeysArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrimaryKeysArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &PrimaryKeysRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrimaryKeysArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_primary_keys_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPrimaryKeysArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPrimaryKeysArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPrimaryKeysArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPrimaryKeysResult struct {
  Success *PrimaryKeysResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPrimaryKeysResult() *ThriftHiveMetastoreGetPrimaryKeysResult {
  return &ThriftHiveMetastoreGetPrimaryKeysResult{}
}

var ThriftHiveMetastoreGetPrimaryKeysResult_Success_DEFAULT *PrimaryKeysResponse
func (p *ThriftHiveMetastoreGetPrimaryKeysResult) GetSuccess() *PrimaryKeysResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPrimaryKeysResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPrimaryKeysResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPrimaryKeysResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPrimaryKeysResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPrimaryKeysResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPrimaryKeysResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPrimaryKeysResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPrimaryKeysResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPrimaryKeysResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPrimaryKeysResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPrimaryKeysResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrimaryKeysResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PrimaryKeysResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrimaryKeysResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrimaryKeysResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrimaryKeysResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_primary_keys_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPrimaryKeysResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPrimaryKeysResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPrimaryKeysResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPrimaryKeysResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPrimaryKeysResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGetForeignKeysArgs struct {
  Request *ForeignKeysRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGetForeignKeysArgs() *ThriftHiveMetastoreGetForeignKeysArgs {
  return &ThriftHiveMetastoreGetForeignKeysArgs{}
}

var ThriftHiveMetastoreGetForeignKeysArgs_Request_DEFAULT *ForeignKeysRequest
func (p *ThriftHiveMetastoreGetForeignKeysArgs) GetRequest() *ForeignKeysRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGetForeignKeysArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGetForeignKeysArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGetForeignKeysArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetForeignKeysArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &ForeignKeysRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetForeignKeysArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_foreign_keys_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetForeignKeysArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetForeignKeysArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetForeignKeysArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetForeignKeysResult struct {
  Success *ForeignKeysResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetForeignKeysResult() *ThriftHiveMetastoreGetForeignKeysResult {
  return &ThriftHiveMetastoreGetForeignKeysResult{}
}

var ThriftHiveMetastoreGetForeignKeysResult_Success_DEFAULT *ForeignKeysResponse
func (p *ThriftHiveMetastoreGetForeignKeysResult) GetSuccess() *ForeignKeysResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetForeignKeysResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetForeignKeysResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetForeignKeysResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetForeignKeysResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetForeignKeysResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetForeignKeysResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetForeignKeysResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetForeignKeysResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetForeignKeysResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetForeignKeysResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetForeignKeysResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetForeignKeysResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ForeignKeysResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetForeignKeysResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetForeignKeysResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetForeignKeysResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_foreign_keys_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetForeignKeysResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetForeignKeysResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetForeignKeysResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetForeignKeysResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetForeignKeysResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGetUniqueConstraintsArgs struct {
  Request *UniqueConstraintsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGetUniqueConstraintsArgs() *ThriftHiveMetastoreGetUniqueConstraintsArgs {
  return &ThriftHiveMetastoreGetUniqueConstraintsArgs{}
}

var ThriftHiveMetastoreGetUniqueConstraintsArgs_Request_DEFAULT *UniqueConstraintsRequest
func (p *ThriftHiveMetastoreGetUniqueConstraintsArgs) GetRequest() *UniqueConstraintsRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGetUniqueConstraintsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGetUniqueConstraintsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &UniqueConstraintsRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_unique_constraints_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetUniqueConstraintsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetUniqueConstraintsResult struct {
  Success *UniqueConstraintsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetUniqueConstraintsResult() *ThriftHiveMetastoreGetUniqueConstraintsResult {
  return &ThriftHiveMetastoreGetUniqueConstraintsResult{}
}

var ThriftHiveMetastoreGetUniqueConstraintsResult_Success_DEFAULT *UniqueConstraintsResponse
func (p *ThriftHiveMetastoreGetUniqueConstraintsResult) GetSuccess() *UniqueConstraintsResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetUniqueConstraintsResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetUniqueConstraintsResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetUniqueConstraintsResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetUniqueConstraintsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetUniqueConstraintsResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetUniqueConstraintsResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetUniqueConstraintsResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetUniqueConstraintsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UniqueConstraintsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_unique_constraints_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetUniqueConstraintsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetUniqueConstraintsResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGetNotNullConstraintsArgs struct {
  Request *NotNullConstraintsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGetNotNullConstraintsArgs() *ThriftHiveMetastoreGetNotNullConstraintsArgs {
  return &ThriftHiveMetastoreGetNotNullConstraintsArgs{}
}

var ThriftHiveMetastoreGetNotNullConstraintsArgs_Request_DEFAULT *NotNullConstraintsRequest
func (p *ThriftHiveMetastoreGetNotNullConstraintsArgs) GetRequest() *NotNullConstraintsRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGetNotNullConstraintsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGetNotNullConstraintsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &NotNullConstraintsRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_not_null_constraints_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetNotNullConstraintsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetNotNullConstraintsResult struct {
  Success *NotNullConstraintsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetNotNullConstraintsResult() *ThriftHiveMetastoreGetNotNullConstraintsResult {
  return &ThriftHiveMetastoreGetNotNullConstraintsResult{}
}

var ThriftHiveMetastoreGetNotNullConstraintsResult_Success_DEFAULT *NotNullConstraintsResponse
func (p *ThriftHiveMetastoreGetNotNullConstraintsResult) GetSuccess() *NotNullConstraintsResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetNotNullConstraintsResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetNotNullConstraintsResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetNotNullConstraintsResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetNotNullConstraintsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetNotNullConstraintsResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetNotNullConstraintsResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetNotNullConstraintsResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetNotNullConstraintsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &NotNullConstraintsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_not_null_constraints_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetNotNullConstraintsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetNotNullConstraintsResult(%+v)", *p)
}

// Attributes:
//  - StatsObj
type ThriftHiveMetastoreUpdateTableColumnStatisticsArgs struct {
  StatsObj *ColumnStatistics `thrift:"stats_obj,1" db:"stats_obj" json:"stats_obj"`
}

func NewThriftHiveMetastoreUpdateTableColumnStatisticsArgs() *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs {
  return &ThriftHiveMetastoreUpdateTableColumnStatisticsArgs{}
}

var ThriftHiveMetastoreUpdateTableColumnStatisticsArgs_StatsObj_DEFAULT *ColumnStatistics
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs) GetStatsObj() *ColumnStatistics {
  if !p.IsSetStatsObj() {
    return ThriftHiveMetastoreUpdateTableColumnStatisticsArgs_StatsObj_DEFAULT
  }
return p.StatsObj
}
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs) IsSetStatsObj() bool {
  return p.StatsObj != nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.StatsObj = &ColumnStatistics{}
  if err := p.StatsObj.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StatsObj), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_table_column_statistics_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stats_obj", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stats_obj: ", p), err) }
  if err := p.StatsObj.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StatsObj), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stats_obj: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreUpdateTableColumnStatisticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreUpdateTableColumnStatisticsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidInputException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreUpdateTableColumnStatisticsResult() *ThriftHiveMetastoreUpdateTableColumnStatisticsResult {
  return &ThriftHiveMetastoreUpdateTableColumnStatisticsResult{}
}

var ThriftHiveMetastoreUpdateTableColumnStatisticsResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreUpdateTableColumnStatisticsResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O4_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) GetO4() *InvalidInputException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &InvalidInputException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_table_column_statistics_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreUpdateTableColumnStatisticsResult(%+v)", *p)
}

// Attributes:
//  - StatsObj
type ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs struct {
  StatsObj *ColumnStatistics `thrift:"stats_obj,1" db:"stats_obj" json:"stats_obj"`
}

func NewThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs() *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs {
  return &ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs{}
}

var ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs_StatsObj_DEFAULT *ColumnStatistics
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs) GetStatsObj() *ColumnStatistics {
  if !p.IsSetStatsObj() {
    return ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs_StatsObj_DEFAULT
  }
return p.StatsObj
}
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs) IsSetStatsObj() bool {
  return p.StatsObj != nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.StatsObj = &ColumnStatistics{}
  if err := p.StatsObj.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StatsObj), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_partition_column_statistics_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stats_obj", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stats_obj: ", p), err) }
  if err := p.StatsObj.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StatsObj), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stats_obj: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidInputException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreUpdatePartitionColumnStatisticsResult() *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult {
  return &ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult{}
}

var ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O4_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) GetO4() *InvalidInputException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &InvalidInputException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_partition_column_statistics_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - ColName
type ThriftHiveMetastoreGetTableColumnStatisticsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  ColName string `thrift:"col_name,3" db:"col_name" json:"col_name"`
}

func NewThriftHiveMetastoreGetTableColumnStatisticsArgs() *ThriftHiveMetastoreGetTableColumnStatisticsArgs {
  return &ThriftHiveMetastoreGetTableColumnStatisticsArgs{}
}


func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) GetColName() string {
  return p.ColName
}
func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ColName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_column_statistics_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "col_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:col_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ColName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:col_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableColumnStatisticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreGetTableColumnStatisticsResult struct {
  Success *ColumnStatistics `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *InvalidInputException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidObjectException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreGetTableColumnStatisticsResult() *ThriftHiveMetastoreGetTableColumnStatisticsResult {
  return &ThriftHiveMetastoreGetTableColumnStatisticsResult{}
}

var ThriftHiveMetastoreGetTableColumnStatisticsResult_Success_DEFAULT *ColumnStatistics
func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) GetSuccess() *ColumnStatistics {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetTableColumnStatisticsResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetTableColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTableColumnStatisticsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetTableColumnStatisticsResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTableColumnStatisticsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreGetTableColumnStatisticsResult_O3_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) GetO3() *InvalidInputException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreGetTableColumnStatisticsResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreGetTableColumnStatisticsResult_O4_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) GetO4() *InvalidObjectException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreGetTableColumnStatisticsResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ColumnStatistics{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &InvalidInputException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &InvalidObjectException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_column_statistics_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableColumnStatisticsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
//  - ColName
type ThriftHiveMetastoreGetPartitionColumnStatisticsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartName string `thrift:"part_name,3" db:"part_name" json:"part_name"`
  ColName string `thrift:"col_name,4" db:"col_name" json:"col_name"`
}

func NewThriftHiveMetastoreGetPartitionColumnStatisticsArgs() *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs {
  return &ThriftHiveMetastoreGetPartitionColumnStatisticsArgs{}
}


func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) GetPartName() string {
  return p.PartName
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) GetColName() string {
  return p.ColName
}
func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ColName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partition_column_statistics_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "col_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:col_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ColName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:col_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionColumnStatisticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreGetPartitionColumnStatisticsResult struct {
  Success *ColumnStatistics `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *InvalidInputException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidObjectException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionColumnStatisticsResult() *ThriftHiveMetastoreGetPartitionColumnStatisticsResult {
  return &ThriftHiveMetastoreGetPartitionColumnStatisticsResult{}
}

var ThriftHiveMetastoreGetPartitionColumnStatisticsResult_Success_DEFAULT *ColumnStatistics
func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) GetSuccess() *ColumnStatistics {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPartitionColumnStatisticsResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O3_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) GetO3() *InvalidInputException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O4_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) GetO4() *InvalidObjectException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ColumnStatistics{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &InvalidInputException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &InvalidObjectException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partition_column_statistics_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionColumnStatisticsResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGetTableStatisticsReqArgs struct {
  Request *TableStatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGetTableStatisticsReqArgs() *ThriftHiveMetastoreGetTableStatisticsReqArgs {
  return &ThriftHiveMetastoreGetTableStatisticsReqArgs{}
}

var ThriftHiveMetastoreGetTableStatisticsReqArgs_Request_DEFAULT *TableStatsRequest
func (p *ThriftHiveMetastoreGetTableStatisticsReqArgs) GetRequest() *TableStatsRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGetTableStatisticsReqArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGetTableStatisticsReqArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &TableStatsRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_statistics_req_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableStatisticsReqArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetTableStatisticsReqResult struct {
  Success *TableStatsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetTableStatisticsReqResult() *ThriftHiveMetastoreGetTableStatisticsReqResult {
  return &ThriftHiveMetastoreGetTableStatisticsReqResult{}
}

var ThriftHiveMetastoreGetTableStatisticsReqResult_Success_DEFAULT *TableStatsResult_
func (p *ThriftHiveMetastoreGetTableStatisticsReqResult) GetSuccess() *TableStatsResult_ {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetTableStatisticsReqResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetTableStatisticsReqResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetTableStatisticsReqResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTableStatisticsReqResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetTableStatisticsReqResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTableStatisticsReqResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTableStatisticsReqResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetTableStatisticsReqResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TableStatsResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_table_statistics_req_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableStatisticsReqResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableStatisticsReqResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGetPartitionsStatisticsReqArgs struct {
  Request *PartitionsStatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGetPartitionsStatisticsReqArgs() *ThriftHiveMetastoreGetPartitionsStatisticsReqArgs {
  return &ThriftHiveMetastoreGetPartitionsStatisticsReqArgs{}
}

var ThriftHiveMetastoreGetPartitionsStatisticsReqArgs_Request_DEFAULT *PartitionsStatsRequest
func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqArgs) GetRequest() *PartitionsStatsRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGetPartitionsStatisticsReqArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &PartitionsStatsRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_statistics_req_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsStatisticsReqArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsStatisticsReqResult struct {
  Success *PartitionsStatsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsStatisticsReqResult() *ThriftHiveMetastoreGetPartitionsStatisticsReqResult {
  return &ThriftHiveMetastoreGetPartitionsStatisticsReqResult{}
}

var ThriftHiveMetastoreGetPartitionsStatisticsReqResult_Success_DEFAULT *PartitionsStatsResult_
func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult) GetSuccess() *PartitionsStatsResult_ {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPartitionsStatisticsReqResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPartitionsStatisticsReqResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsStatisticsReqResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsStatisticsReqResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsStatisticsReqResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PartitionsStatsResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_partitions_statistics_req_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsStatisticsReqResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsStatisticsReqResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGetAggrStatsForArgs struct {
  Request *PartitionsStatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGetAggrStatsForArgs() *ThriftHiveMetastoreGetAggrStatsForArgs {
  return &ThriftHiveMetastoreGetAggrStatsForArgs{}
}

var ThriftHiveMetastoreGetAggrStatsForArgs_Request_DEFAULT *PartitionsStatsRequest
func (p *ThriftHiveMetastoreGetAggrStatsForArgs) GetRequest() *PartitionsStatsRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGetAggrStatsForArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGetAggrStatsForArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGetAggrStatsForArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAggrStatsForArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &PartitionsStatsRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAggrStatsForArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_aggr_stats_for_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAggrStatsForArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetAggrStatsForArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAggrStatsForArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetAggrStatsForResult struct {
  Success *AggrStats `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetAggrStatsForResult() *ThriftHiveMetastoreGetAggrStatsForResult {
  return &ThriftHiveMetastoreGetAggrStatsForResult{}
}

var ThriftHiveMetastoreGetAggrStatsForResult_Success_DEFAULT *AggrStats
func (p *ThriftHiveMetastoreGetAggrStatsForResult) GetSuccess() *AggrStats {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetAggrStatsForResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetAggrStatsForResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetAggrStatsForResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetAggrStatsForResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetAggrStatsForResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetAggrStatsForResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetAggrStatsForResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetAggrStatsForResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetAggrStatsForResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetAggrStatsForResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetAggrStatsForResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAggrStatsForResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AggrStats{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAggrStatsForResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAggrStatsForResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAggrStatsForResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_aggr_stats_for_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAggrStatsForResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAggrStatsForResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAggrStatsForResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAggrStatsForResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAggrStatsForResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreSetAggrStatsForArgs struct {
  Request *SetPartitionsStatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreSetAggrStatsForArgs() *ThriftHiveMetastoreSetAggrStatsForArgs {
  return &ThriftHiveMetastoreSetAggrStatsForArgs{}
}

var ThriftHiveMetastoreSetAggrStatsForArgs_Request_DEFAULT *SetPartitionsStatsRequest
func (p *ThriftHiveMetastoreSetAggrStatsForArgs) GetRequest() *SetPartitionsStatsRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreSetAggrStatsForArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreSetAggrStatsForArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &SetPartitionsStatsRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "set_aggr_stats_for_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreSetAggrStatsForArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreSetAggrStatsForArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreSetAggrStatsForResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidInputException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreSetAggrStatsForResult() *ThriftHiveMetastoreSetAggrStatsForResult {
  return &ThriftHiveMetastoreSetAggrStatsForResult{}
}

var ThriftHiveMetastoreSetAggrStatsForResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreSetAggrStatsForResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreSetAggrStatsForResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreSetAggrStatsForResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreSetAggrStatsForResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreSetAggrStatsForResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreSetAggrStatsForResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreSetAggrStatsForResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreSetAggrStatsForResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreSetAggrStatsForResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreSetAggrStatsForResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreSetAggrStatsForResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreSetAggrStatsForResult_O4_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreSetAggrStatsForResult) GetO4() *InvalidInputException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreSetAggrStatsForResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreSetAggrStatsForResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &InvalidInputException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "set_aggr_stats_for_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreSetAggrStatsForResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreSetAggrStatsForResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
//  - ColName
type ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartName string `thrift:"part_name,3" db:"part_name" json:"part_name"`
  ColName string `thrift:"col_name,4" db:"col_name" json:"col_name"`
}

func NewThriftHiveMetastoreDeletePartitionColumnStatisticsArgs() *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs {
  return &ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs{}
}


func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) GetPartName() string {
  return p.PartName
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) GetColName() string {
  return p.ColName
}
func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ColName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "delete_partition_column_statistics_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "col_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:col_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ColName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:col_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreDeletePartitionColumnStatisticsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *InvalidObjectException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidInputException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreDeletePartitionColumnStatisticsResult() *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult {
  return &ThriftHiveMetastoreDeletePartitionColumnStatisticsResult{}
}

var ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O3_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) GetO3() *InvalidObjectException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O4_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) GetO4() *InvalidInputException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &InvalidObjectException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &InvalidInputException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "delete_partition_column_statistics_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDeletePartitionColumnStatisticsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - ColName
type ThriftHiveMetastoreDeleteTableColumnStatisticsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  ColName string `thrift:"col_name,3" db:"col_name" json:"col_name"`
}

func NewThriftHiveMetastoreDeleteTableColumnStatisticsArgs() *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs {
  return &ThriftHiveMetastoreDeleteTableColumnStatisticsArgs{}
}


func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) GetColName() string {
  return p.ColName
}
func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ColName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "delete_table_column_statistics_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "col_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:col_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ColName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:col_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDeleteTableColumnStatisticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreDeleteTableColumnStatisticsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *InvalidObjectException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidInputException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreDeleteTableColumnStatisticsResult() *ThriftHiveMetastoreDeleteTableColumnStatisticsResult {
  return &ThriftHiveMetastoreDeleteTableColumnStatisticsResult{}
}

var ThriftHiveMetastoreDeleteTableColumnStatisticsResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDeleteTableColumnStatisticsResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O3_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) GetO3() *InvalidObjectException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O4_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) GetO4() *InvalidInputException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &InvalidObjectException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &InvalidInputException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "delete_table_column_statistics_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDeleteTableColumnStatisticsResult(%+v)", *p)
}

// Attributes:
//  - Func
type ThriftHiveMetastoreCreateFunctionArgs struct {
  Func *Function `thrift:"func,1" db:"func" json:"func"`
}

func NewThriftHiveMetastoreCreateFunctionArgs() *ThriftHiveMetastoreCreateFunctionArgs {
  return &ThriftHiveMetastoreCreateFunctionArgs{}
}

var ThriftHiveMetastoreCreateFunctionArgs_Func_DEFAULT *Function
func (p *ThriftHiveMetastoreCreateFunctionArgs) GetFunc() *Function {
  if !p.IsSetFunc() {
    return ThriftHiveMetastoreCreateFunctionArgs_Func_DEFAULT
  }
return p.Func
}
func (p *ThriftHiveMetastoreCreateFunctionArgs) IsSetFunc() bool {
  return p.Func != nil
}

func (p *ThriftHiveMetastoreCreateFunctionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateFunctionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Func = &Function{}
  if err := p.Func.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Func), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateFunctionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_function_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateFunctionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "func", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:func: ", p), err) }
  if err := p.Func.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Func), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:func: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateFunctionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateFunctionArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreCreateFunctionResult struct {
  O1 *AlreadyExistsException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *NoSuchObjectException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreCreateFunctionResult() *ThriftHiveMetastoreCreateFunctionResult {
  return &ThriftHiveMetastoreCreateFunctionResult{}
}

var ThriftHiveMetastoreCreateFunctionResult_O1_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreCreateFunctionResult) GetO1() *AlreadyExistsException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCreateFunctionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreCreateFunctionResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreCreateFunctionResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreCreateFunctionResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreCreateFunctionResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCreateFunctionResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreCreateFunctionResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreCreateFunctionResult_O4_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreCreateFunctionResult) GetO4() *NoSuchObjectException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreCreateFunctionResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreCreateFunctionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateFunctionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateFunctionResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateFunctionResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreCreateFunctionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateFunctionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &AlreadyExistsException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateFunctionResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateFunctionResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateFunctionResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &NoSuchObjectException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateFunctionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_function_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateFunctionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateFunctionResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateFunctionResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateFunctionResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateFunctionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateFunctionResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - FuncName
type ThriftHiveMetastoreDropFunctionArgs struct {
  DbName string `thrift:"dbName,1" db:"dbName" json:"dbName"`
  FuncName string `thrift:"funcName,2" db:"funcName" json:"funcName"`
}

func NewThriftHiveMetastoreDropFunctionArgs() *ThriftHiveMetastoreDropFunctionArgs {
  return &ThriftHiveMetastoreDropFunctionArgs{}
}


func (p *ThriftHiveMetastoreDropFunctionArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreDropFunctionArgs) GetFuncName() string {
  return p.FuncName
}
func (p *ThriftHiveMetastoreDropFunctionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropFunctionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropFunctionArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FuncName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropFunctionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_function_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropFunctionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropFunctionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "funcName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:funcName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FuncName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.funcName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:funcName: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropFunctionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropFunctionArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O3
type ThriftHiveMetastoreDropFunctionResult struct {
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O3 *MetaException `thrift:"o3,2" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreDropFunctionResult() *ThriftHiveMetastoreDropFunctionResult {
  return &ThriftHiveMetastoreDropFunctionResult{}
}

var ThriftHiveMetastoreDropFunctionResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropFunctionResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropFunctionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropFunctionResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropFunctionResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreDropFunctionResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreDropFunctionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropFunctionResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreDropFunctionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropFunctionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropFunctionResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropFunctionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_function_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropFunctionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropFunctionResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropFunctionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropFunctionResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - FuncName
//  - NewFunc_
type ThriftHiveMetastoreAlterFunctionArgs struct {
  DbName string `thrift:"dbName,1" db:"dbName" json:"dbName"`
  FuncName string `thrift:"funcName,2" db:"funcName" json:"funcName"`
  NewFunc_ *Function `thrift:"newFunc,3" db:"newFunc" json:"newFunc"`
}

func NewThriftHiveMetastoreAlterFunctionArgs() *ThriftHiveMetastoreAlterFunctionArgs {
  return &ThriftHiveMetastoreAlterFunctionArgs{}
}


func (p *ThriftHiveMetastoreAlterFunctionArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreAlterFunctionArgs) GetFuncName() string {
  return p.FuncName
}
var ThriftHiveMetastoreAlterFunctionArgs_NewFunc__DEFAULT *Function
func (p *ThriftHiveMetastoreAlterFunctionArgs) GetNewFunc_() *Function {
  if !p.IsSetNewFunc_() {
    return ThriftHiveMetastoreAlterFunctionArgs_NewFunc__DEFAULT
  }
return p.NewFunc_
}
func (p *ThriftHiveMetastoreAlterFunctionArgs) IsSetNewFunc_() bool {
  return p.NewFunc_ != nil
}

func (p *ThriftHiveMetastoreAlterFunctionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterFunctionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterFunctionArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FuncName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterFunctionArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.NewFunc_ = &Function{}
  if err := p.NewFunc_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewFunc_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterFunctionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_function_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterFunctionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterFunctionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "funcName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:funcName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FuncName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.funcName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:funcName: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterFunctionArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "newFunc", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newFunc: ", p), err) }
  if err := p.NewFunc_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewFunc_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newFunc: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterFunctionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterFunctionArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterFunctionResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterFunctionResult() *ThriftHiveMetastoreAlterFunctionResult {
  return &ThriftHiveMetastoreAlterFunctionResult{}
}

var ThriftHiveMetastoreAlterFunctionResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterFunctionResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterFunctionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterFunctionResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterFunctionResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterFunctionResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterFunctionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterFunctionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterFunctionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterFunctionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterFunctionResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterFunctionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_function_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterFunctionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterFunctionResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterFunctionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterFunctionResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - Pattern
type ThriftHiveMetastoreGetFunctionsArgs struct {
  DbName string `thrift:"dbName,1" db:"dbName" json:"dbName"`
  Pattern string `thrift:"pattern,2" db:"pattern" json:"pattern"`
}

func NewThriftHiveMetastoreGetFunctionsArgs() *ThriftHiveMetastoreGetFunctionsArgs {
  return &ThriftHiveMetastoreGetFunctionsArgs{}
}


func (p *ThriftHiveMetastoreGetFunctionsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetFunctionsArgs) GetPattern() string {
  return p.Pattern
}
func (p *ThriftHiveMetastoreGetFunctionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pattern = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_functions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetFunctionsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pattern", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pattern: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pattern)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pattern (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pattern: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetFunctionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetFunctionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetFunctionsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetFunctionsResult() *ThriftHiveMetastoreGetFunctionsResult {
  return &ThriftHiveMetastoreGetFunctionsResult{}
}

var ThriftHiveMetastoreGetFunctionsResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetFunctionsResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetFunctionsResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetFunctionsResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetFunctionsResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetFunctionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetFunctionsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetFunctionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem615 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem615 = v
}
    p.Success = append(p.Success, _elem615)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_functions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFunctionsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFunctionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetFunctionsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - FuncName
type ThriftHiveMetastoreGetFunctionArgs struct {
  DbName string `thrift:"dbName,1" db:"dbName" json:"dbName"`
  FuncName string `thrift:"funcName,2" db:"funcName" json:"funcName"`
}

func NewThriftHiveMetastoreGetFunctionArgs() *ThriftHiveMetastoreGetFunctionArgs {
  return &ThriftHiveMetastoreGetFunctionArgs{}
}


func (p *ThriftHiveMetastoreGetFunctionArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetFunctionArgs) GetFuncName() string {
  return p.FuncName
}
func (p *ThriftHiveMetastoreGetFunctionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FuncName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_function_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbName: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetFunctionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "funcName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:funcName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FuncName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.funcName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:funcName: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetFunctionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetFunctionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetFunctionResult struct {
  Success *Function `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetFunctionResult() *ThriftHiveMetastoreGetFunctionResult {
  return &ThriftHiveMetastoreGetFunctionResult{}
}

var ThriftHiveMetastoreGetFunctionResult_Success_DEFAULT *Function
func (p *ThriftHiveMetastoreGetFunctionResult) GetSuccess() *Function {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetFunctionResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetFunctionResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetFunctionResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetFunctionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetFunctionResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetFunctionResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetFunctionResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetFunctionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetFunctionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetFunctionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetFunctionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Function{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_function_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetFunctionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFunctionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFunctionResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFunctionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetFunctionResult(%+v)", *p)
}

type ThriftHiveMetastoreGetAllFunctionsArgs struct {
}

func NewThriftHiveMetastoreGetAllFunctionsArgs() *ThriftHiveMetastoreGetAllFunctionsArgs {
  return &ThriftHiveMetastoreGetAllFunctionsArgs{}
}

func (p *ThriftHiveMetastoreGetAllFunctionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllFunctionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_all_functions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAllFunctionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAllFunctionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetAllFunctionsResult struct {
  Success *GetAllFunctionsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetAllFunctionsResult() *ThriftHiveMetastoreGetAllFunctionsResult {
  return &ThriftHiveMetastoreGetAllFunctionsResult{}
}

var ThriftHiveMetastoreGetAllFunctionsResult_Success_DEFAULT *GetAllFunctionsResponse
func (p *ThriftHiveMetastoreGetAllFunctionsResult) GetSuccess() *GetAllFunctionsResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetAllFunctionsResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetAllFunctionsResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetAllFunctionsResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetAllFunctionsResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetAllFunctionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetAllFunctionsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetAllFunctionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllFunctionsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetAllFunctionsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllFunctionsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllFunctionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_all_functions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAllFunctionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAllFunctionsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAllFunctionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAllFunctionsResult(%+v)", *p)
}

// Attributes:
//  - Role
type ThriftHiveMetastoreCreateRoleArgs struct {
  Role *Role `thrift:"role,1" db:"role" json:"role"`
}

func NewThriftHiveMetastoreCreateRoleArgs() *ThriftHiveMetastoreCreateRoleArgs {
  return &ThriftHiveMetastoreCreateRoleArgs{}
}

var ThriftHiveMetastoreCreateRoleArgs_Role_DEFAULT *Role
func (p *ThriftHiveMetastoreCreateRoleArgs) GetRole() *Role {
  if !p.IsSetRole() {
    return ThriftHiveMetastoreCreateRoleArgs_Role_DEFAULT
  }
return p.Role
}
func (p *ThriftHiveMetastoreCreateRoleArgs) IsSetRole() bool {
  return p.Role != nil
}

func (p *ThriftHiveMetastoreCreateRoleArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateRoleArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Role = &Role{}
  if err := p.Role.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Role), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateRoleArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateRoleArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "role", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role: ", p), err) }
  if err := p.Role.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Role), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreCreateRoleResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreCreateRoleResult() *ThriftHiveMetastoreCreateRoleResult {
  return &ThriftHiveMetastoreCreateRoleResult{}
}

var ThriftHiveMetastoreCreateRoleResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreCreateRoleResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreCreateRoleResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreCreateRoleResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCreateRoleResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCreateRoleResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreCreateRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreCreateRoleResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateRoleResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateRoleResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreCreateRoleResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateRoleResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateRoleResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateRoleResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateRoleResult(%+v)", *p)
}

// Attributes:
//  - RoleName
type ThriftHiveMetastoreDropRoleArgs struct {
  RoleName string `thrift:"role_name,1" db:"role_name" json:"role_name"`
}

func NewThriftHiveMetastoreDropRoleArgs() *ThriftHiveMetastoreDropRoleArgs {
  return &ThriftHiveMetastoreDropRoleArgs{}
}


func (p *ThriftHiveMetastoreDropRoleArgs) GetRoleName() string {
  return p.RoleName
}
func (p *ThriftHiveMetastoreDropRoleArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropRoleArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropRoleArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropRoleArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "role_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreDropRoleResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreDropRoleResult() *ThriftHiveMetastoreDropRoleResult {
  return &ThriftHiveMetastoreDropRoleResult{}
}

var ThriftHiveMetastoreDropRoleResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDropRoleResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropRoleResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDropRoleResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropRoleResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropRoleResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreDropRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropRoleResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropRoleResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropRoleResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDropRoleResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropRoleResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropRoleResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropRoleResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropRoleResult(%+v)", *p)
}

type ThriftHiveMetastoreGetRoleNamesArgs struct {
}

func NewThriftHiveMetastoreGetRoleNamesArgs() *ThriftHiveMetastoreGetRoleNamesArgs {
  return &ThriftHiveMetastoreGetRoleNamesArgs{}
}

func (p *ThriftHiveMetastoreGetRoleNamesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_role_names_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetRoleNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetRoleNamesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetRoleNamesResult() *ThriftHiveMetastoreGetRoleNamesResult {
  return &ThriftHiveMetastoreGetRoleNamesResult{}
}

var ThriftHiveMetastoreGetRoleNamesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetRoleNamesResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetRoleNamesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetRoleNamesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetRoleNamesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetRoleNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem616 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem616 = v
}
    p.Success = append(p.Success, _elem616)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_role_names_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetRoleNamesResult(%+v)", *p)
}

// Attributes:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
//  - Grantor
//  - GrantorType
//  - GrantOption
type ThriftHiveMetastoreGrantRoleArgs struct {
  RoleName string `thrift:"role_name,1" db:"role_name" json:"role_name"`
  PrincipalName string `thrift:"principal_name,2" db:"principal_name" json:"principal_name"`
  PrincipalType PrincipalType `thrift:"principal_type,3" db:"principal_type" json:"principal_type"`
  Grantor string `thrift:"grantor,4" db:"grantor" json:"grantor"`
  GrantorType PrincipalType `thrift:"grantorType,5" db:"grantorType" json:"grantorType"`
  GrantOption bool `thrift:"grant_option,6" db:"grant_option" json:"grant_option"`
}

func NewThriftHiveMetastoreGrantRoleArgs() *ThriftHiveMetastoreGrantRoleArgs {
  return &ThriftHiveMetastoreGrantRoleArgs{}
}


func (p *ThriftHiveMetastoreGrantRoleArgs) GetRoleName() string {
  return p.RoleName
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetPrincipalName() string {
  return p.PrincipalName
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetPrincipalType() PrincipalType {
  return p.PrincipalType
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetGrantor() string {
  return p.Grantor
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetGrantorType() PrincipalType {
  return p.GrantorType
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetGrantOption() bool {
  return p.GrantOption
}
func (p *ThriftHiveMetastoreGrantRoleArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PrincipalName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := PrincipalType(v)
  p.PrincipalType = temp
}
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Grantor = v
}
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := PrincipalType(v)
  p.GrantorType = temp
}
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.GrantOption = v
}
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "grant_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "role_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principal_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principal_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principal_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principal_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:principal_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrincipalType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:principal_type: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "grantor", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:grantor: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Grantor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantor (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:grantor: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "grantorType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:grantorType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.GrantorType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantorType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:grantorType: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "grant_option", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:grant_option: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.GrantOption)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grant_option (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:grant_option: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGrantRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGrantRoleResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGrantRoleResult() *ThriftHiveMetastoreGrantRoleResult {
  return &ThriftHiveMetastoreGrantRoleResult{}
}

var ThriftHiveMetastoreGrantRoleResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreGrantRoleResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGrantRoleResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreGrantRoleResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGrantRoleResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGrantRoleResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGrantRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGrantRoleResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGrantRoleResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "grant_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGrantRoleResult(%+v)", *p)
}

// Attributes:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
type ThriftHiveMetastoreRevokeRoleArgs struct {
  RoleName string `thrift:"role_name,1" db:"role_name" json:"role_name"`
  PrincipalName string `thrift:"principal_name,2" db:"principal_name" json:"principal_name"`
  PrincipalType PrincipalType `thrift:"principal_type,3" db:"principal_type" json:"principal_type"`
}

func NewThriftHiveMetastoreRevokeRoleArgs() *ThriftHiveMetastoreRevokeRoleArgs {
  return &ThriftHiveMetastoreRevokeRoleArgs{}
}


func (p *ThriftHiveMetastoreRevokeRoleArgs) GetRoleName() string {
  return p.RoleName
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) GetPrincipalName() string {
  return p.PrincipalName
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) GetPrincipalType() PrincipalType {
  return p.PrincipalType
}
func (p *ThriftHiveMetastoreRevokeRoleArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PrincipalName = v
}
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := PrincipalType(v)
  p.PrincipalType = temp
}
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "revoke_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "role_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principal_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principal_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principal_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principal_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:principal_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrincipalType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:principal_type: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRevokeRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreRevokeRoleResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreRevokeRoleResult() *ThriftHiveMetastoreRevokeRoleResult {
  return &ThriftHiveMetastoreRevokeRoleResult{}
}

var ThriftHiveMetastoreRevokeRoleResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreRevokeRoleResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreRevokeRoleResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreRevokeRoleResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreRevokeRoleResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreRevokeRoleResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreRevokeRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "revoke_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRevokeRoleResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRevokeRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRevokeRoleResult(%+v)", *p)
}

// Attributes:
//  - PrincipalName
//  - PrincipalType
type ThriftHiveMetastoreListRolesArgs struct {
  PrincipalName string `thrift:"principal_name,1" db:"principal_name" json:"principal_name"`
  PrincipalType PrincipalType `thrift:"principal_type,2" db:"principal_type" json:"principal_type"`
}

func NewThriftHiveMetastoreListRolesArgs() *ThriftHiveMetastoreListRolesArgs {
  return &ThriftHiveMetastoreListRolesArgs{}
}


func (p *ThriftHiveMetastoreListRolesArgs) GetPrincipalName() string {
  return p.PrincipalName
}

func (p *ThriftHiveMetastoreListRolesArgs) GetPrincipalType() PrincipalType {
  return p.PrincipalType
}
func (p *ThriftHiveMetastoreListRolesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListRolesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PrincipalName = v
}
  return nil
}

func (p *ThriftHiveMetastoreListRolesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PrincipalType(v)
  p.PrincipalType = temp
}
  return nil
}

func (p *ThriftHiveMetastoreListRolesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "list_roles_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreListRolesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principal_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:principal_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:principal_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreListRolesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principal_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principal_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrincipalType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principal_type: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreListRolesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreListRolesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreListRolesResult struct {
  Success []*Role `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreListRolesResult() *ThriftHiveMetastoreListRolesResult {
  return &ThriftHiveMetastoreListRolesResult{}
}

var ThriftHiveMetastoreListRolesResult_Success_DEFAULT []*Role

func (p *ThriftHiveMetastoreListRolesResult) GetSuccess() []*Role {
  return p.Success
}
var ThriftHiveMetastoreListRolesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreListRolesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreListRolesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreListRolesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreListRolesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreListRolesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListRolesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Role, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem617 := &Role{}
    if err := _elem617.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem617), err)
    }
    p.Success = append(p.Success, _elem617)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListRolesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListRolesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "list_roles_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreListRolesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreListRolesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreListRolesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreListRolesResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGrantRevokeRoleArgs struct {
  Request *GrantRevokeRoleRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGrantRevokeRoleArgs() *ThriftHiveMetastoreGrantRevokeRoleArgs {
  return &ThriftHiveMetastoreGrantRevokeRoleArgs{}
}

var ThriftHiveMetastoreGrantRevokeRoleArgs_Request_DEFAULT *GrantRevokeRoleRequest
func (p *ThriftHiveMetastoreGrantRevokeRoleArgs) GetRequest() *GrantRevokeRoleRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGrantRevokeRoleArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGrantRevokeRoleArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGrantRevokeRoleArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRevokeRoleArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GrantRevokeRoleRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRevokeRoleArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "grant_revoke_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGrantRevokeRoleArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantRevokeRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGrantRevokeRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGrantRevokeRoleResult struct {
  Success *GrantRevokeRoleResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGrantRevokeRoleResult() *ThriftHiveMetastoreGrantRevokeRoleResult {
  return &ThriftHiveMetastoreGrantRevokeRoleResult{}
}

var ThriftHiveMetastoreGrantRevokeRoleResult_Success_DEFAULT *GrantRevokeRoleResponse
func (p *ThriftHiveMetastoreGrantRevokeRoleResult) GetSuccess() *GrantRevokeRoleResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGrantRevokeRoleResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGrantRevokeRoleResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGrantRevokeRoleResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGrantRevokeRoleResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGrantRevokeRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGrantRevokeRoleResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGrantRevokeRoleResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRevokeRoleResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GrantRevokeRoleResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRevokeRoleResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRevokeRoleResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "grant_revoke_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGrantRevokeRoleResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGrantRevokeRoleResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGrantRevokeRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGrantRevokeRoleResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGetPrincipalsInRoleArgs struct {
  Request *GetPrincipalsInRoleRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGetPrincipalsInRoleArgs() *ThriftHiveMetastoreGetPrincipalsInRoleArgs {
  return &ThriftHiveMetastoreGetPrincipalsInRoleArgs{}
}

var ThriftHiveMetastoreGetPrincipalsInRoleArgs_Request_DEFAULT *GetPrincipalsInRoleRequest
func (p *ThriftHiveMetastoreGetPrincipalsInRoleArgs) GetRequest() *GetPrincipalsInRoleRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGetPrincipalsInRoleArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGetPrincipalsInRoleArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGetPrincipalsInRoleArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrincipalsInRoleArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GetPrincipalsInRoleRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrincipalsInRoleArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_principals_in_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPrincipalsInRoleArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPrincipalsInRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPrincipalsInRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetPrincipalsInRoleResult struct {
  Success *GetPrincipalsInRoleResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetPrincipalsInRoleResult() *ThriftHiveMetastoreGetPrincipalsInRoleResult {
  return &ThriftHiveMetastoreGetPrincipalsInRoleResult{}
}

var ThriftHiveMetastoreGetPrincipalsInRoleResult_Success_DEFAULT *GetPrincipalsInRoleResponse
func (p *ThriftHiveMetastoreGetPrincipalsInRoleResult) GetSuccess() *GetPrincipalsInRoleResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPrincipalsInRoleResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPrincipalsInRoleResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPrincipalsInRoleResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPrincipalsInRoleResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetPrincipalsInRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPrincipalsInRoleResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPrincipalsInRoleResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrincipalsInRoleResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetPrincipalsInRoleResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrincipalsInRoleResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrincipalsInRoleResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_principals_in_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPrincipalsInRoleResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPrincipalsInRoleResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPrincipalsInRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPrincipalsInRoleResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs struct {
  Request *GetRoleGrantsForPrincipalRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGetRoleGrantsForPrincipalArgs() *ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs {
  return &ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs{}
}

var ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs_Request_DEFAULT *GetRoleGrantsForPrincipalRequest
func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs) GetRequest() *GetRoleGrantsForPrincipalRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GetRoleGrantsForPrincipalRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_role_grants_for_principal_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetRoleGrantsForPrincipalArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetRoleGrantsForPrincipalResult struct {
  Success *GetRoleGrantsForPrincipalResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetRoleGrantsForPrincipalResult() *ThriftHiveMetastoreGetRoleGrantsForPrincipalResult {
  return &ThriftHiveMetastoreGetRoleGrantsForPrincipalResult{}
}

var ThriftHiveMetastoreGetRoleGrantsForPrincipalResult_Success_DEFAULT *GetRoleGrantsForPrincipalResponse
func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalResult) GetSuccess() *GetRoleGrantsForPrincipalResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetRoleGrantsForPrincipalResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetRoleGrantsForPrincipalResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetRoleGrantsForPrincipalResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetRoleGrantsForPrincipalResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_role_grants_for_principal_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetRoleGrantsForPrincipalResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetRoleGrantsForPrincipalResult(%+v)", *p)
}

// Attributes:
//  - HiveObject
//  - UserName
//  - GroupNames
type ThriftHiveMetastoreGetPrivilegeSetArgs struct {
  HiveObject *HiveObjectRef `thrift:"hiveObject,1" db:"hiveObject" json:"hiveObject"`
  UserName string `thrift:"user_name,2" db:"user_name" json:"user_name"`
  GroupNames []string `thrift:"group_names,3" db:"group_names" json:"group_names"`
}

func NewThriftHiveMetastoreGetPrivilegeSetArgs() *ThriftHiveMetastoreGetPrivilegeSetArgs {
  return &ThriftHiveMetastoreGetPrivilegeSetArgs{}
}

var ThriftHiveMetastoreGetPrivilegeSetArgs_HiveObject_DEFAULT *HiveObjectRef
func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) GetHiveObject() *HiveObjectRef {
  if !p.IsSetHiveObject() {
    return ThriftHiveMetastoreGetPrivilegeSetArgs_HiveObject_DEFAULT
  }
return p.HiveObject
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) GetUserName() string {
  return p.UserName
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) GetGroupNames() []string {
  return p.GroupNames
}
func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) IsSetHiveObject() bool {
  return p.HiveObject != nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.HiveObject = &HiveObjectRef{}
  if err := p.HiveObject.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HiveObject), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GroupNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem618 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem618 = v
}
    p.GroupNames = append(p.GroupNames, _elem618)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_privilege_set_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hiveObject", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hiveObject: ", p), err) }
  if err := p.HiveObject.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HiveObject), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hiveObject: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "group_names", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:group_names: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.GroupNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GroupNames {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:group_names: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPrivilegeSetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetPrivilegeSetResult struct {
  Success *PrincipalPrivilegeSet `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetPrivilegeSetResult() *ThriftHiveMetastoreGetPrivilegeSetResult {
  return &ThriftHiveMetastoreGetPrivilegeSetResult{}
}

var ThriftHiveMetastoreGetPrivilegeSetResult_Success_DEFAULT *PrincipalPrivilegeSet
func (p *ThriftHiveMetastoreGetPrivilegeSetResult) GetSuccess() *PrincipalPrivilegeSet {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPrivilegeSetResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPrivilegeSetResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPrivilegeSetResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPrivilegeSetResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetPrivilegeSetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PrincipalPrivilegeSet{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_privilege_set_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPrivilegeSetResult(%+v)", *p)
}

// Attributes:
//  - PrincipalName
//  - PrincipalType
//  - HiveObject
type ThriftHiveMetastoreListPrivilegesArgs struct {
  PrincipalName string `thrift:"principal_name,1" db:"principal_name" json:"principal_name"`
  PrincipalType PrincipalType `thrift:"principal_type,2" db:"principal_type" json:"principal_type"`
  HiveObject *HiveObjectRef `thrift:"hiveObject,3" db:"hiveObject" json:"hiveObject"`
}

func NewThriftHiveMetastoreListPrivilegesArgs() *ThriftHiveMetastoreListPrivilegesArgs {
  return &ThriftHiveMetastoreListPrivilegesArgs{}
}


func (p *ThriftHiveMetastoreListPrivilegesArgs) GetPrincipalName() string {
  return p.PrincipalName
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) GetPrincipalType() PrincipalType {
  return p.PrincipalType
}
var ThriftHiveMetastoreListPrivilegesArgs_HiveObject_DEFAULT *HiveObjectRef
func (p *ThriftHiveMetastoreListPrivilegesArgs) GetHiveObject() *HiveObjectRef {
  if !p.IsSetHiveObject() {
    return ThriftHiveMetastoreListPrivilegesArgs_HiveObject_DEFAULT
  }
return p.HiveObject
}
func (p *ThriftHiveMetastoreListPrivilegesArgs) IsSetHiveObject() bool {
  return p.HiveObject != nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PrincipalName = v
}
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PrincipalType(v)
  p.PrincipalType = temp
}
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.HiveObject = &HiveObjectRef{}
  if err := p.HiveObject.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HiveObject), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "list_privileges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principal_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:principal_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:principal_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "principal_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principal_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrincipalType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principal_type: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hiveObject", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hiveObject: ", p), err) }
  if err := p.HiveObject.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HiveObject), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hiveObject: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreListPrivilegesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreListPrivilegesResult struct {
  Success []*HiveObjectPrivilege `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreListPrivilegesResult() *ThriftHiveMetastoreListPrivilegesResult {
  return &ThriftHiveMetastoreListPrivilegesResult{}
}

var ThriftHiveMetastoreListPrivilegesResult_Success_DEFAULT []*HiveObjectPrivilege

func (p *ThriftHiveMetastoreListPrivilegesResult) GetSuccess() []*HiveObjectPrivilege {
  return p.Success
}
var ThriftHiveMetastoreListPrivilegesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreListPrivilegesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreListPrivilegesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreListPrivilegesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HiveObjectPrivilege, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem619 := &HiveObjectPrivilege{}
    if err := _elem619.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem619), err)
    }
    p.Success = append(p.Success, _elem619)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "list_privileges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreListPrivilegesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreListPrivilegesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreListPrivilegesResult(%+v)", *p)
}

// Attributes:
//  - Privileges
type ThriftHiveMetastoreGrantPrivilegesArgs struct {
  Privileges *PrivilegeBag `thrift:"privileges,1" db:"privileges" json:"privileges"`
}

func NewThriftHiveMetastoreGrantPrivilegesArgs() *ThriftHiveMetastoreGrantPrivilegesArgs {
  return &ThriftHiveMetastoreGrantPrivilegesArgs{}
}

var ThriftHiveMetastoreGrantPrivilegesArgs_Privileges_DEFAULT *PrivilegeBag
func (p *ThriftHiveMetastoreGrantPrivilegesArgs) GetPrivileges() *PrivilegeBag {
  if !p.IsSetPrivileges() {
    return ThriftHiveMetastoreGrantPrivilegesArgs_Privileges_DEFAULT
  }
return p.Privileges
}
func (p *ThriftHiveMetastoreGrantPrivilegesArgs) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Privileges = &PrivilegeBag{}
  if err := p.Privileges.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privileges), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "grant_privileges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privileges", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privileges: ", p), err) }
  if err := p.Privileges.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privileges), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privileges: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGrantPrivilegesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGrantPrivilegesResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGrantPrivilegesResult() *ThriftHiveMetastoreGrantPrivilegesResult {
  return &ThriftHiveMetastoreGrantPrivilegesResult{}
}

var ThriftHiveMetastoreGrantPrivilegesResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreGrantPrivilegesResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGrantPrivilegesResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreGrantPrivilegesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGrantPrivilegesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGrantPrivilegesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGrantPrivilegesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "grant_privileges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGrantPrivilegesResult(%+v)", *p)
}

// Attributes:
//  - Privileges
type ThriftHiveMetastoreRevokePrivilegesArgs struct {
  Privileges *PrivilegeBag `thrift:"privileges,1" db:"privileges" json:"privileges"`
}

func NewThriftHiveMetastoreRevokePrivilegesArgs() *ThriftHiveMetastoreRevokePrivilegesArgs {
  return &ThriftHiveMetastoreRevokePrivilegesArgs{}
}

var ThriftHiveMetastoreRevokePrivilegesArgs_Privileges_DEFAULT *PrivilegeBag
func (p *ThriftHiveMetastoreRevokePrivilegesArgs) GetPrivileges() *PrivilegeBag {
  if !p.IsSetPrivileges() {
    return ThriftHiveMetastoreRevokePrivilegesArgs_Privileges_DEFAULT
  }
return p.Privileges
}
func (p *ThriftHiveMetastoreRevokePrivilegesArgs) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Privileges = &PrivilegeBag{}
  if err := p.Privileges.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privileges), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "revoke_privileges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privileges", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privileges: ", p), err) }
  if err := p.Privileges.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privileges), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privileges: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRevokePrivilegesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreRevokePrivilegesResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreRevokePrivilegesResult() *ThriftHiveMetastoreRevokePrivilegesResult {
  return &ThriftHiveMetastoreRevokePrivilegesResult{}
}

var ThriftHiveMetastoreRevokePrivilegesResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreRevokePrivilegesResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreRevokePrivilegesResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreRevokePrivilegesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreRevokePrivilegesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreRevokePrivilegesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreRevokePrivilegesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "revoke_privileges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRevokePrivilegesResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGrantRevokePrivilegesArgs struct {
  Request *GrantRevokePrivilegeRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGrantRevokePrivilegesArgs() *ThriftHiveMetastoreGrantRevokePrivilegesArgs {
  return &ThriftHiveMetastoreGrantRevokePrivilegesArgs{}
}

var ThriftHiveMetastoreGrantRevokePrivilegesArgs_Request_DEFAULT *GrantRevokePrivilegeRequest
func (p *ThriftHiveMetastoreGrantRevokePrivilegesArgs) GetRequest() *GrantRevokePrivilegeRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGrantRevokePrivilegesArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGrantRevokePrivilegesArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGrantRevokePrivilegesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRevokePrivilegesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GrantRevokePrivilegeRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRevokePrivilegesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "grant_revoke_privileges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGrantRevokePrivilegesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantRevokePrivilegesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGrantRevokePrivilegesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGrantRevokePrivilegesResult struct {
  Success *GrantRevokePrivilegeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGrantRevokePrivilegesResult() *ThriftHiveMetastoreGrantRevokePrivilegesResult {
  return &ThriftHiveMetastoreGrantRevokePrivilegesResult{}
}

var ThriftHiveMetastoreGrantRevokePrivilegesResult_Success_DEFAULT *GrantRevokePrivilegeResponse
func (p *ThriftHiveMetastoreGrantRevokePrivilegesResult) GetSuccess() *GrantRevokePrivilegeResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGrantRevokePrivilegesResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGrantRevokePrivilegesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGrantRevokePrivilegesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGrantRevokePrivilegesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGrantRevokePrivilegesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGrantRevokePrivilegesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGrantRevokePrivilegesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRevokePrivilegesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GrantRevokePrivilegeResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRevokePrivilegesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRevokePrivilegesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "grant_revoke_privileges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGrantRevokePrivilegesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGrantRevokePrivilegesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGrantRevokePrivilegesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGrantRevokePrivilegesResult(%+v)", *p)
}

// Attributes:
//  - UserName
//  - GroupNames
type ThriftHiveMetastoreSetUgiArgs struct {
  UserName string `thrift:"user_name,1" db:"user_name" json:"user_name"`
  GroupNames []string `thrift:"group_names,2" db:"group_names" json:"group_names"`
}

func NewThriftHiveMetastoreSetUgiArgs() *ThriftHiveMetastoreSetUgiArgs {
  return &ThriftHiveMetastoreSetUgiArgs{}
}


func (p *ThriftHiveMetastoreSetUgiArgs) GetUserName() string {
  return p.UserName
}

func (p *ThriftHiveMetastoreSetUgiArgs) GetGroupNames() []string {
  return p.GroupNames
}
func (p *ThriftHiveMetastoreSetUgiArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetUgiArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *ThriftHiveMetastoreSetUgiArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GroupNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem620 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem620 = v
}
    p.GroupNames = append(p.GroupNames, _elem620)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetUgiArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "set_ugi_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreSetUgiArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreSetUgiArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "group_names", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group_names: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.GroupNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GroupNames {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group_names: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreSetUgiArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreSetUgiArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreSetUgiResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreSetUgiResult() *ThriftHiveMetastoreSetUgiResult {
  return &ThriftHiveMetastoreSetUgiResult{}
}

var ThriftHiveMetastoreSetUgiResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreSetUgiResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreSetUgiResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreSetUgiResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreSetUgiResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreSetUgiResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreSetUgiResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreSetUgiResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetUgiResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem621 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem621 = v
}
    p.Success = append(p.Success, _elem621)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetUgiResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetUgiResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "set_ugi_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreSetUgiResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreSetUgiResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreSetUgiResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreSetUgiResult(%+v)", *p)
}

// Attributes:
//  - TokenOwner
//  - RenewerKerberosPrincipalName
type ThriftHiveMetastoreGetDelegationTokenArgs struct {
  TokenOwner string `thrift:"token_owner,1" db:"token_owner" json:"token_owner"`
  RenewerKerberosPrincipalName string `thrift:"renewer_kerberos_principal_name,2" db:"renewer_kerberos_principal_name" json:"renewer_kerberos_principal_name"`
}

func NewThriftHiveMetastoreGetDelegationTokenArgs() *ThriftHiveMetastoreGetDelegationTokenArgs {
  return &ThriftHiveMetastoreGetDelegationTokenArgs{}
}


func (p *ThriftHiveMetastoreGetDelegationTokenArgs) GetTokenOwner() string {
  return p.TokenOwner
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) GetRenewerKerberosPrincipalName() string {
  return p.RenewerKerberosPrincipalName
}
func (p *ThriftHiveMetastoreGetDelegationTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TokenOwner = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RenewerKerberosPrincipalName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_delegation_token_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token_owner", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token_owner: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TokenOwner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token_owner (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token_owner: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "renewer_kerberos_principal_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:renewer_kerberos_principal_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RenewerKerberosPrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.renewer_kerberos_principal_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:renewer_kerberos_principal_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetDelegationTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetDelegationTokenResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetDelegationTokenResult() *ThriftHiveMetastoreGetDelegationTokenResult {
  return &ThriftHiveMetastoreGetDelegationTokenResult{}
}

var ThriftHiveMetastoreGetDelegationTokenResult_Success_DEFAULT string
func (p *ThriftHiveMetastoreGetDelegationTokenResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetDelegationTokenResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreGetDelegationTokenResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetDelegationTokenResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetDelegationTokenResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetDelegationTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_delegation_token_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetDelegationTokenResult(%+v)", *p)
}

// Attributes:
//  - TokenStrForm
type ThriftHiveMetastoreRenewDelegationTokenArgs struct {
  TokenStrForm string `thrift:"token_str_form,1" db:"token_str_form" json:"token_str_form"`
}

func NewThriftHiveMetastoreRenewDelegationTokenArgs() *ThriftHiveMetastoreRenewDelegationTokenArgs {
  return &ThriftHiveMetastoreRenewDelegationTokenArgs{}
}


func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) GetTokenStrForm() string {
  return p.TokenStrForm
}
func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TokenStrForm = v
}
  return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "renew_delegation_token_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token_str_form", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token_str_form: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TokenStrForm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token_str_form (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token_str_form: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRenewDelegationTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreRenewDelegationTokenResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreRenewDelegationTokenResult() *ThriftHiveMetastoreRenewDelegationTokenResult {
  return &ThriftHiveMetastoreRenewDelegationTokenResult{}
}

var ThriftHiveMetastoreRenewDelegationTokenResult_Success_DEFAULT int64
func (p *ThriftHiveMetastoreRenewDelegationTokenResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreRenewDelegationTokenResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreRenewDelegationTokenResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreRenewDelegationTokenResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreRenewDelegationTokenResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreRenewDelegationTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "renew_delegation_token_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRenewDelegationTokenResult(%+v)", *p)
}

// Attributes:
//  - TokenStrForm
type ThriftHiveMetastoreCancelDelegationTokenArgs struct {
  TokenStrForm string `thrift:"token_str_form,1" db:"token_str_form" json:"token_str_form"`
}

func NewThriftHiveMetastoreCancelDelegationTokenArgs() *ThriftHiveMetastoreCancelDelegationTokenArgs {
  return &ThriftHiveMetastoreCancelDelegationTokenArgs{}
}


func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) GetTokenStrForm() string {
  return p.TokenStrForm
}
func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TokenStrForm = v
}
  return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cancel_delegation_token_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token_str_form", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token_str_form: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TokenStrForm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token_str_form (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token_str_form: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCancelDelegationTokenArgs(%+v)", *p)
}

// Attributes:
//  - O1
type ThriftHiveMetastoreCancelDelegationTokenResult struct {
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreCancelDelegationTokenResult() *ThriftHiveMetastoreCancelDelegationTokenResult {
  return &ThriftHiveMetastoreCancelDelegationTokenResult{}
}

var ThriftHiveMetastoreCancelDelegationTokenResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCancelDelegationTokenResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCancelDelegationTokenResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreCancelDelegationTokenResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cancel_delegation_token_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCancelDelegationTokenResult(%+v)", *p)
}

// Attributes:
//  - TokenIdentifier
//  - DelegationToken
type ThriftHiveMetastoreAddTokenArgs struct {
  TokenIdentifier string `thrift:"token_identifier,1" db:"token_identifier" json:"token_identifier"`
  DelegationToken string `thrift:"delegation_token,2" db:"delegation_token" json:"delegation_token"`
}

func NewThriftHiveMetastoreAddTokenArgs() *ThriftHiveMetastoreAddTokenArgs {
  return &ThriftHiveMetastoreAddTokenArgs{}
}


func (p *ThriftHiveMetastoreAddTokenArgs) GetTokenIdentifier() string {
  return p.TokenIdentifier
}

func (p *ThriftHiveMetastoreAddTokenArgs) GetDelegationToken() string {
  return p.DelegationToken
}
func (p *ThriftHiveMetastoreAddTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddTokenArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TokenIdentifier = v
}
  return nil
}

func (p *ThriftHiveMetastoreAddTokenArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DelegationToken = v
}
  return nil
}

func (p *ThriftHiveMetastoreAddTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_token_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddTokenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token_identifier", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token_identifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TokenIdentifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token_identifier (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token_identifier: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddTokenArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "delegation_token", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:delegation_token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DelegationToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delegation_token (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:delegation_token: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreAddTokenResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreAddTokenResult() *ThriftHiveMetastoreAddTokenResult {
  return &ThriftHiveMetastoreAddTokenResult{}
}

var ThriftHiveMetastoreAddTokenResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreAddTokenResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAddTokenResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ThriftHiveMetastoreAddTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAddTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddTokenResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreAddTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_token_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddTokenResult(%+v)", *p)
}

// Attributes:
//  - TokenIdentifier
type ThriftHiveMetastoreRemoveTokenArgs struct {
  TokenIdentifier string `thrift:"token_identifier,1" db:"token_identifier" json:"token_identifier"`
}

func NewThriftHiveMetastoreRemoveTokenArgs() *ThriftHiveMetastoreRemoveTokenArgs {
  return &ThriftHiveMetastoreRemoveTokenArgs{}
}


func (p *ThriftHiveMetastoreRemoveTokenArgs) GetTokenIdentifier() string {
  return p.TokenIdentifier
}
func (p *ThriftHiveMetastoreRemoveTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRemoveTokenArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TokenIdentifier = v
}
  return nil
}

func (p *ThriftHiveMetastoreRemoveTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "remove_token_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRemoveTokenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token_identifier", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token_identifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TokenIdentifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token_identifier (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token_identifier: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRemoveTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRemoveTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreRemoveTokenResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreRemoveTokenResult() *ThriftHiveMetastoreRemoveTokenResult {
  return &ThriftHiveMetastoreRemoveTokenResult{}
}

var ThriftHiveMetastoreRemoveTokenResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreRemoveTokenResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreRemoveTokenResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ThriftHiveMetastoreRemoveTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreRemoveTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRemoveTokenResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreRemoveTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "remove_token_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRemoveTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRemoveTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRemoveTokenResult(%+v)", *p)
}

// Attributes:
//  - TokenIdentifier
type ThriftHiveMetastoreGetTokenArgs struct {
  TokenIdentifier string `thrift:"token_identifier,1" db:"token_identifier" json:"token_identifier"`
}

func NewThriftHiveMetastoreGetTokenArgs() *ThriftHiveMetastoreGetTokenArgs {
  return &ThriftHiveMetastoreGetTokenArgs{}
}


func (p *ThriftHiveMetastoreGetTokenArgs) GetTokenIdentifier() string {
  return p.TokenIdentifier
}
func (p *ThriftHiveMetastoreGetTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTokenArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TokenIdentifier = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_token_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTokenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token_identifier", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token_identifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TokenIdentifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token_identifier (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token_identifier: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreGetTokenResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreGetTokenResult() *ThriftHiveMetastoreGetTokenResult {
  return &ThriftHiveMetastoreGetTokenResult{}
}

var ThriftHiveMetastoreGetTokenResult_Success_DEFAULT string
func (p *ThriftHiveMetastoreGetTokenResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetTokenResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ThriftHiveMetastoreGetTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTokenResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_token_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTokenResult(%+v)", *p)
}

type ThriftHiveMetastoreGetAllTokenIdentifiersArgs struct {
}

func NewThriftHiveMetastoreGetAllTokenIdentifiersArgs() *ThriftHiveMetastoreGetAllTokenIdentifiersArgs {
  return &ThriftHiveMetastoreGetAllTokenIdentifiersArgs{}
}

func (p *ThriftHiveMetastoreGetAllTokenIdentifiersArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTokenIdentifiersArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_all_token_identifiers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTokenIdentifiersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAllTokenIdentifiersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreGetAllTokenIdentifiersResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreGetAllTokenIdentifiersResult() *ThriftHiveMetastoreGetAllTokenIdentifiersResult {
  return &ThriftHiveMetastoreGetAllTokenIdentifiersResult{}
}

var ThriftHiveMetastoreGetAllTokenIdentifiersResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetAllTokenIdentifiersResult) GetSuccess() []string {
  return p.Success
}
func (p *ThriftHiveMetastoreGetAllTokenIdentifiersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetAllTokenIdentifiersResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTokenIdentifiersResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem622 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem622 = v
}
    p.Success = append(p.Success, _elem622)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTokenIdentifiersResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_all_token_identifiers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTokenIdentifiersResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAllTokenIdentifiersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAllTokenIdentifiersResult(%+v)", *p)
}

// Attributes:
//  - Key
type ThriftHiveMetastoreAddMasterKeyArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewThriftHiveMetastoreAddMasterKeyArgs() *ThriftHiveMetastoreAddMasterKeyArgs {
  return &ThriftHiveMetastoreAddMasterKeyArgs{}
}


func (p *ThriftHiveMetastoreAddMasterKeyArgs) GetKey() string {
  return p.Key
}
func (p *ThriftHiveMetastoreAddMasterKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddMasterKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ThriftHiveMetastoreAddMasterKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_master_key_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddMasterKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddMasterKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddMasterKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreAddMasterKeyResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreAddMasterKeyResult() *ThriftHiveMetastoreAddMasterKeyResult {
  return &ThriftHiveMetastoreAddMasterKeyResult{}
}

var ThriftHiveMetastoreAddMasterKeyResult_Success_DEFAULT int32
func (p *ThriftHiveMetastoreAddMasterKeyResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAddMasterKeyResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreAddMasterKeyResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddMasterKeyResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddMasterKeyResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreAddMasterKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAddMasterKeyResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddMasterKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddMasterKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreAddMasterKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddMasterKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_master_key_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddMasterKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddMasterKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddMasterKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddMasterKeyResult(%+v)", *p)
}

// Attributes:
//  - SeqNumber
//  - Key
type ThriftHiveMetastoreUpdateMasterKeyArgs struct {
  SeqNumber int32 `thrift:"seq_number,1" db:"seq_number" json:"seq_number"`
  Key string `thrift:"key,2" db:"key" json:"key"`
}

func NewThriftHiveMetastoreUpdateMasterKeyArgs() *ThriftHiveMetastoreUpdateMasterKeyArgs {
  return &ThriftHiveMetastoreUpdateMasterKeyArgs{}
}


func (p *ThriftHiveMetastoreUpdateMasterKeyArgs) GetSeqNumber() int32 {
  return p.SeqNumber
}

func (p *ThriftHiveMetastoreUpdateMasterKeyArgs) GetKey() string {
  return p.Key
}
func (p *ThriftHiveMetastoreUpdateMasterKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateMasterKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SeqNumber = v
}
  return nil
}

func (p *ThriftHiveMetastoreUpdateMasterKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ThriftHiveMetastoreUpdateMasterKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_master_key_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreUpdateMasterKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq_number", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq_number: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SeqNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq_number (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq_number: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreUpdateMasterKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreUpdateMasterKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreUpdateMasterKeyArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreUpdateMasterKeyResult struct {
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreUpdateMasterKeyResult() *ThriftHiveMetastoreUpdateMasterKeyResult {
  return &ThriftHiveMetastoreUpdateMasterKeyResult{}
}

var ThriftHiveMetastoreUpdateMasterKeyResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreUpdateMasterKeyResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreUpdateMasterKeyResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreUpdateMasterKeyResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreUpdateMasterKeyResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreUpdateMasterKeyResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreUpdateMasterKeyResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreUpdateMasterKeyResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreUpdateMasterKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateMasterKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateMasterKeyResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateMasterKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "update_master_key_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreUpdateMasterKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdateMasterKeyResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdateMasterKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreUpdateMasterKeyResult(%+v)", *p)
}

// Attributes:
//  - KeySeq
type ThriftHiveMetastoreRemoveMasterKeyArgs struct {
  KeySeq int32 `thrift:"key_seq,1" db:"key_seq" json:"key_seq"`
}

func NewThriftHiveMetastoreRemoveMasterKeyArgs() *ThriftHiveMetastoreRemoveMasterKeyArgs {
  return &ThriftHiveMetastoreRemoveMasterKeyArgs{}
}


func (p *ThriftHiveMetastoreRemoveMasterKeyArgs) GetKeySeq() int32 {
  return p.KeySeq
}
func (p *ThriftHiveMetastoreRemoveMasterKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRemoveMasterKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.KeySeq = v
}
  return nil
}

func (p *ThriftHiveMetastoreRemoveMasterKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "remove_master_key_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRemoveMasterKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key_seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key_seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeySeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key_seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key_seq: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRemoveMasterKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRemoveMasterKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreRemoveMasterKeyResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreRemoveMasterKeyResult() *ThriftHiveMetastoreRemoveMasterKeyResult {
  return &ThriftHiveMetastoreRemoveMasterKeyResult{}
}

var ThriftHiveMetastoreRemoveMasterKeyResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreRemoveMasterKeyResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreRemoveMasterKeyResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ThriftHiveMetastoreRemoveMasterKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreRemoveMasterKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRemoveMasterKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreRemoveMasterKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "remove_master_key_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRemoveMasterKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRemoveMasterKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRemoveMasterKeyResult(%+v)", *p)
}

type ThriftHiveMetastoreGetMasterKeysArgs struct {
}

func NewThriftHiveMetastoreGetMasterKeysArgs() *ThriftHiveMetastoreGetMasterKeysArgs {
  return &ThriftHiveMetastoreGetMasterKeysArgs{}
}

func (p *ThriftHiveMetastoreGetMasterKeysArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetMasterKeysArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_master_keys_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetMasterKeysArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetMasterKeysArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreGetMasterKeysResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreGetMasterKeysResult() *ThriftHiveMetastoreGetMasterKeysResult {
  return &ThriftHiveMetastoreGetMasterKeysResult{}
}

var ThriftHiveMetastoreGetMasterKeysResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetMasterKeysResult) GetSuccess() []string {
  return p.Success
}
func (p *ThriftHiveMetastoreGetMasterKeysResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetMasterKeysResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetMasterKeysResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem623 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem623 = v
}
    p.Success = append(p.Success, _elem623)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetMasterKeysResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_master_keys_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetMasterKeysResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetMasterKeysResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetMasterKeysResult(%+v)", *p)
}

type ThriftHiveMetastoreGetOpenTxnsArgs struct {
}

func NewThriftHiveMetastoreGetOpenTxnsArgs() *ThriftHiveMetastoreGetOpenTxnsArgs {
  return &ThriftHiveMetastoreGetOpenTxnsArgs{}
}

func (p *ThriftHiveMetastoreGetOpenTxnsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetOpenTxnsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_open_txns_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetOpenTxnsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetOpenTxnsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreGetOpenTxnsResult struct {
  Success *GetOpenTxnsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreGetOpenTxnsResult() *ThriftHiveMetastoreGetOpenTxnsResult {
  return &ThriftHiveMetastoreGetOpenTxnsResult{}
}

var ThriftHiveMetastoreGetOpenTxnsResult_Success_DEFAULT *GetOpenTxnsResponse
func (p *ThriftHiveMetastoreGetOpenTxnsResult) GetSuccess() *GetOpenTxnsResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetOpenTxnsResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreGetOpenTxnsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetOpenTxnsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetOpenTxnsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetOpenTxnsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetOpenTxnsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_open_txns_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetOpenTxnsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetOpenTxnsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetOpenTxnsResult(%+v)", *p)
}

type ThriftHiveMetastoreGetOpenTxnsInfoArgs struct {
}

func NewThriftHiveMetastoreGetOpenTxnsInfoArgs() *ThriftHiveMetastoreGetOpenTxnsInfoArgs {
  return &ThriftHiveMetastoreGetOpenTxnsInfoArgs{}
}

func (p *ThriftHiveMetastoreGetOpenTxnsInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetOpenTxnsInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_open_txns_info_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetOpenTxnsInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetOpenTxnsInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreGetOpenTxnsInfoResult struct {
  Success *GetOpenTxnsInfoResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreGetOpenTxnsInfoResult() *ThriftHiveMetastoreGetOpenTxnsInfoResult {
  return &ThriftHiveMetastoreGetOpenTxnsInfoResult{}
}

var ThriftHiveMetastoreGetOpenTxnsInfoResult_Success_DEFAULT *GetOpenTxnsInfoResponse
func (p *ThriftHiveMetastoreGetOpenTxnsInfoResult) GetSuccess() *GetOpenTxnsInfoResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetOpenTxnsInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreGetOpenTxnsInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetOpenTxnsInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetOpenTxnsInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetOpenTxnsInfoResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetOpenTxnsInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_open_txns_info_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetOpenTxnsInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetOpenTxnsInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetOpenTxnsInfoResult(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreOpenTxnsArgs struct {
  Rqst *OpenTxnRequest `thrift:"rqst,1" db:"rqst" json:"rqst"`
}

func NewThriftHiveMetastoreOpenTxnsArgs() *ThriftHiveMetastoreOpenTxnsArgs {
  return &ThriftHiveMetastoreOpenTxnsArgs{}
}

var ThriftHiveMetastoreOpenTxnsArgs_Rqst_DEFAULT *OpenTxnRequest
func (p *ThriftHiveMetastoreOpenTxnsArgs) GetRqst() *OpenTxnRequest {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreOpenTxnsArgs_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreOpenTxnsArgs) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreOpenTxnsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreOpenTxnsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &OpenTxnRequest{
  AgentInfo: "Unknown",
}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreOpenTxnsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "open_txns_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreOpenTxnsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreOpenTxnsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreOpenTxnsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreOpenTxnsResult struct {
  Success *OpenTxnsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreOpenTxnsResult() *ThriftHiveMetastoreOpenTxnsResult {
  return &ThriftHiveMetastoreOpenTxnsResult{}
}

var ThriftHiveMetastoreOpenTxnsResult_Success_DEFAULT *OpenTxnsResponse
func (p *ThriftHiveMetastoreOpenTxnsResult) GetSuccess() *OpenTxnsResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreOpenTxnsResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreOpenTxnsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreOpenTxnsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreOpenTxnsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &OpenTxnsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreOpenTxnsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "open_txns_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreOpenTxnsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreOpenTxnsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreOpenTxnsResult(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreAbortTxnArgs struct {
  Rqst *AbortTxnRequest `thrift:"rqst,1" db:"rqst" json:"rqst"`
}

func NewThriftHiveMetastoreAbortTxnArgs() *ThriftHiveMetastoreAbortTxnArgs {
  return &ThriftHiveMetastoreAbortTxnArgs{}
}

var ThriftHiveMetastoreAbortTxnArgs_Rqst_DEFAULT *AbortTxnRequest
func (p *ThriftHiveMetastoreAbortTxnArgs) GetRqst() *AbortTxnRequest {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreAbortTxnArgs_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreAbortTxnArgs) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreAbortTxnArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAbortTxnArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &AbortTxnRequest{}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAbortTxnArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "abort_txn_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAbortTxnArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAbortTxnArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAbortTxnArgs(%+v)", *p)
}

// Attributes:
//  - O1
type ThriftHiveMetastoreAbortTxnResult struct {
  O1 *NoSuchTxnException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreAbortTxnResult() *ThriftHiveMetastoreAbortTxnResult {
  return &ThriftHiveMetastoreAbortTxnResult{}
}

var ThriftHiveMetastoreAbortTxnResult_O1_DEFAULT *NoSuchTxnException
func (p *ThriftHiveMetastoreAbortTxnResult) GetO1() *NoSuchTxnException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAbortTxnResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreAbortTxnResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAbortTxnResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAbortTxnResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchTxnException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAbortTxnResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "abort_txn_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAbortTxnResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAbortTxnResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAbortTxnResult(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreAbortTxnsArgs struct {
  Rqst *AbortTxnsRequest `thrift:"rqst,1" db:"rqst" json:"rqst"`
}

func NewThriftHiveMetastoreAbortTxnsArgs() *ThriftHiveMetastoreAbortTxnsArgs {
  return &ThriftHiveMetastoreAbortTxnsArgs{}
}

var ThriftHiveMetastoreAbortTxnsArgs_Rqst_DEFAULT *AbortTxnsRequest
func (p *ThriftHiveMetastoreAbortTxnsArgs) GetRqst() *AbortTxnsRequest {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreAbortTxnsArgs_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreAbortTxnsArgs) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreAbortTxnsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAbortTxnsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &AbortTxnsRequest{}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAbortTxnsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "abort_txns_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAbortTxnsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAbortTxnsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAbortTxnsArgs(%+v)", *p)
}

// Attributes:
//  - O1
type ThriftHiveMetastoreAbortTxnsResult struct {
  O1 *NoSuchTxnException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreAbortTxnsResult() *ThriftHiveMetastoreAbortTxnsResult {
  return &ThriftHiveMetastoreAbortTxnsResult{}
}

var ThriftHiveMetastoreAbortTxnsResult_O1_DEFAULT *NoSuchTxnException
func (p *ThriftHiveMetastoreAbortTxnsResult) GetO1() *NoSuchTxnException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAbortTxnsResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreAbortTxnsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAbortTxnsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAbortTxnsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchTxnException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAbortTxnsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "abort_txns_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAbortTxnsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAbortTxnsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAbortTxnsResult(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreCommitTxnArgs struct {
  Rqst *CommitTxnRequest `thrift:"rqst,1" db:"rqst" json:"rqst"`
}

func NewThriftHiveMetastoreCommitTxnArgs() *ThriftHiveMetastoreCommitTxnArgs {
  return &ThriftHiveMetastoreCommitTxnArgs{}
}

var ThriftHiveMetastoreCommitTxnArgs_Rqst_DEFAULT *CommitTxnRequest
func (p *ThriftHiveMetastoreCommitTxnArgs) GetRqst() *CommitTxnRequest {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreCommitTxnArgs_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreCommitTxnArgs) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreCommitTxnArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCommitTxnArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &CommitTxnRequest{}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCommitTxnArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "commit_txn_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCommitTxnArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCommitTxnArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCommitTxnArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreCommitTxnResult struct {
  O1 *NoSuchTxnException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *TxnAbortedException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreCommitTxnResult() *ThriftHiveMetastoreCommitTxnResult {
  return &ThriftHiveMetastoreCommitTxnResult{}
}

var ThriftHiveMetastoreCommitTxnResult_O1_DEFAULT *NoSuchTxnException
func (p *ThriftHiveMetastoreCommitTxnResult) GetO1() *NoSuchTxnException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCommitTxnResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreCommitTxnResult_O2_DEFAULT *TxnAbortedException
func (p *ThriftHiveMetastoreCommitTxnResult) GetO2() *TxnAbortedException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreCommitTxnResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreCommitTxnResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCommitTxnResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreCommitTxnResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCommitTxnResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchTxnException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCommitTxnResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &TxnAbortedException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCommitTxnResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "commit_txn_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCommitTxnResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCommitTxnResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCommitTxnResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCommitTxnResult(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreLockArgs struct {
  Rqst *LockRequest `thrift:"rqst,1" db:"rqst" json:"rqst"`
}

func NewThriftHiveMetastoreLockArgs() *ThriftHiveMetastoreLockArgs {
  return &ThriftHiveMetastoreLockArgs{}
}

var ThriftHiveMetastoreLockArgs_Rqst_DEFAULT *LockRequest
func (p *ThriftHiveMetastoreLockArgs) GetRqst() *LockRequest {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreLockArgs_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreLockArgs) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreLockArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreLockArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &LockRequest{
  AgentInfo: "Unknown",
}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreLockArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "lock_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreLockArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreLockArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreLockArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreLockResult struct {
  Success *LockResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchTxnException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *TxnAbortedException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreLockResult() *ThriftHiveMetastoreLockResult {
  return &ThriftHiveMetastoreLockResult{}
}

var ThriftHiveMetastoreLockResult_Success_DEFAULT *LockResponse
func (p *ThriftHiveMetastoreLockResult) GetSuccess() *LockResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreLockResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreLockResult_O1_DEFAULT *NoSuchTxnException
func (p *ThriftHiveMetastoreLockResult) GetO1() *NoSuchTxnException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreLockResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreLockResult_O2_DEFAULT *TxnAbortedException
func (p *ThriftHiveMetastoreLockResult) GetO2() *TxnAbortedException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreLockResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreLockResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreLockResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreLockResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreLockResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreLockResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &LockResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreLockResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchTxnException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreLockResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &TxnAbortedException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreLockResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "lock_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreLockResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreLockResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreLockResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreLockResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreLockResult(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreCheckLockArgs struct {
  Rqst *CheckLockRequest `thrift:"rqst,1" db:"rqst" json:"rqst"`
}

func NewThriftHiveMetastoreCheckLockArgs() *ThriftHiveMetastoreCheckLockArgs {
  return &ThriftHiveMetastoreCheckLockArgs{}
}

var ThriftHiveMetastoreCheckLockArgs_Rqst_DEFAULT *CheckLockRequest
func (p *ThriftHiveMetastoreCheckLockArgs) GetRqst() *CheckLockRequest {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreCheckLockArgs_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreCheckLockArgs) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreCheckLockArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCheckLockArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &CheckLockRequest{}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCheckLockArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "check_lock_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCheckLockArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCheckLockArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCheckLockArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreCheckLockResult struct {
  Success *LockResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchTxnException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *TxnAbortedException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *NoSuchLockException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreCheckLockResult() *ThriftHiveMetastoreCheckLockResult {
  return &ThriftHiveMetastoreCheckLockResult{}
}

var ThriftHiveMetastoreCheckLockResult_Success_DEFAULT *LockResponse
func (p *ThriftHiveMetastoreCheckLockResult) GetSuccess() *LockResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreCheckLockResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreCheckLockResult_O1_DEFAULT *NoSuchTxnException
func (p *ThriftHiveMetastoreCheckLockResult) GetO1() *NoSuchTxnException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCheckLockResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreCheckLockResult_O2_DEFAULT *TxnAbortedException
func (p *ThriftHiveMetastoreCheckLockResult) GetO2() *TxnAbortedException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreCheckLockResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreCheckLockResult_O3_DEFAULT *NoSuchLockException
func (p *ThriftHiveMetastoreCheckLockResult) GetO3() *NoSuchLockException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreCheckLockResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreCheckLockResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreCheckLockResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCheckLockResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreCheckLockResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreCheckLockResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCheckLockResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &LockResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCheckLockResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchTxnException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCheckLockResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &TxnAbortedException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCheckLockResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &NoSuchLockException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCheckLockResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "check_lock_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCheckLockResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCheckLockResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCheckLockResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCheckLockResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCheckLockResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCheckLockResult(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreUnlockArgs struct {
  Rqst *UnlockRequest `thrift:"rqst,1" db:"rqst" json:"rqst"`
}

func NewThriftHiveMetastoreUnlockArgs() *ThriftHiveMetastoreUnlockArgs {
  return &ThriftHiveMetastoreUnlockArgs{}
}

var ThriftHiveMetastoreUnlockArgs_Rqst_DEFAULT *UnlockRequest
func (p *ThriftHiveMetastoreUnlockArgs) GetRqst() *UnlockRequest {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreUnlockArgs_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreUnlockArgs) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreUnlockArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUnlockArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &UnlockRequest{}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUnlockArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unlock_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreUnlockArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreUnlockArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreUnlockArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreUnlockResult struct {
  O1 *NoSuchLockException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *TxnOpenException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreUnlockResult() *ThriftHiveMetastoreUnlockResult {
  return &ThriftHiveMetastoreUnlockResult{}
}

var ThriftHiveMetastoreUnlockResult_O1_DEFAULT *NoSuchLockException
func (p *ThriftHiveMetastoreUnlockResult) GetO1() *NoSuchLockException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreUnlockResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreUnlockResult_O2_DEFAULT *TxnOpenException
func (p *ThriftHiveMetastoreUnlockResult) GetO2() *TxnOpenException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreUnlockResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreUnlockResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreUnlockResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreUnlockResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUnlockResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchLockException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUnlockResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &TxnOpenException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUnlockResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unlock_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreUnlockResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUnlockResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUnlockResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreUnlockResult(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreShowLocksArgs struct {
  Rqst *ShowLocksRequest `thrift:"rqst,1" db:"rqst" json:"rqst"`
}

func NewThriftHiveMetastoreShowLocksArgs() *ThriftHiveMetastoreShowLocksArgs {
  return &ThriftHiveMetastoreShowLocksArgs{}
}

var ThriftHiveMetastoreShowLocksArgs_Rqst_DEFAULT *ShowLocksRequest
func (p *ThriftHiveMetastoreShowLocksArgs) GetRqst() *ShowLocksRequest {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreShowLocksArgs_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreShowLocksArgs) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreShowLocksArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreShowLocksArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &ShowLocksRequest{}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreShowLocksArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "show_locks_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreShowLocksArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreShowLocksArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreShowLocksArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreShowLocksResult struct {
  Success *ShowLocksResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreShowLocksResult() *ThriftHiveMetastoreShowLocksResult {
  return &ThriftHiveMetastoreShowLocksResult{}
}

var ThriftHiveMetastoreShowLocksResult_Success_DEFAULT *ShowLocksResponse
func (p *ThriftHiveMetastoreShowLocksResult) GetSuccess() *ShowLocksResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreShowLocksResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreShowLocksResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreShowLocksResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreShowLocksResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ShowLocksResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreShowLocksResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "show_locks_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreShowLocksResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreShowLocksResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreShowLocksResult(%+v)", *p)
}

// Attributes:
//  - Ids
type ThriftHiveMetastoreHeartbeatArgs struct {
  Ids *HeartbeatRequest `thrift:"ids,1" db:"ids" json:"ids"`
}

func NewThriftHiveMetastoreHeartbeatArgs() *ThriftHiveMetastoreHeartbeatArgs {
  return &ThriftHiveMetastoreHeartbeatArgs{}
}

var ThriftHiveMetastoreHeartbeatArgs_Ids_DEFAULT *HeartbeatRequest
func (p *ThriftHiveMetastoreHeartbeatArgs) GetIds() *HeartbeatRequest {
  if !p.IsSetIds() {
    return ThriftHiveMetastoreHeartbeatArgs_Ids_DEFAULT
  }
return p.Ids
}
func (p *ThriftHiveMetastoreHeartbeatArgs) IsSetIds() bool {
  return p.Ids != nil
}

func (p *ThriftHiveMetastoreHeartbeatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreHeartbeatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ids = &HeartbeatRequest{}
  if err := p.Ids.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ids), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreHeartbeatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "heartbeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreHeartbeatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ids", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ids: ", p), err) }
  if err := p.Ids.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ids), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ids: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreHeartbeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreHeartbeatArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreHeartbeatResult struct {
  O1 *NoSuchLockException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchTxnException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *TxnAbortedException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreHeartbeatResult() *ThriftHiveMetastoreHeartbeatResult {
  return &ThriftHiveMetastoreHeartbeatResult{}
}

var ThriftHiveMetastoreHeartbeatResult_O1_DEFAULT *NoSuchLockException
func (p *ThriftHiveMetastoreHeartbeatResult) GetO1() *NoSuchLockException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreHeartbeatResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreHeartbeatResult_O2_DEFAULT *NoSuchTxnException
func (p *ThriftHiveMetastoreHeartbeatResult) GetO2() *NoSuchTxnException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreHeartbeatResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreHeartbeatResult_O3_DEFAULT *TxnAbortedException
func (p *ThriftHiveMetastoreHeartbeatResult) GetO3() *TxnAbortedException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreHeartbeatResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreHeartbeatResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreHeartbeatResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreHeartbeatResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreHeartbeatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreHeartbeatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchLockException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreHeartbeatResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchTxnException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreHeartbeatResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &TxnAbortedException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreHeartbeatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "heartbeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreHeartbeatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreHeartbeatResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreHeartbeatResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreHeartbeatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreHeartbeatResult(%+v)", *p)
}

// Attributes:
//  - Txns
type ThriftHiveMetastoreHeartbeatTxnRangeArgs struct {
  Txns *HeartbeatTxnRangeRequest `thrift:"txns,1" db:"txns" json:"txns"`
}

func NewThriftHiveMetastoreHeartbeatTxnRangeArgs() *ThriftHiveMetastoreHeartbeatTxnRangeArgs {
  return &ThriftHiveMetastoreHeartbeatTxnRangeArgs{}
}

var ThriftHiveMetastoreHeartbeatTxnRangeArgs_Txns_DEFAULT *HeartbeatTxnRangeRequest
func (p *ThriftHiveMetastoreHeartbeatTxnRangeArgs) GetTxns() *HeartbeatTxnRangeRequest {
  if !p.IsSetTxns() {
    return ThriftHiveMetastoreHeartbeatTxnRangeArgs_Txns_DEFAULT
  }
return p.Txns
}
func (p *ThriftHiveMetastoreHeartbeatTxnRangeArgs) IsSetTxns() bool {
  return p.Txns != nil
}

func (p *ThriftHiveMetastoreHeartbeatTxnRangeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreHeartbeatTxnRangeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Txns = &HeartbeatTxnRangeRequest{}
  if err := p.Txns.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Txns), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreHeartbeatTxnRangeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "heartbeat_txn_range_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreHeartbeatTxnRangeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "txns", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:txns: ", p), err) }
  if err := p.Txns.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Txns), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:txns: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreHeartbeatTxnRangeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreHeartbeatTxnRangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreHeartbeatTxnRangeResult struct {
  Success *HeartbeatTxnRangeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreHeartbeatTxnRangeResult() *ThriftHiveMetastoreHeartbeatTxnRangeResult {
  return &ThriftHiveMetastoreHeartbeatTxnRangeResult{}
}

var ThriftHiveMetastoreHeartbeatTxnRangeResult_Success_DEFAULT *HeartbeatTxnRangeResponse
func (p *ThriftHiveMetastoreHeartbeatTxnRangeResult) GetSuccess() *HeartbeatTxnRangeResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreHeartbeatTxnRangeResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreHeartbeatTxnRangeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreHeartbeatTxnRangeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreHeartbeatTxnRangeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &HeartbeatTxnRangeResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreHeartbeatTxnRangeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "heartbeat_txn_range_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreHeartbeatTxnRangeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreHeartbeatTxnRangeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreHeartbeatTxnRangeResult(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreCompactArgs struct {
  Rqst *CompactionRequest `thrift:"rqst,1" db:"rqst" json:"rqst"`
}

func NewThriftHiveMetastoreCompactArgs() *ThriftHiveMetastoreCompactArgs {
  return &ThriftHiveMetastoreCompactArgs{}
}

var ThriftHiveMetastoreCompactArgs_Rqst_DEFAULT *CompactionRequest
func (p *ThriftHiveMetastoreCompactArgs) GetRqst() *CompactionRequest {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreCompactArgs_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreCompactArgs) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreCompactArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCompactArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &CompactionRequest{}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCompactArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "compact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCompactArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCompactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCompactArgs(%+v)", *p)
}

type ThriftHiveMetastoreCompactResult struct {
}

func NewThriftHiveMetastoreCompactResult() *ThriftHiveMetastoreCompactResult {
  return &ThriftHiveMetastoreCompactResult{}
}

func (p *ThriftHiveMetastoreCompactResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCompactResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "compact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCompactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCompactResult(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreCompact2Args struct {
  Rqst *CompactionRequest `thrift:"rqst,1" db:"rqst" json:"rqst"`
}

func NewThriftHiveMetastoreCompact2Args() *ThriftHiveMetastoreCompact2Args {
  return &ThriftHiveMetastoreCompact2Args{}
}

var ThriftHiveMetastoreCompact2Args_Rqst_DEFAULT *CompactionRequest
func (p *ThriftHiveMetastoreCompact2Args) GetRqst() *CompactionRequest {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreCompact2Args_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreCompact2Args) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreCompact2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCompact2Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &CompactionRequest{}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCompact2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "compact2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCompact2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCompact2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCompact2Args(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreCompact2Result struct {
  Success *CompactionResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreCompact2Result() *ThriftHiveMetastoreCompact2Result {
  return &ThriftHiveMetastoreCompact2Result{}
}

var ThriftHiveMetastoreCompact2Result_Success_DEFAULT *CompactionResponse
func (p *ThriftHiveMetastoreCompact2Result) GetSuccess() *CompactionResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreCompact2Result_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreCompact2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreCompact2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCompact2Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CompactionResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCompact2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "compact2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCompact2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCompact2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCompact2Result(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreShowCompactArgs struct {
  Rqst *ShowCompactRequest `thrift:"rqst,1" db:"rqst" json:"rqst"`
}

func NewThriftHiveMetastoreShowCompactArgs() *ThriftHiveMetastoreShowCompactArgs {
  return &ThriftHiveMetastoreShowCompactArgs{}
}

var ThriftHiveMetastoreShowCompactArgs_Rqst_DEFAULT *ShowCompactRequest
func (p *ThriftHiveMetastoreShowCompactArgs) GetRqst() *ShowCompactRequest {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreShowCompactArgs_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreShowCompactArgs) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreShowCompactArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreShowCompactArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &ShowCompactRequest{}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreShowCompactArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "show_compact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreShowCompactArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreShowCompactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreShowCompactArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreShowCompactResult struct {
  Success *ShowCompactResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreShowCompactResult() *ThriftHiveMetastoreShowCompactResult {
  return &ThriftHiveMetastoreShowCompactResult{}
}

var ThriftHiveMetastoreShowCompactResult_Success_DEFAULT *ShowCompactResponse
func (p *ThriftHiveMetastoreShowCompactResult) GetSuccess() *ShowCompactResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreShowCompactResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreShowCompactResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreShowCompactResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreShowCompactResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ShowCompactResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreShowCompactResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "show_compact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreShowCompactResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreShowCompactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreShowCompactResult(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreAddDynamicPartitionsArgs struct {
  Rqst *AddDynamicPartitions `thrift:"rqst,1" db:"rqst" json:"rqst"`
}

func NewThriftHiveMetastoreAddDynamicPartitionsArgs() *ThriftHiveMetastoreAddDynamicPartitionsArgs {
  return &ThriftHiveMetastoreAddDynamicPartitionsArgs{}
}

var ThriftHiveMetastoreAddDynamicPartitionsArgs_Rqst_DEFAULT *AddDynamicPartitions
func (p *ThriftHiveMetastoreAddDynamicPartitionsArgs) GetRqst() *AddDynamicPartitions {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreAddDynamicPartitionsArgs_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreAddDynamicPartitionsArgs) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreAddDynamicPartitionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddDynamicPartitionsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &AddDynamicPartitions{
  OperationType:   5,
}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddDynamicPartitionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_dynamic_partitions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddDynamicPartitionsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddDynamicPartitionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddDynamicPartitionsArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAddDynamicPartitionsResult struct {
  O1 *NoSuchTxnException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *TxnAbortedException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAddDynamicPartitionsResult() *ThriftHiveMetastoreAddDynamicPartitionsResult {
  return &ThriftHiveMetastoreAddDynamicPartitionsResult{}
}

var ThriftHiveMetastoreAddDynamicPartitionsResult_O1_DEFAULT *NoSuchTxnException
func (p *ThriftHiveMetastoreAddDynamicPartitionsResult) GetO1() *NoSuchTxnException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddDynamicPartitionsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddDynamicPartitionsResult_O2_DEFAULT *TxnAbortedException
func (p *ThriftHiveMetastoreAddDynamicPartitionsResult) GetO2() *TxnAbortedException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddDynamicPartitionsResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAddDynamicPartitionsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddDynamicPartitionsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddDynamicPartitionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddDynamicPartitionsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchTxnException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddDynamicPartitionsResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &TxnAbortedException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddDynamicPartitionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_dynamic_partitions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddDynamicPartitionsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddDynamicPartitionsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddDynamicPartitionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddDynamicPartitionsResult(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreGetNextNotificationArgs struct {
  Rqst *NotificationEventRequest `thrift:"rqst,1" db:"rqst" json:"rqst"`
}

func NewThriftHiveMetastoreGetNextNotificationArgs() *ThriftHiveMetastoreGetNextNotificationArgs {
  return &ThriftHiveMetastoreGetNextNotificationArgs{}
}

var ThriftHiveMetastoreGetNextNotificationArgs_Rqst_DEFAULT *NotificationEventRequest
func (p *ThriftHiveMetastoreGetNextNotificationArgs) GetRqst() *NotificationEventRequest {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreGetNextNotificationArgs_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreGetNextNotificationArgs) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreGetNextNotificationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNextNotificationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &NotificationEventRequest{}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNextNotificationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_next_notification_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetNextNotificationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetNextNotificationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetNextNotificationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreGetNextNotificationResult struct {
  Success *NotificationEventResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreGetNextNotificationResult() *ThriftHiveMetastoreGetNextNotificationResult {
  return &ThriftHiveMetastoreGetNextNotificationResult{}
}

var ThriftHiveMetastoreGetNextNotificationResult_Success_DEFAULT *NotificationEventResponse
func (p *ThriftHiveMetastoreGetNextNotificationResult) GetSuccess() *NotificationEventResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetNextNotificationResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreGetNextNotificationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetNextNotificationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNextNotificationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &NotificationEventResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNextNotificationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_next_notification_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetNextNotificationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetNextNotificationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetNextNotificationResult(%+v)", *p)
}

type ThriftHiveMetastoreGetCurrentNotificationEventIdArgs struct {
}

func NewThriftHiveMetastoreGetCurrentNotificationEventIdArgs() *ThriftHiveMetastoreGetCurrentNotificationEventIdArgs {
  return &ThriftHiveMetastoreGetCurrentNotificationEventIdArgs{}
}

func (p *ThriftHiveMetastoreGetCurrentNotificationEventIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetCurrentNotificationEventIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_current_notificationEventId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetCurrentNotificationEventIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetCurrentNotificationEventIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreGetCurrentNotificationEventIdResult struct {
  Success *CurrentNotificationEventId `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreGetCurrentNotificationEventIdResult() *ThriftHiveMetastoreGetCurrentNotificationEventIdResult {
  return &ThriftHiveMetastoreGetCurrentNotificationEventIdResult{}
}

var ThriftHiveMetastoreGetCurrentNotificationEventIdResult_Success_DEFAULT *CurrentNotificationEventId
func (p *ThriftHiveMetastoreGetCurrentNotificationEventIdResult) GetSuccess() *CurrentNotificationEventId {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetCurrentNotificationEventIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreGetCurrentNotificationEventIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetCurrentNotificationEventIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetCurrentNotificationEventIdResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CurrentNotificationEventId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetCurrentNotificationEventIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_current_notificationEventId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetCurrentNotificationEventIdResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetCurrentNotificationEventIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetCurrentNotificationEventIdResult(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreGetNotificationEventsCountArgs struct {
  Rqst *NotificationEventsCountRequest
}

func NewThriftHiveMetastoreGetNotificationEventsCountArgs() *ThriftHiveMetastoreGetNotificationEventsCountArgs {
  return &ThriftHiveMetastoreGetNotificationEventsCountArgs{}
}

var ThriftHiveMetastoreGetNotificationEventsCountArgs_Rqst_DEFAULT *NotificationEventsCountRequest
func (p *ThriftHiveMetastoreGetNotificationEventsCountArgs) GetRqst() *NotificationEventsCountRequest {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreGetNotificationEventsCountArgs_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreGetNotificationEventsCountArgs) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreGetNotificationEventsCountArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField_1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNotificationEventsCountArgs)  ReadField_1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &NotificationEventsCountRequest{}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNotificationEventsCountArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_notification_events_count_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetNotificationEventsCountArgs) writeField_1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetNotificationEventsCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetNotificationEventsCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreGetNotificationEventsCountResult struct {
  Success *NotificationEventsCountResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreGetNotificationEventsCountResult() *ThriftHiveMetastoreGetNotificationEventsCountResult {
  return &ThriftHiveMetastoreGetNotificationEventsCountResult{}
}

var ThriftHiveMetastoreGetNotificationEventsCountResult_Success_DEFAULT *NotificationEventsCountResponse
func (p *ThriftHiveMetastoreGetNotificationEventsCountResult) GetSuccess() *NotificationEventsCountResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetNotificationEventsCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreGetNotificationEventsCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetNotificationEventsCountResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNotificationEventsCountResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &NotificationEventsCountResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetNotificationEventsCountResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_notification_events_count_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetNotificationEventsCountResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetNotificationEventsCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetNotificationEventsCountResult(%+v)", *p)
}

// Attributes:
//  - Rqst
type ThriftHiveMetastoreFireListenerEventArgs struct {
  Rqst *FireEventRequest `thrift:"rqst,1" db:"rqst" json:"rqst"`
}

func NewThriftHiveMetastoreFireListenerEventArgs() *ThriftHiveMetastoreFireListenerEventArgs {
  return &ThriftHiveMetastoreFireListenerEventArgs{}
}

var ThriftHiveMetastoreFireListenerEventArgs_Rqst_DEFAULT *FireEventRequest
func (p *ThriftHiveMetastoreFireListenerEventArgs) GetRqst() *FireEventRequest {
  if !p.IsSetRqst() {
    return ThriftHiveMetastoreFireListenerEventArgs_Rqst_DEFAULT
  }
return p.Rqst
}
func (p *ThriftHiveMetastoreFireListenerEventArgs) IsSetRqst() bool {
  return p.Rqst != nil
}

func (p *ThriftHiveMetastoreFireListenerEventArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreFireListenerEventArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rqst = &FireEventRequest{}
  if err := p.Rqst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rqst), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreFireListenerEventArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fire_listener_event_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreFireListenerEventArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rqst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rqst: ", p), err) }
  if err := p.Rqst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rqst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rqst: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreFireListenerEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreFireListenerEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreFireListenerEventResult struct {
  Success *FireEventResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreFireListenerEventResult() *ThriftHiveMetastoreFireListenerEventResult {
  return &ThriftHiveMetastoreFireListenerEventResult{}
}

var ThriftHiveMetastoreFireListenerEventResult_Success_DEFAULT *FireEventResponse
func (p *ThriftHiveMetastoreFireListenerEventResult) GetSuccess() *FireEventResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreFireListenerEventResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreFireListenerEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreFireListenerEventResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreFireListenerEventResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &FireEventResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreFireListenerEventResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fire_listener_event_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreFireListenerEventResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreFireListenerEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreFireListenerEventResult(%+v)", *p)
}

type ThriftHiveMetastoreFlushCacheArgs struct {
}

func NewThriftHiveMetastoreFlushCacheArgs() *ThriftHiveMetastoreFlushCacheArgs {
  return &ThriftHiveMetastoreFlushCacheArgs{}
}

func (p *ThriftHiveMetastoreFlushCacheArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreFlushCacheArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "flushCache_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreFlushCacheArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreFlushCacheArgs(%+v)", *p)
}

type ThriftHiveMetastoreFlushCacheResult struct {
}

func NewThriftHiveMetastoreFlushCacheResult() *ThriftHiveMetastoreFlushCacheResult {
  return &ThriftHiveMetastoreFlushCacheResult{}
}

func (p *ThriftHiveMetastoreFlushCacheResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreFlushCacheResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "flushCache_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreFlushCacheResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreFlushCacheResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreCmRecycleArgs struct {
  Request *CmRecycleRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreCmRecycleArgs() *ThriftHiveMetastoreCmRecycleArgs {
  return &ThriftHiveMetastoreCmRecycleArgs{}
}

var ThriftHiveMetastoreCmRecycleArgs_Request_DEFAULT *CmRecycleRequest
func (p *ThriftHiveMetastoreCmRecycleArgs) GetRequest() *CmRecycleRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreCmRecycleArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreCmRecycleArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreCmRecycleArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCmRecycleArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &CmRecycleRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCmRecycleArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cm_recycle_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCmRecycleArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCmRecycleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCmRecycleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreCmRecycleResult struct {
  Success *CmRecycleResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreCmRecycleResult() *ThriftHiveMetastoreCmRecycleResult {
  return &ThriftHiveMetastoreCmRecycleResult{}
}

var ThriftHiveMetastoreCmRecycleResult_Success_DEFAULT *CmRecycleResponse
func (p *ThriftHiveMetastoreCmRecycleResult) GetSuccess() *CmRecycleResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreCmRecycleResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreCmRecycleResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCmRecycleResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCmRecycleResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreCmRecycleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreCmRecycleResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCmRecycleResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCmRecycleResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CmRecycleResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCmRecycleResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCmRecycleResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cm_recycle_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCmRecycleResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCmRecycleResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCmRecycleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCmRecycleResult(%+v)", *p)
}

// Attributes:
//  - Req
type ThriftHiveMetastoreGetFileMetadataByExprArgs struct {
  Req *GetFileMetadataByExprRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewThriftHiveMetastoreGetFileMetadataByExprArgs() *ThriftHiveMetastoreGetFileMetadataByExprArgs {
  return &ThriftHiveMetastoreGetFileMetadataByExprArgs{}
}

var ThriftHiveMetastoreGetFileMetadataByExprArgs_Req_DEFAULT *GetFileMetadataByExprRequest
func (p *ThriftHiveMetastoreGetFileMetadataByExprArgs) GetReq() *GetFileMetadataByExprRequest {
  if !p.IsSetReq() {
    return ThriftHiveMetastoreGetFileMetadataByExprArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ThriftHiveMetastoreGetFileMetadataByExprArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ThriftHiveMetastoreGetFileMetadataByExprArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFileMetadataByExprArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetFileMetadataByExprRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFileMetadataByExprArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_file_metadata_by_expr_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetFileMetadataByExprArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetFileMetadataByExprArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetFileMetadataByExprArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreGetFileMetadataByExprResult struct {
  Success *GetFileMetadataByExprResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreGetFileMetadataByExprResult() *ThriftHiveMetastoreGetFileMetadataByExprResult {
  return &ThriftHiveMetastoreGetFileMetadataByExprResult{}
}

var ThriftHiveMetastoreGetFileMetadataByExprResult_Success_DEFAULT *GetFileMetadataByExprResult_
func (p *ThriftHiveMetastoreGetFileMetadataByExprResult) GetSuccess() *GetFileMetadataByExprResult_ {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetFileMetadataByExprResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreGetFileMetadataByExprResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetFileMetadataByExprResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFileMetadataByExprResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetFileMetadataByExprResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFileMetadataByExprResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_file_metadata_by_expr_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetFileMetadataByExprResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFileMetadataByExprResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetFileMetadataByExprResult(%+v)", *p)
}

// Attributes:
//  - Req
type ThriftHiveMetastoreGetFileMetadataArgs struct {
  Req *GetFileMetadataRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewThriftHiveMetastoreGetFileMetadataArgs() *ThriftHiveMetastoreGetFileMetadataArgs {
  return &ThriftHiveMetastoreGetFileMetadataArgs{}
}

var ThriftHiveMetastoreGetFileMetadataArgs_Req_DEFAULT *GetFileMetadataRequest
func (p *ThriftHiveMetastoreGetFileMetadataArgs) GetReq() *GetFileMetadataRequest {
  if !p.IsSetReq() {
    return ThriftHiveMetastoreGetFileMetadataArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ThriftHiveMetastoreGetFileMetadataArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ThriftHiveMetastoreGetFileMetadataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFileMetadataArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetFileMetadataRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFileMetadataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_file_metadata_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetFileMetadataArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetFileMetadataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetFileMetadataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreGetFileMetadataResult struct {
  Success *GetFileMetadataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreGetFileMetadataResult() *ThriftHiveMetastoreGetFileMetadataResult {
  return &ThriftHiveMetastoreGetFileMetadataResult{}
}

var ThriftHiveMetastoreGetFileMetadataResult_Success_DEFAULT *GetFileMetadataResult_
func (p *ThriftHiveMetastoreGetFileMetadataResult) GetSuccess() *GetFileMetadataResult_ {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetFileMetadataResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreGetFileMetadataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetFileMetadataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFileMetadataResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetFileMetadataResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFileMetadataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_file_metadata_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetFileMetadataResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFileMetadataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetFileMetadataResult(%+v)", *p)
}

// Attributes:
//  - Req
type ThriftHiveMetastorePutFileMetadataArgs struct {
  Req *PutFileMetadataRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewThriftHiveMetastorePutFileMetadataArgs() *ThriftHiveMetastorePutFileMetadataArgs {
  return &ThriftHiveMetastorePutFileMetadataArgs{}
}

var ThriftHiveMetastorePutFileMetadataArgs_Req_DEFAULT *PutFileMetadataRequest
func (p *ThriftHiveMetastorePutFileMetadataArgs) GetReq() *PutFileMetadataRequest {
  if !p.IsSetReq() {
    return ThriftHiveMetastorePutFileMetadataArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ThriftHiveMetastorePutFileMetadataArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ThriftHiveMetastorePutFileMetadataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePutFileMetadataArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &PutFileMetadataRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePutFileMetadataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "put_file_metadata_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastorePutFileMetadataArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ThriftHiveMetastorePutFileMetadataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastorePutFileMetadataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastorePutFileMetadataResult struct {
  Success *PutFileMetadataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastorePutFileMetadataResult() *ThriftHiveMetastorePutFileMetadataResult {
  return &ThriftHiveMetastorePutFileMetadataResult{}
}

var ThriftHiveMetastorePutFileMetadataResult_Success_DEFAULT *PutFileMetadataResult_
func (p *ThriftHiveMetastorePutFileMetadataResult) GetSuccess() *PutFileMetadataResult_ {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastorePutFileMetadataResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastorePutFileMetadataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastorePutFileMetadataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePutFileMetadataResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PutFileMetadataResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePutFileMetadataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "put_file_metadata_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastorePutFileMetadataResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastorePutFileMetadataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastorePutFileMetadataResult(%+v)", *p)
}

// Attributes:
//  - Req
type ThriftHiveMetastoreClearFileMetadataArgs struct {
  Req *ClearFileMetadataRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewThriftHiveMetastoreClearFileMetadataArgs() *ThriftHiveMetastoreClearFileMetadataArgs {
  return &ThriftHiveMetastoreClearFileMetadataArgs{}
}

var ThriftHiveMetastoreClearFileMetadataArgs_Req_DEFAULT *ClearFileMetadataRequest
func (p *ThriftHiveMetastoreClearFileMetadataArgs) GetReq() *ClearFileMetadataRequest {
  if !p.IsSetReq() {
    return ThriftHiveMetastoreClearFileMetadataArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ThriftHiveMetastoreClearFileMetadataArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ThriftHiveMetastoreClearFileMetadataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreClearFileMetadataArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ClearFileMetadataRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreClearFileMetadataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clear_file_metadata_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreClearFileMetadataArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreClearFileMetadataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreClearFileMetadataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreClearFileMetadataResult struct {
  Success *ClearFileMetadataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreClearFileMetadataResult() *ThriftHiveMetastoreClearFileMetadataResult {
  return &ThriftHiveMetastoreClearFileMetadataResult{}
}

var ThriftHiveMetastoreClearFileMetadataResult_Success_DEFAULT *ClearFileMetadataResult_
func (p *ThriftHiveMetastoreClearFileMetadataResult) GetSuccess() *ClearFileMetadataResult_ {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreClearFileMetadataResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreClearFileMetadataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreClearFileMetadataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreClearFileMetadataResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ClearFileMetadataResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreClearFileMetadataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clear_file_metadata_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreClearFileMetadataResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreClearFileMetadataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreClearFileMetadataResult(%+v)", *p)
}

// Attributes:
//  - Req
type ThriftHiveMetastoreCacheFileMetadataArgs struct {
  Req *CacheFileMetadataRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewThriftHiveMetastoreCacheFileMetadataArgs() *ThriftHiveMetastoreCacheFileMetadataArgs {
  return &ThriftHiveMetastoreCacheFileMetadataArgs{}
}

var ThriftHiveMetastoreCacheFileMetadataArgs_Req_DEFAULT *CacheFileMetadataRequest
func (p *ThriftHiveMetastoreCacheFileMetadataArgs) GetReq() *CacheFileMetadataRequest {
  if !p.IsSetReq() {
    return ThriftHiveMetastoreCacheFileMetadataArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ThriftHiveMetastoreCacheFileMetadataArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ThriftHiveMetastoreCacheFileMetadataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCacheFileMetadataArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CacheFileMetadataRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCacheFileMetadataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cache_file_metadata_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCacheFileMetadataArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCacheFileMetadataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCacheFileMetadataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftHiveMetastoreCacheFileMetadataResult struct {
  Success *CacheFileMetadataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftHiveMetastoreCacheFileMetadataResult() *ThriftHiveMetastoreCacheFileMetadataResult {
  return &ThriftHiveMetastoreCacheFileMetadataResult{}
}

var ThriftHiveMetastoreCacheFileMetadataResult_Success_DEFAULT *CacheFileMetadataResult_
func (p *ThriftHiveMetastoreCacheFileMetadataResult) GetSuccess() *CacheFileMetadataResult_ {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreCacheFileMetadataResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThriftHiveMetastoreCacheFileMetadataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreCacheFileMetadataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCacheFileMetadataResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CacheFileMetadataResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCacheFileMetadataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cache_file_metadata_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCacheFileMetadataResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCacheFileMetadataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCacheFileMetadataResult(%+v)", *p)
}

type ThriftHiveMetastoreGetMetastoreDbUUIDArgs struct {
}

func NewThriftHiveMetastoreGetMetastoreDbUUIDArgs() *ThriftHiveMetastoreGetMetastoreDbUUIDArgs {
  return &ThriftHiveMetastoreGetMetastoreDbUUIDArgs{}
}

func (p *ThriftHiveMetastoreGetMetastoreDbUUIDArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetMetastoreDbUUIDArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_metastore_db_uuid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetMetastoreDbUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetMetastoreDbUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetMetastoreDbUUIDResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetMetastoreDbUUIDResult() *ThriftHiveMetastoreGetMetastoreDbUUIDResult {
  return &ThriftHiveMetastoreGetMetastoreDbUUIDResult{}
}

var ThriftHiveMetastoreGetMetastoreDbUUIDResult_Success_DEFAULT string
func (p *ThriftHiveMetastoreGetMetastoreDbUUIDResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetMetastoreDbUUIDResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreGetMetastoreDbUUIDResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetMetastoreDbUUIDResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetMetastoreDbUUIDResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetMetastoreDbUUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetMetastoreDbUUIDResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetMetastoreDbUUIDResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetMetastoreDbUUIDResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreGetMetastoreDbUUIDResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetMetastoreDbUUIDResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_metastore_db_uuid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetMetastoreDbUUIDResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetMetastoreDbUUIDResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetMetastoreDbUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetMetastoreDbUUIDResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreCreateResourcePlanArgs struct {
  Request *WMCreateResourcePlanRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreCreateResourcePlanArgs() *ThriftHiveMetastoreCreateResourcePlanArgs {
  return &ThriftHiveMetastoreCreateResourcePlanArgs{}
}

var ThriftHiveMetastoreCreateResourcePlanArgs_Request_DEFAULT *WMCreateResourcePlanRequest
func (p *ThriftHiveMetastoreCreateResourcePlanArgs) GetRequest() *WMCreateResourcePlanRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreCreateResourcePlanArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreCreateResourcePlanArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreCreateResourcePlanArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateResourcePlanArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &WMCreateResourcePlanRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateResourcePlanArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_resource_plan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateResourcePlanArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateResourcePlanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateResourcePlanArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreCreateResourcePlanResult struct {
  Success *WMCreateResourcePlanResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *AlreadyExistsException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreCreateResourcePlanResult() *ThriftHiveMetastoreCreateResourcePlanResult {
  return &ThriftHiveMetastoreCreateResourcePlanResult{}
}

var ThriftHiveMetastoreCreateResourcePlanResult_Success_DEFAULT *WMCreateResourcePlanResponse
func (p *ThriftHiveMetastoreCreateResourcePlanResult) GetSuccess() *WMCreateResourcePlanResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreCreateResourcePlanResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreCreateResourcePlanResult_O1_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreCreateResourcePlanResult) GetO1() *AlreadyExistsException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCreateResourcePlanResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreCreateResourcePlanResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreCreateResourcePlanResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreCreateResourcePlanResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreCreateResourcePlanResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCreateResourcePlanResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreCreateResourcePlanResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreCreateResourcePlanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreCreateResourcePlanResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateResourcePlanResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateResourcePlanResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateResourcePlanResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateResourcePlanResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WMCreateResourcePlanResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateResourcePlanResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &AlreadyExistsException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateResourcePlanResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateResourcePlanResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateResourcePlanResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_resource_plan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateResourcePlanResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateResourcePlanResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateResourcePlanResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateResourcePlanResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateResourcePlanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateResourcePlanResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGetResourcePlanArgs struct {
  Request *WMGetResourcePlanRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGetResourcePlanArgs() *ThriftHiveMetastoreGetResourcePlanArgs {
  return &ThriftHiveMetastoreGetResourcePlanArgs{}
}

var ThriftHiveMetastoreGetResourcePlanArgs_Request_DEFAULT *WMGetResourcePlanRequest
func (p *ThriftHiveMetastoreGetResourcePlanArgs) GetRequest() *WMGetResourcePlanRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGetResourcePlanArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGetResourcePlanArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGetResourcePlanArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetResourcePlanArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &WMGetResourcePlanRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetResourcePlanArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_resource_plan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetResourcePlanArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetResourcePlanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetResourcePlanArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetResourcePlanResult struct {
  Success *WMGetResourcePlanResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetResourcePlanResult() *ThriftHiveMetastoreGetResourcePlanResult {
  return &ThriftHiveMetastoreGetResourcePlanResult{}
}

var ThriftHiveMetastoreGetResourcePlanResult_Success_DEFAULT *WMGetResourcePlanResponse
func (p *ThriftHiveMetastoreGetResourcePlanResult) GetSuccess() *WMGetResourcePlanResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetResourcePlanResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetResourcePlanResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetResourcePlanResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetResourcePlanResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetResourcePlanResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetResourcePlanResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetResourcePlanResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetResourcePlanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetResourcePlanResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetResourcePlanResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetResourcePlanResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetResourcePlanResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WMGetResourcePlanResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetResourcePlanResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetResourcePlanResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetResourcePlanResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_resource_plan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetResourcePlanResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetResourcePlanResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetResourcePlanResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetResourcePlanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetResourcePlanResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGetActiveResourcePlanArgs struct {
  Request *WMGetActiveResourcePlanRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGetActiveResourcePlanArgs() *ThriftHiveMetastoreGetActiveResourcePlanArgs {
  return &ThriftHiveMetastoreGetActiveResourcePlanArgs{}
}

var ThriftHiveMetastoreGetActiveResourcePlanArgs_Request_DEFAULT *WMGetActiveResourcePlanRequest
func (p *ThriftHiveMetastoreGetActiveResourcePlanArgs) GetRequest() *WMGetActiveResourcePlanRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGetActiveResourcePlanArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGetActiveResourcePlanArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGetActiveResourcePlanArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetActiveResourcePlanArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &WMGetActiveResourcePlanRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetActiveResourcePlanArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_active_resource_plan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetActiveResourcePlanArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetActiveResourcePlanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetActiveResourcePlanArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O2
type ThriftHiveMetastoreGetActiveResourcePlanResult struct {
  Success *WMGetActiveResourcePlanResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O2 *MetaException `thrift:"o2,1" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetActiveResourcePlanResult() *ThriftHiveMetastoreGetActiveResourcePlanResult {
  return &ThriftHiveMetastoreGetActiveResourcePlanResult{}
}

var ThriftHiveMetastoreGetActiveResourcePlanResult_Success_DEFAULT *WMGetActiveResourcePlanResponse
func (p *ThriftHiveMetastoreGetActiveResourcePlanResult) GetSuccess() *WMGetActiveResourcePlanResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetActiveResourcePlanResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetActiveResourcePlanResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetActiveResourcePlanResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetActiveResourcePlanResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetActiveResourcePlanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetActiveResourcePlanResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetActiveResourcePlanResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetActiveResourcePlanResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WMGetActiveResourcePlanResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetActiveResourcePlanResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetActiveResourcePlanResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_active_resource_plan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetActiveResourcePlanResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetActiveResourcePlanResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetActiveResourcePlanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetActiveResourcePlanResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGetAllResourcePlansArgs struct {
  Request *WMGetAllResourcePlanRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGetAllResourcePlansArgs() *ThriftHiveMetastoreGetAllResourcePlansArgs {
  return &ThriftHiveMetastoreGetAllResourcePlansArgs{}
}

var ThriftHiveMetastoreGetAllResourcePlansArgs_Request_DEFAULT *WMGetAllResourcePlanRequest
func (p *ThriftHiveMetastoreGetAllResourcePlansArgs) GetRequest() *WMGetAllResourcePlanRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGetAllResourcePlansArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGetAllResourcePlansArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGetAllResourcePlansArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllResourcePlansArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &WMGetAllResourcePlanRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllResourcePlansArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_all_resource_plans_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAllResourcePlansArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetAllResourcePlansArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAllResourcePlansArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetAllResourcePlansResult struct {
  Success *WMGetAllResourcePlanResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetAllResourcePlansResult() *ThriftHiveMetastoreGetAllResourcePlansResult {
  return &ThriftHiveMetastoreGetAllResourcePlansResult{}
}

var ThriftHiveMetastoreGetAllResourcePlansResult_Success_DEFAULT *WMGetAllResourcePlanResponse
func (p *ThriftHiveMetastoreGetAllResourcePlansResult) GetSuccess() *WMGetAllResourcePlanResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetAllResourcePlansResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetAllResourcePlansResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetAllResourcePlansResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetAllResourcePlansResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetAllResourcePlansResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetAllResourcePlansResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetAllResourcePlansResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllResourcePlansResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WMGetAllResourcePlanResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllResourcePlansResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllResourcePlansResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_all_resource_plans_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAllResourcePlansResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAllResourcePlansResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAllResourcePlansResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAllResourcePlansResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreAlterResourcePlanArgs struct {
  Request *WMAlterResourcePlanRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreAlterResourcePlanArgs() *ThriftHiveMetastoreAlterResourcePlanArgs {
  return &ThriftHiveMetastoreAlterResourcePlanArgs{}
}

var ThriftHiveMetastoreAlterResourcePlanArgs_Request_DEFAULT *WMAlterResourcePlanRequest
func (p *ThriftHiveMetastoreAlterResourcePlanArgs) GetRequest() *WMAlterResourcePlanRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreAlterResourcePlanArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreAlterResourcePlanArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreAlterResourcePlanArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterResourcePlanArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &WMAlterResourcePlanRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterResourcePlanArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_resource_plan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterResourcePlanArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterResourcePlanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterResourcePlanArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAlterResourcePlanResult struct {
  Success *WMAlterResourcePlanResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidOperationException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAlterResourcePlanResult() *ThriftHiveMetastoreAlterResourcePlanResult {
  return &ThriftHiveMetastoreAlterResourcePlanResult{}
}

var ThriftHiveMetastoreAlterResourcePlanResult_Success_DEFAULT *WMAlterResourcePlanResponse
func (p *ThriftHiveMetastoreAlterResourcePlanResult) GetSuccess() *WMAlterResourcePlanResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAlterResourcePlanResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAlterResourcePlanResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreAlterResourcePlanResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterResourcePlanResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterResourcePlanResult_O2_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterResourcePlanResult) GetO2() *InvalidOperationException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterResourcePlanResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAlterResourcePlanResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterResourcePlanResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAlterResourcePlanResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAlterResourcePlanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAlterResourcePlanResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterResourcePlanResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterResourcePlanResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAlterResourcePlanResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterResourcePlanResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WMAlterResourcePlanResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterResourcePlanResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterResourcePlanResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidOperationException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterResourcePlanResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterResourcePlanResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_resource_plan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterResourcePlanResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterResourcePlanResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterResourcePlanResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterResourcePlanResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterResourcePlanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterResourcePlanResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreValidateResourcePlanArgs struct {
  Request *WMValidateResourcePlanRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreValidateResourcePlanArgs() *ThriftHiveMetastoreValidateResourcePlanArgs {
  return &ThriftHiveMetastoreValidateResourcePlanArgs{}
}

var ThriftHiveMetastoreValidateResourcePlanArgs_Request_DEFAULT *WMValidateResourcePlanRequest
func (p *ThriftHiveMetastoreValidateResourcePlanArgs) GetRequest() *WMValidateResourcePlanRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreValidateResourcePlanArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreValidateResourcePlanArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreValidateResourcePlanArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreValidateResourcePlanArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &WMValidateResourcePlanRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreValidateResourcePlanArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "validate_resource_plan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreValidateResourcePlanArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreValidateResourcePlanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreValidateResourcePlanArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreValidateResourcePlanResult struct {
  Success *WMValidateResourcePlanResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreValidateResourcePlanResult() *ThriftHiveMetastoreValidateResourcePlanResult {
  return &ThriftHiveMetastoreValidateResourcePlanResult{}
}

var ThriftHiveMetastoreValidateResourcePlanResult_Success_DEFAULT *WMValidateResourcePlanResponse
func (p *ThriftHiveMetastoreValidateResourcePlanResult) GetSuccess() *WMValidateResourcePlanResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreValidateResourcePlanResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreValidateResourcePlanResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreValidateResourcePlanResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreValidateResourcePlanResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreValidateResourcePlanResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreValidateResourcePlanResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreValidateResourcePlanResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreValidateResourcePlanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreValidateResourcePlanResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreValidateResourcePlanResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreValidateResourcePlanResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreValidateResourcePlanResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WMValidateResourcePlanResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreValidateResourcePlanResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreValidateResourcePlanResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreValidateResourcePlanResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "validate_resource_plan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreValidateResourcePlanResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreValidateResourcePlanResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreValidateResourcePlanResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreValidateResourcePlanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreValidateResourcePlanResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreDropResourcePlanArgs struct {
  Request *WMDropResourcePlanRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreDropResourcePlanArgs() *ThriftHiveMetastoreDropResourcePlanArgs {
  return &ThriftHiveMetastoreDropResourcePlanArgs{}
}

var ThriftHiveMetastoreDropResourcePlanArgs_Request_DEFAULT *WMDropResourcePlanRequest
func (p *ThriftHiveMetastoreDropResourcePlanArgs) GetRequest() *WMDropResourcePlanRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreDropResourcePlanArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreDropResourcePlanArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreDropResourcePlanArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropResourcePlanArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &WMDropResourcePlanRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropResourcePlanArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_resource_plan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropResourcePlanArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropResourcePlanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropResourcePlanArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreDropResourcePlanResult struct {
  Success *WMDropResourcePlanResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidOperationException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreDropResourcePlanResult() *ThriftHiveMetastoreDropResourcePlanResult {
  return &ThriftHiveMetastoreDropResourcePlanResult{}
}

var ThriftHiveMetastoreDropResourcePlanResult_Success_DEFAULT *WMDropResourcePlanResponse
func (p *ThriftHiveMetastoreDropResourcePlanResult) GetSuccess() *WMDropResourcePlanResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropResourcePlanResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreDropResourcePlanResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropResourcePlanResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropResourcePlanResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropResourcePlanResult_O2_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreDropResourcePlanResult) GetO2() *InvalidOperationException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropResourcePlanResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreDropResourcePlanResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropResourcePlanResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreDropResourcePlanResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreDropResourcePlanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropResourcePlanResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropResourcePlanResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropResourcePlanResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreDropResourcePlanResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropResourcePlanResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WMDropResourcePlanResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropResourcePlanResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropResourcePlanResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidOperationException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropResourcePlanResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropResourcePlanResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_resource_plan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropResourcePlanResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropResourcePlanResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropResourcePlanResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropResourcePlanResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropResourcePlanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropResourcePlanResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreCreateWmTriggerArgs struct {
  Request *WMCreateTriggerRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreCreateWmTriggerArgs() *ThriftHiveMetastoreCreateWmTriggerArgs {
  return &ThriftHiveMetastoreCreateWmTriggerArgs{}
}

var ThriftHiveMetastoreCreateWmTriggerArgs_Request_DEFAULT *WMCreateTriggerRequest
func (p *ThriftHiveMetastoreCreateWmTriggerArgs) GetRequest() *WMCreateTriggerRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreCreateWmTriggerArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreCreateWmTriggerArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &WMCreateTriggerRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_wm_trigger_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateWmTriggerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateWmTriggerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreCreateWmTriggerResult struct {
  Success *WMCreateTriggerResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *AlreadyExistsException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *InvalidObjectException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *MetaException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreCreateWmTriggerResult() *ThriftHiveMetastoreCreateWmTriggerResult {
  return &ThriftHiveMetastoreCreateWmTriggerResult{}
}

var ThriftHiveMetastoreCreateWmTriggerResult_Success_DEFAULT *WMCreateTriggerResponse
func (p *ThriftHiveMetastoreCreateWmTriggerResult) GetSuccess() *WMCreateTriggerResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreCreateWmTriggerResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreCreateWmTriggerResult_O1_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreCreateWmTriggerResult) GetO1() *AlreadyExistsException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCreateWmTriggerResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreCreateWmTriggerResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreCreateWmTriggerResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreCreateWmTriggerResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreCreateWmTriggerResult_O3_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreCreateWmTriggerResult) GetO3() *InvalidObjectException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreCreateWmTriggerResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreCreateWmTriggerResult_O4_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCreateWmTriggerResult) GetO4() *MetaException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreCreateWmTriggerResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreCreateWmTriggerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WMCreateTriggerResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &AlreadyExistsException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &InvalidObjectException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.O4 = &MetaException{}
  if err := p.O4.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_wm_trigger_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin(ctx, "o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateWmTriggerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateWmTriggerResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreAlterWmTriggerArgs struct {
  Request *WMAlterTriggerRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreAlterWmTriggerArgs() *ThriftHiveMetastoreAlterWmTriggerArgs {
  return &ThriftHiveMetastoreAlterWmTriggerArgs{}
}

var ThriftHiveMetastoreAlterWmTriggerArgs_Request_DEFAULT *WMAlterTriggerRequest
func (p *ThriftHiveMetastoreAlterWmTriggerArgs) GetRequest() *WMAlterTriggerRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreAlterWmTriggerArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreAlterWmTriggerArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreAlterWmTriggerArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterWmTriggerArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &WMAlterTriggerRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterWmTriggerArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_wm_trigger_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterWmTriggerArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterWmTriggerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterWmTriggerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAlterWmTriggerResult struct {
  Success *WMAlterTriggerResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAlterWmTriggerResult() *ThriftHiveMetastoreAlterWmTriggerResult {
  return &ThriftHiveMetastoreAlterWmTriggerResult{}
}

var ThriftHiveMetastoreAlterWmTriggerResult_Success_DEFAULT *WMAlterTriggerResponse
func (p *ThriftHiveMetastoreAlterWmTriggerResult) GetSuccess() *WMAlterTriggerResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAlterWmTriggerResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAlterWmTriggerResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreAlterWmTriggerResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterWmTriggerResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterWmTriggerResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAlterWmTriggerResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterWmTriggerResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAlterWmTriggerResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterWmTriggerResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAlterWmTriggerResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAlterWmTriggerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAlterWmTriggerResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterWmTriggerResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterWmTriggerResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAlterWmTriggerResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterWmTriggerResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WMAlterTriggerResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterWmTriggerResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterWmTriggerResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterWmTriggerResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterWmTriggerResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alter_wm_trigger_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterWmTriggerResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterWmTriggerResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterWmTriggerResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterWmTriggerResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterWmTriggerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterWmTriggerResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreDropWmTriggerArgs struct {
  Request *WMDropTriggerRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreDropWmTriggerArgs() *ThriftHiveMetastoreDropWmTriggerArgs {
  return &ThriftHiveMetastoreDropWmTriggerArgs{}
}

var ThriftHiveMetastoreDropWmTriggerArgs_Request_DEFAULT *WMDropTriggerRequest
func (p *ThriftHiveMetastoreDropWmTriggerArgs) GetRequest() *WMDropTriggerRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreDropWmTriggerArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreDropWmTriggerArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreDropWmTriggerArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropWmTriggerArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &WMDropTriggerRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropWmTriggerArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_wm_trigger_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropWmTriggerArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropWmTriggerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropWmTriggerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreDropWmTriggerResult struct {
  Success *WMDropTriggerResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidOperationException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreDropWmTriggerResult() *ThriftHiveMetastoreDropWmTriggerResult {
  return &ThriftHiveMetastoreDropWmTriggerResult{}
}

var ThriftHiveMetastoreDropWmTriggerResult_Success_DEFAULT *WMDropTriggerResponse
func (p *ThriftHiveMetastoreDropWmTriggerResult) GetSuccess() *WMDropTriggerResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropWmTriggerResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreDropWmTriggerResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropWmTriggerResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropWmTriggerResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropWmTriggerResult_O2_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreDropWmTriggerResult) GetO2() *InvalidOperationException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropWmTriggerResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreDropWmTriggerResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropWmTriggerResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreDropWmTriggerResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreDropWmTriggerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropWmTriggerResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropWmTriggerResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropWmTriggerResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreDropWmTriggerResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropWmTriggerResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WMDropTriggerResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropWmTriggerResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropWmTriggerResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &InvalidOperationException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropWmTriggerResult)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropWmTriggerResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_wm_trigger_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropWmTriggerResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropWmTriggerResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropWmTriggerResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropWmTriggerResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin(ctx, "o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropWmTriggerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropWmTriggerResult(%+v)", *p)
}

// Attributes:
//  - Request
type ThriftHiveMetastoreGetTriggersForResourceplanArgs struct {
  Request *WMGetTriggersForResourePlanRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewThriftHiveMetastoreGetTriggersForResourceplanArgs() *ThriftHiveMetastoreGetTriggersForResourceplanArgs {
  return &ThriftHiveMetastoreGetTriggersForResourceplanArgs{}
}

var ThriftHiveMetastoreGetTriggersForResourceplanArgs_Request_DEFAULT *WMGetTriggersForResourePlanRequest
func (p *ThriftHiveMetastoreGetTriggersForResourceplanArgs) GetRequest() *WMGetTriggersForResourePlanRequest {
  if !p.IsSetRequest() {
    return ThriftHiveMetastoreGetTriggersForResourceplanArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ThriftHiveMetastoreGetTriggersForResourceplanArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &WMGetTriggersForResourePlanRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_triggers_for_resourceplan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTriggersForResourceplanArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetTriggersForResourceplanResult struct {
  Success *WMGetTriggersForResourePlanResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetTriggersForResourceplanResult() *ThriftHiveMetastoreGetTriggersForResourceplanResult {
  return &ThriftHiveMetastoreGetTriggersForResourceplanResult{}
}

var ThriftHiveMetastoreGetTriggersForResourceplanResult_Success_DEFAULT *WMGetTriggersForResourePlanResponse
func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult) GetSuccess() *WMGetTriggersForResourePlanResponse {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetTriggersForResourceplanResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetTriggersForResourceplanResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTriggersForResourceplanResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetTriggersForResourceplanResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTriggersForResourceplanResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WMGetTriggersForResourePlanResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_triggers_for_resourceplan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin(ctx, "o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin(ctx, "o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTriggersForResourceplanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTriggersForResourceplanResult(%+v)", *p)
}


