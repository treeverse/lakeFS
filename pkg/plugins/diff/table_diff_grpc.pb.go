// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: table_diff.proto

package tablediff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TableDifferClient is the client API for TableDiffer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableDifferClient interface {
	TableDiff(ctx context.Context, in *DiffRequest, opts ...grpc.CallOption) (*DiffResponse, error)
	ShowHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
}

type tableDifferClient struct {
	cc grpc.ClientConnInterface
}

func NewTableDifferClient(cc grpc.ClientConnInterface) TableDifferClient {
	return &tableDifferClient{cc}
}

func (c *tableDifferClient) TableDiff(ctx context.Context, in *DiffRequest, opts ...grpc.CallOption) (*DiffResponse, error) {
	out := new(DiffResponse)
	err := c.cc.Invoke(ctx, "/diff.TableDiffer/TableDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableDifferClient) ShowHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, "/diff.TableDiffer/ShowHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TableDifferServer is the server API for TableDiffer service.
// All implementations must embed UnimplementedTableDifferServer
// for forward compatibility
type TableDifferServer interface {
	TableDiff(context.Context, *DiffRequest) (*DiffResponse, error)
	ShowHistory(context.Context, *HistoryRequest) (*HistoryResponse, error)
	mustEmbedUnimplementedTableDifferServer()
}

// UnimplementedTableDifferServer must be embedded to have forward compatible implementations.
type UnimplementedTableDifferServer struct {
}

func (UnimplementedTableDifferServer) TableDiff(context.Context, *DiffRequest) (*DiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableDiff not implemented")
}
func (UnimplementedTableDifferServer) ShowHistory(context.Context, *HistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowHistory not implemented")
}
func (UnimplementedTableDifferServer) mustEmbedUnimplementedTableDifferServer() {}

// UnsafeTableDifferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableDifferServer will
// result in compilation errors.
type UnsafeTableDifferServer interface {
	mustEmbedUnimplementedTableDifferServer()
}

func RegisterTableDifferServer(s grpc.ServiceRegistrar, srv TableDifferServer) {
	s.RegisterService(&TableDiffer_ServiceDesc, srv)
}

func _TableDiffer_TableDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableDifferServer).TableDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diff.TableDiffer/TableDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableDifferServer).TableDiff(ctx, req.(*DiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableDiffer_ShowHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableDifferServer).ShowHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diff.TableDiffer/ShowHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableDifferServer).ShowHistory(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TableDiffer_ServiceDesc is the grpc.ServiceDesc for TableDiffer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TableDiffer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diff.TableDiffer",
	HandlerType: (*TableDifferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TableDiff",
			Handler:    _TableDiffer_TableDiff_Handler,
		},
		{
			MethodName: "ShowHistory",
			Handler:    _TableDiffer_ShowHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "table_diff.proto",
}
