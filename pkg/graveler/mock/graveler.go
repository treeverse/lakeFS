// Code generated by MockGen. DO NOT EDIT.
// Source: graveler.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	graveler "github.com/treeverse/lakefs/pkg/graveler"
)

// MockReference is a mock of Reference interface.
type MockReference struct {
	ctrl     *gomock.Controller
	recorder *MockReferenceMockRecorder
}

// MockReferenceMockRecorder is the mock recorder for MockReference.
type MockReferenceMockRecorder struct {
	mock *MockReference
}

// NewMockReference creates a new mock instance.
func NewMockReference(ctrl *gomock.Controller) *MockReference {
	mock := &MockReference{ctrl: ctrl}
	mock.recorder = &MockReferenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReference) EXPECT() *MockReferenceMockRecorder {
	return m.recorder
}

// Branch mocks base method.
func (m *MockReference) Branch() graveler.Branch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Branch")
	ret0, _ := ret[0].(graveler.Branch)
	return ret0
}

// Branch indicates an expected call of Branch.
func (mr *MockReferenceMockRecorder) Branch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Branch", reflect.TypeOf((*MockReference)(nil).Branch))
}

// CommitID mocks base method.
func (m *MockReference) CommitID() graveler.CommitID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitID")
	ret0, _ := ret[0].(graveler.CommitID)
	return ret0
}

// CommitID indicates an expected call of CommitID.
func (mr *MockReferenceMockRecorder) CommitID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitID", reflect.TypeOf((*MockReference)(nil).CommitID))
}

// Type mocks base method.
func (m *MockReference) Type() graveler.ReferenceType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(graveler.ReferenceType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockReferenceMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockReference)(nil).Type))
}

// MockKeyValueStore is a mock of KeyValueStore interface.
type MockKeyValueStore struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueStoreMockRecorder
}

// MockKeyValueStoreMockRecorder is the mock recorder for MockKeyValueStore.
type MockKeyValueStoreMockRecorder struct {
	mock *MockKeyValueStore
}

// NewMockKeyValueStore creates a new mock instance.
func NewMockKeyValueStore(ctrl *gomock.Controller) *MockKeyValueStore {
	mock := &MockKeyValueStore{ctrl: ctrl}
	mock.recorder = &MockKeyValueStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueStore) EXPECT() *MockKeyValueStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKeyValueStore) Delete(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID, key graveler.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, repositoryID, branchID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeyValueStoreMockRecorder) Delete(ctx, repositoryID, branchID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeyValueStore)(nil).Delete), ctx, repositoryID, branchID, key)
}

// Get mocks base method.
func (m *MockKeyValueStore) Get(ctx context.Context, repositoryID graveler.RepositoryID, ref graveler.Ref, key graveler.Key) (*graveler.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, repositoryID, ref, key)
	ret0, _ := ret[0].(*graveler.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyValueStoreMockRecorder) Get(ctx, repositoryID, ref, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyValueStore)(nil).Get), ctx, repositoryID, ref, key)
}

// List mocks base method.
func (m *MockKeyValueStore) List(ctx context.Context, repositoryID graveler.RepositoryID, ref graveler.Ref) (graveler.ValueIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, repositoryID, ref)
	ret0, _ := ret[0].(graveler.ValueIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockKeyValueStoreMockRecorder) List(ctx, repositoryID, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKeyValueStore)(nil).List), ctx, repositoryID, ref)
}

// Set mocks base method.
func (m *MockKeyValueStore) Set(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID, key graveler.Key, value graveler.Value, writeConditions ...graveler.WriteConditionOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, repositoryID, branchID, key, value}
	for _, a := range writeConditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockKeyValueStoreMockRecorder) Set(ctx, repositoryID, branchID, key, value interface{}, writeConditions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, repositoryID, branchID, key, value}, writeConditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockKeyValueStore)(nil).Set), varargs...)
}

// MockVersionController is a mock of VersionController interface.
type MockVersionController struct {
	ctrl     *gomock.Controller
	recorder *MockVersionControllerMockRecorder
}

// MockVersionControllerMockRecorder is the mock recorder for MockVersionController.
type MockVersionControllerMockRecorder struct {
	mock *MockVersionController
}

// NewMockVersionController creates a new mock instance.
func NewMockVersionController(ctrl *gomock.Controller) *MockVersionController {
	mock := &MockVersionController{ctrl: ctrl}
	mock.recorder = &MockVersionControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionController) EXPECT() *MockVersionControllerMockRecorder {
	return m.recorder
}

// AddCommit mocks base method.
func (m *MockVersionController) AddCommit(ctx context.Context, repositoryID graveler.RepositoryID, commit graveler.Commit) (graveler.CommitID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCommit", ctx, repositoryID, commit)
	ret0, _ := ret[0].(graveler.CommitID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCommit indicates an expected call of AddCommit.
func (mr *MockVersionControllerMockRecorder) AddCommit(ctx, repositoryID, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommit", reflect.TypeOf((*MockVersionController)(nil).AddCommit), ctx, repositoryID, commit)
}

// AddCommitToBranchHead mocks base method.
func (m *MockVersionController) AddCommitToBranchHead(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID, commit graveler.Commit) (graveler.CommitID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCommitToBranchHead", ctx, repositoryID, branchID, commit)
	ret0, _ := ret[0].(graveler.CommitID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCommitToBranchHead indicates an expected call of AddCommitToBranchHead.
func (mr *MockVersionControllerMockRecorder) AddCommitToBranchHead(ctx, repositoryID, branchID, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommitToBranchHead", reflect.TypeOf((*MockVersionController)(nil).AddCommitToBranchHead), ctx, repositoryID, branchID, commit)
}

// Commit mocks base method.
func (m *MockVersionController) Commit(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID, commitParams graveler.CommitParams) (graveler.CommitID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, repositoryID, branchID, commitParams)
	ret0, _ := ret[0].(graveler.CommitID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockVersionControllerMockRecorder) Commit(ctx, repositoryID, branchID, commitParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockVersionController)(nil).Commit), ctx, repositoryID, branchID, commitParams)
}

// Compare mocks base method.
func (m *MockVersionController) Compare(ctx context.Context, repositoryID graveler.RepositoryID, from, to graveler.Ref) (graveler.DiffIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", ctx, repositoryID, from, to)
	ret0, _ := ret[0].(graveler.DiffIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compare indicates an expected call of Compare.
func (mr *MockVersionControllerMockRecorder) Compare(ctx, repositoryID, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockVersionController)(nil).Compare), ctx, repositoryID, from, to)
}

// CreateBareRepository mocks base method.
func (m *MockVersionController) CreateBareRepository(ctx context.Context, repositoryID graveler.RepositoryID, storageNamespace graveler.StorageNamespace, defaultBranchID graveler.BranchID) (*graveler.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBareRepository", ctx, repositoryID, storageNamespace, defaultBranchID)
	ret0, _ := ret[0].(*graveler.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBareRepository indicates an expected call of CreateBareRepository.
func (mr *MockVersionControllerMockRecorder) CreateBareRepository(ctx, repositoryID, storageNamespace, defaultBranchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBareRepository", reflect.TypeOf((*MockVersionController)(nil).CreateBareRepository), ctx, repositoryID, storageNamespace, defaultBranchID)
}

// CreateBranch mocks base method.
func (m *MockVersionController) CreateBranch(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID, ref graveler.Ref) (*graveler.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", ctx, repositoryID, branchID, ref)
	ret0, _ := ret[0].(*graveler.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockVersionControllerMockRecorder) CreateBranch(ctx, repositoryID, branchID, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockVersionController)(nil).CreateBranch), ctx, repositoryID, branchID, ref)
}

// CreateRepository mocks base method.
func (m *MockVersionController) CreateRepository(ctx context.Context, repositoryID graveler.RepositoryID, storageNamespace graveler.StorageNamespace, branchID graveler.BranchID) (*graveler.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", ctx, repositoryID, storageNamespace, branchID)
	ret0, _ := ret[0].(*graveler.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockVersionControllerMockRecorder) CreateRepository(ctx, repositoryID, storageNamespace, branchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockVersionController)(nil).CreateRepository), ctx, repositoryID, storageNamespace, branchID)
}

// CreateTag mocks base method.
func (m *MockVersionController) CreateTag(ctx context.Context, repositoryID graveler.RepositoryID, tagID graveler.TagID, commitID graveler.CommitID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, repositoryID, tagID, commitID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockVersionControllerMockRecorder) CreateTag(ctx, repositoryID, tagID, commitID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockVersionController)(nil).CreateTag), ctx, repositoryID, tagID, commitID)
}

// DeleteBranch mocks base method.
func (m *MockVersionController) DeleteBranch(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", ctx, repositoryID, branchID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockVersionControllerMockRecorder) DeleteBranch(ctx, repositoryID, branchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockVersionController)(nil).DeleteBranch), ctx, repositoryID, branchID)
}

// DeleteRepository mocks base method.
func (m *MockVersionController) DeleteRepository(ctx context.Context, repositoryID graveler.RepositoryID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", ctx, repositoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockVersionControllerMockRecorder) DeleteRepository(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockVersionController)(nil).DeleteRepository), ctx, repositoryID)
}

// DeleteTag mocks base method.
func (m *MockVersionController) DeleteTag(ctx context.Context, repositoryID graveler.RepositoryID, tagID graveler.TagID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, repositoryID, tagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockVersionControllerMockRecorder) DeleteTag(ctx, repositoryID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockVersionController)(nil).DeleteTag), ctx, repositoryID, tagID)
}

// Dereference mocks base method.
func (m *MockVersionController) Dereference(ctx context.Context, repositoryID graveler.RepositoryID, ref graveler.Ref) (graveler.CommitID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dereference", ctx, repositoryID, ref)
	ret0, _ := ret[0].(graveler.CommitID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dereference indicates an expected call of Dereference.
func (mr *MockVersionControllerMockRecorder) Dereference(ctx, repositoryID, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dereference", reflect.TypeOf((*MockVersionController)(nil).Dereference), ctx, repositoryID, ref)
}

// Diff mocks base method.
func (m *MockVersionController) Diff(ctx context.Context, repositoryID graveler.RepositoryID, left, right graveler.Ref) (graveler.DiffIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Diff", ctx, repositoryID, left, right)
	ret0, _ := ret[0].(graveler.DiffIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Diff indicates an expected call of Diff.
func (mr *MockVersionControllerMockRecorder) Diff(ctx, repositoryID, left, right interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Diff", reflect.TypeOf((*MockVersionController)(nil).Diff), ctx, repositoryID, left, right)
}

// DiffUncommitted mocks base method.
func (m *MockVersionController) DiffUncommitted(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID) (graveler.DiffIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiffUncommitted", ctx, repositoryID, branchID)
	ret0, _ := ret[0].(graveler.DiffIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiffUncommitted indicates an expected call of DiffUncommitted.
func (mr *MockVersionControllerMockRecorder) DiffUncommitted(ctx, repositoryID, branchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiffUncommitted", reflect.TypeOf((*MockVersionController)(nil).DiffUncommitted), ctx, repositoryID, branchID)
}

// GetBranch mocks base method.
func (m *MockVersionController) GetBranch(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID) (*graveler.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", ctx, repositoryID, branchID)
	ret0, _ := ret[0].(*graveler.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch.
func (mr *MockVersionControllerMockRecorder) GetBranch(ctx, repositoryID, branchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockVersionController)(nil).GetBranch), ctx, repositoryID, branchID)
}

// GetCommit mocks base method.
func (m *MockVersionController) GetCommit(ctx context.Context, repositoryID graveler.RepositoryID, commitID graveler.CommitID) (*graveler.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", ctx, repositoryID, commitID)
	ret0, _ := ret[0].(*graveler.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockVersionControllerMockRecorder) GetCommit(ctx, repositoryID, commitID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockVersionController)(nil).GetCommit), ctx, repositoryID, commitID)
}

// GetGarbageCollectionRules mocks base method.
func (m *MockVersionController) GetGarbageCollectionRules(ctx context.Context, repositoryID graveler.RepositoryID) (*graveler.GarbageCollectionRules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGarbageCollectionRules", ctx, repositoryID)
	ret0, _ := ret[0].(*graveler.GarbageCollectionRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGarbageCollectionRules indicates an expected call of GetGarbageCollectionRules.
func (mr *MockVersionControllerMockRecorder) GetGarbageCollectionRules(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGarbageCollectionRules", reflect.TypeOf((*MockVersionController)(nil).GetGarbageCollectionRules), ctx, repositoryID)
}

// GetRepository mocks base method.
func (m *MockVersionController) GetRepository(ctx context.Context, repositoryID graveler.RepositoryID) (*graveler.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", ctx, repositoryID)
	ret0, _ := ret[0].(*graveler.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockVersionControllerMockRecorder) GetRepository(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockVersionController)(nil).GetRepository), ctx, repositoryID)
}

// GetStagingToken mocks base method.
func (m *MockVersionController) GetStagingToken(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID) (*graveler.StagingToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStagingToken", ctx, repositoryID, branchID)
	ret0, _ := ret[0].(*graveler.StagingToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStagingToken indicates an expected call of GetStagingToken.
func (mr *MockVersionControllerMockRecorder) GetStagingToken(ctx, repositoryID, branchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStagingToken", reflect.TypeOf((*MockVersionController)(nil).GetStagingToken), ctx, repositoryID, branchID)
}

// GetTag mocks base method.
func (m *MockVersionController) GetTag(ctx context.Context, repositoryID graveler.RepositoryID, tagID graveler.TagID) (*graveler.CommitID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", ctx, repositoryID, tagID)
	ret0, _ := ret[0].(*graveler.CommitID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockVersionControllerMockRecorder) GetTag(ctx, repositoryID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockVersionController)(nil).GetTag), ctx, repositoryID, tagID)
}

// ListBranches mocks base method.
func (m *MockVersionController) ListBranches(ctx context.Context, repositoryID graveler.RepositoryID) (graveler.BranchIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", ctx, repositoryID)
	ret0, _ := ret[0].(graveler.BranchIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranches indicates an expected call of ListBranches.
func (mr *MockVersionControllerMockRecorder) ListBranches(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockVersionController)(nil).ListBranches), ctx, repositoryID)
}

// ListRepositories mocks base method.
func (m *MockVersionController) ListRepositories(ctx context.Context) (graveler.RepositoryIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", ctx)
	ret0, _ := ret[0].(graveler.RepositoryIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockVersionControllerMockRecorder) ListRepositories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockVersionController)(nil).ListRepositories), ctx)
}

// ListTags mocks base method.
func (m *MockVersionController) ListTags(ctx context.Context, repositoryID graveler.RepositoryID) (graveler.TagIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", ctx, repositoryID)
	ret0, _ := ret[0].(graveler.TagIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockVersionControllerMockRecorder) ListTags(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockVersionController)(nil).ListTags), ctx, repositoryID)
}

// Log mocks base method.
func (m *MockVersionController) Log(ctx context.Context, repositoryID graveler.RepositoryID, commitID graveler.CommitID) (graveler.CommitIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log", ctx, repositoryID, commitID)
	ret0, _ := ret[0].(graveler.CommitIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Log indicates an expected call of Log.
func (mr *MockVersionControllerMockRecorder) Log(ctx, repositoryID, commitID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockVersionController)(nil).Log), ctx, repositoryID, commitID)
}

// Merge mocks base method.
func (m *MockVersionController) Merge(ctx context.Context, repositoryID graveler.RepositoryID, destination graveler.BranchID, source graveler.Ref, commitParams graveler.CommitParams) (graveler.CommitID, graveler.DiffSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", ctx, repositoryID, destination, source, commitParams)
	ret0, _ := ret[0].(graveler.CommitID)
	ret1, _ := ret[1].(graveler.DiffSummary)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Merge indicates an expected call of Merge.
func (mr *MockVersionControllerMockRecorder) Merge(ctx, repositoryID, destination, source, commitParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockVersionController)(nil).Merge), ctx, repositoryID, destination, source, commitParams)
}

// Reset mocks base method.
func (m *MockVersionController) Reset(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, repositoryID, branchID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockVersionControllerMockRecorder) Reset(ctx, repositoryID, branchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockVersionController)(nil).Reset), ctx, repositoryID, branchID)
}

// ResetKey mocks base method.
func (m *MockVersionController) ResetKey(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID, key graveler.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetKey", ctx, repositoryID, branchID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetKey indicates an expected call of ResetKey.
func (mr *MockVersionControllerMockRecorder) ResetKey(ctx, repositoryID, branchID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetKey", reflect.TypeOf((*MockVersionController)(nil).ResetKey), ctx, repositoryID, branchID, key)
}

// ResetPrefix mocks base method.
func (m *MockVersionController) ResetPrefix(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID, key graveler.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPrefix", ctx, repositoryID, branchID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPrefix indicates an expected call of ResetPrefix.
func (mr *MockVersionControllerMockRecorder) ResetPrefix(ctx, repositoryID, branchID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPrefix", reflect.TypeOf((*MockVersionController)(nil).ResetPrefix), ctx, repositoryID, branchID, key)
}

// Revert mocks base method.
func (m *MockVersionController) Revert(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID, ref graveler.Ref, parentNumber int, commitParams graveler.CommitParams) (graveler.CommitID, graveler.DiffSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revert", ctx, repositoryID, branchID, ref, parentNumber, commitParams)
	ret0, _ := ret[0].(graveler.CommitID)
	ret1, _ := ret[1].(graveler.DiffSummary)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Revert indicates an expected call of Revert.
func (mr *MockVersionControllerMockRecorder) Revert(ctx, repositoryID, branchID, ref, parentNumber, commitParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revert", reflect.TypeOf((*MockVersionController)(nil).Revert), ctx, repositoryID, branchID, ref, parentNumber, commitParams)
}

// SaveGarbageCollectionCommits mocks base method.
func (m *MockVersionController) SaveGarbageCollectionCommits(ctx context.Context, repositoryID graveler.RepositoryID, previousRunID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGarbageCollectionCommits", ctx, repositoryID, previousRunID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveGarbageCollectionCommits indicates an expected call of SaveGarbageCollectionCommits.
func (mr *MockVersionControllerMockRecorder) SaveGarbageCollectionCommits(ctx, repositoryID, previousRunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGarbageCollectionCommits", reflect.TypeOf((*MockVersionController)(nil).SaveGarbageCollectionCommits), ctx, repositoryID, previousRunID)
}

// SetGarbageCollectionRules mocks base method.
func (m *MockVersionController) SetGarbageCollectionRules(ctx context.Context, repositoryID graveler.RepositoryID, rules *graveler.GarbageCollectionRules) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGarbageCollectionRules", ctx, repositoryID, rules)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGarbageCollectionRules indicates an expected call of SetGarbageCollectionRules.
func (mr *MockVersionControllerMockRecorder) SetGarbageCollectionRules(ctx, repositoryID, rules interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGarbageCollectionRules", reflect.TypeOf((*MockVersionController)(nil).SetGarbageCollectionRules), ctx, repositoryID, rules)
}

// SetHooksHandler mocks base method.
func (m *MockVersionController) SetHooksHandler(handler graveler.HooksHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHooksHandler", handler)
}

// SetHooksHandler indicates an expected call of SetHooksHandler.
func (mr *MockVersionControllerMockRecorder) SetHooksHandler(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHooksHandler", reflect.TypeOf((*MockVersionController)(nil).SetHooksHandler), handler)
}

// UpdateBranch mocks base method.
func (m *MockVersionController) UpdateBranch(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID, ref graveler.Ref) (*graveler.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranch", ctx, repositoryID, branchID, ref)
	ret0, _ := ret[0].(*graveler.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBranch indicates an expected call of UpdateBranch.
func (mr *MockVersionControllerMockRecorder) UpdateBranch(ctx, repositoryID, branchID, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranch", reflect.TypeOf((*MockVersionController)(nil).UpdateBranch), ctx, repositoryID, branchID, ref)
}

// WriteMetaRange mocks base method.
func (m *MockVersionController) WriteMetaRange(ctx context.Context, repositoryID graveler.RepositoryID, it graveler.ValueIterator) (*graveler.MetaRangeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMetaRange", ctx, repositoryID, it)
	ret0, _ := ret[0].(*graveler.MetaRangeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteMetaRange indicates an expected call of WriteMetaRange.
func (mr *MockVersionControllerMockRecorder) WriteMetaRange(ctx, repositoryID, it interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMetaRange", reflect.TypeOf((*MockVersionController)(nil).WriteMetaRange), ctx, repositoryID, it)
}

// MockPlumbing is a mock of Plumbing interface.
type MockPlumbing struct {
	ctrl     *gomock.Controller
	recorder *MockPlumbingMockRecorder
}

// MockPlumbingMockRecorder is the mock recorder for MockPlumbing.
type MockPlumbingMockRecorder struct {
	mock *MockPlumbing
}

// NewMockPlumbing creates a new mock instance.
func NewMockPlumbing(ctrl *gomock.Controller) *MockPlumbing {
	mock := &MockPlumbing{ctrl: ctrl}
	mock.recorder = &MockPlumbingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlumbing) EXPECT() *MockPlumbingMockRecorder {
	return m.recorder
}

// GetMetaRange mocks base method.
func (m *MockPlumbing) GetMetaRange(ctx context.Context, repositoryID graveler.RepositoryID, metaRangeID graveler.MetaRangeID) (graveler.MetaRangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaRange", ctx, repositoryID, metaRangeID)
	ret0, _ := ret[0].(graveler.MetaRangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetaRange indicates an expected call of GetMetaRange.
func (mr *MockPlumbingMockRecorder) GetMetaRange(ctx, repositoryID, metaRangeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaRange", reflect.TypeOf((*MockPlumbing)(nil).GetMetaRange), ctx, repositoryID, metaRangeID)
}

// GetRange mocks base method.
func (m *MockPlumbing) GetRange(ctx context.Context, repositoryID graveler.RepositoryID, rangeID graveler.RangeID) (graveler.RangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRange", ctx, repositoryID, rangeID)
	ret0, _ := ret[0].(graveler.RangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRange indicates an expected call of GetRange.
func (mr *MockPlumbingMockRecorder) GetRange(ctx, repositoryID, rangeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRange", reflect.TypeOf((*MockPlumbing)(nil).GetRange), ctx, repositoryID, rangeID)
}

// MockDumper is a mock of Dumper interface.
type MockDumper struct {
	ctrl     *gomock.Controller
	recorder *MockDumperMockRecorder
}

// MockDumperMockRecorder is the mock recorder for MockDumper.
type MockDumperMockRecorder struct {
	mock *MockDumper
}

// NewMockDumper creates a new mock instance.
func NewMockDumper(ctrl *gomock.Controller) *MockDumper {
	mock := &MockDumper{ctrl: ctrl}
	mock.recorder = &MockDumperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDumper) EXPECT() *MockDumperMockRecorder {
	return m.recorder
}

// DumpBranches mocks base method.
func (m *MockDumper) DumpBranches(ctx context.Context, repositoryID graveler.RepositoryID) (*graveler.MetaRangeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpBranches", ctx, repositoryID)
	ret0, _ := ret[0].(*graveler.MetaRangeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpBranches indicates an expected call of DumpBranches.
func (mr *MockDumperMockRecorder) DumpBranches(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpBranches", reflect.TypeOf((*MockDumper)(nil).DumpBranches), ctx, repositoryID)
}

// DumpCommits mocks base method.
func (m *MockDumper) DumpCommits(ctx context.Context, repositoryID graveler.RepositoryID) (*graveler.MetaRangeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpCommits", ctx, repositoryID)
	ret0, _ := ret[0].(*graveler.MetaRangeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpCommits indicates an expected call of DumpCommits.
func (mr *MockDumperMockRecorder) DumpCommits(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpCommits", reflect.TypeOf((*MockDumper)(nil).DumpCommits), ctx, repositoryID)
}

// DumpTags mocks base method.
func (m *MockDumper) DumpTags(ctx context.Context, repositoryID graveler.RepositoryID) (*graveler.MetaRangeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpTags", ctx, repositoryID)
	ret0, _ := ret[0].(*graveler.MetaRangeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpTags indicates an expected call of DumpTags.
func (mr *MockDumperMockRecorder) DumpTags(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpTags", reflect.TypeOf((*MockDumper)(nil).DumpTags), ctx, repositoryID)
}

// MockLoader is a mock of Loader interface.
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance.
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// LoadBranches mocks base method.
func (m *MockLoader) LoadBranches(ctx context.Context, repositoryID graveler.RepositoryID, metaRangeID graveler.MetaRangeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBranches", ctx, repositoryID, metaRangeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadBranches indicates an expected call of LoadBranches.
func (mr *MockLoaderMockRecorder) LoadBranches(ctx, repositoryID, metaRangeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBranches", reflect.TypeOf((*MockLoader)(nil).LoadBranches), ctx, repositoryID, metaRangeID)
}

// LoadCommits mocks base method.
func (m *MockLoader) LoadCommits(ctx context.Context, repositoryID graveler.RepositoryID, metaRangeID graveler.MetaRangeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCommits", ctx, repositoryID, metaRangeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadCommits indicates an expected call of LoadCommits.
func (mr *MockLoaderMockRecorder) LoadCommits(ctx, repositoryID, metaRangeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCommits", reflect.TypeOf((*MockLoader)(nil).LoadCommits), ctx, repositoryID, metaRangeID)
}

// LoadTags mocks base method.
func (m *MockLoader) LoadTags(ctx context.Context, repositoryID graveler.RepositoryID, metaRangeID graveler.MetaRangeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTags", ctx, repositoryID, metaRangeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadTags indicates an expected call of LoadTags.
func (mr *MockLoaderMockRecorder) LoadTags(ctx, repositoryID, metaRangeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTags", reflect.TypeOf((*MockLoader)(nil).LoadTags), ctx, repositoryID, metaRangeID)
}

// MockRepositoryIterator is a mock of RepositoryIterator interface.
type MockRepositoryIterator struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryIteratorMockRecorder
}

// MockRepositoryIteratorMockRecorder is the mock recorder for MockRepositoryIterator.
type MockRepositoryIteratorMockRecorder struct {
	mock *MockRepositoryIterator
}

// NewMockRepositoryIterator creates a new mock instance.
func NewMockRepositoryIterator(ctrl *gomock.Controller) *MockRepositoryIterator {
	mock := &MockRepositoryIterator{ctrl: ctrl}
	mock.recorder = &MockRepositoryIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryIterator) EXPECT() *MockRepositoryIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepositoryIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepositoryIterator)(nil).Close))
}

// Err mocks base method.
func (m *MockRepositoryIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockRepositoryIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockRepositoryIterator)(nil).Err))
}

// Next mocks base method.
func (m *MockRepositoryIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockRepositoryIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRepositoryIterator)(nil).Next))
}

// SeekGE mocks base method.
func (m *MockRepositoryIterator) SeekGE(id graveler.RepositoryID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SeekGE", id)
}

// SeekGE indicates an expected call of SeekGE.
func (mr *MockRepositoryIteratorMockRecorder) SeekGE(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekGE", reflect.TypeOf((*MockRepositoryIterator)(nil).SeekGE), id)
}

// Value mocks base method.
func (m *MockRepositoryIterator) Value() *graveler.RepositoryRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(*graveler.RepositoryRecord)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockRepositoryIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockRepositoryIterator)(nil).Value))
}

// MockValueIterator is a mock of ValueIterator interface.
type MockValueIterator struct {
	ctrl     *gomock.Controller
	recorder *MockValueIteratorMockRecorder
}

// MockValueIteratorMockRecorder is the mock recorder for MockValueIterator.
type MockValueIteratorMockRecorder struct {
	mock *MockValueIterator
}

// NewMockValueIterator creates a new mock instance.
func NewMockValueIterator(ctrl *gomock.Controller) *MockValueIterator {
	mock := &MockValueIterator{ctrl: ctrl}
	mock.recorder = &MockValueIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValueIterator) EXPECT() *MockValueIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockValueIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockValueIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockValueIterator)(nil).Close))
}

// Err mocks base method.
func (m *MockValueIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockValueIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockValueIterator)(nil).Err))
}

// Next mocks base method.
func (m *MockValueIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockValueIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockValueIterator)(nil).Next))
}

// SeekGE mocks base method.
func (m *MockValueIterator) SeekGE(id graveler.Key) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SeekGE", id)
}

// SeekGE indicates an expected call of SeekGE.
func (mr *MockValueIteratorMockRecorder) SeekGE(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekGE", reflect.TypeOf((*MockValueIterator)(nil).SeekGE), id)
}

// Value mocks base method.
func (m *MockValueIterator) Value() *graveler.ValueRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(*graveler.ValueRecord)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockValueIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockValueIterator)(nil).Value))
}

// MockDiffIterator is a mock of DiffIterator interface.
type MockDiffIterator struct {
	ctrl     *gomock.Controller
	recorder *MockDiffIteratorMockRecorder
}

// MockDiffIteratorMockRecorder is the mock recorder for MockDiffIterator.
type MockDiffIteratorMockRecorder struct {
	mock *MockDiffIterator
}

// NewMockDiffIterator creates a new mock instance.
func NewMockDiffIterator(ctrl *gomock.Controller) *MockDiffIterator {
	mock := &MockDiffIterator{ctrl: ctrl}
	mock.recorder = &MockDiffIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiffIterator) EXPECT() *MockDiffIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDiffIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDiffIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDiffIterator)(nil).Close))
}

// Err mocks base method.
func (m *MockDiffIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockDiffIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockDiffIterator)(nil).Err))
}

// Next mocks base method.
func (m *MockDiffIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockDiffIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockDiffIterator)(nil).Next))
}

// SeekGE mocks base method.
func (m *MockDiffIterator) SeekGE(id graveler.Key) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SeekGE", id)
}

// SeekGE indicates an expected call of SeekGE.
func (mr *MockDiffIteratorMockRecorder) SeekGE(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekGE", reflect.TypeOf((*MockDiffIterator)(nil).SeekGE), id)
}

// Value mocks base method.
func (m *MockDiffIterator) Value() *graveler.Diff {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(*graveler.Diff)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockDiffIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockDiffIterator)(nil).Value))
}

// MockBranchIterator is a mock of BranchIterator interface.
type MockBranchIterator struct {
	ctrl     *gomock.Controller
	recorder *MockBranchIteratorMockRecorder
}

// MockBranchIteratorMockRecorder is the mock recorder for MockBranchIterator.
type MockBranchIteratorMockRecorder struct {
	mock *MockBranchIterator
}

// NewMockBranchIterator creates a new mock instance.
func NewMockBranchIterator(ctrl *gomock.Controller) *MockBranchIterator {
	mock := &MockBranchIterator{ctrl: ctrl}
	mock.recorder = &MockBranchIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBranchIterator) EXPECT() *MockBranchIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBranchIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBranchIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBranchIterator)(nil).Close))
}

// Err mocks base method.
func (m *MockBranchIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockBranchIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockBranchIterator)(nil).Err))
}

// Next mocks base method.
func (m *MockBranchIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockBranchIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockBranchIterator)(nil).Next))
}

// SeekGE mocks base method.
func (m *MockBranchIterator) SeekGE(id graveler.BranchID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SeekGE", id)
}

// SeekGE indicates an expected call of SeekGE.
func (mr *MockBranchIteratorMockRecorder) SeekGE(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekGE", reflect.TypeOf((*MockBranchIterator)(nil).SeekGE), id)
}

// Value mocks base method.
func (m *MockBranchIterator) Value() *graveler.BranchRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(*graveler.BranchRecord)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockBranchIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockBranchIterator)(nil).Value))
}

// MockTagIterator is a mock of TagIterator interface.
type MockTagIterator struct {
	ctrl     *gomock.Controller
	recorder *MockTagIteratorMockRecorder
}

// MockTagIteratorMockRecorder is the mock recorder for MockTagIterator.
type MockTagIteratorMockRecorder struct {
	mock *MockTagIterator
}

// NewMockTagIterator creates a new mock instance.
func NewMockTagIterator(ctrl *gomock.Controller) *MockTagIterator {
	mock := &MockTagIterator{ctrl: ctrl}
	mock.recorder = &MockTagIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagIterator) EXPECT() *MockTagIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTagIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockTagIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTagIterator)(nil).Close))
}

// Err mocks base method.
func (m *MockTagIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockTagIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockTagIterator)(nil).Err))
}

// Next mocks base method.
func (m *MockTagIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockTagIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockTagIterator)(nil).Next))
}

// SeekGE mocks base method.
func (m *MockTagIterator) SeekGE(id graveler.TagID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SeekGE", id)
}

// SeekGE indicates an expected call of SeekGE.
func (mr *MockTagIteratorMockRecorder) SeekGE(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekGE", reflect.TypeOf((*MockTagIterator)(nil).SeekGE), id)
}

// Value mocks base method.
func (m *MockTagIterator) Value() *graveler.TagRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(*graveler.TagRecord)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockTagIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockTagIterator)(nil).Value))
}

// MockCommitIterator is a mock of CommitIterator interface.
type MockCommitIterator struct {
	ctrl     *gomock.Controller
	recorder *MockCommitIteratorMockRecorder
}

// MockCommitIteratorMockRecorder is the mock recorder for MockCommitIterator.
type MockCommitIteratorMockRecorder struct {
	mock *MockCommitIterator
}

// NewMockCommitIterator creates a new mock instance.
func NewMockCommitIterator(ctrl *gomock.Controller) *MockCommitIterator {
	mock := &MockCommitIterator{ctrl: ctrl}
	mock.recorder = &MockCommitIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitIterator) EXPECT() *MockCommitIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCommitIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCommitIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCommitIterator)(nil).Close))
}

// Err mocks base method.
func (m *MockCommitIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockCommitIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockCommitIterator)(nil).Err))
}

// Next mocks base method.
func (m *MockCommitIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockCommitIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockCommitIterator)(nil).Next))
}

// SeekGE mocks base method.
func (m *MockCommitIterator) SeekGE(id graveler.CommitID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SeekGE", id)
}

// SeekGE indicates an expected call of SeekGE.
func (mr *MockCommitIteratorMockRecorder) SeekGE(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekGE", reflect.TypeOf((*MockCommitIterator)(nil).SeekGE), id)
}

// Value mocks base method.
func (m *MockCommitIterator) Value() *graveler.CommitRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(*graveler.CommitRecord)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockCommitIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockCommitIterator)(nil).Value))
}

// MockRefManager is a mock of RefManager interface.
type MockRefManager struct {
	ctrl     *gomock.Controller
	recorder *MockRefManagerMockRecorder
}

// MockRefManagerMockRecorder is the mock recorder for MockRefManager.
type MockRefManagerMockRecorder struct {
	mock *MockRefManager
}

// NewMockRefManager creates a new mock instance.
func NewMockRefManager(ctrl *gomock.Controller) *MockRefManager {
	mock := &MockRefManager{ctrl: ctrl}
	mock.recorder = &MockRefManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefManager) EXPECT() *MockRefManagerMockRecorder {
	return m.recorder
}

// AddCommit mocks base method.
func (m *MockRefManager) AddCommit(ctx context.Context, repositoryID graveler.RepositoryID, commit graveler.Commit) (graveler.CommitID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCommit", ctx, repositoryID, commit)
	ret0, _ := ret[0].(graveler.CommitID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCommit indicates an expected call of AddCommit.
func (mr *MockRefManagerMockRecorder) AddCommit(ctx, repositoryID, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommit", reflect.TypeOf((*MockRefManager)(nil).AddCommit), ctx, repositoryID, commit)
}

// CreateBareRepository mocks base method.
func (m *MockRefManager) CreateBareRepository(ctx context.Context, repositoryID graveler.RepositoryID, repository graveler.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBareRepository", ctx, repositoryID, repository)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBareRepository indicates an expected call of CreateBareRepository.
func (mr *MockRefManagerMockRecorder) CreateBareRepository(ctx, repositoryID, repository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBareRepository", reflect.TypeOf((*MockRefManager)(nil).CreateBareRepository), ctx, repositoryID, repository)
}

// CreateRepository mocks base method.
func (m *MockRefManager) CreateRepository(ctx context.Context, repositoryID graveler.RepositoryID, repository graveler.Repository, token graveler.StagingToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", ctx, repositoryID, repository, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockRefManagerMockRecorder) CreateRepository(ctx, repositoryID, repository, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockRefManager)(nil).CreateRepository), ctx, repositoryID, repository, token)
}

// CreateTag mocks base method.
func (m *MockRefManager) CreateTag(ctx context.Context, repositoryID graveler.RepositoryID, tagID graveler.TagID, commitID graveler.CommitID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, repositoryID, tagID, commitID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockRefManagerMockRecorder) CreateTag(ctx, repositoryID, tagID, commitID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockRefManager)(nil).CreateTag), ctx, repositoryID, tagID, commitID)
}

// DeleteBranch mocks base method.
func (m *MockRefManager) DeleteBranch(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", ctx, repositoryID, branchID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockRefManagerMockRecorder) DeleteBranch(ctx, repositoryID, branchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockRefManager)(nil).DeleteBranch), ctx, repositoryID, branchID)
}

// DeleteRepository mocks base method.
func (m *MockRefManager) DeleteRepository(ctx context.Context, repositoryID graveler.RepositoryID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", ctx, repositoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockRefManagerMockRecorder) DeleteRepository(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockRefManager)(nil).DeleteRepository), ctx, repositoryID)
}

// DeleteTag mocks base method.
func (m *MockRefManager) DeleteTag(ctx context.Context, repositoryID graveler.RepositoryID, tagID graveler.TagID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, repositoryID, tagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockRefManagerMockRecorder) DeleteTag(ctx, repositoryID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockRefManager)(nil).DeleteTag), ctx, repositoryID, tagID)
}

// FillGenerations mocks base method.
func (m *MockRefManager) FillGenerations(ctx context.Context, repositoryID graveler.RepositoryID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FillGenerations", ctx, repositoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FillGenerations indicates an expected call of FillGenerations.
func (mr *MockRefManagerMockRecorder) FillGenerations(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillGenerations", reflect.TypeOf((*MockRefManager)(nil).FillGenerations), ctx, repositoryID)
}

// FindMergeBase mocks base method.
func (m *MockRefManager) FindMergeBase(ctx context.Context, repositoryID graveler.RepositoryID, commitIDs ...graveler.CommitID) (*graveler.Commit, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, repositoryID}
	for _, a := range commitIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMergeBase", varargs...)
	ret0, _ := ret[0].(*graveler.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMergeBase indicates an expected call of FindMergeBase.
func (mr *MockRefManagerMockRecorder) FindMergeBase(ctx, repositoryID interface{}, commitIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, repositoryID}, commitIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMergeBase", reflect.TypeOf((*MockRefManager)(nil).FindMergeBase), varargs...)
}

// GetBranch mocks base method.
func (m *MockRefManager) GetBranch(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID) (*graveler.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", ctx, repositoryID, branchID)
	ret0, _ := ret[0].(*graveler.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch.
func (mr *MockRefManagerMockRecorder) GetBranch(ctx, repositoryID, branchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockRefManager)(nil).GetBranch), ctx, repositoryID, branchID)
}

// GetCommit mocks base method.
func (m *MockRefManager) GetCommit(ctx context.Context, repositoryID graveler.RepositoryID, commitID graveler.CommitID) (*graveler.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", ctx, repositoryID, commitID)
	ret0, _ := ret[0].(*graveler.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockRefManagerMockRecorder) GetCommit(ctx, repositoryID, commitID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockRefManager)(nil).GetCommit), ctx, repositoryID, commitID)
}

// GetRepository mocks base method.
func (m *MockRefManager) GetRepository(ctx context.Context, repositoryID graveler.RepositoryID) (*graveler.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", ctx, repositoryID)
	ret0, _ := ret[0].(*graveler.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockRefManagerMockRecorder) GetRepository(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockRefManager)(nil).GetRepository), ctx, repositoryID)
}

// GetTag mocks base method.
func (m *MockRefManager) GetTag(ctx context.Context, repositoryID graveler.RepositoryID, tagID graveler.TagID) (*graveler.CommitID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", ctx, repositoryID, tagID)
	ret0, _ := ret[0].(*graveler.CommitID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockRefManagerMockRecorder) GetTag(ctx, repositoryID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockRefManager)(nil).GetTag), ctx, repositoryID, tagID)
}

// ListBranches mocks base method.
func (m *MockRefManager) ListBranches(ctx context.Context, repositoryID graveler.RepositoryID) (graveler.BranchIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", ctx, repositoryID)
	ret0, _ := ret[0].(graveler.BranchIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranches indicates an expected call of ListBranches.
func (mr *MockRefManagerMockRecorder) ListBranches(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockRefManager)(nil).ListBranches), ctx, repositoryID)
}

// ListCommits mocks base method.
func (m *MockRefManager) ListCommits(ctx context.Context, repositoryID graveler.RepositoryID) (graveler.CommitIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", ctx, repositoryID)
	ret0, _ := ret[0].(graveler.CommitIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockRefManagerMockRecorder) ListCommits(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockRefManager)(nil).ListCommits), ctx, repositoryID)
}

// ListRepositories mocks base method.
func (m *MockRefManager) ListRepositories(ctx context.Context) (graveler.RepositoryIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", ctx)
	ret0, _ := ret[0].(graveler.RepositoryIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockRefManagerMockRecorder) ListRepositories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockRefManager)(nil).ListRepositories), ctx)
}

// ListTags mocks base method.
func (m *MockRefManager) ListTags(ctx context.Context, repositoryID graveler.RepositoryID) (graveler.TagIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", ctx, repositoryID)
	ret0, _ := ret[0].(graveler.TagIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockRefManagerMockRecorder) ListTags(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockRefManager)(nil).ListTags), ctx, repositoryID)
}

// Log mocks base method.
func (m *MockRefManager) Log(ctx context.Context, repositoryID graveler.RepositoryID, commitID graveler.CommitID) (graveler.CommitIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log", ctx, repositoryID, commitID)
	ret0, _ := ret[0].(graveler.CommitIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Log indicates an expected call of Log.
func (mr *MockRefManagerMockRecorder) Log(ctx, repositoryID, commitID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockRefManager)(nil).Log), ctx, repositoryID, commitID)
}

// RevParse mocks base method.
func (m *MockRefManager) RevParse(ctx context.Context, repositoryID graveler.RepositoryID, ref graveler.Ref) (graveler.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevParse", ctx, repositoryID, ref)
	ret0, _ := ret[0].(graveler.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevParse indicates an expected call of RevParse.
func (mr *MockRefManagerMockRecorder) RevParse(ctx, repositoryID, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevParse", reflect.TypeOf((*MockRefManager)(nil).RevParse), ctx, repositoryID, ref)
}

// SetBranch mocks base method.
func (m *MockRefManager) SetBranch(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID, branch graveler.Branch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBranch", ctx, repositoryID, branchID, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBranch indicates an expected call of SetBranch.
func (mr *MockRefManagerMockRecorder) SetBranch(ctx, repositoryID, branchID, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBranch", reflect.TypeOf((*MockRefManager)(nil).SetBranch), ctx, repositoryID, branchID, branch)
}

// MockCommittedManager is a mock of CommittedManager interface.
type MockCommittedManager struct {
	ctrl     *gomock.Controller
	recorder *MockCommittedManagerMockRecorder
}

// MockCommittedManagerMockRecorder is the mock recorder for MockCommittedManager.
type MockCommittedManagerMockRecorder struct {
	mock *MockCommittedManager
}

// NewMockCommittedManager creates a new mock instance.
func NewMockCommittedManager(ctrl *gomock.Controller) *MockCommittedManager {
	mock := &MockCommittedManager{ctrl: ctrl}
	mock.recorder = &MockCommittedManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommittedManager) EXPECT() *MockCommittedManagerMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockCommittedManager) Apply(ctx context.Context, ns graveler.StorageNamespace, rangeID graveler.MetaRangeID, iterator graveler.ValueIterator) (graveler.MetaRangeID, graveler.DiffSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, ns, rangeID, iterator)
	ret0, _ := ret[0].(graveler.MetaRangeID)
	ret1, _ := ret[1].(graveler.DiffSummary)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Apply indicates an expected call of Apply.
func (mr *MockCommittedManagerMockRecorder) Apply(ctx, ns, rangeID, iterator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockCommittedManager)(nil).Apply), ctx, ns, rangeID, iterator)
}

// Compare mocks base method.
func (m *MockCommittedManager) Compare(ctx context.Context, ns graveler.StorageNamespace, destination, source, base graveler.MetaRangeID) (graveler.DiffIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", ctx, ns, destination, source, base)
	ret0, _ := ret[0].(graveler.DiffIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compare indicates an expected call of Compare.
func (mr *MockCommittedManagerMockRecorder) Compare(ctx, ns, destination, source, base interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockCommittedManager)(nil).Compare), ctx, ns, destination, source, base)
}

// Diff mocks base method.
func (m *MockCommittedManager) Diff(ctx context.Context, ns graveler.StorageNamespace, left, right graveler.MetaRangeID) (graveler.DiffIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Diff", ctx, ns, left, right)
	ret0, _ := ret[0].(graveler.DiffIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Diff indicates an expected call of Diff.
func (mr *MockCommittedManagerMockRecorder) Diff(ctx, ns, left, right interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Diff", reflect.TypeOf((*MockCommittedManager)(nil).Diff), ctx, ns, left, right)
}

// Exists mocks base method.
func (m *MockCommittedManager) Exists(ctx context.Context, ns graveler.StorageNamespace, id graveler.MetaRangeID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, ns, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockCommittedManagerMockRecorder) Exists(ctx, ns, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCommittedManager)(nil).Exists), ctx, ns, id)
}

// Get mocks base method.
func (m *MockCommittedManager) Get(ctx context.Context, ns graveler.StorageNamespace, rangeID graveler.MetaRangeID, key graveler.Key) (*graveler.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ns, rangeID, key)
	ret0, _ := ret[0].(*graveler.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommittedManagerMockRecorder) Get(ctx, ns, rangeID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommittedManager)(nil).Get), ctx, ns, rangeID, key)
}

// GetMetaRange mocks base method.
func (m *MockCommittedManager) GetMetaRange(ctx context.Context, ns graveler.StorageNamespace, metaRangeID graveler.MetaRangeID) (graveler.MetaRangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaRange", ctx, ns, metaRangeID)
	ret0, _ := ret[0].(graveler.MetaRangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetaRange indicates an expected call of GetMetaRange.
func (mr *MockCommittedManagerMockRecorder) GetMetaRange(ctx, ns, metaRangeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaRange", reflect.TypeOf((*MockCommittedManager)(nil).GetMetaRange), ctx, ns, metaRangeID)
}

// GetRange mocks base method.
func (m *MockCommittedManager) GetRange(ctx context.Context, ns graveler.StorageNamespace, rangeID graveler.RangeID) (graveler.RangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRange", ctx, ns, rangeID)
	ret0, _ := ret[0].(graveler.RangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRange indicates an expected call of GetRange.
func (mr *MockCommittedManagerMockRecorder) GetRange(ctx, ns, rangeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRange", reflect.TypeOf((*MockCommittedManager)(nil).GetRange), ctx, ns, rangeID)
}

// List mocks base method.
func (m *MockCommittedManager) List(ctx context.Context, ns graveler.StorageNamespace, rangeID graveler.MetaRangeID) (graveler.ValueIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, ns, rangeID)
	ret0, _ := ret[0].(graveler.ValueIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCommittedManagerMockRecorder) List(ctx, ns, rangeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCommittedManager)(nil).List), ctx, ns, rangeID)
}

// Merge mocks base method.
func (m *MockCommittedManager) Merge(ctx context.Context, ns graveler.StorageNamespace, destination, source, base graveler.MetaRangeID) (graveler.MetaRangeID, graveler.DiffSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", ctx, ns, destination, source, base)
	ret0, _ := ret[0].(graveler.MetaRangeID)
	ret1, _ := ret[1].(graveler.DiffSummary)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Merge indicates an expected call of Merge.
func (mr *MockCommittedManagerMockRecorder) Merge(ctx, ns, destination, source, base interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockCommittedManager)(nil).Merge), ctx, ns, destination, source, base)
}

// WriteMetaRange mocks base method.
func (m *MockCommittedManager) WriteMetaRange(ctx context.Context, ns graveler.StorageNamespace, it graveler.ValueIterator, metadata graveler.Metadata) (*graveler.MetaRangeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMetaRange", ctx, ns, it, metadata)
	ret0, _ := ret[0].(*graveler.MetaRangeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteMetaRange indicates an expected call of WriteMetaRange.
func (mr *MockCommittedManagerMockRecorder) WriteMetaRange(ctx, ns, it, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMetaRange", reflect.TypeOf((*MockCommittedManager)(nil).WriteMetaRange), ctx, ns, it, metadata)
}

// MockStagingManager is a mock of StagingManager interface.
type MockStagingManager struct {
	ctrl     *gomock.Controller
	recorder *MockStagingManagerMockRecorder
}

// MockStagingManagerMockRecorder is the mock recorder for MockStagingManager.
type MockStagingManagerMockRecorder struct {
	mock *MockStagingManager
}

// NewMockStagingManager creates a new mock instance.
func NewMockStagingManager(ctrl *gomock.Controller) *MockStagingManager {
	mock := &MockStagingManager{ctrl: ctrl}
	mock.recorder = &MockStagingManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStagingManager) EXPECT() *MockStagingManagerMockRecorder {
	return m.recorder
}

// Drop mocks base method.
func (m *MockStagingManager) Drop(ctx context.Context, st graveler.StagingToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop", ctx, st)
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop.
func (mr *MockStagingManagerMockRecorder) Drop(ctx, st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockStagingManager)(nil).Drop), ctx, st)
}

// DropByPrefix mocks base method.
func (m *MockStagingManager) DropByPrefix(ctx context.Context, st graveler.StagingToken, prefix graveler.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropByPrefix", ctx, st, prefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropByPrefix indicates an expected call of DropByPrefix.
func (mr *MockStagingManagerMockRecorder) DropByPrefix(ctx, st, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropByPrefix", reflect.TypeOf((*MockStagingManager)(nil).DropByPrefix), ctx, st, prefix)
}

// DropKey mocks base method.
func (m *MockStagingManager) DropKey(ctx context.Context, st graveler.StagingToken, key graveler.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropKey", ctx, st, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropKey indicates an expected call of DropKey.
func (mr *MockStagingManagerMockRecorder) DropKey(ctx, st, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropKey", reflect.TypeOf((*MockStagingManager)(nil).DropKey), ctx, st, key)
}

// Get mocks base method.
func (m *MockStagingManager) Get(ctx context.Context, st graveler.StagingToken, key graveler.Key) (*graveler.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, st, key)
	ret0, _ := ret[0].(*graveler.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStagingManagerMockRecorder) Get(ctx, st, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStagingManager)(nil).Get), ctx, st, key)
}

// List mocks base method.
func (m *MockStagingManager) List(ctx context.Context, st graveler.StagingToken) (graveler.ValueIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, st)
	ret0, _ := ret[0].(graveler.ValueIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStagingManagerMockRecorder) List(ctx, st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStagingManager)(nil).List), ctx, st)
}

// Set mocks base method.
func (m *MockStagingManager) Set(ctx context.Context, st graveler.StagingToken, key graveler.Key, value *graveler.Value, overwrite bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, st, key, value, overwrite)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStagingManagerMockRecorder) Set(ctx, st, key, value, overwrite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStagingManager)(nil).Set), ctx, st, key, value, overwrite)
}

// MockBranchLocker is a mock of BranchLocker interface.
type MockBranchLocker struct {
	ctrl     *gomock.Controller
	recorder *MockBranchLockerMockRecorder
}

// MockBranchLockerMockRecorder is the mock recorder for MockBranchLocker.
type MockBranchLockerMockRecorder struct {
	mock *MockBranchLocker
}

// NewMockBranchLocker creates a new mock instance.
func NewMockBranchLocker(ctrl *gomock.Controller) *MockBranchLocker {
	mock := &MockBranchLocker{ctrl: ctrl}
	mock.recorder = &MockBranchLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBranchLocker) EXPECT() *MockBranchLockerMockRecorder {
	return m.recorder
}

// MetadataUpdater mocks base method.
func (m *MockBranchLocker) MetadataUpdater(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID, lockeFn graveler.BranchLockerFunc) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetadataUpdater", ctx, repositoryID, branchID, lockeFn)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetadataUpdater indicates an expected call of MetadataUpdater.
func (mr *MockBranchLockerMockRecorder) MetadataUpdater(ctx, repositoryID, branchID, lockeFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetadataUpdater", reflect.TypeOf((*MockBranchLocker)(nil).MetadataUpdater), ctx, repositoryID, branchID, lockeFn)
}

// Writer mocks base method.
func (m *MockBranchLocker) Writer(ctx context.Context, repositoryID graveler.RepositoryID, branchID graveler.BranchID, lockedFn graveler.BranchLockerFunc) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Writer", ctx, repositoryID, branchID, lockedFn)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Writer indicates an expected call of Writer.
func (mr *MockBranchLockerMockRecorder) Writer(ctx, repositoryID, branchID, lockedFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writer", reflect.TypeOf((*MockBranchLocker)(nil).Writer), ctx, repositoryID, branchID, lockedFn)
}

// MockGarbageCollectionManager is a mock of GarbageCollectionManager interface.
type MockGarbageCollectionManager struct {
	ctrl     *gomock.Controller
	recorder *MockGarbageCollectionManagerMockRecorder
}

// MockGarbageCollectionManagerMockRecorder is the mock recorder for MockGarbageCollectionManager.
type MockGarbageCollectionManagerMockRecorder struct {
	mock *MockGarbageCollectionManager
}

// NewMockGarbageCollectionManager creates a new mock instance.
func NewMockGarbageCollectionManager(ctrl *gomock.Controller) *MockGarbageCollectionManager {
	mock := &MockGarbageCollectionManager{ctrl: ctrl}
	mock.recorder = &MockGarbageCollectionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGarbageCollectionManager) EXPECT() *MockGarbageCollectionManagerMockRecorder {
	return m.recorder
}

// GetRules mocks base method.
func (m *MockGarbageCollectionManager) GetRules(ctx context.Context, storageNamespace graveler.StorageNamespace) (*graveler.GarbageCollectionRules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRules", ctx, storageNamespace)
	ret0, _ := ret[0].(*graveler.GarbageCollectionRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRules indicates an expected call of GetRules.
func (mr *MockGarbageCollectionManagerMockRecorder) GetRules(ctx, storageNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRules", reflect.TypeOf((*MockGarbageCollectionManager)(nil).GetRules), ctx, storageNamespace)
}

// GetRunExpiredCommits mocks base method.
func (m *MockGarbageCollectionManager) GetRunExpiredCommits(ctx context.Context, storageNamespace graveler.StorageNamespace, runID string) ([]graveler.CommitID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunExpiredCommits", ctx, storageNamespace, runID)
	ret0, _ := ret[0].([]graveler.CommitID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunExpiredCommits indicates an expected call of GetRunExpiredCommits.
func (mr *MockGarbageCollectionManagerMockRecorder) GetRunExpiredCommits(ctx, storageNamespace, runID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunExpiredCommits", reflect.TypeOf((*MockGarbageCollectionManager)(nil).GetRunExpiredCommits), ctx, storageNamespace, runID)
}

// SaveGarbageCollectionCommits mocks base method.
func (m *MockGarbageCollectionManager) SaveGarbageCollectionCommits(ctx context.Context, storageNamespace graveler.StorageNamespace, repositoryID graveler.RepositoryID, rules *graveler.GarbageCollectionRules, previouslyExpiredCommits []graveler.CommitID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGarbageCollectionCommits", ctx, storageNamespace, repositoryID, rules, previouslyExpiredCommits)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveGarbageCollectionCommits indicates an expected call of SaveGarbageCollectionCommits.
func (mr *MockGarbageCollectionManagerMockRecorder) SaveGarbageCollectionCommits(ctx, storageNamespace, repositoryID, rules, previouslyExpiredCommits interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGarbageCollectionCommits", reflect.TypeOf((*MockGarbageCollectionManager)(nil).SaveGarbageCollectionCommits), ctx, storageNamespace, repositoryID, rules, previouslyExpiredCommits)
}

// SaveRules mocks base method.
func (m *MockGarbageCollectionManager) SaveRules(ctx context.Context, storageNamespace graveler.StorageNamespace, rules *graveler.GarbageCollectionRules) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRules", ctx, storageNamespace, rules)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRules indicates an expected call of SaveRules.
func (mr *MockGarbageCollectionManagerMockRecorder) SaveRules(ctx, storageNamespace, rules interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRules", reflect.TypeOf((*MockGarbageCollectionManager)(nil).SaveRules), ctx, storageNamespace, rules)
}
