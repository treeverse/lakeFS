// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: graveler/graveler.proto

package graveler

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RepositoryState int32

const (
	RepositoryState_ACTIVE      RepositoryState = 0
	RepositoryState_IN_DELETION RepositoryState = 1
)

// Enum value maps for RepositoryState.
var (
	RepositoryState_name = map[int32]string{
		0: "ACTIVE",
		1: "IN_DELETION",
	}
	RepositoryState_value = map[string]int32{
		"ACTIVE":      0,
		"IN_DELETION": 1,
	}
)

func (x RepositoryState) Enum() *RepositoryState {
	p := new(RepositoryState)
	*p = x
	return p
}

func (x RepositoryState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepositoryState) Descriptor() protoreflect.EnumDescriptor {
	return file_graveler_graveler_proto_enumTypes[0].Descriptor()
}

func (RepositoryState) Type() protoreflect.EnumType {
	return &file_graveler_graveler_proto_enumTypes[0]
}

func (x RepositoryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepositoryState.Descriptor instead.
func (RepositoryState) EnumDescriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{0}
}

type BranchProtectionBlockedAction int32

const (
	BranchProtectionBlockedAction_STAGING_WRITE BranchProtectionBlockedAction = 0
	BranchProtectionBlockedAction_COMMIT        BranchProtectionBlockedAction = 1
)

// Enum value maps for BranchProtectionBlockedAction.
var (
	BranchProtectionBlockedAction_name = map[int32]string{
		0: "STAGING_WRITE",
		1: "COMMIT",
	}
	BranchProtectionBlockedAction_value = map[string]int32{
		"STAGING_WRITE": 0,
		"COMMIT":        1,
	}
)

func (x BranchProtectionBlockedAction) Enum() *BranchProtectionBlockedAction {
	p := new(BranchProtectionBlockedAction)
	*p = x
	return p
}

func (x BranchProtectionBlockedAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BranchProtectionBlockedAction) Descriptor() protoreflect.EnumDescriptor {
	return file_graveler_graveler_proto_enumTypes[1].Descriptor()
}

func (BranchProtectionBlockedAction) Type() protoreflect.EnumType {
	return &file_graveler_graveler_proto_enumTypes[1]
}

func (x BranchProtectionBlockedAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BranchProtectionBlockedAction.Descriptor instead.
func (BranchProtectionBlockedAction) EnumDescriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{1}
}

type PullRequestStatus int32

const (
	PullRequestStatus_OPEN   PullRequestStatus = 0
	PullRequestStatus_CLOSED PullRequestStatus = 1
	PullRequestStatus_MERGED PullRequestStatus = 2
)

// Enum value maps for PullRequestStatus.
var (
	PullRequestStatus_name = map[int32]string{
		0: "OPEN",
		1: "CLOSED",
		2: "MERGED",
	}
	PullRequestStatus_value = map[string]int32{
		"OPEN":   0,
		"CLOSED": 1,
		"MERGED": 2,
	}
)

func (x PullRequestStatus) Enum() *PullRequestStatus {
	p := new(PullRequestStatus)
	*p = x
	return p
}

func (x PullRequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PullRequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_graveler_graveler_proto_enumTypes[2].Descriptor()
}

func (PullRequestStatus) Type() protoreflect.EnumType {
	return &file_graveler_graveler_proto_enumTypes[2]
}

func (x PullRequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PullRequestStatus.Descriptor instead.
func (PullRequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{2}
}

type RepositoryData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StorageNamespace string                 `protobuf:"bytes,2,opt,name=storage_namespace,json=storageNamespace,proto3" json:"storage_namespace,omitempty"`
	DefaultBranchId  string                 `protobuf:"bytes,3,opt,name=default_branch_id,json=defaultBranchId,proto3" json:"default_branch_id,omitempty"`
	CreationDate     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	State            RepositoryState        `protobuf:"varint,5,opt,name=state,proto3,enum=io.treeverse.lakefs.graveler.RepositoryState" json:"state,omitempty"`
	InstanceUid      string                 `protobuf:"bytes,6,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"`
	ReadOnly         bool                   `protobuf:"varint,7,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	StorageId        string                 `protobuf:"bytes,8,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RepositoryData) Reset() {
	*x = RepositoryData{}
	mi := &file_graveler_graveler_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepositoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryData) ProtoMessage() {}

func (x *RepositoryData) ProtoReflect() protoreflect.Message {
	mi := &file_graveler_graveler_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryData.ProtoReflect.Descriptor instead.
func (*RepositoryData) Descriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{0}
}

func (x *RepositoryData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RepositoryData) GetStorageNamespace() string {
	if x != nil {
		return x.StorageNamespace
	}
	return ""
}

func (x *RepositoryData) GetDefaultBranchId() string {
	if x != nil {
		return x.DefaultBranchId
	}
	return ""
}

func (x *RepositoryData) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *RepositoryData) GetState() RepositoryState {
	if x != nil {
		return x.State
	}
	return RepositoryState_ACTIVE
}

func (x *RepositoryData) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

func (x *RepositoryData) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *RepositoryData) GetStorageId() string {
	if x != nil {
		return x.StorageId
	}
	return ""
}

type BranchData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CommitId      string                 `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	StagingToken  string                 `protobuf:"bytes,3,opt,name=staging_token,json=stagingToken,proto3" json:"staging_token,omitempty"`
	SealedTokens  []string               `protobuf:"bytes,4,rep,name=sealed_tokens,json=sealedTokens,proto3" json:"sealed_tokens,omitempty"`
	Hidden        bool                   `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BranchData) Reset() {
	*x = BranchData{}
	mi := &file_graveler_graveler_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchData) ProtoMessage() {}

func (x *BranchData) ProtoReflect() protoreflect.Message {
	mi := &file_graveler_graveler_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchData.ProtoReflect.Descriptor instead.
func (*BranchData) Descriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{1}
}

func (x *BranchData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BranchData) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *BranchData) GetStagingToken() string {
	if x != nil {
		return x.StagingToken
	}
	return ""
}

func (x *BranchData) GetSealedTokens() []string {
	if x != nil {
		return x.SealedTokens
	}
	return nil
}

func (x *BranchData) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

type TagData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CommitId      string                 `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagData) Reset() {
	*x = TagData{}
	mi := &file_graveler_graveler_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagData) ProtoMessage() {}

func (x *TagData) ProtoReflect() protoreflect.Message {
	mi := &file_graveler_graveler_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagData.ProtoReflect.Descriptor instead.
func (*TagData) Descriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{2}
}

func (x *TagData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TagData) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

type CommitData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Committer     string                 `protobuf:"bytes,2,opt,name=committer,proto3" json:"committer,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	CreationDate  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	MetaRangeId   string                 `protobuf:"bytes,5,opt,name=meta_range_id,json=metaRangeId,proto3" json:"meta_range_id,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Parents       []string               `protobuf:"bytes,7,rep,name=parents,proto3" json:"parents,omitempty"`
	Version       int32                  `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	Generation    int32                  `protobuf:"varint,9,opt,name=generation,proto3" json:"generation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitData) Reset() {
	*x = CommitData{}
	mi := &file_graveler_graveler_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitData) ProtoMessage() {}

func (x *CommitData) ProtoReflect() protoreflect.Message {
	mi := &file_graveler_graveler_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitData.ProtoReflect.Descriptor instead.
func (*CommitData) Descriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{3}
}

func (x *CommitData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommitData) GetCommitter() string {
	if x != nil {
		return x.Committer
	}
	return ""
}

func (x *CommitData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommitData) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *CommitData) GetMetaRangeId() string {
	if x != nil {
		return x.MetaRangeId
	}
	return ""
}

func (x *CommitData) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CommitData) GetParents() []string {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *CommitData) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CommitData) GetGeneration() int32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

type GarbageCollectionRules struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	DefaultRetentionDays int32                  `protobuf:"varint,1,opt,name=default_retention_days,json=defaultRetentionDays,proto3" json:"default_retention_days,omitempty"`
	BranchRetentionDays  map[string]int32       `protobuf:"bytes,2,rep,name=branch_retention_days,json=branchRetentionDays,proto3" json:"branch_retention_days,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GarbageCollectionRules) Reset() {
	*x = GarbageCollectionRules{}
	mi := &file_graveler_graveler_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GarbageCollectionRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GarbageCollectionRules) ProtoMessage() {}

func (x *GarbageCollectionRules) ProtoReflect() protoreflect.Message {
	mi := &file_graveler_graveler_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GarbageCollectionRules.ProtoReflect.Descriptor instead.
func (*GarbageCollectionRules) Descriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{4}
}

func (x *GarbageCollectionRules) GetDefaultRetentionDays() int32 {
	if x != nil {
		return x.DefaultRetentionDays
	}
	return 0
}

func (x *GarbageCollectionRules) GetBranchRetentionDays() map[string]int32 {
	if x != nil {
		return x.BranchRetentionDays
	}
	return nil
}

type BranchProtectionBlockedActions struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Value         []BranchProtectionBlockedAction `protobuf:"varint,1,rep,packed,name=value,proto3,enum=io.treeverse.lakefs.graveler.BranchProtectionBlockedAction" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BranchProtectionBlockedActions) Reset() {
	*x = BranchProtectionBlockedActions{}
	mi := &file_graveler_graveler_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchProtectionBlockedActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchProtectionBlockedActions) ProtoMessage() {}

func (x *BranchProtectionBlockedActions) ProtoReflect() protoreflect.Message {
	mi := &file_graveler_graveler_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchProtectionBlockedActions.ProtoReflect.Descriptor instead.
func (*BranchProtectionBlockedActions) Descriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{5}
}

func (x *BranchProtectionBlockedActions) GetValue() []BranchProtectionBlockedAction {
	if x != nil {
		return x.Value
	}
	return nil
}

type BranchProtectionRules struct {
	state                         protoimpl.MessageState                     `protogen:"open.v1"`
	BranchPatternToBlockedActions map[string]*BranchProtectionBlockedActions `protobuf:"bytes,1,rep,name=branch_pattern_to_blocked_actions,json=branchPatternToBlockedActions,proto3" json:"branch_pattern_to_blocked_actions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *BranchProtectionRules) Reset() {
	*x = BranchProtectionRules{}
	mi := &file_graveler_graveler_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchProtectionRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchProtectionRules) ProtoMessage() {}

func (x *BranchProtectionRules) ProtoReflect() protoreflect.Message {
	mi := &file_graveler_graveler_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchProtectionRules.ProtoReflect.Descriptor instead.
func (*BranchProtectionRules) Descriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{6}
}

func (x *BranchProtectionRules) GetBranchPatternToBlockedActions() map[string]*BranchProtectionBlockedActions {
	if x != nil {
		return x.BranchPatternToBlockedActions
	}
	return nil
}

type StagedEntryData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Identity      []byte                 `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StagedEntryData) Reset() {
	*x = StagedEntryData{}
	mi := &file_graveler_graveler_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StagedEntryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StagedEntryData) ProtoMessage() {}

func (x *StagedEntryData) ProtoReflect() protoreflect.Message {
	mi := &file_graveler_graveler_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StagedEntryData.ProtoReflect.Descriptor instead.
func (*StagedEntryData) Descriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{7}
}

func (x *StagedEntryData) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StagedEntryData) GetIdentity() []byte {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *StagedEntryData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// message data model to track address tokens
type LinkAddressData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// xid physical address that includes the creation date
	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkAddressData) Reset() {
	*x = LinkAddressData{}
	mi := &file_graveler_graveler_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkAddressData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkAddressData) ProtoMessage() {}

func (x *LinkAddressData) ProtoReflect() protoreflect.Message {
	mi := &file_graveler_graveler_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkAddressData.ProtoReflect.Descriptor instead.
func (*LinkAddressData) Descriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{8}
}

func (x *LinkAddressData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ImportStatusData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Completed     bool                   `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Progress      int64                  `protobuf:"varint,4,opt,name=progress,proto3" json:"progress,omitempty"`
	MetarangeId   string                 `protobuf:"bytes,5,opt,name=metarange_id,json=metarangeId,proto3" json:"metarange_id,omitempty"`
	Commit        *CommitData            `protobuf:"bytes,6,opt,name=commit,proto3" json:"commit,omitempty"`
	Error         string                 `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportStatusData) Reset() {
	*x = ImportStatusData{}
	mi := &file_graveler_graveler_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportStatusData) ProtoMessage() {}

func (x *ImportStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_graveler_graveler_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportStatusData.ProtoReflect.Descriptor instead.
func (*ImportStatusData) Descriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{9}
}

func (x *ImportStatusData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ImportStatusData) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *ImportStatusData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ImportStatusData) GetProgress() int64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ImportStatusData) GetMetarangeId() string {
	if x != nil {
		return x.MetarangeId
	}
	return ""
}

func (x *ImportStatusData) GetCommit() *CommitData {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *ImportStatusData) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RepoMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      map[string]string      `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepoMetadata) Reset() {
	*x = RepoMetadata{}
	mi := &file_graveler_graveler_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoMetadata) ProtoMessage() {}

func (x *RepoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_graveler_graveler_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoMetadata.ProtoReflect.Descriptor instead.
func (*RepoMetadata) Descriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{10}
}

func (x *RepoMetadata) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type PullRequestData struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status            PullRequestStatus      `protobuf:"varint,2,opt,name=status,proto3,enum=io.treeverse.lakefs.graveler.PullRequestStatus" json:"status,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Title             string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Author            string                 `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	Description       string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	SourceBranch      string                 `protobuf:"bytes,7,opt,name=source_branch,json=sourceBranch,proto3" json:"source_branch,omitempty"`
	DestinationBranch string                 `protobuf:"bytes,8,opt,name=destination_branch,json=destinationBranch,proto3" json:"destination_branch,omitempty"`
	// commit_id relevant only for merged PRs
	CommitId *string `protobuf:"bytes,9,opt,name=commit_id,json=commitId,proto3,oneof" json:"commit_id,omitempty"`
	// closed_at relevant only for merged or closed PRs
	ClosedAt      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=closed_at,json=closedAt,proto3,oneof" json:"closed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullRequestData) Reset() {
	*x = PullRequestData{}
	mi := &file_graveler_graveler_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequestData) ProtoMessage() {}

func (x *PullRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_graveler_graveler_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequestData.ProtoReflect.Descriptor instead.
func (*PullRequestData) Descriptor() ([]byte, []int) {
	return file_graveler_graveler_proto_rawDescGZIP(), []int{11}
}

func (x *PullRequestData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PullRequestData) GetStatus() PullRequestStatus {
	if x != nil {
		return x.Status
	}
	return PullRequestStatus_OPEN
}

func (x *PullRequestData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PullRequestData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PullRequestData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *PullRequestData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PullRequestData) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *PullRequestData) GetDestinationBranch() string {
	if x != nil {
		return x.DestinationBranch
	}
	return ""
}

func (x *PullRequestData) GetCommitId() string {
	if x != nil && x.CommitId != nil {
		return *x.CommitId
	}
	return ""
}

func (x *PullRequestData) GetClosedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

var File_graveler_graveler_proto protoreflect.FileDescriptor

const file_graveler_graveler_proto_rawDesc = "" +
	"\n" +
	"\x17graveler/graveler.proto\x12\x1cio.treeverse.lakefs.graveler\x1a\x1fgoogle/protobuf/timestamp.proto\"\xde\x02\n" +
	"\x0eRepositoryData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12+\n" +
	"\x11storage_namespace\x18\x02 \x01(\tR\x10storageNamespace\x12*\n" +
	"\x11default_branch_id\x18\x03 \x01(\tR\x0fdefaultBranchId\x12?\n" +
	"\rcreation_date\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationDate\x12C\n" +
	"\x05state\x18\x05 \x01(\x0e2-.io.treeverse.lakefs.graveler.RepositoryStateR\x05state\x12!\n" +
	"\finstance_uid\x18\x06 \x01(\tR\vinstanceUid\x12\x1b\n" +
	"\tread_only\x18\a \x01(\bR\breadOnly\x12\x1d\n" +
	"\n" +
	"storage_id\x18\b \x01(\tR\tstorageId\"\x9b\x01\n" +
	"\n" +
	"BranchData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tcommit_id\x18\x02 \x01(\tR\bcommitId\x12#\n" +
	"\rstaging_token\x18\x03 \x01(\tR\fstagingToken\x12#\n" +
	"\rsealed_tokens\x18\x04 \x03(\tR\fsealedTokens\x12\x16\n" +
	"\x06hidden\x18\x05 \x01(\bR\x06hidden\"6\n" +
	"\aTagData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tcommit_id\x18\x02 \x01(\tR\bcommitId\"\x9e\x03\n" +
	"\n" +
	"CommitData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1c\n" +
	"\tcommitter\x18\x02 \x01(\tR\tcommitter\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12?\n" +
	"\rcreation_date\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationDate\x12\"\n" +
	"\rmeta_range_id\x18\x05 \x01(\tR\vmetaRangeId\x12R\n" +
	"\bmetadata\x18\x06 \x03(\v26.io.treeverse.lakefs.graveler.CommitData.MetadataEntryR\bmetadata\x12\x18\n" +
	"\aparents\x18\a \x03(\tR\aparents\x12\x18\n" +
	"\aversion\x18\b \x01(\x05R\aversion\x12\x1e\n" +
	"\n" +
	"generation\x18\t \x01(\x05R\n" +
	"generation\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9a\x02\n" +
	"\x16GarbageCollectionRules\x124\n" +
	"\x16default_retention_days\x18\x01 \x01(\x05R\x14defaultRetentionDays\x12\x81\x01\n" +
	"\x15branch_retention_days\x18\x02 \x03(\v2M.io.treeverse.lakefs.graveler.GarbageCollectionRules.BranchRetentionDaysEntryR\x13branchRetentionDays\x1aF\n" +
	"\x18BranchRetentionDaysEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"s\n" +
	"\x1eBranchProtectionBlockedActions\x12Q\n" +
	"\x05value\x18\x01 \x03(\x0e2;.io.treeverse.lakefs.graveler.BranchProtectionBlockedActionR\x05value\"\xcb\x02\n" +
	"\x15BranchProtectionRules\x12\xa0\x01\n" +
	"!branch_pattern_to_blocked_actions\x18\x01 \x03(\v2V.io.treeverse.lakefs.graveler.BranchProtectionRules.BranchPatternToBlockedActionsEntryR\x1dbranchPatternToBlockedActions\x1a\x8e\x01\n" +
	"\"BranchPatternToBlockedActionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12R\n" +
	"\x05value\x18\x02 \x01(\v2<.io.treeverse.lakefs.graveler.BranchProtectionBlockedActionsR\x05value:\x028\x01\"S\n" +
	"\x0fStagedEntryData\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12\x1a\n" +
	"\bidentity\x18\x02 \x01(\fR\bidentity\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\"+\n" +
	"\x0fLinkAddressData\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\"\x92\x02\n" +
	"\x10ImportStatusData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1c\n" +
	"\tcompleted\x18\x02 \x01(\bR\tcompleted\x129\n" +
	"\n" +
	"updated_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12\x1a\n" +
	"\bprogress\x18\x04 \x01(\x03R\bprogress\x12!\n" +
	"\fmetarange_id\x18\x05 \x01(\tR\vmetarangeId\x12@\n" +
	"\x06commit\x18\x06 \x01(\v2(.io.treeverse.lakefs.graveler.CommitDataR\x06commit\x12\x14\n" +
	"\x05error\x18\a \x01(\tR\x05error\"\xa1\x01\n" +
	"\fRepoMetadata\x12T\n" +
	"\bmetadata\x18\x01 \x03(\v28.io.treeverse.lakefs.graveler.RepoMetadata.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc5\x03\n" +
	"\x0fPullRequestData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12G\n" +
	"\x06status\x18\x02 \x01(\x0e2/.io.treeverse.lakefs.graveler.PullRequestStatusR\x06status\x129\n" +
	"\n" +
	"created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12\x14\n" +
	"\x05title\x18\x04 \x01(\tR\x05title\x12\x16\n" +
	"\x06author\x18\x05 \x01(\tR\x06author\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12#\n" +
	"\rsource_branch\x18\a \x01(\tR\fsourceBranch\x12-\n" +
	"\x12destination_branch\x18\b \x01(\tR\x11destinationBranch\x12 \n" +
	"\tcommit_id\x18\t \x01(\tH\x00R\bcommitId\x88\x01\x01\x12<\n" +
	"\tclosed_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampH\x01R\bclosedAt\x88\x01\x01B\f\n" +
	"\n" +
	"_commit_idB\f\n" +
	"\n" +
	"_closed_at*.\n" +
	"\x0fRepositoryState\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x00\x12\x0f\n" +
	"\vIN_DELETION\x10\x01*>\n" +
	"\x1dBranchProtectionBlockedAction\x12\x11\n" +
	"\rSTAGING_WRITE\x10\x00\x12\n" +
	"\n" +
	"\x06COMMIT\x10\x01*5\n" +
	"\x11PullRequestStatus\x12\b\n" +
	"\x04OPEN\x10\x00\x12\n" +
	"\n" +
	"\x06CLOSED\x10\x01\x12\n" +
	"\n" +
	"\x06MERGED\x10\x02B&Z$github.com/treeverse/lakefs/gravelerb\x06proto3"

var (
	file_graveler_graveler_proto_rawDescOnce sync.Once
	file_graveler_graveler_proto_rawDescData []byte
)

func file_graveler_graveler_proto_rawDescGZIP() []byte {
	file_graveler_graveler_proto_rawDescOnce.Do(func() {
		file_graveler_graveler_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_graveler_graveler_proto_rawDesc), len(file_graveler_graveler_proto_rawDesc)))
	})
	return file_graveler_graveler_proto_rawDescData
}

var file_graveler_graveler_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_graveler_graveler_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_graveler_graveler_proto_goTypes = []any{
	(RepositoryState)(0),                   // 0: io.treeverse.lakefs.graveler.RepositoryState
	(BranchProtectionBlockedAction)(0),     // 1: io.treeverse.lakefs.graveler.BranchProtectionBlockedAction
	(PullRequestStatus)(0),                 // 2: io.treeverse.lakefs.graveler.PullRequestStatus
	(*RepositoryData)(nil),                 // 3: io.treeverse.lakefs.graveler.RepositoryData
	(*BranchData)(nil),                     // 4: io.treeverse.lakefs.graveler.BranchData
	(*TagData)(nil),                        // 5: io.treeverse.lakefs.graveler.TagData
	(*CommitData)(nil),                     // 6: io.treeverse.lakefs.graveler.CommitData
	(*GarbageCollectionRules)(nil),         // 7: io.treeverse.lakefs.graveler.GarbageCollectionRules
	(*BranchProtectionBlockedActions)(nil), // 8: io.treeverse.lakefs.graveler.BranchProtectionBlockedActions
	(*BranchProtectionRules)(nil),          // 9: io.treeverse.lakefs.graveler.BranchProtectionRules
	(*StagedEntryData)(nil),                // 10: io.treeverse.lakefs.graveler.StagedEntryData
	(*LinkAddressData)(nil),                // 11: io.treeverse.lakefs.graveler.LinkAddressData
	(*ImportStatusData)(nil),               // 12: io.treeverse.lakefs.graveler.ImportStatusData
	(*RepoMetadata)(nil),                   // 13: io.treeverse.lakefs.graveler.RepoMetadata
	(*PullRequestData)(nil),                // 14: io.treeverse.lakefs.graveler.PullRequestData
	nil,                                    // 15: io.treeverse.lakefs.graveler.CommitData.MetadataEntry
	nil,                                    // 16: io.treeverse.lakefs.graveler.GarbageCollectionRules.BranchRetentionDaysEntry
	nil,                                    // 17: io.treeverse.lakefs.graveler.BranchProtectionRules.BranchPatternToBlockedActionsEntry
	nil,                                    // 18: io.treeverse.lakefs.graveler.RepoMetadata.MetadataEntry
	(*timestamppb.Timestamp)(nil),          // 19: google.protobuf.Timestamp
}
var file_graveler_graveler_proto_depIdxs = []int32{
	19, // 0: io.treeverse.lakefs.graveler.RepositoryData.creation_date:type_name -> google.protobuf.Timestamp
	0,  // 1: io.treeverse.lakefs.graveler.RepositoryData.state:type_name -> io.treeverse.lakefs.graveler.RepositoryState
	19, // 2: io.treeverse.lakefs.graveler.CommitData.creation_date:type_name -> google.protobuf.Timestamp
	15, // 3: io.treeverse.lakefs.graveler.CommitData.metadata:type_name -> io.treeverse.lakefs.graveler.CommitData.MetadataEntry
	16, // 4: io.treeverse.lakefs.graveler.GarbageCollectionRules.branch_retention_days:type_name -> io.treeverse.lakefs.graveler.GarbageCollectionRules.BranchRetentionDaysEntry
	1,  // 5: io.treeverse.lakefs.graveler.BranchProtectionBlockedActions.value:type_name -> io.treeverse.lakefs.graveler.BranchProtectionBlockedAction
	17, // 6: io.treeverse.lakefs.graveler.BranchProtectionRules.branch_pattern_to_blocked_actions:type_name -> io.treeverse.lakefs.graveler.BranchProtectionRules.BranchPatternToBlockedActionsEntry
	19, // 7: io.treeverse.lakefs.graveler.ImportStatusData.updated_at:type_name -> google.protobuf.Timestamp
	6,  // 8: io.treeverse.lakefs.graveler.ImportStatusData.commit:type_name -> io.treeverse.lakefs.graveler.CommitData
	18, // 9: io.treeverse.lakefs.graveler.RepoMetadata.metadata:type_name -> io.treeverse.lakefs.graveler.RepoMetadata.MetadataEntry
	2,  // 10: io.treeverse.lakefs.graveler.PullRequestData.status:type_name -> io.treeverse.lakefs.graveler.PullRequestStatus
	19, // 11: io.treeverse.lakefs.graveler.PullRequestData.created_at:type_name -> google.protobuf.Timestamp
	19, // 12: io.treeverse.lakefs.graveler.PullRequestData.closed_at:type_name -> google.protobuf.Timestamp
	8,  // 13: io.treeverse.lakefs.graveler.BranchProtectionRules.BranchPatternToBlockedActionsEntry.value:type_name -> io.treeverse.lakefs.graveler.BranchProtectionBlockedActions
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_graveler_graveler_proto_init() }
func file_graveler_graveler_proto_init() {
	if File_graveler_graveler_proto != nil {
		return
	}
	file_graveler_graveler_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_graveler_graveler_proto_rawDesc), len(file_graveler_graveler_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_graveler_graveler_proto_goTypes,
		DependencyIndexes: file_graveler_graveler_proto_depIdxs,
		EnumInfos:         file_graveler_graveler_proto_enumTypes,
		MessageInfos:      file_graveler_graveler_proto_msgTypes,
	}.Build()
	File_graveler_graveler_proto = out.File
	file_graveler_graveler_proto_goTypes = nil
	file_graveler_graveler_proto_depIdxs = nil
}
