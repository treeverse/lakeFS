// Code generated by MockGen. DO NOT EDIT.
// Source: batch_write_closer.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	committed "github.com/treeverse/lakefs/pkg/graveler/committed"
)

// MockBatchWriterCloser is a mock of BatchWriterCloser interface.
type MockBatchWriterCloser struct {
	ctrl     *gomock.Controller
	recorder *MockBatchWriterCloserMockRecorder
}

// MockBatchWriterCloserMockRecorder is the mock recorder for MockBatchWriterCloser.
type MockBatchWriterCloserMockRecorder struct {
	mock *MockBatchWriterCloser
}

// NewMockBatchWriterCloser creates a new mock instance.
func NewMockBatchWriterCloser(ctrl *gomock.Controller) *MockBatchWriterCloser {
	mock := &MockBatchWriterCloser{ctrl: ctrl}
	mock.recorder = &MockBatchWriterCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchWriterCloser) EXPECT() *MockBatchWriterCloserMockRecorder {
	return m.recorder
}

// CloseWriterAsync mocks base method.
func (m *MockBatchWriterCloser) CloseWriterAsync(arg0 committed.ResultCloser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWriterAsync", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWriterAsync indicates an expected call of CloseWriterAsync.
func (mr *MockBatchWriterCloserMockRecorder) CloseWriterAsync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWriterAsync", reflect.TypeOf((*MockBatchWriterCloser)(nil).CloseWriterAsync), arg0)
}

// Wait mocks base method.
func (m *MockBatchWriterCloser) Wait() ([]committed.WriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].([]committed.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *MockBatchWriterCloserMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockBatchWriterCloser)(nil).Wait))
}
