//go:build generate

package main

import (
	"fmt"
	"go/ast"
	"go/importer"
	"go/parser"
	"go/token"
	"go/types"
	"log"
	"os"
)

func main() {
	inFile := os.Args[1]
	outFile := os.Args[2]

	out, err := os.Create(outFile)
	if err != nil {
		log.Fatalln(err)
	}

	constantValues := []string{}
	ConstantsOf(inFile, func(v string) {
		constantValues = append(constantValues, v)
	})

	fmt.Fprintln(out, `// Code generated by extract_actions. DO NOT EDIT.
//
package permissions

var Actions = []string{`)
	for _, c := range constantValues {
		fmt.Fprintf(out, "\t%s,\n", c)
	}
	fmt.Fprintln(out, "}")
}

func ConstantsOf(file string, value func(string)) {
	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, file, nil, 0)
	if err != nil {
		log.Fatalln(err)
	}

	// Obtain type information.
	conf := types.Config{Importer: importer.Default()}
	info := &types.Info{
		Defs: make(map[*ast.Ident]types.Object),
	}
	_, err = conf.Check("p", fset, []*ast.File{f}, info)
	if err != nil {
		log.Fatal(err)
	}

	for _, d := range f.Decls {
		genDecl, ok := d.(*ast.GenDecl)
		if !ok {
			continue
		}
		for _, s := range genDecl.Specs {
			v, ok := s.(*ast.ValueSpec)
			if !ok {
				continue
			}
			for _, name := range v.Names {
				c, ok := info.ObjectOf(name).(*types.Const)
				if ok {
					value(c.Val().ExactString())
				}
			}
		}
	}
}
