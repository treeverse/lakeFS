name: documentation test

on:
  pull_request:

jobs:
  docs-release:
    name: Documentation release
    runs-on: ubuntu-20.04
    steps:
      - name: Check-out
        uses: actions/checkout@v3

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          working-directory: docs
          ruby-version: '2.6'
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically

      - name: Extract version
        id: version
        shell: bash
        run: echo "tag=v0.100.0" >> $GITHUB_OUTPUT

      - name: Build release
        working-directory: docs
        run: bundle exec jekyll build --config _config.yml -d _site/${{ steps.version.outputs.tag }} -b /${{ steps.version.outputs.tag }}

      #- name: Push generated docs to lakeFS-docs repository
        #uses: cpina/github-action-push-to-another-repository@v1.7.2
        #env:
          #SSH_DEPLOY_KEY: ${{ secrets.SSH_LAKEFS_DOCS_DEPLOY_KEY }}
        #with:
          #source-directory: docs/_site/
          #destination-github-username: treeverse
          ##destination-repository-name: treeverse/docs-lakeFS
          #destination-repository-name: docs-test
          #user-email: support@treeverse.io

      - name: Push generated docs to lakeFS-docs
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_LAKEFS_DOCS_DEPLOY_KEY }}
          SOURCE_DIRECTORY: docs/_site/
          GIT_CMD_REPOSITORY: git@github.com:treeverse/docs-test.git
          USER_EMAIL: support@treeverse.io
          USER_NAME: docs-action
          TARGET_BRANCH: main
        run: |
          if [ -n "${SSH_DEPLOY_KEY:=}" ]
          then
              echo "[+] Using SSH_DEPLOY_KEY"
              mkdir --parents "$HOME/.ssh"
              DEPLOY_KEY_FILE="$HOME/.ssh/deploy_key"
              echo "${SSH_DEPLOY_KEY}" > "$DEPLOY_KEY_FILE"
              chmod 600 "$DEPLOY_KEY_FILE"
              SSH_KNOWN_HOSTS_FILE="$HOME/.ssh/known_hosts"
              ssh-keyscan -H "$GITHUB_SERVER" > "$SSH_KNOWN_HOSTS_FILE"
              export GIT_SSH_COMMAND="ssh -i "$DEPLOY_KEY_FILE" -o UserKnownHostsFile=$SSH_KNOWN_HOSTS_FILE"

          else
              echo "::error::SSH_DEPLOY_KEY is empty. Please fill one!"
              exit 1
          fi
          CLONE_DIR=$(mktemp -d)
          git lfs install
          git config --global user.email "$USER_EMAIL"
          git config --global user.name "$USER_NAME"
          # workaround for https://github.com/cpina/github-action-push-to-another-repository/issues/103
          git config --global http.version HTTP/1.1
          git clone --single-branch --depth 1 --branch "$TARGET_BRANCH" "$GIT_CMD_REPOSITORY" "$CLONE_DIR"
          # $TARGET_DIRECTORY is '' by default
          ABSOLUTE_TARGET_DIRECTORY="$CLONE_DIR/$TARGET_DIRECTORY/"
          echo "[+] Creating (now empty) $ABSOLUTE_TARGET_DIRECTORY"
          mkdir -p "$ABSOLUTE_TARGET_DIRECTORY"
          echo "[+] Checking if local $SOURCE_DIRECTORY exist"
          if [ ! -d "$SOURCE_DIRECTORY" ]; then
              echo "ERROR: $SOURCE_DIRECTORY does not exist"
              exit 1
          fi
          echo "[+] Copying contents of source repository folder $SOURCE_DIRECTORY to folder $TARGET_DIRECTORY in git repo $DESTINATION_REPOSITORY_NAME"
          cp -ra "$SOURCE_DIRECTORY"/. "$CLONE_DIR/$TARGET_DIRECTORY"
          ORIGIN_COMMIT="https://github.com/$GITHUB_REPOSITORY/commit/$GITHUB_SHA"
          COMMIT_MESSAGE="${COMMIT_MESSAGE/ORIGIN_COMMIT/$ORIGIN_COMMIT}"
          COMMIT_MESSAGE="${COMMIT_MESSAGE/\$GITHUB_REF/$GITHUB_REF}"
          echo "[+] Set directory is safe ($CLONE_DIR)"
          git config --global --add safe.directory "$CLONE_DIR"
          echo "[+] Adding git commit"
          git add .
          echo "[+] git diff-index:"
          # git diff-index : to avoid doing the git commit failing if there are no changes to be commit
          git diff-index --quiet HEAD || git commit --message "$COMMIT_MESSAGE"
          echo "[+] Pushing git commit"
          # --set-upstream: sets de branch when pushing to a branch that does not exist
          git push "$GIT_CMD_REPOSITORY" --set-upstream "$TARGET_BRANCH"

